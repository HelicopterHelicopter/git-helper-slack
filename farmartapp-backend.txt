

File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/so_target/swagger/index.js
module.exports = {
    tags: {
        name: 'so_target'
    },
    paths: {
        '/order/admin': {
            get: {
                tags: ['so_target'],
                summary: 'get all so_target order',
                description: '',
                operationId: 'so_target_order',
                security: [{ Bearer: ['read'] }],
                parameters: [],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/rpm': {
            get: {
                tags: ['so_target'],
                summary: 'get all rpm',
                description: '',
                operationId: 'get_all_rpm',
                security: [{ Bearer: ['read'] }],
                parameters: [],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/order': {
            post: {
                tags: ['so_target'],
                summary: 'create so_target order',
                description: '',
                operationId: 'create_so_target_order',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'salesOrderId',
                        description: '',
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'rpmId',
                        description: '',
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'targetMargin',
                        description: '',
                        type: 'integer'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        }
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/so_target/index.js
const router = require('express').Router();

// const get_so_target_admin_controller = require('./controllers/get_so_target_admin_controller');
// const get_all_rpm_controller = require('./controllers/get_all_rpm_controller');
// const validate_target_price_data = require('../../../middelware/validate_target_price_data');
// const create_target_price_controller = require('./controllers/create_target_price_controller');

/** @deprecated */
// router.get("/order/admin", get_so_target_admin_controller);
// router.get("/rpm", get_all_rpm_controller);
// router.post("/order",validate_target_price_data, create_target_price_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/so_target/controllers/get_so_target_admin_controller.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
const get_so_target_admin_service = require("../services/get_so_target_admin_service");

const controller = async (req, res) => {
  try {
    const result = await get_so_target_admin_service();

    return res.status(result.status).json(result.data);
  } catch (err) {
    app_log_service({type:type.error,err});
    return res.status(HTTP_status_codes.badRequest).json({
      message: err.message
    });
  }
};

module.exports = controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/so_target/controllers/get_all_rpm_controller.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
const get_all_rpm_service = require("../services/get_all_rpm_service");

const controller = async (req, res) => {
  try {
    const get_all_rpm_result = await get_all_rpm_service();

    return res.status(get_all_rpm_result.status).json(get_all_rpm_result.data);
  } catch (err) {
    app_log_service({type:type.error,err});
    return res.status(HTTP_status_codes.badRequest).json({
      message: err.message,
    });
  }
};

module.exports = controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/so_target/controllers/create_target_price_controller.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
const create_target_price_service = require("../services/create_target_price_service");

const controller = async (req, res) => {
  try {
    const {
        salesOrderId,
        rpmId,
        targetMargin
    } = req.body;

    const create_target_price_result = await create_target_price_service({
        salesOrderId,
        rpmId,
        targetMargin
    });

    return res.status(create_target_price_result.status).json(create_target_price_result.data);
  } catch (err) {
    app_log_service({type:type.error,err});
    return res.status(HTTP_status_codes.badRequest).json({
      message: err.message
    });
  }
};

module.exports = controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/so_target/services/get_so_target_admin_service.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const SoFulfillmentTargetModel = require("../../../../database/mongoose/market_linkage_db/SoFulfillmentTarget.model");

module.exports = async () => {
  try {
    const soTargets = await SoFulfillmentTargetModel.find();

    return { 
      status: HTTP_status_codes.ok, 
      data: soTargets
    };
  } catch (err) {
    app_log_service({type:type.error,err});
    return {
      status: HTTP_status_codes.internalServerError,
      data: {
        message: err.message
      },
    };
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/so_target/services/create_target_price_service.js
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const app_log_service = require('../../../../common_services/market_linkage/logging/app_log_service');
const { type } = require('../../../../enums/market_linkage/enums/appLogEnum');
const buyerOrderModel = require('../../../../database/mongoose/market_linkage_db/buyerOrder.model');
const SoFulfillmentTargetModel = require('../../../../database/mongoose/market_linkage_db/SoFulfillmentTarget.model');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 *
 * @param {{salesOrderId: string, rpmId: string, targetMargin: number}} soTargetData
 */
module.exports = async (soTargetData) => {
    try {
        const salesOrder = await buyerOrderModel.findById(soTargetData.salesOrderId);
        if (!salesOrder) throw new ValidationError('sales order not found');
        const marginPercentAmount = (salesOrder.buyerOfferingPriceQuintal * soTargetData.targetMargin) / 100;
        const targetPrice = salesOrder.buyerOfferingPriceQuintal - Math.round(marginPercentAmount);

        // check if so target already exists for that sales order.
        let soTarget = await SoFulfillmentTargetModel.findOne({
            salesOrderId: soTargetData.salesOrderId
        });

        if (soTarget) {
            // update new values.
            soTarget.targetMargin = soTargetData.targetMargin;
            soTarget.targetPrice = targetPrice;
            soTarget.rpmId = soTargetData.rpmId;
            soTarget = await soTarget.save();
        } else {
            // create new one.
            soTarget = await SoFulfillmentTargetModel.create({
                ...soTargetData,
                targetPrice
            });
        }

        return { status: HTTP_status_codes.ok, data: soTarget };
    } catch (err) {
        app_log_service({ type: type.error, err });
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: err.message
            }
        };
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/so_target/services/get_all_rpm_service.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const appLogService = require("../../../../common_services/market_linkage/logging/app_log_service");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const userModel = require("../../../../database/mongoose/market_linkage_db/user.model");
const { designations } = require("../../../../enums/market_linkage/enums/user");

module.exports = async () => {
  try {

    const allRpmResult = await userModel.find({designation:designations.REGIONAL_PROCUREMENT_MANAGER})
    
    return { status: HTTP_status_codes.ok, data: allRpmResult };
  } catch (err) {
    appLogService({type:type.error,err});
    return {
      status: HTTP_status_codes.internalServerError,
      data: {
        message: err.message,
      },
    };
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_remapping/swagger/index.js
module.exports = {
    tags: {
        name: "po_remapping",
    },
    paths: {
        "/": {
            get: {
                tags: ["po_remapping"],
                summary: "fetch rejected po list",
                description: "",
                operationId: "fetch_rejected_po_list",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "query",
                        name: "limit",
                        description: "",
                        required: false
                    },
                    {
                        in: "query",
                        name: "page_number",
                        description: "",
                        required: false
                    },
                    {
                        in: "query",
                        name: "search",
                        description: "",
                        required: false
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        },
        "/transport": {
            post: {
                tags: ["po_remapping"],
                summary: "submit transport details",
                description: "",
                operationId: "submit_transport_details",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "body",
                        name: "body",
                        description: "",
                        required: true,
                        schema: {
                            required: [
                                "transporter_name",
                                "vehicle_number",
                                "driver_name",
                                "driver_number",
                                "po_pending_in_hand_id",
                                "docs"
                            ],
                            properties: {
                                transporter_name: {
                                    type: "string"
                                },
                                vehicle_number: {
                                    type: "string"
                                },
                                driver_name: {
                                    type: "string"
                                },
                                driver_number: {
                                    type: "number"
                                },
                                po_pending_in_hand_id: {
                                    type: "number"
                                },
                                docs: {
                                    type: "array",
                                    items: {
                                        required: ["type", "front_url", "value", "status"],
                                        properties: {
                                            type: {
                                                type: "number"
                                            },
                                            front_url: {
                                                type: "string"
                                            },
                                            back_url: {
                                                type: "string"
                                            },
                                            value: {
                                                type: "string"
                                            },
                                            status: {
                                                type: "number"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            },
            get: {
                tags: ["po_remapping"],
                summary: "fetch transport details",
                description: "",
                operationId: "fetch_transport_details",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "query",
                        name: "po_pending_in_hand_id",
                        type: "number",
                        description: "",
                        required: true,
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        },
        "/dispatch": {
            post: {
                tags: ["po_remapping"],
                summary: "submit dispatch details",
                description: "",
                operationId: "submit_dispatch_details",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "body",
                        name: "body",
                        description: "",
                        required: true,
                        schema: {
                            required: [
                                "po_pending_in_hand_id",
                                "net_weight",
                                "no_of_bags",
                                "weight_slip_url",
                                "transport_bill_url",
                                "primary_transport_cost",
                                "advanced_transport_cost",
                                "handover_document_url",
                                "delivery_challan_url"
                            ],
                            properties: {
                                po_pending_in_hand_id: {
                                    type: "number"
                                },
                                net_weight: {
                                    type: "number"
                                },
                                no_of_bags: {
                                    type: "number"
                                },
                                weight_slip_url: {
                                    type: "string"
                                },
                                transport_bill_url: {
                                    type: "string"
                                },
                                primary_transport_cost: {
                                    type: "number"
                                },
                                advanced_transport_cost: {
                                    type: "number"
                                },
                                mandi_tax_doc_url: {
                                    type: "string"
                                },
                                first_9r_gate_pass_url: {
                                    type: "string"
                                },
                                handover_document_url: {
                                    type: "string"
                                },
                                delivery_challan_url: {
                                    type: "string"
                                },
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            },
            get: {
                tags: ["po_remapping"],
                summary: "fetch dispatch details",
                description: "",
                operationId: "fetch_dispatch_details",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "query",
                        name: "po_pending_in_hand_id",
                        type: "number",
                        description: "",
                        required: true,
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        },
        "/map": {
            post: {
                tags: ["po_remapping"],
                summary: "submit secondary sales order mapping",
                description: "",
                operationId: "submit_so_mapping",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "body",
                        name: "body",
                        description: "",
                        required: true,
                        schema: {
                            required: [
                                "po_pending_in_hand_id",
                                "new_so_id",
                            ],
                            properties: {
                                po_pending_in_hand_id: {
                                    type: "number"
                                },
                                new_so_id: {
                                    type: "number"
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            },
        },
        "/details": {
            get: {
                tags: ["po_remapping"],
                summary: "fetch rejected po details by id",
                description: "",
                operationId: "fetch_rejected_po_details_by_id",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "query",
                        name: "po_pending_in_hand_id",
                        description: "",
                        required: true
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        }
    }
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_remapping/index.js
const router = require("express").Router();
const fetch_dispatch_details_controller = require("./controllers/fetch_dispatch_details_controller");
const fetch_rejected_po_details_by_id_controller = require("./controllers/fetch_rejected_po_details_by_id_controller");
const fetch_rejected_po_list_controller = require("./controllers/fetch_rejected_po_list_controller");
const fetch_transport_details_controller = require("./controllers/fetch_transport_details_controller");
const submit_dispatch_details_controller = require("./controllers/submit_dispatch_details_controller");
const submit_so_mapping_controller = require("./controllers/submit_so_mapping_controller");
const submit_transport_details_controller = require("./controllers/submit_transport_details_controller");

router.post("/transport", submit_transport_details_controller);
router.get("/transport", fetch_transport_details_controller);
router.post("/dispatch", submit_dispatch_details_controller);
router.get("/dispatch", fetch_dispatch_details_controller);
router.post("/map", submit_so_mapping_controller);
router.get("/details", fetch_rejected_po_details_by_id_controller);
router.get("/", fetch_rejected_po_list_controller);

module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_remapping/controllers/fetch_rejected_po_list_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const { fetch_rejected_po_list_service } = require("../services/fetch_rejected_po_list_service");

module.exports = async (req, res) => {
    try {
        let { page_number, limit, search } = req.query;
        limit = limit ? parseInt(limit) : 50;
        page_number = page_number ? parseInt(page_number) : 1;
        const rejected_po_list = await fetch_rejected_po_list_service(page_number, limit, search);
        let response = create_api_response(true, "success", rejected_po_list);
        res.status(http_status_code_enum.ok).json(response);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_remapping/controllers/submit_so_mapping_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const { submit_so_mapping_service } = require('../services/submit_so_mapping_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { po_pending_in_hand_id, new_so_id } = req.body;
        if (!po_pending_in_hand_id || !new_so_id) { throw new ValidationError('po_pending_in_hand_id and new_so_id are mandatory fields'); }
        const mapped_po_so = await submit_so_mapping_service(po_pending_in_hand_id, new_so_id);
        const response = create_api_response(true, 'success', mapped_po_so);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_remapping/controllers/fetch_dispatch_details_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const { fetch_dispatch_details_service } = require("../services/fetch_dispatch_details_service");

module.exports = async (req, res) => {
    try {
        const { po_pending_in_hand_id } = req.query;
        let response;
        const dispatch_details = await fetch_dispatch_details_service(po_pending_in_hand_id);
        if (Object.keys(dispatch_details).length === 0) {
            response = create_api_response(true, "no data available", dispatch_details);
        }
        else {
            response = create_api_response(true, "success", dispatch_details);
        }
        res.status(http_status_code_enum.ok).json(response);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_remapping/controllers/fetch_transport_details_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const { fetch_transport_details_service } = require("../services/fetch_transport_details_service");

module.exports = async (req, res) => {
    try {
        const { po_pending_in_hand_id } = req.query;
        let response;
        const transport_details = await fetch_transport_details_service(po_pending_in_hand_id);
        if (Object.keys(transport_details).length === 0) {
            response = create_api_response(true, "no data available", transport_details);
        }
        else {
            response = create_api_response(true, "success", transport_details);
        }
        res.status(http_status_code_enum.ok).json(response);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_remapping/controllers/fetch_rejected_po_details_by_id_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const { fetch_rejected_po_details_by_id_service } = require('../services/fetch_rejected_po_details_by_id_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { po_pending_in_hand_id } = req.query;
        if (!po_pending_in_hand_id) {
            throw new ValidationError('po_pending_in_hand_id is required');
        }
        const rejected_po_details = await fetch_rejected_po_details_by_id_service(po_pending_in_hand_id);
        const response = create_api_response(true, 'success', rejected_po_details);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_remapping/controllers/submit_transport_details_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const { submit_transport_details_service } = require('../services/submit_transport_details_service');
const joi = require('joi');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const validation_result = transport_details_schema.validate(req.body);
        if (validation_result.error) throw new ValidationError(validation_result.error.message);
        const {
            transporter_name,
            vehicle_number,
            driver_name,
            driver_number,
            po_pending_in_hand_id,
            docs
        } = validation_result.value;

        const added_transport_details = await submit_transport_details_service(
            transporter_name,
            vehicle_number,
            driver_name,
            driver_number,
            po_pending_in_hand_id,
            docs
        );
        const response = create_api_response(true, 'success', added_transport_details);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}

const transport_details_schema = joi.object({
    transporter_name: joi.string().trim().required(),
    vehicle_number: joi.string().trim().required(),
    driver_name: joi.string().trim().required(),
    driver_number: joi.number().positive().max(9999999999).required(),
    po_pending_in_hand_id: joi.number().positive().required(),
    docs: joi.array().items(joi.object({
        type: joi.number().positive().required(),
        front_url: joi.string().trim().required(),
        back_url: joi.string().trim().allow('').required(),
        value: joi.string().trim().allow('').required(),
        status: joi.number().positive().required()
    })).required()
});



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_remapping/controllers/submit_dispatch_details_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const { submit_dispatch_details_service } = require('../services/submit_dispatch_details_service');
const joi = require('joi');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const validation_result = dispatch_details_schema.validate(req.body);
        if (validation_result.error) throw new ValidationError(validation_result.error.message);
        const {
            po_pending_in_hand_id,
            net_weight,
            no_of_bags,
            weight_slip_url,
            transport_bill_url,
            primary_transport_cost,
            advanced_transport_cost,
            mandi_tax_doc_url,
            first_9r_gate_pass_url,
            handover_document_url,
            delivery_challan_url
        } = validation_result.value;

        const added_dispatch_details = await submit_dispatch_details_service(
            po_pending_in_hand_id,
            net_weight,
            no_of_bags,
            weight_slip_url,
            transport_bill_url,
            primary_transport_cost,
            advanced_transport_cost,
            mandi_tax_doc_url,
            first_9r_gate_pass_url,
            handover_document_url,
            delivery_challan_url
        );
        const response = create_api_response(true, 'success', added_dispatch_details);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}

const dispatch_details_schema = joi.object({
    po_pending_in_hand_id: joi.number().positive().required(),
    net_weight: joi.number().required(),
    no_of_bags: joi.number().required(),
    weight_slip_url: joi.string().trim().required(),
    transport_bill_url: joi.string().trim().required(),
    primary_transport_cost: joi.number().required(),
    advanced_transport_cost: joi.number().required(),
    mandi_tax_doc_url: joi.string().trim(),
    first_9r_gate_pass_url: joi.string().trim(),
    handover_document_url: joi.string().trim().required(),
    delivery_challan_url: joi.string().trim().required()
});



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_remapping/services/fetch_dispatch_details_service.js
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const order_delivery_documents_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_documents');
const dispatch_doc_type = require('../../../../enums/market_linkage/enums/dispatch_doc_type');
const { doc_type } = require('../../../../enums/purchase_order/purchase_order_document_enum');
const error_log = require('../../../../middelware/error_log');

const fetch_dispatch_details_service = (po_pending_in_hand_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            const dispatch_details = await order_delivery_detail_model.findOne({
                where: {
                    po_pending_inhand_detail_id: po_pending_in_hand_id,
                    is_active: true
                },
                include: [
                    {
                        model: order_delivery_documents_model,
                        required: false,
                        where: {
                            is_active: true
                        }
                    }
                ]
            })
            let response = {};
            if (dispatch_details && dispatch_details.net_weight)
                response = generate_response(dispatch_details);
            return resolve(response);
        }
        catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    });
};

const generate_response = (dispatch_details) => {
    const dispatch_docs = dispatch_details.order_delivery_documents?.filter((doc) => doc.order_delivery_document_type_id) || [];
    const response = {
        po_pending_in_hand_id: dispatch_details.po_pending_inhand_detail_id,
        net_weight: dispatch_details.gross_weight,  
        no_of_bags: dispatch_details.number_of_bags,
        weight_slip_url: dispatch_details.order_delivery_documents.find(doc => doc.name === doc_type.loadedTruckWeightSlip)?.doc_url,
        primary_transport_cost: dispatch_details.total_transport_cost,
        advanced_transport_cost: dispatch_details.advance_transport_cost,
        mandi_tax_doc_url: dispatch_details.order_delivery_documents.find(doc => doc.name === doc_type.primary9rImage)?.doc_url,
        first_9r_gate_pass_url: dispatch_details.order_delivery_documents.find(doc => doc.name === doc_type.first9rGatePass)?.doc_url,
        handover_document_url: dispatch_docs.find((doc) => doc.order_delivery_document_type_id === dispatch_doc_type['handover document'])?.doc_url,
        delivery_challan_url: dispatch_docs.find((doc) => doc.order_delivery_document_type_id === dispatch_doc_type['delivery challan'])?.doc_url,
        transport_bill_url: dispatch_details.order_delivery_documents.find(doc => doc.name === doc_type.transportBillImage)?.doc_url,
    }
    return response;
}

module.exports = {
    fetch_dispatch_details_service,
    generate_response
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_remapping/services/fetch_transport_details_service.js
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const order_delivery_documents_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_documents');
const error_log = require('../../../../middelware/error_log');

const fetch_transport_details_service = (po_pending_in_hand_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            const transport_details = await order_delivery_detail_model.findOne({
                where: {
                    po_pending_inhand_detail_id: po_pending_in_hand_id,
                    is_active: true
                },
                include: [
                    {
                        model: order_delivery_documents_model,
                        required: false,
                        where: {
                            is_active: true
                        }
                    }
                ]
            })
            let response = {};
            if (transport_details)
                response = generate_response(transport_details);
            return resolve(response);
        }
        catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    });
};

const generate_response = (transport_details) => {
    const transport_docs = transport_details.order_delivery_documents?.filter((doc) => doc.order_transport_doc_type_id) || [];
    const response = {
        name_of_transporter: transport_details.transport_name,
        vehicle_number: transport_details.vehicle_number,
        driver_name: transport_details.driver_name,
        driver_mobile_number: transport_details.driver_mobile_number,
        documents: transport_docs.map((doc) => {
            return {
                id: doc.id,
                type: doc.order_transport_doc_type_id,
                front_url: doc.doc_url,
                back_url: doc.doc_back_url
            }
        })
    }
    return response;
}

module.exports = {
    fetch_transport_details_service,
    generate_response
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_remapping/services/submit_so_mapping_service.js
const buyer_order_detail_model = require('../../../../database/models_v2/buyer_order/buyer_order_detail');
const po_pending_inhand_detail_model = require('../../../../database/models_v2/po_unloading/po_pending_inhand_detail');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const order_delivery_documents_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_documents');
const order_delivery_logs_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_logs');
const { orderStatus } = require('../../../../enums/market_linkage/enums/buyerEnum');
const { pending_po_status } = require('../../../../enums/market_linkage/enums/po_pending_in_hand_enum');
const order_delivery_stage_enum = require('../../../../enums/purchase_order/order_delivery_stage_enum');
const { doc_type } = require('../../../../enums/purchase_order/purchase_order_document_enum');
const error_log = require('../../../../middelware/error_log');
const convert_kg_to_ton = require('../../../../utilities/unit_conversion/convert_kg_to_ton');
const add_mandi_tax_service = require('../../mandi_taxation/services/add_mandi_tax_service');
const { add_po_so_invoicing } = require('../../purchase_order/services/map_sales_order_service');
const Op = require('sequelize').Op;
const { get_po_quantity_for_mapping } = require('../../../v2/sales_order/services/fetch_so_for_mapping_service');
const { update_so_remaining_qty } = require('../../../../common_services/market_linkage/update_so_remaining_qty');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const submit_so_mapping_service = (po_pending_in_hand_id, new_so_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            const [po_pending_details, so_details] = await Promise.all([
                po_pending_inhand_detail_model.findOne({
                    where: {
                        is_active: true,
                        id: po_pending_in_hand_id
                    },
                    include: [
                        {
                            model: order_delivery_detail_model,
                            required: false,
                            where: {
                                is_active: true
                            },
                            include: [
                                {
                                    model: order_delivery_documents_model,
                                    required: false,
                                    where: {
                                        is_active: true,
                                        name: { [Op.or]: [doc_type.first9rGatePass, doc_type.primary9rImage] }
                                    }
                                }
                            ]
                        }
                    ]
                }),
                buyer_order_detail_model.findOne({
                    where: {
                        is_active: true,
                        id: new_so_id
                    }
                })
            ])
            if (!po_pending_details) { throw new ValidationError('Unable to map, invalid po_pending_in_hand_id'); }
            if (!so_details) { throw new ValidationError('Unable to map, invalid new_so_id'); }
            if (!po_pending_details.order_delivery_detail) { throw new ValidationError('Transport and dispatch details not submitted'); }
            if (!po_pending_details.order_delivery_detail.transport_name) { throw new ValidationError('Transport details not submitted'); }
            if (po_pending_details.order_delivery_detail.gross_weight === null) { throw new ValidationError('Dispatch details not submitted'); }
            if (so_details.status !== orderStatus.APPROVED_BY_CFO) { throw new ValidationError('Unable to map, given SO is not approved yet.'); }
            const pending_po_weight = convert_kg_to_ton({ weight_kg: po_pending_details.weight_kg }).weight_kg
            const po_qty = await get_po_quantity_for_mapping(pending_po_weight);
            if (po_qty > so_details.remaining_quantity) { throw new ValidationError('Pending PO quantity is exceeding the remaining quantity of SO'); }

            po_pending_details.buyer_order_detail_id = so_details.id;
            po_pending_details.status = pending_po_status.DISPATCHED;
            so_details.remaining_quantity = so_details.remaining_quantity - pending_po_weight;
            const url_1st_9r = po_pending_details.order_delivery_detail.order_delivery_documents?.find(doc => doc.name === doc_type.primary9rImage)?.doc_url;
            const url_1st_9r_gate_pass = po_pending_details.order_delivery_detail.order_delivery_documents?.find(doc => doc.name === doc_type.first9rGatePass)?.doc_url;

            await Promise.all([
                so_details.save(),
                po_pending_details.save(),
                add_mandi_tax_service(po_pending_details.purchase_crop_order_id, url_1st_9r, url_1st_9r_gate_pass, so_details.id),
                add_po_so_invoicing(po_pending_details.purchase_crop_order_id, so_details.id),
                order_delivery_logs_model.build({
                    order_delivery_stage_id: order_delivery_stage_enum.dispatched,
                    order_detail_id: po_pending_details.order_delivery_detail.id,
                    log_time: new Date(),
                    is_active: true
                }).save()
            ])
            await update_so_remaining_qty(new_so_id)
            return resolve();
        } catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    });
}
module.exports = {
    submit_so_mapping_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_remapping/services/submit_dispatch_details_service.js
const po_pending_inhand_detail_model = require('../../../../database/models_v2/po_unloading/po_pending_inhand_detail');
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const order_delivery_documents_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_documents');
const procurement_lots_model = require('../../../../database/models_v2/procurement_sample/procurement_lots');
const dispatch_doc_type = require('../../../../enums/market_linkage/enums/dispatch_doc_type');
const { doc_type } = require('../../../../enums/purchase_order/purchase_order_document_enum');
const error_log = require('../../../../middelware/error_log');
const round_off_to_two_decimal = require('../../utilities/round_off/round_off_to_two_decimal');
// const Op = require('sequelize').Op;
const { ValidationError } = require('../../../../utilities/error/custom_error');

const submit_dispatch_details_service = (
    po_pending_in_hand_id,
    net_weight,
    no_of_bags,
    weight_slip_url,
    transport_bill_url,
    primary_transport_cost,
    advanced_transport_cost,
    mandi_tax_doc_url,
    first_9r_gate_pass_url,
    handover_document_url,
    delivery_challan_url
) => {
    return new Promise(async (resolve, reject) => {
        try {
            let [order_delivery_details, po_pending_details] = await Promise.all([
                order_delivery_detail_model.findOne({
                    where: {
                        is_active: true,
                        po_pending_inhand_detail_id: po_pending_in_hand_id
                    }
                }),
                po_pending_inhand_detail_model.findOne({
                    where: {
                        id: po_pending_in_hand_id,
                        is_active: true
                    },
                    include: {
                        model: purchase_crop_orders_model,
                        required: true,
                        where: {
                            is_active: true
                        },
                        include: {
                            model: procurement_lots_model,
                            required: true,
                            where: {
                                is_active: true
                            }
                        }
                    }
                })
            ])
            if (!po_pending_details) {
                throw new ValidationError('invalid po_pending_in_hand_id');
            }
            const bag_deduction_value = round_off_to_two_decimal(net_weight * (po_pending_details.purchase_crop_order.procurement_lot.bag_deduction / 100));
            if (order_delivery_details) {
                order_delivery_details.gross_weight = net_weight;
                order_delivery_details.net_weight = round_off_to_two_decimal(net_weight - bag_deduction_value);
                order_delivery_details.number_of_bags = no_of_bags;
                order_delivery_details.advance_transport_cost = advanced_transport_cost;
                order_delivery_details.total_transport_cost = primary_transport_cost;
                await order_delivery_details.save();
            } else {
                const dispatch_details = {
                    po_pending_inhand_detail_id: po_pending_in_hand_id,
                    gross_weight: net_weight,
                    net_weight: round_off_to_two_decimal(net_weight - bag_deduction_value),
                    number_of_bags: no_of_bags,
                    total_transport_cost: primary_transport_cost,
                    advance_transport_cost: advanced_transport_cost,
                    is_active: true
                }
                order_delivery_details = await order_delivery_detail_model.build(dispatch_details).save();
            }
            await add_modify_documents(
                order_delivery_details.id,
                weight_slip_url,
                transport_bill_url,
                handover_document_url,
                delivery_challan_url,
                mandi_tax_doc_url,
                first_9r_gate_pass_url);
            return resolve();
        } catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    });
};

const add_modify_documents = async (
    order_delivery_id,
    weight_slip_url,
    transport_bill_url,
    handover_document_url,
    delivery_challan_url,
    mandi_tax_doc_url,
    first_9r_gate_pass_url
) => {
    const documents = [];
    const order_delivery_documents = await order_delivery_documents_model.findAll({
        where: {
            is_active: true,
            order_transport_doc_type_id: null,
            order_delivery_id
        }
    })
    const dispatch_docs = order_delivery_documents?.filter((doc) => doc.order_delivery_document_type_id) || [];
    // handover document
    const handover_document = dispatch_docs.find((doc) => doc.order_delivery_document_type_id === dispatch_doc_type['handover document']);
    if (handover_document && handover_document.doc_url !== handover_document_url) {
        handover_document.doc_url = handover_document_url;
        await handover_document.save();
    } else if (!handover_document) {
        documents.push({
            order_delivery_id,
            order_delivery_document_type_id: dispatch_doc_type['handover document'],
            doc_url: handover_document_url,
            is_active: true
        })
    }
    // delivery challan
    const delivery_challan = dispatch_docs.find((doc) => doc.order_delivery_document_type_id === dispatch_doc_type['delivery challan']);
    if (delivery_challan && delivery_challan.doc_url !== delivery_challan_url) {
        delivery_challan.doc_url = delivery_challan_url;
        await delivery_challan.save();
    } else if (!delivery_challan) {
        documents.push({
            order_delivery_id,
            order_delivery_document_type_id: dispatch_doc_type['delivery challan'],
            doc_url: delivery_challan_url,
            is_active: true
        })
    }
    // weight slip
    const weight_slip = order_delivery_documents.find(doc => doc.name === doc_type.loadedTruckWeightSlip);
    if (weight_slip && weight_slip.doc_url !== weight_slip_url) {
        weight_slip.doc_url = weight_slip_url;
        await weight_slip.save();
    } else if (!weight_slip) {
        documents.push({
            order_delivery_id,
            name: doc_type.loadedTruckWeightSlip,
            doc_url: weight_slip_url,
            is_active: true
        })
    }
    // transport bill
    const transport_bill = order_delivery_documents.find(doc => doc.name === doc_type.transportBillImage);
    if (transport_bill && transport_bill.doc_url !== transport_bill_url) {
        transport_bill.doc_url = transport_bill_url;
        await transport_bill.save();
    } else if (!transport_bill) {
        documents.push({
            order_delivery_id,
            name: doc_type.transportBillImage,
            doc_url: transport_bill_url,
            is_active: true
        })
    }

    // mandi tax doc
    const mandi_tax_doc = order_delivery_documents.find(doc => doc.name === doc_type.primary9rImage);
    if (mandi_tax_doc && mandi_tax_doc.doc_url !== mandi_tax_doc_url) {
        mandi_tax_doc.doc_url = mandi_tax_doc_url;
        await mandi_tax_doc.save();
    } else if (!mandi_tax_doc) {
        documents.push({
            order_delivery_id,
            name: doc_type.primary9rImage,
            doc_url: mandi_tax_doc_url,
            is_active: true
        })
    }
    // first 9r gate pass
    const first_9r_gate_pass = order_delivery_documents.find(doc => doc.name === doc_type.first9rGatePass);
    if (first_9r_gate_pass && first_9r_gate_pass.doc_url !== first_9r_gate_pass_url) {
        first_9r_gate_pass.doc_url = first_9r_gate_pass_url;
        await first_9r_gate_pass.save();
    } else if (!first_9r_gate_pass) {
        documents.push({
            order_delivery_id,
            name: doc_type.first9rGatePass,
            doc_url: first_9r_gate_pass_url,
            is_active: true
        })
    }
    await order_delivery_documents_model.bulkCreate(documents);
}

module.exports = {
    submit_dispatch_details_service,
    add_modify_documents
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_remapping/services/fetch_rejected_po_details_by_id_service.js
const buyer_order_delivery_info_model = require('../../../../database/models_v2/buyer_order/buyer_order_delivery_info');
const buyer_order_detail_model = require('../../../../database/models_v2/buyer_order/buyer_order_detail');
const crop_detail_model = require('../../../../database/models_v2/crop/crop_detail');
const crop_varieties_detail_model = require('../../../../database/models_v2/crop/crop_varieties_detail');
const master_merchant_detail_model = require('../../../../database/models_v2/merchant/master_merchant_detail');
const po_pending_inhand_detail_model = require('../../../../database/models_v2/po_unloading/po_pending_inhand_detail');
const po_unloading_qty_detail_model = require('../../../../database/models_v2/po_unloading/po_unloading_qty_detail');
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const procurement_order_bill_components_model = require('../../../../database/models_v2/procurement_payments/procurement_bill_components');
const procurement_lots_model = require('../../../../database/models_v2/procurement_sample/procurement_lots');
const procurment_crop_sample_model = require('../../../../database/models_v2/procurement_sample/procurment_crop_sample');
const warehouse_detail_model = require('../../../../database/models_v2/warehouse/warehouse_detail');
const purchase_crop_bill_component_enum = require('../../../../enums/market_linkage/enums/purchase_crop_bill_component_enum');
const { UnloadingQuantityType } = require('../../../../enums/market_linkage/enums/unloading_quantity_enum');
const error_log = require('../../../../middelware/error_log');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const fetch_rejected_po_details_by_id_service = (po_pending_in_hand_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            const rejected_po = await po_pending_inhand_detail_model.findOne({
                where: {
                    is_active: true,
                    id: po_pending_in_hand_id
                },
                include: [
                    {
                        model: purchase_crop_orders_model,
                        where: {
                            is_active: true
                        },
                        required: true
                    }
                ]
            });
            if (!rejected_po) {
                throw new ValidationError('Invalid po_pending_in_hand_id');
            }
            const purchase_crop_order = rejected_po.purchase_crop_order;
            const [crop_variety, crop, master_sample, master_merchant, lot, order_delivery, buyer_order] = await get_purchase_crop_order_associations(purchase_crop_order);
            const all_remapping = await po_pending_inhand_detail_model.findAll({
                where: {
                    purchase_crop_order_id: purchase_crop_order.id,
                    is_active: true
                },
                include: [
                    {
                        model: warehouse_detail_model,
                        where: {
                            is_active: true
                        },
                        required: false
                    },
                    {
                        model: buyer_order_detail_model,
                        where: {
                            is_active: true
                        },
                        required: false,
                        include: [
                            {
                                model: po_unloading_qty_detail_model,
                                required: true,
                                where: {
                                    is_active: true,
                                    po_unloading_qty_type_id: UnloadingQuantityType.ACCEPTED_WEIGHT,
                                    purchase_crop_order_id: purchase_crop_order.id
                                }
                            }
                        ]
                    },
                    {
                        model: buyer_order_detail_model,
                        where: {
                            is_active: true
                        },
                        as: 'prev_buyer_order_details',
                        required: false,
                        include: [
                            {
                                model: buyer_order_delivery_info_model,
                                as: 'delivery_info',
                                where: {
                                    is_active: true
                                },
                                required: false
                            }
                        ]
                    }
                ],
                order: [['po_map_count', 'ASC']]
            })
            const response = generate_response(rejected_po, all_remapping, purchase_crop_order, crop_variety, crop, master_sample, master_merchant, lot, order_delivery, buyer_order);
            return resolve(response);
        } catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    });
};

const get_purchase_crop_order_associations = async (purchase_crop_order) => {
    const [crop_variety, crop, master_sample, master_merchant, lot, order_delivery, buyer_order] = await Promise.all([
        crop_varieties_detail_model.findOne({
            where: {
                id: purchase_crop_order.crop_variety_id,
                is_active: true
            }
        }),
        crop_detail_model.findOne({
            where: {
                id: purchase_crop_order.crop_id,
                is_active: true
            }
        }),
        procurment_crop_sample_model.findOne({
            where: {
                id: purchase_crop_order.purchase_sample_id,
                is_active: true
            }
        }),
        master_merchant_detail_model.findOne({
            where: {
                id: purchase_crop_order.master_merchant_id,
                is_active: true
            }
        }),
        procurement_lots_model.findOne({
            where: {
                id: purchase_crop_order.procurement_lot_id,
                is_active: true
            },
            include: [
                {
                    model: procurement_order_bill_components_model,
                    where: {
                        is_active: true,
                        order_bill_component_id: purchase_crop_bill_component_enum.mandi_tax
                    },
                    required: true
                }
            ]
        }),
        order_delivery_detail_model.findOne({
            where: {
                purchase_crop_order_id: purchase_crop_order.id,
                is_active: true
            }
        }),
        buyer_order_detail_model.findOne({
            where: {
                id: purchase_crop_order.buyer_order_id,
                is_active: true
            },
            include: [
                {
                    model: po_unloading_qty_detail_model,
                    required: true,
                    where: {
                        is_active: true,
                        po_unloading_qty_type_id: UnloadingQuantityType.ACCEPTED_WEIGHT,
                        purchase_crop_order_id: purchase_crop_order.id
                    }
                }
            ]
        })
    ])
    return [crop_variety, crop, master_sample, master_merchant, lot, order_delivery, buyer_order]
}

const generate_response = (rejected_po, all_remapping, purchase_crop_order, crop_variety, crop, master_sample, master_merchant, lot, order_delivery, buyer_order) => {
    try {
        const po_detail = {
            po_number: purchase_crop_order.farmart_id,
            retailer_number: master_merchant.farmart_id,
            sample_id: master_sample.farmart_id,
            crop_and_varity: crop.name + '-' + crop_variety.name,
            po_quantity: purchase_crop_order.quantity,
            retailer_offering_price: purchase_crop_order.price,
            po_value: purchase_crop_order.total_payment,
            transport_cost: order_delivery.total_transport_cost,
            bag_deduction: lot.bag_deduction,
            mandi_tax: lot.procurement_order_bill_components[0].amount,
            zoho_po_id: purchase_crop_order.zoho_po_id
        };
        const inventory_detail = {
            handover_quantity: order_delivery.gross_weight,
            handover_bag: order_delivery.number_of_bags,
            pending_for_sale_qty: rejected_po.weight_kg,
            pending_for_sale_bag: rejected_po.number_of_bag,
            mapped_so_id: rejected_po.buyer_order_detail_id ?? null
        }
        let consumption = [
            {
                description: buyer_order.farmart_id,
                status: purchase_crop_order.status,
                accepted: buyer_order.po_unloading_qty_details[0].value
            }
        ]
        consumption = consumption.concat(all_remapping.map((remapping) => {
            const unloading_detail = remapping.buyer_order_detail?.po_unloading_qty_details
                ?.find((doc) => doc.po_pending_inhand_id === remapping.id);
            const prev_buyer = remapping.prev_buyer_order_details?.delivery_info;
            return {
                description: remapping.buyer_order_detail?.farmart_id ??
                    remapping.warehouse_detail?.name ??
                    (prev_buyer ? (prev_buyer.district_name + ', ' + prev_buyer.state_name) : null),
                status: remapping.status,
                accepted: unloading_detail?.value ?? remapping.weight_kg ?? null
            }
        }))
        return {
            po_detail,
            inventory_detail,
            consumption
        }
    } catch (err) {
        throw new ValidationError(err.message);
    }
}

module.exports = {
    fetch_rejected_po_details_by_id_service,
    generate_response
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_remapping/services/fetch_rejected_po_list_service.js
const buyer_detail_model = require('../../../../database/models_v2/buyer/buyer_detail');
const buyer_order_delivery_info_model = require('../../../../database/models_v2/buyer_order/buyer_order_delivery_info');
const buyer_order_detail_model = require('../../../../database/models_v2/buyer_order/buyer_order_detail');
const crop_detail_model = require('../../../../database/models_v2/crop/crop_detail');
const crop_varieties_detail_model = require('../../../../database/models_v2/crop/crop_varieties_detail');
const po_pending_inhand_detail_model = require('../../../../database/models_v2/po_unloading/po_pending_inhand_detail');
const po_unloading_qty_detail_model = require('../../../../database/models_v2/po_unloading/po_unloading_qty_detail');
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const order_delivery_logs_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_logs');
const warehouse_detail_model = require('../../../../database/models_v2/warehouse/warehouse_detail');
const { UnloadingQuantityType } = require('../../../../enums/market_linkage/enums/unloading_quantity_enum');
const order_delivery_stage_enum = require('../../../../enums/purchase_order/order_delivery_stage_enum');
const error_log = require('../../../../middelware/error_log');
const Op = require('sequelize').Op;
const { ValidationError } = require('../../../../utilities/error/custom_error');

const fetch_rejected_po_list_service = (page, limit, search = '') => {
    return new Promise(async (resolve, reject) => {
        try {
            const response = {
                orders: [],
                total_records: 0
            }
            const rejected_po_list = await po_pending_inhand_detail_model.findAndCountAll({
                where: {
                    is_active: true,
                    buyer_order_detail_id: { [Op.ne]: null }
                },
                include: [
                    {
                        model: purchase_crop_orders_model,
                        where: {
                            is_active: true,
                            farmart_id: { [Op.like]: '%' + search + '%' }
                        },
                        required: true
                    }
                ],
                distinct: ['id'],
                order: [['updated_at', 'DESC']],
                limit,
                offset: ((page - 1) * limit) || 0
            });
            const rejected_po_ids = rejected_po_list.rows.map((pending_po) => pending_po.id);
            const so_ids = rejected_po_list.rows.map((pending_po) => pending_po.buyer_order_detail_id);
            const prev_so_ids = rejected_po_list.rows.map((pending_po) => pending_po.previous_buyer_order_detail_id);
            const warehouse_ids = rejected_po_list.rows.map((pending_po) => pending_po.warehouse_detail_id);
            const crop_ids = rejected_po_list.rows.map((pending_po) => pending_po.purchase_crop_order.crop_id);
            const variety_ids = rejected_po_list.rows.map((pending_po) => pending_po.purchase_crop_order.crop_variety_id);

            const [order_delivery_list, buyer_order_list, prev_buyer_order_list, warehouse_list, variety_list, crop_list] =
                await get_associations(rejected_po_ids, so_ids, prev_so_ids, warehouse_ids, crop_ids, variety_ids);
            response.orders = generate_response(rejected_po_list.rows, order_delivery_list, buyer_order_list, prev_buyer_order_list, warehouse_list, variety_list, crop_list);
            response.total_records = rejected_po_list.count;
            return resolve(response);
        } catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    });
};

const get_associations = async (rejected_po_ids, so_ids, prev_so_ids, warehouse_ids, crop_ids, variety_ids) => {
    const [order_delivery_list, buyer_order_list, prev_buyer_order_list, warehouse_list, variety_list, crop_list] = await Promise.all([
        order_delivery_detail_model.findAll({
            where: {
                po_pending_inhand_detail_id: { [Op.in]: rejected_po_ids },
                is_active: true
            },
            include: [
                {
                    model: order_delivery_logs_model,
                    where: {
                        is_active: true,
                        order_delivery_stage_id: order_delivery_stage_enum.dispatched
                    },
                    required: false
                }
            ]
        }),
        buyer_order_detail_model.findAll({
            where: {
                id: { [Op.in]: so_ids },
                is_active: true
            },
            include: [
                {
                    model: buyer_detail_model,
                    required: false,
                    where: {
                        is_active: true
                    }
                },
                {
                    model: po_unloading_qty_detail_model,
                    required: false,
                    where: {
                        is_active: true,
                        po_unloading_qty_type_id: UnloadingQuantityType.ACCEPTED_WEIGHT
                    }
                },
                {
                    model: buyer_order_delivery_info_model,
                    as: 'delivery_info',
                    required: false,
                    where: {
                        is_active: true
                    }
                }
            ]
        }),
        buyer_order_detail_model.findAll({
            where: {
                id: { [Op.in]: prev_so_ids },
                is_active: true
            },
            include: [
                {
                    model: buyer_order_delivery_info_model,
                    as: 'delivery_info',
                    required: false,
                    where: {
                        is_active: true
                    }
                }
            ]
        }),
        warehouse_detail_model.findAll({
            where: {
                is_active: true,
                id: { [Op.in]: warehouse_ids }
            }
        }),
        crop_varieties_detail_model.findAll({
            where: {
                id: { [Op.in]: crop_ids },
                is_active: true
            }
        }),
        crop_detail_model.findAll({
            where: {
                id: { [Op.in]: variety_ids },
                is_active: true
            }
        })
    ])
    return [order_delivery_list, buyer_order_list, prev_buyer_order_list, warehouse_list, variety_list, crop_list]
}

const generate_response = (rejected_po_list, order_delivery_list, buyer_order_list, prev_buyer_order_list, warehouse_list, variety_list, crop_list) => {
    try {
        const response = rejected_po_list.map((rejected_po) => {
            const order_delivery_detail = order_delivery_list.find((o) => o.po_pending_inhand_detail_id === rejected_po.id);
            const buyer_order_detail = buyer_order_list.find((o) => o.id === rejected_po.buyer_order_detail_id);
            const prev_buyer_order_detail = prev_buyer_order_list.find((o) => o.id === rejected_po.previous_buyer_order_detail_id);
            const warehouse_detail = warehouse_list.find((o) => o.id === rejected_po.warehouse_detail_id);
            const variety_detail = variety_list.find((o) => o.id === rejected_po.purchase_crop_order.crop_variety_id);
            const crop_detail = crop_list.find((o) => o.id === rejected_po.purchase_crop_order.crop_id);
            return {
                dispatch_date: order_delivery_detail?.order_delivery_logs?.[0]?.log_time ?? null,
                po_number: rejected_po.purchase_crop_order.farmart_id,
                so_number: buyer_order_detail?.farmart_id ?? null,
                buyer_name: buyer_order_detail?.buyer_name ?? null,
                po_status: rejected_po.status,
                source: warehouse_detail?.name ?? (prev_buyer_order_detail?.delivery_info?.district_name + ', ' + prev_buyer_order_detail?.delivery_info?.state_name),
                destination: buyer_order_detail?.delivery_info?.district_name + ', ' + buyer_order_detail?.delivery_info?.state_name,
                crop_and_variety: (variety_detail?.name ?? '') + ', ' + (crop_detail?.name ?? ''),
                handover_weight: order_delivery_detail?.gross_weight ?? null,
                accepted_weight: buyer_order_detail?.po_unloading_qty_details?.[0]?.value ?? null,
                po_id: rejected_po.purchase_crop_order.id,
                po_pending_inhand_id: rejected_po.id
            }
        })
        return response;
    } catch (err) {
        throw new ValidationError(err.message);
    }
}

module.exports = {
    fetch_rejected_po_list_service,
    get_associations,
    generate_response
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_remapping/services/submit_transport_details_service.js
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const order_delivery_documents_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_documents');
const error_log = require('../../../../middelware/error_log');
const Op = require('sequelize').Op;
const { ValidationError } = require('../../../../utilities/error/custom_error');

const submit_transport_details_service = (
    transporter_name,
    vehicle_number,
    driver_name,
    driver_number,
    po_pending_in_hand_id,
    docs
) => {
    return new Promise(async (resolve, reject) => {
        try {
            let order_delivery_details = await order_delivery_detail_model.findOne({
                where: {
                    is_active: true,
                    po_pending_inhand_detail_id: po_pending_in_hand_id
                }
            })
            if (order_delivery_details) {
                order_delivery_details.transport_name = transporter_name;
                order_delivery_details.vehicle_number = vehicle_number;
                order_delivery_details.driver_name = driver_name;
                order_delivery_details.driver_mobile_number = driver_number;
                await order_delivery_details.save();
            } else {
                const transport_details = {
                    transport_name: transporter_name,
                    vehicle_number,
                    driver_name,
                    driver_mobile_number: driver_number,
                    is_active: true,
                    po_pending_inhand_detail_id: po_pending_in_hand_id
                }
                order_delivery_details = await order_delivery_detail_model.build(transport_details).save();
            }
            await add_modify_documents(order_delivery_details.id, docs);
            return resolve();
        } catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    });
};

const add_modify_documents = async (order_delivery_id, docs) => {
    try {
        const order_delivery_docs = await order_delivery_documents_model.findAll({
            where: {
                is_active: true,
                order_delivery_id,
                order_transport_doc_type_id: { [Op.ne]: null }
            }
        })
        for (let index = 0; index < order_delivery_docs.length; index++) {
            const transport_doc = order_delivery_docs[index];
            const new_doc = docs.find((doc) => doc.type === transport_doc.order_transport_doc_type_id);
            if (new_doc && (new_doc.front_url !== transport_doc.doc_url ||
                new_doc.back_url !== transport_doc.doc_back_url)) {
                transport_doc.doc_url = new_doc.front_url;
                transport_doc.doc_back_url = new_doc.back_url;
                await transport_doc.save();
            }
            if (new_doc) {
                docs = docs.filter((doc) => doc.type !== new_doc.type);
            }
        }
        const documents = docs.map((doc) => {
            return {
                order_delivery_id,
                order_transport_doc_type_id: doc.type,
                doc_url: doc.front_url,
                doc_back_url: doc.back_url,
                is_active: true
            }
        })
        await order_delivery_documents_model.bulkCreate(documents);
    } catch (err) {
        throw new ValidationError(err.message);
    }
}

module.exports = {
    submit_transport_details_service,
    add_modify_documents
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/price_polling/swagger/index.js
module.exports = {
    tags: {
        name: "price_polling"
    },
    paths: {
        "/question": {
            get: {
                tags: ["price_polling"],
                summary: "get price polling question based on language",
                description: '',
                operationId: "get_price_polling_question",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        "in": "query",
                        "name": "lat",
                        required: true,
                        type: "number",
                        description: "",
                        format: "int64"
                    },
                    {
                        "in": "query",
                        "name": "long",
                        required: true,
                        type: "number",
                        description: "",
                        format: "int64"
                    },
                    {
                        "in": "header",
                        "name": "language",
                        required: true,
                        type: "number",
                        description: "",
                        format: "int64"
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    },
                },
                deprecated: true
            }
        },
        "/price": {
            post: {
                tags: ["price_polling"],
                summary: "submit price on price polling question",
                description: '',
                operationId: "submit_price_on_price_polling_question",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        "in": "formData",
                        "name": "lat",
                        required: true,
                        type: "number",
                        description: "",
                        format: "int64"
                    },
                    {
                        "in": "formData",
                        "name": "long",
                        required: true,
                        type: "number",
                        description: "",
                        format: "int64"
                    },
                    {
                        "in": "formData",
                        "name": "crop_id",
                        required: true,
                        type: "number",
                        description: "",
                        format: "int64"
                    },
                    {
                        "in": "formData",
                        "name": "min_price",
                        required: true,
                        type: "number",
                        description: "",
                        format: "int64"
                    },
                    {
                        "in": "formData",
                        "name": "max_price",
                        required: true,
                        type: "number",
                        description: "",
                        format: "int64"
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    },
                },
                deprecated: true
            }
        }
    }
}   


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/price_polling/index.js
const router = require("express").Router();
// const authorize = require("../../../middelware/authorized_routes");
// const user_roles_enum = require("../../../entities/metadata/enums/user_roles");

// const get_price_polling_question_controller = require("./controllers/get_price_polling_question_controller");
// const submit_price_controller = require("./controllers/submit_price_controller");
/*     ********deprecated ******
router.get("/question", authorize([user_roles_enum.Merchant]), get_price_polling_question_controller);
router.post("/price", authorize([user_roles_enum.Merchant]), submit_price_controller);
*/
module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/price_polling/controllers/get_price_polling_question_controller.js
const error_log = require("../../../../middelware/error_log");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const http_status_code_enum = require("../../../../enums/global/http_status_codes");
const language_enum = require("../../../../enums/global/language");
const price_pooling_question_integration = require("../services/price_pooling_question_integration");

module.exports = async (req, res) => {
    try {
        const language_id = +req.headers.language || language_enum.default;
        const lat = +req.query.lat || 0;
        const long = +req.query.long || 0;

        if (!lat || !long) {
            let err_message = "lat and long are mandatory params";
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err_message, null));
        }
        let start_date = new Date();
        start_date.setHours(0, 0, 0, 0);
        start_date.setDate(start_date.getDate() - 1)
        let end_date = new Date();
        end_date.setHours(23, 59, 0, 0);
        end_date.setDate(end_date.getDate() - 1);
        const merchant_detail_id = req.user.user_profile_id;
        const result = await price_pooling_question_integration(lat, long, start_date, end_date, merchant_detail_id, language_id)
        return res.status(http_status_code_enum.ok).json(create_api_response(true, "success", { questions: result }));
    }
    catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/price_polling/controllers/submit_price_controller.js
const error_log = require("../../../../middelware/error_log");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const http_status_code_enum = require("../../../../enums/global/http_status_codes");
const submit_price_service = require('../services/submit_price_service')

module.exports = async (req, res) => {
    try {
        const lat = +req.body.lat || 0;
        const long = +req.body.long || 0;
        const crop_id = +req.body.crop_id || 0;
        const min_price = +req.body.min_price;
        const max_price = +req.body.max_price;
        const merchant_detail_id = +req.user.user_profile_id;
        if (!lat || !long || !crop_id) {
            let err_message = "lat, long and crop_id are mandatory params";
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err_message, null));
        }
        const result = await submit_price_service(merchant_detail_id, lat, long, crop_id, min_price, max_price);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, "success", result));
    }
    catch (err) {
        error_log(err);
        console.log(err.message);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/price_polling/services/submit_price_service.js
const error_log = require('../../../../middelware/error_log');
const crop_price_submitted_by_merchants_model = require('../../../../database/models_v2/price_pooling/crop_price_submitted_by_merchants');
const get_data_from_settings_service = require("../../../../entities/metadata/service/application_version_service").get_data_from_settings;
const settings_enum = require("../../../../entities/metadata/enums/settings_enum");
const register_new_recharge_service = require("../../../../entities_v2/sms_recharge/service/register_new_recharge");
const recharge_type_enum = require("../../../../entities_v2/metadata/enums/sms_recharge_type");

const submit_price_service = (merchant_detail_id, latitude, longitude, crop_id, min_price, max_price) => {
    return new Promise(async (resolve, reject) => {
        try {
            price_per_quintal = (max_price + min_price) / 2;
            const price_pooling_data = {
                price_per_quintal,
                merchant_detail_id,
                price_pooling_crop_id: crop_id,
                latitude,
                longitude,
                max_price,
                min_price,
                is_active: 1
            }
            let crop_price_submitted_by_merchant_data = await crop_price_submitted_by_merchants_model.create(price_pooling_data)


            const price_pooling_reward_sms_count = await get_data_from_settings_service(settings_enum.price_pooling_reward_sms);
            const price_pooling_reward_sms_expiry_days = await get_data_from_settings_service(settings_enum.price_pooling_reward_expiry_in_days);
            let expiry_date = new Date();
            expiry_date.setDate(expiry_date.getDate() + (+price_pooling_reward_sms_expiry_days));
            await register_new_recharge_service(merchant_detail_id, price_pooling_reward_sms_count, expiry_date, recharge_type_enum.price_pooling_reward_sms);

            resolve({ "price_submitted": crop_price_submitted_by_merchant_data })
        }
        catch (ex) {
            error_log(ex);
            console.log(ex.message);
            reject({ message: ex.message });
        }
    })
}


module.exports = submit_price_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/price_polling/services/fetch_question_string.js
const price_pooling_question_template_model = require('../../../../database/mongoose/mongoose_models/price_pooling_question_template');
const read_mongo_document = require('../../../../database/mongoose/read_document');
const error_log = require('../../../../middelware/error_log');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (language_id, variables) => {
    try {
        const question_template_string = await read_mongo_document(
            price_pooling_question_template_model,
            {
                language_id,
                isActive: true
            }
        );
        if (question_template_string.length === 0) {
            throw new ValidationError('template not found');
        }
        let question_template = question_template_string[0].question_template;
        Object.keys(variables).forEach(variable => {
            // eslint-disable-next-line no-template-curly-in-string
            question_template = question_template.split('${var}').join(variables[variable]);
        });
        return (
            question_template
        );
    } catch (err) {
        error_log(err);
        return '';
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/price_polling/services/price_pooling_question_integration.js
const error_log = require("../../../../middelware/error_log");
const post_request_service = require("../../../../utilities/external_API_calls/post_request");
const fetch_question_string = require("./fetch_question_string");
const crop_price_submitted_by_merchants_model = require("../../../../database/models_v2/price_pooling/crop_price_submitted_by_merchants");
const TRENDING_COMMODITY_INFO_URL = require('../../../../constants/global').TRENDING_COMMODITY_INFO_URL
const TRENDING_COMMODITY_INFO_AUTH = require('../../../../constants/global').TRENDING_COMMODITY_INFO_AUTH
const { Op } = require('sequelize');
const find_or_create_price_pooling_crop = require("../../../../data_abstraction_layer/price_pooling/find_or_create_crop_detail");

const price_pooling_question_integration = async (lat, long, start_date, end_date, merchant_detail_id, language_id) => {
  try {
    let mandi_price_of_commodities = await get_mandi_price_of_commodities(lat, long, start_date, end_date, language_id);
    let questions = [];
    for (let i = 0; i < mandi_price_of_commodities.results.length; i++) {
      let element = mandi_price_of_commodities.results[i];
      let top_commodities = element.top_commodities;
      for (let j = 0; j < top_commodities.length; j++) {
        if (!top_commodities[j]?.crop_name) {
          error_log("commodity not found");
          continue;
        }

        const question_string = await fetch_question_string(language_id, {
          crop_name: top_commodities[j]?.crop_name || '',
        });

        //check if question answered for today
        const already_answered = await is_already_answered(merchant_detail_id, top_commodities[j].price_pooling_crop_id);
        if (already_answered)
          continue;

        let min_price = top_commodities[j].min_price;
        let max_price = top_commodities[j].max_price;
        if (max_price > 0 || min_price > 0) {
          let avg = Math.abs(max_price - min_price) / 3;
          avg = Math.floor(avg);
          let question_obj = {
            question: question_string,
            options: [
              { min_price: min_price, max_price: min_price + avg },
              { min_price: min_price + avg, max_price: min_price + avg * 2 },
              { min_price: min_price + avg * 2, max_price: max_price },
            ],
            crop_id: top_commodities[j].price_pooling_crop_id
          };
          questions.push(question_obj);
        }
      }
    }
    return questions;
  } catch (ex) {
    error_log(ex);
    return questions;
  }
};

const is_already_answered = async (merchant_detail_id, price_pooling_crop_id) => {
  try {
    const today = new Date();
    today.setHours(00, 00, 00);
    const crop_price_submitted_by_merchant_data = await crop_price_submitted_by_merchants_model.findOne({
      where: {
        merchant_detail_id,
        price_pooling_crop_id,
        is_active: 1,
        created_at: {
          [Op.gte]: today
        }
      }
    });
    if (crop_price_submitted_by_merchant_data)
      return true;
    return false;
  }
  catch (err) {
    error_log(err);
    return false;
  }
}

const get_mandi_price_of_commodities = async (lat, long, start_date, end_date, language_id) => {
  try {

    const body = {
      lat,
      lon: long,
      start_date,
      end_date,
    };
    const header = {
      Authorization: TRENDING_COMMODITY_INFO_AUTH,
    };
    const url = TRENDING_COMMODITY_INFO_URL;
    const response = await post_request_service(url, body, header);
    if (response?.data?.results?.length)
      for (let index = 0; index < response.data.results.length; index++) {
        for (let i = 0; i < response.data.results[index]?.top_commodities?.length; i++) {
          let price_element = response.data.results[index].top_commodities[i];
          const crop_detail = await find_or_create_price_pooling_crop({ crop_name: price_element.commodity_standard_name, language_id });
          price_element = { ...price_element, ...crop_detail }
          response.data.results[index].top_commodities[i] = price_element;
        }
      }

    return response.data;
  }
  catch (err) {
    error_log(err)
    return null;
  }
};

module.exports = price_pooling_question_integration;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/swagger/index.js
module.exports = {
  tags: {
    name: "crop_advisory",
  },
  paths: {
    "/panel/step_detail": {
      get: {
        tags: ["crop_advisory"],
        summary: "get heading, content, duration and gap of the step",
        description: "",
        operationId: "get_panel_advisory_step_detail",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "crop_id",
            description: "",
            required: true,
            type: "integer",
            format: "int64"
          },
          {
            in: "query",
            name: "language_id",
            description: "",
            required: true,
            type: "integer",
            format: "int64"
          },
          {
            in: "query",
            name: "step_id",
            description: "",
            required: true,
            type: "string"
          }
        ],
        responses: {
          400: {
            description: "Bad request"
          },
          200: {
            description: "success"
          }
        }
      },
      delete: {
        tags: ["crop_advisory"],
        summary: "delete advisory step",
        description: "",
        operationId: "delete_panel_advisory_step_detail",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "formData",
            name: "crop_id",
            description: "",
            required: true,
            type: "integer",
            format: "int64"
          },
          {
            in: "formData",
            name: "language_id",
            description: "",
            required: true,
            type: "integer",
            format: "int64"
          },
          {
            in: "formData",
            name: "step_id",
            description: "",
            required: true,
            type: "string"
          }
        ],
        responses: {
          400: {
            description: "Bad request"
          },
          200: {
            description: "success"
          }
        }
      },
      post: {
        tags: ["crop_advisory"],
        summary: "create step and get heading, content, duration and gap of the step",
        description: "",
        operationId: "create_panel_advisory_step_detail",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "formData",
            name: "crop_id",
            description: "",
            required: true,
            type: "integer",
            format: "int64"
          },
          {
            in: "formData",
            name: "language_id",
            description: "",
            required: true,
            type: "integer",
            format: "int64"
          },
          {
            in: "formData",
            name: "duration_days",
            description: "",
            required: true,
            type: "integer",
            format: "int64"
          },
          {
            in: "formData",
            name: "gap_days",
            description: "",
            required: false,
            type: "integer",
            format: "int64"
          },
          {
            in: "formData",
            name: "heading",
            description: "",
            required: true,
            type: "string"
          },
          {
            in: "formData",
            name: "formatted_content",
            description: "",
            required: true,
            type: "string"
          }
        ],
        responses: {
          400: {
            description: "Bad request"
          },
          200: {
            description: "success"
          }
        }
      },
      put: {
        tags: ["crop_advisory"],
        summary: "update step and get heading, content, duration and gap of the step",
        description: "",
        operationId: "update_panel_advisory_step_detail",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "formData",
            name: "crop_id",
            description: "",
            required: true,
            type: "integer",
            format: "int64"
          },
          {
            in: "formData",
            name: "language_id",
            description: "",
            required: true,
            type: "integer",
            format: "int64"
          },
          {
            in: "formData",
            name: "step_id",
            description: "",
            required: true,
            type: "string"
          },
          {
            in: "formData",
            name: "duration_days",
            description: "",
            required: true,
            type: "integer",
            format: "int64"
          },
          {
            in: "formData",
            name: "gap_days",
            description: "",
            required: false,
            type: "integer",
            format: "int64"
          },
          {
            in: "formData",
            name: "heading",
            description: "",
            required: true,
            type: "string"
          },
          {
            in: "formData",
            name: "formatted_content",
            description: "",
            required: true,
            type: "string"
          }
        ],
        responses: {
          400: {
            description: "Bad request"
          },
          200: {
            description: "success"
          }
        }
      }
    },
    "/panel/publish": {
      post: {
        tags: ["crop_advisory"],
        summary: "publish advisory of crops",
        description: "",
        operationId: "publish_advisory_steps",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "formData",
            name: "crop_id",
            description: "",
            required: true,
            type: "integer",
            format: "int64"
          },
          {
            in: "formData",
            name: "language_id",
            description: "",
            required: true,
            type: "integer",
            format: "int64"
          }
        ],
        responses: {
          400: {
            description: "Bad request"
          },
          200: {
            description: "success"
          }
        }
      }
    },
    "/step_detail": {
      get: {
        tags: ["crop_advisory"],
        summary: "get heading, content, duration and gap of the step",
        description: "",
        operationId: "get_app_advisory_step_detail",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "crop_id",
            description: "",
            required: true,
            type: "integer",
            format: "int64"
          },
          {
            in: "header",
            name: "language_id",
            description: "",
            required: true,
            type: "integer",
            format: "int64"
          },
          {
            in: "query",
            name: "step_id",
            description: "",
            required: true,
            type: "string"
          }
        ],
        responses: {
          400: {
            description: "Bad request"
          },
          200: {
            description: "success"
          }
        }
      }
    },
    "/panel/crop_names": {
      get: {
        tags: ["crop_advisory"],
        summary: "",
        description: "",
        operationId: "get_crop_names",
        security: [{ Bearer: ["read"] }],
        parameters: [],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/panel/crop": {
      post: {
        tags: ["crop_advisory"],
        summary: "",
        description: "",
        operationId: "add_crop",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "formData",
            name: "crop_name",
            description: "",
            required: true,
            type: "string",
          },
        ],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
      put: {
        tags: ["crop_advisory"],
        summary: "update crop data",
        description: "",
        operationId: "update_crop_data",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "schema": {
              "type": "object",
              "required": [
                "cropName",
                "cropId",
                "cropVariety",
              ],
              "properties": {
                "crop_id": {
                  "type": "number"
                },
                "crop_image": {
                  "type": "string"
                },
                "crop_name": {
                  "type": "object",
                  "required": ["name"],
                  "properties": {
                    "language_id": {
                      "type": "string"
                    }
                  }
                },
              }
            }
          }
        ],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
      "/panel/crop/{crop_id}": {
        get: {
          tags: ["crop_advisory"],
          summary: "get crop by id",
          description: "",
          operationId: "get_crop_by_id",
          security: [{ Bearer: ["read"] }],
          parameters: [
            {
              in: "path",
              name: "crop_id",
              description: "",
              required: true,
              type: "string",
            },
          ],
          responses: {
            400: {
              description: "Invalid input",
            },
            200: {
              description: "success",
            },
          },
        },
      },
    },
    "/panel/steps": {
      get: {
        tags: ["crop_advisory"],
        summary: "",
        description: "",
        operationId: "get_steps",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "crop_id",
            description: "",
            required: true,
          },
          {
            in: "query",
            name: "language_id",
            description: "",
            required: false,
          },
        ],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/steps": {
      get: {
        tags: ["crop_advisory"],
        summary: "",
        description: "",
        operationId: "get_steps_app",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "crop_id",
            description: "",
            required: true,
          },
          {
            in: "header",
            name: "language",
            description: "",
            required: false,
          },
        ],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/panel/languages": {
      get: {
        tags: ["crop_advisory"],
        summary: "",
        description: "",
        operationId: "get_crop_advisory_languages",
        security: [{ Bearer: ["read"] }],
        parameters: [],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/panel/crop_details": {
      get: {
        tags: ["crop_advisory"],
        summary: "",
        description: "",
        operationId: "get_crop_details",
        security: [{ Bearer: ["read"] }],
        parameters: [],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/crop_details": {
      get: {
        tags: ["crop_advisory"],
        summary: "",
        description: "",
        operationId: "get_crop_details_app",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "subscribed",
            description: "",
            required: false,
            default: false
          },],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/subscribe": {
      post: {
        tags: ["crop_advisory"],
        summary: "",
        description: "",
        operationId: "subscribe_crop",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "formData",
            name: "crop_id",
            description: "",
            required: true
          },
          {
            in: "formData",
            name: "sowing_date",
            description: "2015-03-25 10:15:19",
            required: true
          },],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
      put: {
        tags: ["crop_advisory"],
        summary: "",
        description: "",
        operationId: "update_subscribe_crop",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "formData",
            name: "crop_id",
            description: "",
            required: true
          },
          {
            in: "formData",
            name: "sowing_date",
            description: "2015-03-25 10:15:19",
            required: true
          },],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/unsubscribe": {
      put: {
        tags: ["crop_advisory"],
        summary: "",
        description: "",
        operationId: "unsubscribe_crop",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "formData",
            name: "crop_id",
            description: "",
            required: true,
          },
          ],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
  },
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/index.js
const router = require("express").Router();
const authorize = require("../../../middelware/authorized_routes");
const user_roles_enum = require("../../../entities/metadata/enums/user_roles");

const get_crop_names_controller = require("./controllers/get_crop_names_controller");
const add_crop_for_advisory_controller = require("./controllers/add_crop_for_advisory_controller");
const update_crop_for_advisory_controller = require("./controllers/update_crop_for_advisory_controller");
const get_crop_data_id_controller = require("./controllers/get_crop_data_id_controller");
const get_languages_controller = require("./controllers/get_languages_controller");
const get_crop_details_controller = require("./controllers/get_crop_details_controller");
const get_crop_details_app_controller = require("./controllers/get_crop_details_app_controller");
const subscribe_crop_app_controller = require("./controllers/subscribe_crop_app_controller");
const update_subscribe_crop_app_controller = require("./controllers/update_subscribe_crop_app_controller");
const get_advisory_steps_panel_controller = require("./controllers/get_advisory_steps_panel_controller");
const get_advisory_step_detail_panel_controller = require("./controllers/get_advisory_step_detail_panel_controller");
const add_new_advisory_step_controller = require("./controllers/add_new_advisory_step_controller");
const update_advisory_step_controller = require("./controllers/update_advisory_step_controller");
const publish_advisory_controller = require("./controllers/publish_advisory_controller");
const get_advisory_steps_app_controller = require("./controllers/get_advisory_steps_app_controller");
const get_advisory_step_detail_controller = require("./controllers/get_advisory_step_detail_controller");
const delete_advisory_step_controller = require("./controllers/delete_advisory_step_controller.js");
const unsubscribe_crop_for_advisory_controller = require("./controllers/unsubscribe_crop_for_advisory_controller.js");


router.get("/panel/crop_names", authorize([user_roles_enum.digital_marketing,user_roles_enum.AP_CONTENT_CREATOR]), get_crop_names_controller);
router.post("/panel/crop", authorize([user_roles_enum.digital_marketing,user_roles_enum.AP_CONTENT_CREATOR]), add_crop_for_advisory_controller);
router.put("/panel/crop", authorize([user_roles_enum.digital_marketing,user_roles_enum.AP_CONTENT_CREATOR]), update_crop_for_advisory_controller);
router.get("/panel/crop", authorize([user_roles_enum.digital_marketing,user_roles_enum.AP_CONTENT_CREATOR]), get_crop_data_id_controller);
router.get("/panel/languages", authorize([user_roles_enum.digital_marketing,user_roles_enum.AP_CONTENT_CREATOR]), get_languages_controller);
router.get("/panel/crop_details", authorize([user_roles_enum.digital_marketing,user_roles_enum.AP_CONTENT_CREATOR]), get_crop_details_controller);
router.get("/crop_details", authorize([user_roles_enum.Merchant]), get_crop_details_app_controller);
router.post("/subscribe", authorize([user_roles_enum.Merchant]), subscribe_crop_app_controller);
router.put("/subscribe", authorize([user_roles_enum.Merchant]), update_subscribe_crop_app_controller);
router.get("/panel/steps", authorize([user_roles_enum.digital_marketing,user_roles_enum.AP_CONTENT_CREATOR]), get_advisory_steps_panel_controller);
router.get("/panel/step_detail", authorize([user_roles_enum.digital_marketing,user_roles_enum.AP_CONTENT_CREATOR]), get_advisory_step_detail_panel_controller);
router.post("/panel/step_detail", authorize([user_roles_enum.digital_marketing,user_roles_enum.AP_CONTENT_CREATOR]), add_new_advisory_step_controller);
router.put("/panel/step_detail", authorize([user_roles_enum.digital_marketing]), update_advisory_step_controller);
router.post("/panel/publish", authorize([user_roles_enum.digital_marketing,user_roles_enum.AP_CONTENT_CREATOR]), publish_advisory_controller);
router.delete("/panel/step_detail", authorize([user_roles_enum.digital_marketing,user_roles_enum.AP_CONTENT_CREATOR]), delete_advisory_step_controller);
router.get("/steps", authorize([user_roles_enum.Merchant]), get_advisory_steps_app_controller);
router.get("/step_detail", authorize([user_roles_enum.Merchant]), get_advisory_step_detail_controller);
//api to unsubscribe crop from crop advisory
router.put("/unsubscribe", authorize([user_roles_enum.Merchant]), unsubscribe_crop_for_advisory_controller);
module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/controllers/add_new_advisory_step_controller.js
const http_status_code_enum = require("../../../../enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const add_step_for_advisory_service = require("../services/add_step_for_advisory");
const langauge = require("../../../../enums/global/language");
module.exports = async (req, res) => {
    try {
        const duration_days = +req.body.duration_days || 0;
        const gap_days = +req.body.gap_days || 0;
        const heading = req.body.heading;
        const formatted_content = req.body.formatted_content || "";
        const crop_id = +req.body.crop_id;
        const language_id = +req.body.language_id || langauge.default;
        if (!crop_id || !heading || !duration_days || !formatted_content) {
            let message = "crop_id, heading, duration_days and formatted_content are mandatory"
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false, message));
        }
        let step_detail = await add_step_for_advisory_service(crop_id, language_id, heading, duration_days, gap_days, formatted_content);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, "successfull", step_detail));
    } catch (err) {
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/controllers/get_languages_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const get_languages_service = require("../services/get_languages_service");
module.exports = async (req, res) => {
  try {
    let crop_advisory_languages = await get_languages_service();
    return res.status(http_status_code_enum.ok).json(create_api_response(true, "successfull", crop_advisory_languages));

  } catch (err) {
    return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/controllers/get_advisory_steps_app_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const get_steps_service = require("../services/get_steps_for_app_service");
const language_enum = require("../../../../entities_v2/metadata/enums/global/langauge");
module.exports = async (req, res) => {
    try {
        const crop_id = +req.query.crop_id;
        const language_id = +req.headers.language || language_enum.hindi;
        if (!crop_id) {
            let message = "crop_id is mandatory"
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false, message));
        }
        let steps = await get_steps_service(crop_id, language_id);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, "successfull", steps));

    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/controllers/get_crop_details_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const get_crop_details_service = require("../services/get_crop_details_service");
module.exports = async (req, res) => {
  try {

    let crop_data = await get_crop_details_service();
    return res.status(http_status_code_enum.ok).json(create_api_response(true, "successfull", crop_data));

  } catch (err) {
    return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/controllers/update_crop_for_advisory_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const update_crop_for_advisory_service = require("../services/update_crop_for_advisory_service");
module.exports = async (req, res) => {
  try {
    const crop_id = req.body.crop_id;
    const crop_image = req.body.crop_image;
    const crop_name = req.body.crop_name;
    if (!crop_id) {
      let message = "crop id is mandatory"
      return res.status(http_status_code_enum.bad_request).json(create_api_response(false, message));
    }
    let crop_data = await update_crop_for_advisory_service(crop_id, crop_image, crop_name);
    return res.status(http_status_code_enum.ok).json(create_api_response(true, "successfull", crop_data));

  } catch (err) {
    return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/controllers/delete_advisory_step_controller.js
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const delete_advisory_step_detail_service = require("../services/delete_advisory_step_detail_service.js");
const language_enum = require("../../../../entities_v2/metadata/enums/global/langauge");
module.exports = async (req, res) => {
    try {
        const crop_id = +req.body.crop_id;
        const language_id = +req.body.language_id || language_enum.hindi;
        const step_id = req.body.step_id || "";
        if (!crop_id || !step_id || !language_id) {
            let message = "crop_id, language_id and step_id are mandatory"
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false, message));
        }
        let advisory_step_detail = await delete_advisory_step_detail_service(crop_id, language_id, step_id);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, "successfull", advisory_step_detail));
    } catch (err) {
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/controllers/publish_advisory_controller.js
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const publish_advisory_service = require("../services/publish_advisory_service");
const language_enum = require("../../../../entities_v2/metadata/enums/global/langauge");
module.exports = async (req, res) => {
    try {
        const crop_id = +req.body.crop_id;
        const language_id = +req.body.language_id || language_enum.hindi;
        if (!crop_id) {
            let message = "crop_id is mandatory"
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false, message));
        }
        let steps = await publish_advisory_service(crop_id, language_id);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, "successfull", steps));

    } catch (err) {
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/controllers/unsubscribe_crop_for_advisory_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const unsubscribe_crop_for_advisory_service = require("../services/unsubscribe_crop_for_advisory_service");
const clear_crop_advisory_redis = require("../../../v2/crop_advisory/services/clear_crop_advisory_redis");
module.exports = async (req, res) => {
  try {
    const crop_id = req.body.crop_id;
    const merchant_detail_id = req.user.user_profile_id;
    if (!crop_id) {
      let message = "crop_id is mandatory to unsubscribe"
      return res.status(http_status_code_enum.bad_request).json(create_api_response(false, message));
    }
    await clear_crop_advisory_redis(merchant_detail_id);
    let data = await unsubscribe_crop_for_advisory_service(crop_id, merchant_detail_id);
    return res.status(http_status_code_enum.ok).json(create_api_response(true, "successfull",data));

  } catch (err) {
    return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/controllers/get_crop_details_app_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const get_crop_details_app_service = require("../services/get_crop_details_app_service");
const language_enum = require("../../../../enums/global/language");
module.exports = async (req, res) => {
  try {
    let subscribed = req.query.subscribed || false;
    const language_id = +req.headers.language || language_enum.default;
    if (subscribed == 'false' || subscribed == false)
      subscribed = false;
    else
      subscribed = true
    let merchant_detail_id = req.user.user_profile_id
    let crop_data = await get_crop_details_app_service(subscribed, merchant_detail_id, language_id);
    return res.status(http_status_code_enum.ok).json(create_api_response(true, "successfull", crop_data));

  } catch (err) {
    return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/controllers/update_advisory_step_controller.js
const http_status_code_enum = require("../../../../enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const update_step_for_advisory = require("../services/update_step_for_advisory");
const langauge = require("../../../../enums/global/language");
module.exports = async (req, res) => {
    try {
        const duration_days = +req.body.duration_days || 0;
        const gap_day = +req.body.gap_days || 0;
        const heading = req.body.heading;
        const formatted_content = req.body.formatted_content || "";
        const crop_id = +req.body.crop_id;
        const language_id = +req.body.language_id || langauge.default;
        const step_id = req.body.step_id;
        if (!crop_id || !heading || !duration_days || !formatted_content || !step_id) {
            let message = "crop_id, heading, duration_days,step_id and formatted_content are mandatory"
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false, message));
        }

        let step_detail = await update_step_for_advisory(crop_id, language_id, step_id, heading, duration_days, gap_day, formatted_content);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, "successfull", step_detail));
    } catch (err) {
        return res.json(create_api_response(false, err.message, null));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/controllers/get_steps_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const get_steps_service = require("../services/get_steps_service");
const language_enum = require("../../../../entities_v2/metadata/enums/global/langauge");
module.exports = async (req, res) => {
  try {
    const crop_id = +req.query.crop_id;
    const language_id = +req.query.language_id || language_enum.hindi;
    if (!crop_id) {
      let message = "crop_id is mandatory"
      return res.status(http_status_code_enum.bad_request).json(create_api_response(false, message));
    }
    let steps = await get_steps_service(crop_id, language_id);
    return res.status(http_status_code_enum.ok).json(create_api_response(true, "successfull", steps));

  } catch (err) {
    return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/controllers/subscribe_crop_app_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const subscribe_crop_app_service = require("../services/subscribe_crop_app_service");
const feature_usage_counter_service = require("../../../../common_services/features/feature_usage_counter_service");
const features_enum = require("../../../../enums/features/features_enum");
module.exports = async (req, res) => {
  try {
    const crop_id = req.body.crop_id;
    const sowing_date = req.body.sowing_date;
    const merchant_detail_id = req.user.user_profile_id;
    if (!crop_id || !sowing_date) {
      let message = "crop_id and sowing_date are mandatory"
      return res.status(http_status_code_enum.bad_request).json(create_api_response(false, message));
    }
    let data = await subscribe_crop_app_service(crop_id, sowing_date, merchant_detail_id);
    // calling feature_usage_counter service
    feature_usage_counter_service({feature_id:features_enum.crop_calendar,merchant_detail_id})
    .catch(err => {
      error_log(err);
    });
    return res.status(http_status_code_enum.ok).json(create_api_response(true, "successfull"));

  } catch (err) {
    return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/controllers/get_crop_names_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const get_crop_names_service = require("../services/get_crop_names_service");
module.exports = async (req, res) => {
  try {
    let crop_names = await get_crop_names_service();
    return res.status(http_status_code_enum.ok).json(create_api_response(true, "successfull", crop_names));

  } catch (err) {
    return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/controllers/update_subscribe_crop_app_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const update_subscribe_crop_app_service = require("../services/update_subscribe_crop_app_service");
module.exports = async (req, res) => {
  try {
    const crop_id = req.body.crop_id;
    const sowing_date = req.body.sowing_date;
    const merchant_detail_id = req.user.user_profile_id;
    if (!crop_id || !sowing_date) {
      let message = "crop_id and sowing_date are mandatory"
      return res.status(http_status_code_enum.bad_request).json(create_api_response(false, message));
    }
    let data = await update_subscribe_crop_app_service(crop_id, sowing_date, merchant_detail_id);
    return res.status(http_status_code_enum.ok).json(create_api_response(true, "successfull"));

  } catch (err) {
    return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/controllers/add_crop_for_advisory_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const add_crop_for_advisory_service = require("../services/add_crop_for_advisory_service");
module.exports = async (req, res) => {
  try {
    const crop_name = req.body.crop_name;
    if (!crop_name) {
      let message = "crop name is mandatory"
      return res.status(http_status_code_enum.bad_request).json(create_api_response(false, message));
    }
    let crop_data = await add_crop_for_advisory_service(crop_name);
    if (!crop_data) {
      let message = " crop already added"
      return res.status(http_status_code_enum.ok).json(create_api_response(true, message, crop_data));
    }
    else
      return res.status(http_status_code_enum.ok).json(create_api_response(true, "successfull", crop_data));

  } catch (err) {
    return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/controllers/get_crop_data_id_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const get_crop_data_id_service = require("../services/get_crop_data_id_service");
module.exports = async (req, res) => {
  try {
    const crop_id = +req.query.crop_id;
    if (!crop_id) {
      let message = "crop_id is mandatory"
      return res.status(http_status_code_enum.bad_request).json(create_api_response(false, message));
    }
    let crop_data = await get_crop_data_id_service(crop_id);
    return res.status(http_status_code_enum.ok).json(create_api_response(true, "successfull", crop_data));

  } catch (err) {
    return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/controllers/get_advisory_steps_panel_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const get_steps_service = require("../services/get_steps_service");
const language_enum = require("../../../../entities_v2/metadata/enums/global/langauge");
module.exports = async (req, res) => {
  try {
    const crop_id = +req.query.crop_id;
    const language_id = +req.query.language_id || language_enum.hindi;
    if (!crop_id) {
      let message = "crop_id is mandatory"
      return res.status(http_status_code_enum.bad_request).json(create_api_response(false, message));
    }
    let steps = await get_steps_service(crop_id, language_id);
    return res.status(http_status_code_enum.ok).json(create_api_response(true, "successfull", steps));

  } catch (err) {
    return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/controllers/get_advisory_step_detail_panel_controller.js
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const get_advisory_step_detail_service = require('../services/get_panel_advisory_step_detail_service');
const language_enum = require('../../../../entities_v2/metadata/enums/global/langauge');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const crop_id = +req.query.crop_id;
        const language_id = +req.query.language_id || language_enum.hindi;
        const step_id = req.query.step_id || '';
        if (!crop_id || !step_id) {
            const message = 'crop_id and step_id are mandatory'
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false, message));
        }
        const advisory_step_detail = await get_advisory_step_detail_service(crop_id, language_id, step_id);
        if (!advisory_step_detail) { throw new ValidationError('unable to fetch data'); }
        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'successfull', advisory_step_detail));
    } catch (err) {
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/controllers/get_advisory_step_detail_controller.js
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const get_advisory_step_detail_service = require('../services/get_advisory_step_detail_service');
const language_enum = require('../../../../entities_v2/metadata/enums/global/langauge');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const crop_id = +req.query.crop_id;
        const language_id = +req.headers.language || language_enum.hindi;
        const step_id = req.query.step_id || '';
        if (!crop_id || !step_id) {
            const message = 'crop_id and step_id are mandatory'
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false, message));
        }
        const advisory_step_detail = await get_advisory_step_detail_service(crop_id, language_id, step_id);
        if (!advisory_step_detail) { throw new ValidationError('unable to fetch data'); }
        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'successfull', advisory_step_detail));
    } catch (err) {
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/services/get_crop_details_app_service.js
const { get_crop_details } = require("../../../../data_abstraction_layer/crop/crop_details");
const { get_crop_vernacular_metadata } = require("../../../../data_abstraction_layer/crop/crop_vernacular_metadata");
const { get_crop_advisory_logs } = require("../../../../data_abstraction_layer/crop_advisory/crop_advisory_logs");
const error_log = require("../../../../middelware/error_log");

const get_crop_details_service = async (subscribed, merchant_detail_id, language_id) => {
  try {
    let crop_advisory_logs = await get_crop_advisory_logs({ merchant_detail_id });
    let crop_ids = get_crop_ids(crop_advisory_logs.rows)
    let attributes = ['name', 'advisory_image_url'];
    let crops = []
    // flow -> if subscribe then we will show all the crop(with vernacular name acc. to language_id) mapped with the user
    // else we will show crops(with vernacular name acc. to language_id) which are available for crop advisory but not subscribed
    if (subscribed) {
      if (crop_ids.length > 0) {
        let crop_details = await get_crop_details({ for_advisory: true, included_crop_ids: crop_ids, attributes });
        crops = await add_vernacular_name_for_resposne(crop_details.rows, crop_advisory_logs.rows, language_id)
      }
    }
    else {
      let crop_details = await get_crop_details({ for_advisory: true, excluded_crop_ids: crop_ids, attributes });
      crops = await add_vernacular_name_for_resposne(crop_details.rows, crop_advisory_logs.rows, language_id)
    }
    return { crops };
  } catch (err) {
    error_log(err);
    return null;
  }
};
const get_crop_ids = (crop_advisory_logs = []) => {
  let ids = []
  for (let i = 0; i < crop_advisory_logs.length; i++) {
    ids.push(crop_advisory_logs[i].crop_id)
  }
  return ids
}
const add_vernacular_name_for_resposne = async (crop_details = [], crop_advisory_logs = [], language_id) => {
  let crops = [];
  let sowing_date_crops = {};
  crop_advisory_logs.forEach(crop => {
    sowing_date_crops[crop.crop_id] = crop.sowing_date;
  })
  let attributes = ['name']
  for (let i = 0; i < crop_details.length; i++) {
    let vernacular_name = await get_crop_vernacular_metadata({ crop_id: crop_details[i].id, attributes, language_id })
    if (vernacular_name.rows.length > 0) {
      let obj = {
        crop_id: crop_details[i].id,
        crop_image_url: crop_details[i].advisory_image_url,
        crop_name: vernacular_name.rows[0].name,
      }
      if (sowing_date_crops[obj.crop_id]) {
        obj.sowing_date = sowing_date_crops[obj.crop_id];
      }
      crops.push(obj)
    }
  }
  return crops
}
module.exports = get_crop_details_service


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/services/get_crop_data_id_service.js
const error_log = require('../../../../middelware/error_log');
const { get_crop_details } = require('../../../../data_abstraction_layer/crop/crop_details');
const { get_crop_vernacular_metadata } = require('../../../../data_abstraction_layer/crop/crop_vernacular_metadata');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const get_crop_data_id_service = async (crop_id) => {
    try {
        let crop_data = await get_crop_details({ id: crop_id, for_advisory: true })
        if (crop_data.rows.length === 0) {
            throw new ValidationError('crop with this crop_id is not available')
        }
        let crop_vernacular_data = await get_crop_vernacular_metadata({ crop_id, attributes: ['name', 'language_id'] });
        crop_vernacular_data = format_crop_vernacular_data(crop_vernacular_data.rows)
        crop_data = {
            crop_id: crop_data.rows[0].id,
            crop_names: crop_vernacular_data,
            crop_image_url: crop_data.rows[0].advisory_image_url
        }
        return crop_data;
    } catch (err) {
        error_log(err);
        return null;
    }
};
const format_crop_vernacular_data = (crop_vernacular_data) => {
    const crop_names = {};
    for (let i = 0; i < crop_vernacular_data.length; i++) {
        // let language_id=(crop_vernacular_data[i].language_id)
        // let crop_name=(crop_vernacular_data[i].name)
        crop_names[crop_vernacular_data[i].language_id] = crop_vernacular_data[i].name
    }
    return crop_names;
}
module.exports = get_crop_data_id_service



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/services/subscribe_crop_app_service.js
const crop_advisory_logs_model = require('../../../../database/models_v2/crop_advisory/crop_advisory_logs');
const { get_crop_advisory_logs } = require('../../../../data_abstraction_layer/crop_advisory/crop_advisory_logs');
const error_log = require('../../../../middelware/error_log');
const clear_crop_advisory_redis = require('../../../v2/crop_advisory/services/clear_crop_advisory_redis');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const subscribe_crop_service = async (crop_id, sowing_date, merchant_detail_id) => {
    try {
        const crop_advisory_logs = await get_crop_advisory_logs({ merchant_detail_id, crop_id })
        if (crop_advisory_logs.rows.length > 0) {
            throw new ValidationError('crop already added');
        }
        await clear_crop_advisory_redis(merchant_detail_id);
        const added_crop_for_advisory = await crop_advisory_logs_model.create({
            sowing_date,
            crop_id,
            merchant_detail_id,
            is_active: 1
        });
        if (!added_crop_for_advisory) {
            throw new ValidationError('unable tp add crop');
        }
        return { subscribe: 'yes' };
    } catch (err) {
        error_log(err);
        return null;
    }
};

module.exports = subscribe_crop_service



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/services/get_panel_advisory_step_detail_service.js
const error_log = require("../../../../middelware/error_log");
const get_advisory_step_detail_service = require("../../../../data_abstraction_layer/crop_advisory/get_advisory_step_detail");

const get_steps_service = async (crop_id, language_id, step_id) => {
    try {
        const { crop_advisory_step_detail } = await get_advisory_step_detail_service({ crop_id, language_id, step_id });
        return {
            step_id: crop_advisory_step_detail._id,
            crop_id: crop_advisory_step_detail.crop_id,
            language_id: crop_advisory_step_detail.language_id,
            duration_days: crop_advisory_step_detail.duration_days,
            gap_days: crop_advisory_step_detail.gap_days,
            formatted_content: crop_advisory_step_detail.formatted_content,
            heading: crop_advisory_step_detail.heading
        };
    } catch (err) {
        error_log(err);
        return null;
    }
};

module.exports = get_steps_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/services/get_steps_service.js
const error_log = require("../../../../middelware/error_log");
const get_advisory_overview_service = require("../../../../data_abstraction_layer/crop_advisory/get_advisory_overview");
const get_steps_service = async (crop_id, language_id) => {
  try {
    const { crop_advisory_overview } = await get_advisory_overview_service({ crop_id, language_id });
    if (!crop_advisory_overview)
      return null;
    let steps = {
      crop_id: crop_advisory_overview.crop_id,
      language_id: crop_advisory_overview.language_id,
      steps: crop_advisory_overview.draft_steps.map(ele => {
        return { step_id: ele.advisory_step_id, heading: ele.heading, sync: ele.sync || false };
      }),
      published: crop_advisory_overview.publish_steps.length > 0 ? true : false,
      sync: crop_advisory_overview.sync,
      last_published_date: crop_advisory_overview.last_published_date
    }
    return steps;
  } catch (err) {
    error_log(err);
    return null;
  }
};

module.exports = get_steps_service


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/services/get_crop_details_service.js
const { get_crop_details } = require("../../../../data_abstraction_layer/crop/crop_details");
const { get_crop_vernacular_metadata } = require("../../../../data_abstraction_layer/crop/crop_vernacular_metadata");
const error_log = require("../../../../middelware/error_log");
const crop_advisory_overview = require("../../../../data_abstraction_layer/crop_advisory/crop_advisory_overview");
const get_crop_details_service = async () => {
  try {
    let attributes=['name','advisory_image_url'];
   let crop_details=await get_crop_details({for_advisory:true,attributes});
   attributes=['language_id']
   let crops=[]
   for(let i=0;i<crop_details.rows.length;i++)
   {
    let crop_advisory_overview_data=await crop_advisory_overview({crop_id:crop_details.rows[i].id,attributes:"publish_steps"})
    let publish_count= get_publish_count(crop_advisory_overview_data)
    let crop_obj={}
    crop_obj.crop_id=crop_details.rows[i].id;
    crop_obj.crop_name=crop_details.rows[i].name;
    crop_obj.crop_image_url=crop_details.rows[i].advisory_image_url;
    crop_obj.publish_count=publish_count
    crops.push(crop_obj);
   }
    return {crops};
  } catch (err) {
    error_log(err);
    return null;
  }
};
const get_publish_count=(crop_advisory_overview_data)=>{
let count=0;
for(let i=0;i<crop_advisory_overview_data.length;i++)
{
  if(crop_advisory_overview_data[i].publish_steps.length>0)
  count++;
}
return count;
}
module.exports =get_crop_details_service


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/services/get_languages_service.js
const error_log = require("../../../../middelware/error_log");
const get_all_language=require('../../../../common_services/global/get_languages_service');
const language_enum = require("../../../../enums/global/language");

const get_languages_service = async () => {
  try {
    let languages = await get_all_language(false);
    languages=format_response(languages)
    return {languages};
  } catch (err) {
    error_log(err);
    return null;
  }
};
const format_response=(languages)=>{
let advisory_languages=[]
for(let i=0;i<languages.length;i++)
{
  let lang_obj={
    name:languages[i].dataValues.language_name,
    language_id:languages[i].dataValues.language_id
  }
if(languages[i].dataValues.language_id==language_enum.english)
{
  advisory_languages=[lang_obj, ...advisory_languages]
}
else{
  advisory_languages.push(lang_obj)
}
}
return advisory_languages;
}
module.exports =get_languages_service


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/services/unsubscribe_crop_for_advisory_service.js
const { get_crop_advisory_logs } = require('../../../../data_abstraction_layer/crop_advisory/crop_advisory_logs');
const error_log = require('../../../../middelware/error_log');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const unsubscribe_crop_for_advisory_service = async (crop_id, merchant_detail_id) => {
    try {
        const crop_advisory_logs_data = await get_crop_advisory_logs({ crop_id, merchant_detail_id })
        if (crop_advisory_logs_data.rows.length === 0) {
            throw new ValidationError('crop already not subscribed')
        }
        crop_advisory_logs_data.rows[0].is_active = 0;
        await crop_advisory_logs_data.rows[0].save();
        return { crop_id_unsubscribe: crop_id };
    } catch (err) {
        error_log(err);
        return null;
    }
};

module.exports = unsubscribe_crop_for_advisory_service



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/services/add_crop_for_advisory_service.js
const error_log = require('../../../../middelware/error_log');
const { get_crop_details } = require('../../../../data_abstraction_layer/crop/crop_details');
const crop_detail_model = require('../../../../database/models_v2/crop/crop_detail');
const crop_vernacular_metadata_model = require('../../../../database/models_v2/crop/crop_vernacular_metadata');
const language_enum = require('../../../../enums/global/language');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const add_crop_for_advisory_service = async (crop_name) => {
    try {
        let crop_data = await get_crop_details({ name: crop_name });
        if (crop_data.rows[0]?.for_advisory === true && crop_data.rows.length > 0) {
            throw new ValidationError('crop already added for advisory')
        } else {
            if (crop_data.rows[0]?.for_advisory === false && crop_data.rows.length > 0) {
                crop_data.rows[0].for_advisory = true;
                await crop_data.rows[0].save();
                crop_data = crop_data.rows[0]
            } else {
                const crop_obj = {
                    name: crop_name,
                    for_advisory: true,
                    is_active: 1
                }
                crop_data = await crop_detail_model.create(crop_obj);

                await crop_vernacular_metadata_model.create({
                    language_id: language_enum.english,
                    name: crop_name,
                    is_active: 1,
                    crop_id: crop_data.id
                })
            }
            crop_data = format_reponse_structure(crop_data)
        }
        return crop_data;
    } catch (err) {
        error_log(err);
        return null;
    }
};

const format_reponse_structure = (crop_obj) => {
    const crop_data = {
        crop_id: crop_obj.id,
        crop_names: crop_obj.name,
        crop_image_url: crop_obj?.advisory_image_url || null
    }

    return crop_data;
}
module.exports = add_crop_for_advisory_service



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/services/add_step_for_advisory.js
const error_log = require("../../../../middelware/error_log");
const add_advisory_step_service = require("../../../../data_abstraction_layer/crop_advisory/add_advisory_step");
const crop_advisory_status_enum = require("../../../../enums/crop_advisory/crop_advisory_status_enums");
module.exports = async (crop_id, language_id, heading, duration_days, gap_days, formatted_content) => {
  try {
    const { crop_advisory_step } = await add_advisory_step_service({
      crop_id,
      language_id,
      heading,
      formatted_content,
      duration_days,
      gap_days
    });
    let step_detail = {
      step_id: crop_advisory_step._id,
      heading: crop_advisory_step.heading,
      duration_days: crop_advisory_step.duration_days,
      gap_days: crop_advisory_step.gap_days,
      formatted_content: crop_advisory_step.formatted_content,
      status: crop_advisory_status_enum.draft
    }
    return step_detail;
  } catch (err) {
    error_log(err);
    return null;
  }
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/services/update_subscribe_crop_app_service.js
const { get_crop_advisory_logs } = require('../../../../data_abstraction_layer/crop_advisory/crop_advisory_logs');
const error_log = require('../../../../middelware/error_log');
const clear_crop_advisory_redis = require('../../../v2/crop_advisory/services/clear_crop_advisory_redis');
const subscribe_crop_service = require('./subscribe_crop_app_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const update_subscribe_crop_app_service = async (crop_id, sowing_date, merchant_detail_id) => {
    try {
        const crop_advisory_logs_data = await get_crop_advisory_logs({ crop_id, merchant_detail_id })
        if (crop_advisory_logs_data.rows.length === 0) {
            throw new ValidationError('crop not subscribed to update')
        }
        await clear_crop_advisory_redis(merchant_detail_id);
        crop_advisory_logs_data.rows[0].is_active = 0;
        await crop_advisory_logs_data.rows[0].save();
        await subscribe_crop_service(crop_id, sowing_date, merchant_detail_id)
        return { subscribe: 'yes' };
    } catch (err) {
        error_log(err);
        return null;
    }
};

module.exports = update_subscribe_crop_app_service



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/services/update_step_for_advisory.js
const error_log = require("../../../../middelware/error_log");
const get_advisory_step_overview_service = require("../../../../data_abstraction_layer/crop_advisory/get_advisory_overview");
const create_crop_advisory_service = require("../../../../data_abstraction_layer/crop_advisory/create_advisory_step_detail");
const get_advisory_step_detail_service = require("../../../../data_abstraction_layer/crop_advisory/get_advisory_step_detail");
module.exports = async (crop_id, language_id, step_id, heading, duration_days, gap_days, formatted_content) => {
    try {
        //fetching current advisory overview document
        const { crop_advisory_overview } = await get_advisory_step_overview_service({ crop_id, language_id });

        if (!crop_advisory_overview)
            return null;
        //finding index of the step to be updated
        let target_index = null, sync = false;
        crop_advisory_overview.draft_steps.forEach((ele, index) => {
            if (ele.advisory_step_id == step_id) {
                target_index = index;
                sync = ele.sync;
            }
        });

        // if in sync i.e., step published, create new step for updating infor
        let crop_advisory_step_detail = await get_advisory_step_detail_service({ crop_id, language_id, step_id });
        if (sync) {
            crop_advisory_step_detail = await create_crop_advisory_service(crop_advisory_step_detail.crop_advisory_step_detail);
        }
        else{
        crop_advisory_step_detail = crop_advisory_step_detail.crop_advisory_step_detail
        }
        // update new data
        crop_advisory_step_detail.heading = heading;
        crop_advisory_step_detail.duration_days = duration_days;
        crop_advisory_step_detail.gap_days = gap_days;
        crop_advisory_step_detail.formatted_content = formatted_content;

        await crop_advisory_step_detail.save();

        // sync advisory step detail and overview
        crop_advisory_overview.draft_steps[target_index].heading = crop_advisory_step_detail.heading;
        crop_advisory_overview.draft_steps[target_index].advisory_step_id = crop_advisory_step_detail._id;

        await crop_advisory_overview.save();
        return crop_advisory_step_detail;
    } catch (err) {
        error_log(err);
        return null;
    }
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/services/update_crop_for_advisory_service.js
const error_log = require('../../../../middelware/error_log');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const crop_vernacular_metadata_model = require('../../../../database/models_v2/crop/crop_vernacular_metadata');
const {
    get_crop_details
} = require('../../../../data_abstraction_layer/crop/crop_details');
const {
    get_crop_vernacular_metadata
} = require('../../../../data_abstraction_layer/crop/crop_vernacular_metadata');
const language_enum = require('../../../../enums/global/language');

const update_crop_for_advisory_service = async (
    crop_id,
    crop_image,
    crop_name
) => {
    try {
        let attributes = ['name', 'advisory_image_url'];
        const crop_data = await get_crop_details({
            for_advisory: true,
            id: crop_id,
            attributes
        });
        attributes = ['name', 'language_id', 'crop_id'];
        const crop_vernacular_data = await get_crop_vernacular_metadata({
            crop_id,
            attributes
        });
        const crop_vernacular_language_ids = [];
        for (let i = 0; i < crop_vernacular_data.rows.length; i++) {
            crop_vernacular_language_ids.push(
                crop_vernacular_data.rows[i].language_id
            );
        }
        if (!crop_data.rows[0]) {
            throw new ValidationError('crop_id not exists to update');
        }
        if (crop_name[language_enum.english]) { crop_data.rows[0].name = crop_name[language_enum.english]; }

        crop_data.rows[0].advisory_image_url = crop_image;
        const vernacular_crop_name_keys = [];
        for (const key in crop_name) {
            vernacular_crop_name_keys.push(+key);
        }
        const clone_crop_vernacular_data = [...crop_vernacular_data.rows];
        for (let i = 0; i < vernacular_crop_name_keys.length; i++) {
            if (crop_vernacular_language_ids.includes(vernacular_crop_name_keys[i])) {
                // update
                for (let j = 0; j < crop_vernacular_data.rows.length; j++) {
                    if (
                        crop_vernacular_data.rows[j].language_id ===
            vernacular_crop_name_keys[i]
                    ) {
                        crop_vernacular_data.rows[j].name =
              crop_name[vernacular_crop_name_keys[i]];
                        await crop_vernacular_data.rows[j].save();
                    }
                }
            } else {
                // create
                const add_crop_vernacular_data =
          await crop_vernacular_metadata_model.create({
              language_id: vernacular_crop_name_keys[i],
              name: crop_name[vernacular_crop_name_keys[i]],
              crop_id,
              is_active: 1
          });
                clone_crop_vernacular_data.push(add_crop_vernacular_data);
            }
        }
        crop_data.rows[0].save();
        // format object for response;
        const crop_detail = format_response(crop_data, clone_crop_vernacular_data);
        return crop_detail;
    } catch (err) {
        error_log(err);
        return null;
    }
};
const format_response = (crop_data, crop_vernacular_data) => {
    const crop_name = {};
    const crop_data_detail = {};
    for (let i = 0; i < crop_vernacular_data.length; i++) {
        crop_name[crop_vernacular_data[i].language_id] =
      crop_vernacular_data[i].name;
    }
    crop_data_detail.crop_id = crop_data.rows[0].id;
    crop_data_detail.crop_image = crop_data.rows[0].advisory_image_url;
    crop_data_detail.crop_name = crop_name;
    return crop_data_detail;
};
module.exports = update_crop_for_advisory_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/services/get_steps_for_app_service.js
const error_log = require("../../../../middelware/error_log");
const get_advisory_overview_service = require("../../../../data_abstraction_layer/crop_advisory/get_advisory_overview");
const get_advisory_step_detail_service = require("../../../../data_abstraction_layer/crop_advisory/get_advisory_step_detail");

const get_steps_service = async (crop_id, language_id) => {
  try {
    let { crop_advisory_overview } = await get_advisory_overview_service({ crop_id, language_id });
    if (!crop_advisory_overview)
      return null;
    crop_advisory_overview = crop_advisory_overview.toObject();
    let crop_advisory = {
      crop_id: crop_advisory_overview.crop_id,
      language_id: crop_advisory_overview.language_id,
      steps: crop_advisory_overview.publish_steps,
      step_count: crop_advisory_overview.publish_steps.length
    }
    for (let i = 0; i < crop_advisory.steps.length; i++) {
      const { crop_advisory_step_detail } = await get_advisory_step_detail_service({
        crop_id,
        language_id,
        step_id: crop_advisory.steps[i].advisory_step_id,
        select_fields: {
          duration_days: 1,
          gap_days: 1
        }
      });
      crop_advisory.steps[i].duration_days = crop_advisory_step_detail.duration_days;
      crop_advisory.steps[i].gap_days = crop_advisory_step_detail.gap_days;
    }
    return crop_advisory;
  } catch (err) {
    error_log(err);
    return null;
  }
};

module.exports = get_steps_service


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/services/get_crop_names_service.js
const error_log = require("../../../../middelware/error_log");
const { get_crop_details } = require("../../../../data_abstraction_layer/crop/crop_details");

const get_crop_names_service = async () => {
  try {
    let attributes=['name'];
    let for_advisory=false
    let crop_names=await get_crop_details({for_advisory,attributes})
    crop_names=format_crop_names(crop_names?.rows);
    return {crop_names}
  } catch (err) {
    error_log(err);
    return [];
  }
};
const format_crop_names=(crop_details)=>{
  let crop_arr=[]
for(let i=0;i<crop_details.length;i++)
{
  crop_arr.push(crop_details[i].dataValues.name)
}
return crop_arr;
}
module.exports =get_crop_names_service


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/services/delete_advisory_step_detail_service.js
const error_log = require("../../../../middelware/error_log");
const delete_advisory_step_detail_service = require('../../../../data_abstraction_layer/crop_advisory/delete_step_detail');

const delete_steps_service = async (crop_id, language_id, step_id) => {
    try {
        const step_detail = await delete_advisory_step_detail_service({ crop_id, language_id, step_id });
        return step_detail;
    } catch (err) {
        error_log(err);
        return null;
    }
};

module.exports = delete_steps_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/services/publish_advisory_service.js
const error_log = require("../../../../middelware/error_log");
const get_advisory_overview_service = require("../../../../data_abstraction_layer/crop_advisory/get_advisory_overview");
const update_advisory_overview_service = require("../../../../data_abstraction_layer/crop_advisory/update_advisory_overview");
const sync_step_details = require("../../../../data_abstraction_layer/crop_advisory/sync_step_details");

const get_steps_service = async (crop_id, language_id) => {
    try {
        let { crop_advisory_overview } = await get_advisory_overview_service({ crop_id, language_id });
        if (!crop_advisory_overview)
            return null;
        crop_advisory_overview = crop_advisory_overview.toObject();
        crop_advisory_overview.publish_steps = [];
        crop_advisory_overview.draft_steps.forEach(ele => {
            ele.sync = true;
            crop_advisory_overview.publish_steps.push(ele);
        });
        crop_advisory_overview.sync = true;
        crop_advisory_overview.last_published_date = new Date();
        const { updated_advisory_overview } = await update_advisory_overview_service({ crop_id, language_id, updated_advisory_overview: crop_advisory_overview });
        await sync_step_details({ crop_id, language_id, publish_steps: updated_advisory_overview.publish_steps });
        let steps = {
            crop_id: updated_advisory_overview.crop_id,
            language_id: updated_advisory_overview.language_id,
            steps: updated_advisory_overview.draft_steps.map(ele => {
                return { step_id: ele.advisory_step_id, heading: ele.heading, sync: ele.sync || false };
            }),
            published: updated_advisory_overview.publish_steps.length > 0 ? true : false,
            sync: updated_advisory_overview.sync
        }
        return steps;
    } catch (err) {
        error_log(err);
        return null;
    }
};

module.exports = get_steps_service


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop_advisory/services/get_advisory_step_detail_service.js
const error_log = require("../../../../middelware/error_log");
const advisory_step_detail_service = require("../../../../data_abstraction_layer/crop_advisory/get_advisory_step_detail");

const get_steps_service = async (crop_id, language_id, step_id) => {
    try {
        let step_detail = await advisory_step_detail_service({ crop_id, language_id, step_id });
        return step_detail;
    } catch (err) {
        error_log(err);
        return null;
    }
};

module.exports = get_steps_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sauda/swagger/index.js
module.exports = {
    tags: {
        name: 'sauda'
    },
    paths: {
        '/create_sauda': {
            post: {
                tags: ['sauda'],
                summary: 'create_sauda',
                description: '',
                operationId: 'create_sauda',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'trade_price_id',
                        description: 'trade_price_id',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'quantity',
                        description: 'quantity',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'quantity_unit_id',
                        description: 'quantity_unit_id',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'broker_id',
                        description: 'broker_id',
                        required: false,
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/sauda_list': {
            get: {
                tags: ['sauda'],
                summary: 'sauda_list',
                description: '',
                operationId: 'sauda_list',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'page_no',
                        description: 'page_no',
                        required: false,
                        type: 'number'
                    },
                    {
                        in: 'query',
                        name: 'limit',
                        description: 'limit',
                        required: false,
                        type: 'number'
                    },
                    {
                        in: 'query',
                        name: 'is_open',
                        description: '1- open saudas 0 for closed saudas ',
                        required: false,
                        type: 'number'
                    },
                    {
                        in: 'query',
                        name: 'sauda_status_id',
                        description: ' 1, 2, 3, 4 , for all send 1,2,3,4,5 comma seprated',
                        required: false,
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/post_supplier_po_decision': {
            post: {
                tags: ['sauda'],
                summary: 'save whether supplier accepted/rejected the sauda',
                description: '',
                operationId: 'post_supplier_po_decision',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'sauda_id',
                        description: 'sauda_id',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'sauda_status_id',
                        description: 'sauda_status_id',
                        required: true,
                        type: 'number'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/send_sauda_status_notification': {
            post: {
                tags: ['sauda'],
                summary: 'send notification for sauda order status',
                description: '',
                operationId: 'post_sauda_status_notification',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'sauda_id',
                        description: 'sauda_id',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'sauda_status_id',
                        description: 'sauda_status_id',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'merchant_mobile_number',
                        description: 'merchant mobile number',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'merchant_name',
                        description: 'merchant name',
                        required: false,
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'business_name',
                        description: 'merchant business_name',
                        required: false,
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'media_name',
                        description: 'media name',
                        required: false,
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'media_link',
                        description: 'media link',
                        required: false,
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/send_payment_confirmation_notification': {
            post: {
                tags: ['sauda'],
                summary: 'send notification for payment confirmation to the suppliers',
                description: '',
                operationId: 'post_payment_confirmation_notification',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'sauda_id',
                        description: 'sauda_id',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'po_id',
                        description: 'po_id',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'utr',
                        description: 'utr',
                        required: true,
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'merchant_mobile_number',
                        description: 'merchant mobile number',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'media_name',
                        description: 'media name',
                        required: false,
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'media_link',
                        description: 'media link',
                        required: false,
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/send_po_status_notification': {
            post: {
                tags: ['sauda'],
                summary: 'send notification for po status',
                description: '',
                operationId: 'post_po_status_notification',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'po_id',
                        description: 'po_id',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'sauda_id',
                        description: 'sauda_id',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'po_status_id',
                        description: 'po_status_id',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'merchant_mobile_number',
                        description: 'merchant mobile number',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'media_name',
                        description: 'media name',
                        required: false,
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'media_link',
                        description: 'media link',
                        required: false,
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/details': {
            get: {
                tags: ['sauda'],
                summary: 'fetch sauda details',
                description: '',
                operationId: 'fetch_sauda_details',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'sauda_id',
                        description: 'sauda_id',
                        required: true,
                        type: 'number'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/truck_details': {
            get: {
                tags: ['sauda'],
                summary: 'fetch sauda truck details',
                description: 'fetch sauda truck details',
                operationId: 'get_sauda_truck_details',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'truck_id',
                        description: 'truck_id',
                        required: true,
                        type: 'number'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/verify_broker_code': {
            get: {
                tags: ['sauda'],
                summary: '',
                description: '',
                operationId: 'verify_broker_code',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'broker_code',
                        description: 'broker_code',
                        required: true,
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        }
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sauda/index.js
const router = require('express').Router();
const authorize = require('../../../middelware/authorized_routes');
const user_roles_enum = require('../../../enums/user_profile/user_role');

const create_sauda_from_ml_controller = require('./controllers/create_sauda_from_ml_controller');
const fetch_sauda_list_from_ml_controller = require('./controllers/fetch_sauda_list_from_ml_controller');

const fetch_sauda_details_from_ml_controller = require('./controllers/fetch_sauda_details_from_ml_controller');
const fetch_sauda_truck_details_from_ml_controller = require('./controllers/fetch_sauda_truck_details_from_ml_controller');
const save_supplier_po_decision_from_ml_controller = require('./controllers/save_supplier_po_decision_from_ml_controller');
const send_sauda_status_notification_to_suppliers_controller = require('./controllers/send_sauda_status_notifications_to_suppliers_controller');
const send_po_status_notification_to_suppliers_controller = require('./controllers/send_po_status_notifications_to_suppliers_controller');
const send_payment_confirmation_notification_to_suppliers_controller = require('./controllers/send_payment_confirmation_notification_to_suppliers_controller');
const verify_broker_code_controller = require('./controllers/verify_broker_code_from_ml_controller');

router.post('/create_sauda', authorize([user_roles_enum.Merchant]), create_sauda_from_ml_controller);
router.get('/sauda_list', authorize([user_roles_enum.Merchant]), fetch_sauda_list_from_ml_controller);
router.get('/details', authorize([user_roles_enum.Merchant]), fetch_sauda_details_from_ml_controller);
router.get('/truck_details', authorize([user_roles_enum.Merchant]), fetch_sauda_truck_details_from_ml_controller);
router.post('/post_supplier_po_decision', authorize([user_roles_enum.Merchant]), save_supplier_po_decision_from_ml_controller);
router.post('/send_sauda_status_notification', authorize([user_roles_enum.market_linkage_system, user_roles_enum.Merchant]), send_sauda_status_notification_to_suppliers_controller);
router.post('/send_po_status_notification', authorize([user_roles_enum.market_linkage_system, user_roles_enum.Merchant]), send_po_status_notification_to_suppliers_controller);
router.post('/send_payment_confirmation_notification', authorize([user_roles_enum.market_linkage_system, user_roles_enum.Merchant]), send_payment_confirmation_notification_to_suppliers_controller);

router.get('/verify_broker_code', authorize([user_roles_enum.market_linkage_system, user_roles_enum.Merchant]), verify_broker_code_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sauda/controllers/send_sauda_status_notifications_to_suppliers_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const send_sauda_status_notification_to_suppliers_service = require('../services/send_sauda_status_notifications_to_suppliers_service');
const language_enums = require('../../../../enums/global/language');
const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * The function `send_sauda_status_notification_to_suppliers_controller` sends a notification to
 * suppliers with the sauda status information.
 * @param req - The `req` parameter is the request object that contains information about the HTTP
 * request made to the server. It includes details such as the request headers, request body, request
 * method, and request URL.
 * @param res - The `res` parameter is the response object that is used to send the response back to
 * the client. It is an instance of the Express `Response` object.
 * @returns a JSON response with the status code and a message. If there are no errors, it will return
 * a success message along with the notification confirmation. If there is an error, it will return an
 * error message.
 */
const send_sauda_status_notification_to_suppliers_controller = async (req, res) => {
    try {
        const supplier_mobile_number = +req.body.merchant_mobile_number.toString() || null;
        const sauda_status_id = +req.body.sauda_status_id;
        const sauda_id = +req.body.sauda_id;
        const language_id = language_enums.hindi;
        const file_name = req.body.media_name;
        const link = req.body.media_link;
        const supplier_name = req.body?.merchant_name;
        const business_name = req.body?.business_name;
        const media = {};
        if (file_name && link) {
            media.fileName = file_name
            media.link = link
        }

        if (!sauda_status_id || !sauda_id || !supplier_mobile_number) {
            throw new ValidationError(error.no_sauda_id_or_sauda_status_id_or_supplier_mobile_number);
        }

        // sending notification to provide the sauda status to the supplier
        const notification_confirmation = await send_sauda_status_notification_to_suppliers_service(supplier_mobile_number, sauda_status_id, sauda_id, language_id, media, supplier_name, business_name);

        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'successfull', notification_confirmation));
    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}

module.exports = send_sauda_status_notification_to_suppliers_controller



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sauda/controllers/save_supplier_po_decision_from_ml_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const save_supplier_po_decision_from_ml_service = require('../services/save_supplier_po_decision_from_ml_service');
const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * The function `save_supplier_po_decision_from_ml_controller` is an asynchronous function that handles
 * the saving of a supplier purchase order decision based on results.
 * @param req - The `req` parameter is the request object that contains information about the HTTP
 * request made to the server. It includes details such as the request headers, request body, request
 * method, and request URL.
 * @param res - The `res` parameter is the response object that is used to send the HTTP response back
 * to the client. It contains methods and properties that allow you to set the response status,
 * headers, and body. In this code snippet, it is used to send the response with the appropriate status
 * code and JSON
 * @returns a response with a status code and a JSON object. The status code is either 200 (OK) or 400
 * (Bad Request) depending on the success or failure of the operation. The JSON object contains a
 * boolean value indicating the success or failure of the operation, a message describing the result,
 * and the supplier_po_decision data.
 */
const save_supplier_po_decision_from_ml_controller = async (req, res) => {
    try {
        const sauda_id = +req.body.sauda_id;
        const sauda_status_id = +req.body.sauda_status_id;
        const merchant_mobile_number = req.user.mobile_number.toString() || null;

        if (!sauda_id || !sauda_status_id) {
            throw new ValidationError(error.no_sauda_id_or_sauda_status_id);
        }
        if (!merchant_mobile_number) {
            throw new ValidationError(error.no_supplier_mobile_number);
        }

        // saving supplier_po_decision
        const supplier_po_decision = await save_supplier_po_decision_from_ml_service(sauda_id, sauda_status_id, merchant_mobile_number);

        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'successfull', supplier_po_decision));
    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}

module.exports = save_supplier_po_decision_from_ml_controller



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sauda/controllers/fetch_sauda_list_from_ml_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const fetch_sauda_list_from_ml_service = require('../services/fetch_sauda_list_from_ml_service');
const trade_tab_enum = require('../../../../enums/sauda/trade_tab_enum');

const sauda_status_trade_tab_mapping_enums = require('../../../../enums/sauda/sauda_status_trade_tab_mapping_enums');
const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        /* The code is using optional chaining (`?.`) to check if the `req.query` object exists and if
        the specified properties (`is_open`, `sauda_status_id`, `page_no`, `limit`) exist within it. */
        const is_open = req.query?.is_open || trade_tab_enum.open

        const sauda_status_id = req.query?.sauda_status_id ||
                                        (Number(is_open) === trade_tab_enum.open
                                            ? sauda_status_trade_tab_mapping_enums.all_open
                                            : sauda_status_trade_tab_mapping_enums.all_closed
                                        )
        const merchant_mobile_number = req.user.mobile_number.toString() || null;
        if (!merchant_mobile_number) {
            throw new ValidationError(error.no_supplier_mobile_number);
        }

        const page_no = req.query?.page_no || 1
        const limit = req.query?.limit || 20

        // fetching sauda list on the basis of order status and and tab(closed or open)
        const sauda_list = await fetch_sauda_list_from_ml_service(sauda_status_id, page_no, limit, merchant_mobile_number);

        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'successfull', sauda_list));
    } catch (err) {
        /* The code `error_log(err);` is logging the error message to an error log file or service.
        This is useful for debugging and tracking errors in the application. */
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sauda/controllers/verify_broker_code_from_ml_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const verify_broker_code_from_ml_service = require('../services/verify_broker_code_from_ml_service.js');
const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * The function `verify_broker_code_from_ml_controller` verifies a broker code from a machine learning
 * service based on certain parameters and returns the response.
 * @param req - The `req` parameter in the `verify_broker_code_from_ml_controller` function stands for
 * the request object. It contains information about the HTTP request that is being made, including
 * headers, parameters, body, and more. In this function, `req` is used to access the user's mobile
 * @param res - The `res` parameter in the `verify_broker_code_from_ml_controller` function is the
 * response object that will be used to send the response back to the client making the request. It is
 * typically used to set the status code and send data back in the response.
 * @returns The `verify_broker_code_from_ml_controller` function is returning a response to the client
 * based on the outcome of verifying the broker code from the ML service. If the verification is
 * successful, it returns a JSON response with a status of 200 (OK), a success message, and the
 * verification response data. If there is an error during the verification process, it catches the
 * error, logs it,
 */
const verify_broker_code_from_ml_controller = async (req, res) => {
    try {

        const broker_code = req.query.broker_code || null;

        if (!broker_code) {
            throw new ValidationError(error.missing_broker_code_mandatory_params);
        }

        // fetching details of a broker code
        const verify_broker_response = await verify_broker_code_from_ml_service(broker_code);

        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'successfull', verify_broker_response));
    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}

module.exports = verify_broker_code_from_ml_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sauda/controllers/send_po_status_notifications_to_suppliers_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const send_po_status_notification_to_suppliers_service = require('../services/send_po_status_notifications_to_suppliers_service');
const language_enums = require('../../../../enums/global/language');
const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * The function `send_po_status_notification_to_suppliers_controller` sends a notification to suppliers
 * with the purchase order status, truck ID, and sauda ID.
 * @param req - The `req` parameter is the request object that contains information about the HTTP
 * request made to the server. It includes details such as the request headers, request body, request
 * method, and request URL.
 * @param res - The `res` parameter is the response object that will be sent back to the client. It is
 * used to send the HTTP response with the appropriate status code and response data.
 * @returns a JSON response with the status code and a message. If there are no errors, it returns a
 * success message along with the notification confirmation. If there is an error, it returns an error
 * message.
 */
const send_po_status_notification_to_suppliers_controller = async (req, res) => {
    try {
        const supplier_mobile_number = +req.body.merchant_mobile_number.toString() || null;
        const po_status_id = +req.body.po_status_id;
        const truck_id = +req.body.po_id;
        const sauda_id = +req.body.sauda_id;
        const language_id = language_enums.hindi;
        const file_name = req.body.media_name;
        const link = req.body.media_link;
        const media = {};
        if (file_name && link) {
            media.fileName = file_name
            media.link = link
        }

        if (!po_status_id || !truck_id || !sauda_id || !supplier_mobile_number) {
            throw new ValidationError(error.no_po_id_or_po_status_id_or_merchant_mobile_number_or_sauda_id);
        }

        // sending notification to provide the po status to the supplier
        const notification_confirmation = await send_po_status_notification_to_suppliers_service(supplier_mobile_number, po_status_id, sauda_id, truck_id, language_id, media);

        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'successfull', notification_confirmation));
    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}

module.exports = send_po_status_notification_to_suppliers_controller



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sauda/controllers/fetch_sauda_details_from_ml_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const fetch_sauda_details_from_ml_service = require('../services/fetch_sauda_details_from_ml_service');
const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * The function fetches details of a specific sauda (transaction) from a service and
 * returns the details as a JSON response.
 * @param req - The `req` parameter is the request object that contains information about the incoming
 * HTTP request, such as the request headers, query parameters, and body.
 * @param res - The `res` parameter is the response object that is used to send the HTTP response back
 * to the client. It contains methods and properties that allow you to set the response status code,
 * headers, and body. In this code snippet, it is used to send the response with the fetched sauda
 * details
 * @returns a response with a status code and a JSON object. The status code is determined by the value
 * of `http_status_code_enum.ok` (which typically represents a successful request) or
 * `http_status_code_enum.bad_request` (which typically represents a failed request). The JSON object
 * contains the properties `success`, `message`, and `sauda_details`. The `success` property
 */
const fetch_sauda_details_from_ml_controller = async (req, res) => {
    try {
        const sauda_id = +req.query.sauda_id;
        const supplier_mobile_number = req.user.mobile_number.toString() || null;

        if (!sauda_id) {
            throw new ValidationError(error.no_sauda_id);
        }
        if (!supplier_mobile_number) {
            throw new ValidationError(error.no_supplier_mobile_number);
        }

        // fetching details of a specific sauda
        const sauda_details = await fetch_sauda_details_from_ml_service(sauda_id, supplier_mobile_number);

        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'successfull', sauda_details));
    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}

module.exports = fetch_sauda_details_from_ml_controller



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sauda/controllers/fetch_sauda_truck_details_from_ml_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const fetch_sauda_truck_details_from_ml_service = require('../services/fetch_sauda_truck_details_from_ml_service');
const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * The function fetches truck details of a specific sauda (transaction) from a service
 * and returns the details as a JSON response.
 * @param req - The `req` parameter is the request object that contains information about the HTTP
 * request made by the client. It includes details such as the request method, headers, query
 * parameters, and body.
 * @param res - The `res` parameter is the response object that is used to send the HTTP response back
 * to the client. It contains methods and properties that allow you to set the response status code,
 * headers, and body. In this code snippet, it is used to send the JSON response back to the client
 * with
 * @returns a JSON response with the truck details fetched from the
 * `fetch_sauda_truck_details_from_ml_service` function. The response has a status code of `200` (OK)
 * and a success message.
 */
const fetch_sauda_truck_details_from_ml_controller = async (req, res) => {
    try {
        const truck_id = +req.query.truck_id;
        const supplier_mobile_number = req.user.mobile_number.toString() || null;

        if (!truck_id) {
            throw new ValidationError(error.no_truck_id);
        }
        if (!supplier_mobile_number) {
            throw new ValidationError(error.no_supplier_mobile_number);
        }

        // fetching truck details of a specific sauda
        const truck_details = await fetch_sauda_truck_details_from_ml_service(truck_id, supplier_mobile_number);

        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'successfull', truck_details));
    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}

module.exports = fetch_sauda_truck_details_from_ml_controller



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sauda/controllers/create_sauda_from_ml_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const create_sauda_from_ml_service = require('../services/create_sauda_from_ml_service');
const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        /* The code is extracting values from the request object (`req`) and assigning them to
        variables. */
        const merchant_mobile_number = req.user.mobile_number.toString() || null;
        const trade_price_id = +req.body.trade_price_id || null;
        const quantity = +req.body.quantity || null;
        const quantity_unit_id = +req.body.quantity_unit_id || null;
        const broker_id = req.body.broker_id || null;

        if (!trade_price_id || !quantity || !quantity_unit_id) {
            throw new ValidationError(error.sauda_details_check);
        }
        if (!merchant_mobile_number) {
            throw new ValidationError(error.no_supplier_mobile_number);
        }

        // passing sauda details to get saved in the b2b side
        const sauda_details = await create_sauda_from_ml_service(merchant_mobile_number, trade_price_id, quantity, quantity_unit_id, broker_id);

        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'successfull', sauda_details));
    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sauda/controllers/send_payment_confirmation_notification_to_suppliers_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const send_payment_confirmation_notification_to_suppliers_service = require('../services/send_payment_confirmation_notification_to_suppliers_service');
const language_enums = require('../../../../enums/global/language');
const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * The function `send_payment_confirmation_notification_to_suppliers_controller` sends a payment
 * confirmation notification to suppliers.
 * @param req - The `req` parameter is the request object that contains information about the HTTP
 * request made to the server. It includes details such as the request headers, request body, request
 * method, and request URL.
 * @param res - The `res` parameter is the response object that will be sent back to the client. It is
 * used to send the HTTP response with the appropriate status code and response data.
 * @returns a response with a status code and a JSON object. The status code is either 200 (OK) or 400
 * (Bad Request), depending on whether the function executed successfully or encountered an error. The
 * JSON object contains a boolean value indicating whether the operation was successful, a message
 * describing the result, and the notification confirmation data.
 */
const send_payment_confirmation_notification_to_suppliers_controller = async (req, res) => {
    try {
        const supplier_mobile_number = +req.body.merchant_mobile_number.toString() || null;
        const sauda_id = +req.body.sauda_id;
        const truck_id = +req.body.po_id;
        const language_id = language_enums.hindi;
        const file_name = req.body.media_name;
        const link = req.body.media_link;
        const utr = req.body.utr;
        const media = {};
        if (file_name && link) {
            media.fileName = file_name
            media.link = link
        }

        if (!truck_id || !sauda_id || !supplier_mobile_number) {
            throw new ValidationError(error.no_sauda_id_or_truck_id_or_supplier_mobile_number);
        }

        // sending notification to provide the payment confirmation to the supplier
        const notification_confirmation = await send_payment_confirmation_notification_to_suppliers_service(supplier_mobile_number, sauda_id, truck_id, utr, language_id, media);

        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'successfull', notification_confirmation));
    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}

module.exports = send_payment_confirmation_notification_to_suppliers_controller



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sauda/services/save_supplier_po_decision_from_ml_service.js
const error_log = require('../../../../middelware/error_log');
const { save_supplier_po_decision_from_ml } = require('../../../../data_abstraction_layer/sauda/save_supplier_po_decision_from_ml');
const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * The function `save_supplier_po_decision_from_ml_service` saves the supplier's purchase order
 * decision for a sauda (transaction) and returns the confirmation data.
 * @param sauda_id - The `sauda_id` parameter is the ID of the sauda (a transaction or order) for which
 * the supplier PO decision is being saved. It is used to identify the specific sauda in the system.
 * @param sauda_status_id - The `sauda_status_id` parameter is used to identify the status of a 'sauda'
 * (a transaction or deal). It is an identifier that represents the current status of the sauda, such
 * as 'accepted', 'rejected', or any other relevant status.
 * @returns The function `save_supplier_po_decision_from_ml_service` returns the data received from
 * saving the supplier PO decision.
 */
const save_supplier_po_decision_from_ml_service = async (sauda_id, sauda_status_id, merchant_mobile_number) => {
    try { // saving supplier po details like whether they accepted/rejected the sauda
        const supplier_po_decision_confirmation = await save_supplier_po_decision_from_ml({ sauda_id, sauda_status_id, merchant_mobile_number });
        if (!supplier_po_decision_confirmation || !supplier_po_decision_confirmation?.data) {
            throw new ValidationError(error.no_confirmation_of_saving_supplier_po_decision_received);
        }
        return supplier_po_decision_confirmation?.data?.data;
    } catch (err) {
        error_log(err);
        throw err;
    }
}

module.exports = save_supplier_po_decision_from_ml_service



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sauda/services/send_sauda_status_notifications_to_suppliers_service.js
const error_log = require('../../../../middelware/error_log');
const error = require('../../../../config/errors');
const { send_notification } = require('../../../../common_services/whatsapp/send_notification');
const { fetch_sauda_details_from_ml } = require('../../../../data_abstraction_layer/sauda/fetch_sauda_details_from_ml');
const payment_term_enums = require('../../../../enums/sauda/payment_term_enums');
const sauda_notification_event_enums = require('../../../../enums/sauda/sauda_notification_event_enums');
const { generate_branch_io_link_service } = require('../../../../common_services/branch_io/generate_link_service')
const utm_enums = require('../../../../enums/branch_io/utm_enum');
const branch_io_enums = require('../../../../enums/branch_io/branch_io_enums');
const country_code = require('../../../../enums/global/country_code');
const { ValidationError } = require('../../../../utilities/error/custom_error');
const send_notification_to_broker = require('../../../../common_services/broker/send_notification_to_broker');

/**
 * The function `send_sauda_status_notification_to_suppliers_service` sends a sauda status notification
 * to suppliers via WhatsApp, based on the sauda status ID and other sauda details.
 * @param supplier_mobile_number - The mobile number of the supplier to whom the sauda status
 * notification will be sent.
 * @param sauda_status_id - The `sauda_status_id` parameter represents the status of a sauda
 * (transaction) and is used to determine the type of notification to be sent to the suppliers. It is
 * an identifier that indicates the current status of the sauda.
 * @param sauda_id - The `sauda_id` parameter is the unique identifier for a sauda (transaction) in the
 * system. It is used to fetch the details of the sauda from the database.
 * @param language_id - The `language_id` parameter is used to specify the language in which the
 * notification should be sent. It is an identifier for the language, such as 'en' for English or 'es'
 * for Spanish.
 * @param media - The `media` parameter is an object that contains media files to be sent along with
 * the notification. It can include images, videos, or any other type of media that can be attached to
 * the notification.
 * @returns The function `send_sauda_status_notification_to_suppliers_service` returns the
 * `notification_confirmation` variable.
 */
const send_sauda_status_notification_to_suppliers_service = async (supplier_mobile_number, sauda_status_id, sauda_id, language_id, media, supplier_name, business_name) => {
    try { // sending sauda status notification to supplier
        const sauda_details = await fetch_sauda_details_from_ml({ sauda_id, supplier_mobile_number });
        if (!sauda_details || !sauda_details?.data || !sauda_details?.data?.data || Object.keys(sauda_details?.data?.data).length === 0) {
            throw new ValidationError(error.no_sauda_found);
        }

        const sauda_farmart_id = sauda_details?.data?.data?.sauda_farmart_id || '';
        const sauda_quantity_with_unit = (sauda_details?.data?.data?.sauda_quantity || '') + ' ' + sauda_details?.data?.data?.sauda_quantity_unit || '';
        const crop_name = sauda_details?.data?.data?.crop_name || '';
        const variety_name = sauda_details?.data?.data?.crop_variety_name || '';
        const gross_price_with_unit = (sauda_details?.data?.data?.sauda_payment_details?.gross_price || 0) + ' ' + (sauda_details?.data?.data?.sauda_payment_details?.gross_price_unit || 0);
        const net_for_price_with_unit = (sauda_details?.data?.data?.sauda_payment_details?.net_price || 0) + ' ' + (sauda_details?.data?.data?.sauda_payment_details?.net_price_unit || 0);
        const net_buyer_price_with_unit = (sauda_details?.data?.data?.sauda_payment_details?.net_buyer_price || 0) + ' ' + (sauda_details?.data?.data?.sauda_payment_details?.net_buyer_price_unit || 0);
        const delivery_address = (sauda_details?.data?.data?.buyer_district_name || '') + ', ' + (sauda_details?.data?.data?.buyer_state_name || '');
        const support_mobile_number = sauda_details?.data?.data?.customer_support_number || '';
        const payment_type_id = sauda_details?.data?.data?.payment_for_id || '';
        const payment_type = Object.keys(payment_term_enums).find(key => payment_term_enums[key] === payment_type_id);
        let broker_mobile_number = Number(sauda_details?.data?.data?.broker_details?.wa_number);
        if (broker_mobile_number) {
            broker_mobile_number = parseInt(country_code.india.toString() + broker_mobile_number);
        }
        const broker_name = sauda_details?.data?.data?.broker_details?.name;
        const buyer_name = sauda_details?.data?.data?.buyer_name;
        const crop_name_with_variety = crop_name + ' ' + variety_name;

        const expected_delivery_date = new Date(sauda_details?.data?.data?.fulfillment_time?.full_date).toLocaleDateString() || '';
        let branch_io_variable;
        // generating branch_io link for this trade_id
        let branch_io_link = await generate_branch_io_link_service({ props: { sauda_id }, utm: utm_enums.whatsapp, branch_io_enums_id: branch_io_enums.sauda_detail });
        if (branch_io_link) {
            branch_io_link = branch_io_link?.branchUrl || ''
            // Split the URL by '/'
            const parts = branch_io_link.split('/');

            // The last part of the branch_io_link is the part we're looking for
            branch_io_variable = parts[parts.length - 1];
        }

        let whatsapp_event_id;
        supplier_mobile_number = parseInt(country_code.india.toString() + supplier_mobile_number);

        // supplier notification body
        const body = {};
        body.recipentMobileNumbers = [supplier_mobile_number];
        body.languageId = language_id;
        body.priority = 1; // 1-transactional 2-promotional
        if (Object.keys(media).length > 0) {
            body.media = media
        }

        // broker notification body
        const broker_notification_body = {}
        broker_notification_body.recipentMobileNumbers = [broker_mobile_number];
        broker_notification_body.languageId = language_id;
        broker_notification_body.priority = 1; // 1-transactional 2-promotional
        if (Object.keys(media).length > 0) {
            broker_notification_body.media = media
        }
        let send_broker_notification = false

        switch (sauda_status_id) {
        case sauda_notification_event_enums.sauda_status.sauda_in_review:
            body.variables = {
                buyer_name,
                sauda_farmart_id,
                crop_name,
                variety_name,
                sauda_quantity_with_unit,
                gross_price_with_unit,
                net_price_with_unit: net_buyer_price_with_unit,
                net_for_price_with_unit, // Net 'FOR' Price with unit
                delivery_address,
                support_mobile_number,
                branch_io_variable
            }
            whatsapp_event_id = sauda_notification_event_enums.sauda_status.sauda_in_review;
            body.whatsappEventName = Object.keys(sauda_notification_event_enums.sauda_status).find(key => sauda_notification_event_enums.sauda_status[key] === whatsapp_event_id)
            break;

        case sauda_notification_event_enums.sauda_status.po_acceptance_pending:
            body.variables = {
                buyer_name,
                sauda_quantity_with_unit,
                crop_name_with_variety,
                payment_type,
                gross_price_with_unit,
                net_price_with_unit: net_buyer_price_with_unit,
                net_for_price_with_unit, // Net 'FOR' Price with unit
                delivery_address,
                expected_delivery_date,
                support_mobile_number,
                branch_io_variable
            }
            whatsapp_event_id = sauda_notification_event_enums.sauda_status.po_acceptance_pending;
            body.whatsappEventName = Object.keys(sauda_notification_event_enums.sauda_status).find(key => sauda_notification_event_enums.sauda_status[key] === whatsapp_event_id)
            break;

        case sauda_notification_event_enums.sauda_status.sauda_booked:
            body.variables = {
                sauda_farmart_id,
                buyer_name,
                expected_delivery_date,
                support_mobile_number,
                branch_io_variable
            }
            whatsapp_event_id = sauda_notification_event_enums.sauda_status.sauda_booked;
            body.whatsappEventName = Object.keys(sauda_notification_event_enums.sauda_status).find(key => sauda_notification_event_enums.sauda_status[key] === whatsapp_event_id)
            // send to broker when sauda is booked
            if (broker_mobile_number) {
                broker_notification_body.variables = {
                    broker_name,
                    supplier_or_firm_name: business_name || supplier_name || '',
                    sauda_farmart_id,
                    sauda_quantity_with_unit,
                    crop_variety_name: crop_name + ' (' + variety_name + ')',
                    net_price_with_unit: net_buyer_price_with_unit,
                    buyer_name,
                    delivery_address,
                    payment_type,
                    expected_delivery_date
                }
                broker_notification_body.whatsappEventName = 'broker_' + Object.keys(sauda_notification_event_enums.sauda_status).find(key => sauda_notification_event_enums.sauda_status[key] === whatsapp_event_id)
                send_broker_notification = true
            }
            break;

        case sauda_notification_event_enums.sauda_status.sauda_cancelled:
            branch_io_variable = 'Z87QUbdFWGb';
            body.variables = {
                sauda_farmart_id,
                crop_name,
                variety_name,
                sauda_quantity_with_unit,
                buyer_name,
                branch_io_variable
            }
            whatsapp_event_id = sauda_notification_event_enums.sauda_status.sauda_cancelled;
            body.whatsappEventName = Object.keys(sauda_notification_event_enums.sauda_status).find(key => sauda_notification_event_enums.sauda_status[key] === whatsapp_event_id)
            break;

        case sauda_notification_event_enums.sauda_status.sauda_rejected:
            branch_io_variable = 'Z87QUbdFWGb';
            body.variables = {
                sauda_farmart_id,
                // sauda_farmart_id, // Duplicate key name not needed to send
                crop_name,
                variety_name,
                sauda_quantity_with_unit,
                buyer_name,
                branch_io_variable
            }
            whatsapp_event_id = sauda_notification_event_enums.sauda_status.sauda_rejected;
            body.whatsappEventName = Object.keys(sauda_notification_event_enums.sauda_status).find(key => sauda_notification_event_enums.sauda_status[key] === whatsapp_event_id)
            break;

        case sauda_notification_event_enums.sauda_status.sauda_completed:
            body.variables = {
                sauda_farmart_id,
                support_mobile_number,
                branch_io_variable
            }
            whatsapp_event_id = sauda_notification_event_enums.sauda_status.sauda_completed;
            body.whatsappEventName = Object.keys(sauda_notification_event_enums.sauda_status).find(key => sauda_notification_event_enums.sauda_status[key] === whatsapp_event_id)
            // send to broker when sauda is completed
            if (broker_mobile_number) {
                broker_notification_body.variables = {
                    broker_name,
                    supplier_or_firm_name: business_name || supplier_name || '',
                    sauda_farmart_id,
                    support_mobile_number
                }
                broker_notification_body.whatsappEventName = 'broker_' + Object.keys(sauda_notification_event_enums.sauda_status).find(key => sauda_notification_event_enums.sauda_status[key] === whatsapp_event_id)
                send_broker_notification = true
            }
            break;

        case sauda_notification_event_enums.sauda_status.po_rejected:
            branch_io_variable = 'Z87QUbdFWGb';
            body.variables = {
                sauda_farmart_id,
                branch_io_variable
            }
            whatsapp_event_id = sauda_notification_event_enums.sauda_status.po_rejected;
            body.whatsappEventName = Object.keys(sauda_notification_event_enums.sauda_status).find(key => sauda_notification_event_enums.sauda_status[key] === whatsapp_event_id)
            break;

        default:
            throw new ValidationError(error.invalid_sauda_status_id);
        }

        const notification_confirmation = await send_notification({ body });
        if (!notification_confirmation || !notification_confirmation?.data || !notification_confirmation?.data?.data) {
            throw new ValidationError(error.no_confirmation_whatsapp_notification);
        }
        if (send_broker_notification) {
            await send_notification_to_broker(broker_notification_body)
        }

        return notification_confirmation?.data?.data;
    } catch (err) {
        error_log(err);
        throw err;
    }
}

module.exports = send_sauda_status_notification_to_suppliers_service



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sauda/services/create_sauda_from_ml_service.js
const error_log = require('../../../../middelware/error_log');
const { create_sauda_from_ml } = require('../../../../data_abstraction_layer/sauda/create_sauda_from_ml');
const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (merchant_mobile_number, trade_price_id, quantity, quantity_unit_id, broker_id) => {
    try {
        // saving sauda details by calling b2b api in the abstraction layer
        const sauda_details = await create_sauda_from_ml({ merchant_mobile_number, trade_price_id, quantity, quantity_unit_id, broker_id });
        if (!sauda_details || !sauda_details?.data) {
            throw new ValidationError(error.sauda_not_saved);
        }
        return sauda_details?.data?.data;
    } catch (err) {
        error_log(err);
        throw err;
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sauda/services/fetch_sauda_details_from_ml_service.js
const error_log = require('../../../../middelware/error_log');
const { fetch_sauda_details_from_ml } = require('../../../../data_abstraction_layer/sauda/fetch_sauda_details_from_ml');
const fetch_tnc = require('./fetch_tnc');

const error = require('../../../../config/errors');
// const sauda_status_enums = require('../../../../enums/sauda/sauda_status_enums');
// const po_status_enums = require('../../../../enums/sauda/po_status_enums');
const language_enums = require('../../../../enums/global/language');
const feature_enums = require('../../../../enums/features/features_enum');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * The function fetches sauda details from a service based on a sauda ID and performs
 * some additional operations on the data.
 * @param sauda_id - The `sauda_id` parameter is the unique identifier of a specific sauda
 * (transaction) for which you want to fetch the details.
 * @returns The function `fetch_sauda_details_from_ml_service` returns the `data` property of the
 * `sauda_details` object.
 */
const fetch_sauda_details_from_ml_service = async (sauda_id, supplier_mobile_number) => {
    try { // fetching sauda details of a specific sauda through sauda_id
        const sauda_details = await fetch_sauda_details_from_ml({ sauda_id, supplier_mobile_number });
        if (!sauda_details || !sauda_details?.data || !sauda_details?.data?.data || Object.keys(sauda_details?.data?.data).length === 0) {
            throw new ValidationError(error.no_sauda_found);
        }
        const tnc_details = await fetch_tnc(language_enums.hindi, feature_enums.trade)
        if (tnc_details.length > 0) {
            sauda_details.data.data.tnc_doc = tnc_details[0].tnc_doc_url
        }

        return sauda_details?.data?.data;
    } catch (err) {
        error_log(err);
        throw err;
    }
}

module.exports = fetch_sauda_details_from_ml_service



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sauda/services/send_payment_confirmation_notification_to_suppliers_service.js
const error_log = require('../../../../middelware/error_log');
const error = require('../../../../config/errors');
const { send_notification } = require('../../../../common_services/whatsapp/send_notification');
const { fetch_sauda_details_from_ml } = require('../../../../data_abstraction_layer/sauda/fetch_sauda_details_from_ml');
const { fetch_sauda_truck_details_from_ml } = require('../../../../data_abstraction_layer/sauda/fetch_sauda_truck_details_from_ml');
const sauda_notification_event_enums = require('../../../../enums/sauda/sauda_notification_event_enums');
const { generate_branch_io_link_service } = require('../../../../common_services/branch_io/generate_link_service')
const utm_enums = require('../../../../enums/branch_io/utm_enum');
const branch_io_enums = require('../../../../enums/branch_io/branch_io_enums');
const country_code = require('../../../../enums/global/country_code');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * The function `send_payment_confirmation_notification_to_suppliers_service` sends a payment
 * confirmation notification to a supplier using the provided parameters.
 * @param supplier_mobile_number - The mobile number of the supplier to whom the payment confirmation
 * notification will be sent.
 * @param sauda_id - The `sauda_id` parameter is the ID of the sauda (transaction) for which the
 * payment confirmation notification needs to be sent to the suppliers.
 * @param truck_id - The `truck_id` parameter is the unique identifier of the truck associated with the
 * payment confirmation.
 * @param language_id - The `language_id` parameter is used to specify the language in which the
 * notification should be sent. It is an identifier for the language, such as 'en' for English or 'es'
 * for Spanish.
 * @param media - The `media` parameter is an object that contains information about any media files
 * that you want to include in the notification. It can have the following properties:
 * @returns The function `send_payment_confirmation_notification_to_suppliers_service` returns the
 * result of the `send_notification` function call, which is the confirmation of the payment
 * notification being sent.
 */
const send_payment_confirmation_notification_to_suppliers_service = async (supplier_mobile_number, sauda_id, truck_id, utr, language_id, media) => {
    try { // sending payment confirmation notification to supplier
        const sauda_details = await fetch_sauda_details_from_ml({ sauda_id, supplier_mobile_number });
        if (!sauda_details || !sauda_details?.data || !sauda_details?.data?.data || Object.keys(sauda_details?.data?.data).length === 0) {
            throw new ValidationError(error.no_sauda_found);
        }

        const truck_details = await fetch_sauda_truck_details_from_ml({ truck_id, supplier_mobile_number });
        if (!truck_details || !truck_details?.data || !truck_details?.data?.data || Object.keys(truck_details?.data?.data).length === 0) {
            throw new ValidationError(error.no_truck_detail_found);
        }

        const vehicle_number = truck_details?.data?.data?.vehicle_number || '';
        const sauda_farmart_id = sauda_details?.data?.data?.sauda_farmart_id || '';
        const support_mobile_number = sauda_details?.data?.data?.customer_support_number || '';
        const current_transaction = truck_details?.data?.data?.transactions?.filter(transaction => transaction.utr === utr);
        let amount_paid = 0;
        if (current_transaction.length > 0) {
            amount_paid = parseFloat(current_transaction?.[0]?.amount) || 0;
        }
        let branch_io_variable;
        // generating branch_io link for this trade_id
        let branch_io_link = await generate_branch_io_link_service({ props: { sauda_id, truck_id }, utm: utm_enums.whatsapp, branch_io_enums_id: branch_io_enums.truck_detail });

        if (branch_io_link) {
            branch_io_link = branch_io_link?.branchUrl || ''
            // Split the URL by '/'
            const parts = branch_io_link.split('/');

            // The last part of the branch_io_link is the part we're looking for
            branch_io_variable = parts[parts.length - 1];
        }
        supplier_mobile_number = parseInt(country_code.india.toString() + supplier_mobile_number);
        const body = { };
        body.recipentMobileNumbers = [supplier_mobile_number];
        body.languageId = language_id;
        body.priority = 1; // 1-transactional 2-promotional
        if (Object.keys(media).length > 0) {
            body.media = media
        }
        body.variables = {
            vehicle_number,
            sauda_farmart_id,
            amount_paid,
            support_mobile_number,
            branch_io_variable
        }
        const whatsapp_event_id = sauda_notification_event_enums.po_status.payment_confirmation;
        body.whatsappEventName = Object.keys(sauda_notification_event_enums.po_status).find(key => sauda_notification_event_enums.po_status[key] === whatsapp_event_id)

        const notification_confirmation = await send_notification({ body });
        if (!notification_confirmation || !notification_confirmation?.data || !notification_confirmation?.data?.data) {
            throw new ValidationError(error.no_confirmation_whatsapp_notification);
        }

        return notification_confirmation?.data?.data;
    } catch (err) {
        error_log(err);
        throw err;
    }
}

module.exports = send_payment_confirmation_notification_to_suppliers_service



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sauda/services/fetch_sauda_truck_details_from_ml_service.js
const error_log = require('../../../../middelware/error_log');
const { fetch_sauda_truck_details_from_ml } = require('../../../../data_abstraction_layer/sauda/fetch_sauda_truck_details_from_ml');
const error = require('../../../../config/errors');
// const po_status_enums = require('../../../../enums/sauda/po_status_enums');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * The function fetches truck details of a specific sauda using the sauda_id and truck_id.
 * @param truck_id - The `truck_id` parameter is used to specify the ID of the truck for which you want
 * to fetch the details.
 * @returns The function `fetch_sauda_truck_details_from_ml_service` returns the truck details of a
 * specific sauda (transaction) fetched from the ML.
 */
const fetch_sauda_truck_details_from_ml_service = async (truck_id, supplier_mobile_number) => {
    try { // fetching truck details of a specific sauda through sauda_id and truck_id
        const truck_details = await fetch_sauda_truck_details_from_ml({ truck_id, supplier_mobile_number });
        if (!truck_details || !truck_details?.data || !truck_details?.data?.data || Object.keys(truck_details?.data?.data).length === 0) {
            throw new ValidationError(error.no_truck_detail_found);
        }

        return truck_details?.data?.data;
    } catch (err) {
        error_log(err);
        throw err;
    }
}

module.exports = fetch_sauda_truck_details_from_ml_service



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sauda/services/send_po_status_notifications_to_suppliers_service.js
const error_log = require('../../../../middelware/error_log');
const error = require('../../../../config/errors');
const sauda_notification_event_enums = require('../../../../enums/sauda/sauda_notification_event_enums');
const { send_notification } = require('../../../../common_services/whatsapp/send_notification');
const { fetch_sauda_truck_details_from_ml } = require('../../../../data_abstraction_layer/sauda/fetch_sauda_truck_details_from_ml')
const { fetch_sauda_details_from_ml } = require('../../../../data_abstraction_layer/sauda/fetch_sauda_details_from_ml');
const { generate_branch_io_link_service } = require('../../../../common_services/branch_io/generate_link_service')
const utm_enums = require('../../../../enums/branch_io/utm_enum');
const branch_io_enums = require('../../../../enums/branch_io/branch_io_enums');
const country_code = require('../../../../enums/global/country_code');
const { ValidationError } = require('../../../../utilities/error/custom_error');
const po_status_enums = require('../../../../enums/sauda/po_status_enums');

/**
 * The function `send_po_status_notification_to_suppliers_service` sends a notification to suppliers
 * regarding the status of a purchase order.
 * @param supplier_mobile_number - The mobile number of the supplier to whom the notification will be
 * sent.
 * @param po_status_id - The `po_status_id` parameter represents the status of the purchase order (PO).
 * It is used to determine the type of notification to be sent to the suppliers. The possible values
 * for `po_status_id` are defined in the `sauda_notification_event_enums.po_status` object.
 * @param sauda_id - The `sauda_id` parameter is the ID of the sauda (transaction) for which the
 * notification is being sent to the supplier. It is used to fetch the details of the sauda from the
 * database or an external API.
 * @param truck_id - The `truck_id` parameter is the unique identifier of the truck associated with the
 * purchase order. It is used to fetch the details of the truck from the database.
 * @param language_id - The `language_id` parameter is used to specify the language in which the
 * notification should be sent to the supplier. It is an identifier for the language, such as 'en' for
 * English or 'es' for Spanish.
 * @param media - The `media` parameter is an object that contains media files to be sent along with
 * the notification. It can have the following properties:
 * @returns The function `send_po_status_notification_to_suppliers_service` returns the
 * `notification_confirmation` variable.
 */
const send_po_status_notification_to_suppliers_service = async (supplier_mobile_number, po_status_id, sauda_id, truck_id, language_id, media) => {
    try { // sending po status notification to supplier
        const sauda_details = await fetch_sauda_details_from_ml({ sauda_id, supplier_mobile_number });
        if (!sauda_details || !sauda_details?.data || !sauda_details?.data?.data || Object.keys(sauda_details?.data?.data).length === 0) {
            throw new ValidationError(error.no_sauda_found);
        }

        const truck_details = await fetch_sauda_truck_details_from_ml({ truck_id, supplier_mobile_number });
        if (!truck_details || !truck_details?.data || !truck_details?.data?.data || Object.keys(truck_details?.data?.data).length === 0) {
            throw new ValidationError(error.no_truck_detail_found);
        }
        const sauda_quantity = Number(sauda_details?.data?.data?.sauda_quantity)
        const sauda_quantity_calculated = (sauda_details?.data?.data?.sauda_quantity_unit_id === 2) ? sauda_quantity * 100 : sauda_quantity

        const sauda_farmart_id = sauda_details?.data?.data?.sauda_farmart_id || '';
        const vehicle_number = truck_details?.data?.data?.vehicle_number || '';
        const dispatched_quantity = (truck_details?.data?.data?.dispatched_weight || 0) + ' ' + (truck_details?.data?.data?.dispatched_weight_unit || '');
        const delivered_quantity = (truck_details?.data?.data?.delivered_weight || 0) + ' ' + (truck_details?.data?.data?.delivered_weight_unit || '');

        let total_delivered_quantity = 0
        // code to iterate add all truck delivered weight in sauda_details.po_details array and then substract from total quanity
        for (let i = 0; i < sauda_details?.data?.data?.po_details?.length; i++) {
            const po_detail = sauda_details?.data?.data?.po_details[i];
            if ([po_status_enums.truck_unloaded, po_status_enums.buyer_quality_report].includes(po_detail?.po_status_id)) {
                total_delivered_quantity += po_detail?.delivered_weight;
            }
        }
        const remaining_quantity = ((sauda_quantity_calculated || 0) - total_delivered_quantity) + ' ' + (truck_details?.data?.data?.delivered_weight_unit || '');

        const expected_delivery_date = new Date(sauda_details?.data?.data?.fulfillment_time?.full_date).toLocaleDateString() || '';
        const delivery_address = (sauda_details?.data?.data?.buyer_district_name || '') + ', ' + (sauda_details?.data?.data?.buyer_state_name || '');
        const fullfillment_date = new Date(sauda_details?.data?.data?.fulfillment_time?.full_date).toLocaleDateString() || '';

        const support_mobile_number = sauda_details?.data?.data?.customer_support_number || '';

        const body = {};
        supplier_mobile_number = parseInt(country_code.india.toString() + supplier_mobile_number);
        let whatsapp_event_id;
        body.recipentMobileNumbers = [supplier_mobile_number];
        body.languageId = language_id;
        body.priority = 1; // 1-transactional 2-promotional
        if (Object.keys(media).length > 0) {
            body.media = media
        }

        let branch_io_variable;
        // generating branch_io link for this trade_id
        let branch_io_link = await generate_branch_io_link_service({ props: { sauda_id, truck_id }, utm: utm_enums.whatsapp, branch_io_enums_id: branch_io_enums.truck_detail });
        if (branch_io_link) {
            branch_io_link = branch_io_link?.branchUrl || ''
            // Split the URL by '/'
            const parts = branch_io_link.split('/');

            // The last part of the branch_io_link is the part we're looking for
            branch_io_variable = parts[parts.length - 1];
        }

        switch (po_status_id) {
        case sauda_notification_event_enums.po_status.truck_dispatched:
            body.variables = {
                vehicle_number,
                sauda_farmart_id,
                dispatched_quantity,
                remaining_quantity,
                expected_delivery_date,
                fullfillment_date,
                delivery_address,
                branch_io_variable
            }
            whatsapp_event_id = sauda_notification_event_enums.po_status.truck_dispatched;
            body.whatsappEventName = Object.keys(sauda_notification_event_enums.po_status).find(key => sauda_notification_event_enums.po_status[key] === whatsapp_event_id)
            break;

        case sauda_notification_event_enums.po_status.truck_unloaded:
            body.variables = {
                vehicle_number,
                sauda_farmart_id,
                delivered_quantity,
                expected_delivery_date,
                delivery_address,
                branch_io_variable
            }
            whatsapp_event_id = sauda_notification_event_enums.po_status.truck_unloaded;
            body.whatsappEventName = Object.keys(sauda_notification_event_enums.po_status).find(key => sauda_notification_event_enums.po_status[key] === whatsapp_event_id)
            break;

        case sauda_notification_event_enums.po_status.buyer_quality_report:
            body.variables = {
                vehicle_number,
                sauda_farmart_id,
                expected_delivery_date,
                delivery_address,
                branch_io_variable
            }
            whatsapp_event_id = sauda_notification_event_enums.po_status.buyer_quality_report;
            body.whatsappEventName = Object.keys(sauda_notification_event_enums.po_status).find(key => sauda_notification_event_enums.po_status[key] === whatsapp_event_id)
            break;

        case sauda_notification_event_enums.po_status.truck_rejected:
            body.variables = {
                vehicle_number,
                sauda_farmart_id,
                remaining_quantity,
                expected_delivery_date,
                delivery_address,
                support_mobile_number,
                branch_io_variable
            }
            whatsapp_event_id = sauda_notification_event_enums.po_status.truck_rejected;
            body.whatsappEventName = Object.keys(sauda_notification_event_enums.po_status).find(key => sauda_notification_event_enums.po_status[key] === whatsapp_event_id)
            break;

        default:
            throw new ValidationError(error.invalid_po_status_id);
        }

        const notification_confirmation = await send_notification({ body });
        if (!notification_confirmation || !notification_confirmation?.data || !notification_confirmation?.data?.data) {
            throw new ValidationError(error.no_confirmation_whatsapp_notification);
        }

        return notification_confirmation?.data?.data;
    } catch (err) {
        error_log(err);
        throw err;
    }
}

module.exports = send_po_status_notification_to_suppliers_service



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sauda/services/fetch_tnc.js
const error_log = require('../../../../middelware/error_log');
const { get_tnc_by_feature_id_or_language_id } = require('../../../../data_abstraction_layer/tnc/terms_and_condtions');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (language_id, feature_id) => {
    try {
        // fetching tnc list
        const tnc_list = await get_tnc_by_feature_id_or_language_id({ language_id, feature_id });
        if (tnc_list.length === 0) {
            throw new ValidationError('no tnc mapped');
        }
        return tnc_list;
    } catch (err) {
        error_log(err);
        throw err;
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sauda/services/verify_broker_code_from_ml_service.js
const error_log = require('../../../../middelware/error_log');
const { verify_broker_code_from_ml } = require('../../../../data_abstraction_layer/sauda/verify_broker_code_from_ml');

const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * This function verifies a broker code from a machine learning service using the provided trade price
 * ID, broker code, and merchant mobile number.
 * @param trade_price_id - Trade price ID is a unique identifier for a specific trade price in the
 * system. It is used to reference and retrieve information related to a particular trade price.
 * @param broker_code - The `broker_code` parameter is a code that identifies a specific broker or
 * intermediary involved in a trade transaction. It is used to verify the authenticity of the broker
 * associated with the given `trade_price_id` and `merchant_mobile_number` during the verification
 * process in the `verify_broker_code_from_ml
 * @param merchant_mobile_number - The `merchant_mobile_number` parameter typically refers to the
 * mobile number of the merchant or seller involved in a trade or transaction. It is used as a unique
 * identifier for the merchant within the system or platform.
 * @returns The function `verify_broker_code_from_ml_service` is returning the data received from the
 * ML service after verifying the broker code. It is returning `response?.data?.data`.
 */
const verify_broker_code_from_ml_service = async (broker_code) => {
    try {
        const response = await verify_broker_code_from_ml({ broker_code });
        if (!response || !response?.data || !response?.data?.data) {
            throw new ValidationError(error.invalid_broker_code);
        }

        return response?.data?.data;
    } catch (err) {
        error_log(err);
        throw err;
    }
}

module.exports = verify_broker_code_from_ml_service



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sauda/services/fetch_sauda_list_from_ml_service.js
const error_log = require('../../../../middelware/error_log');
const { fetch_sauda_list_from_ml } = require('../../../../data_abstraction_layer/sauda/fetch_sauda_list_from_ml');
const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');

// const sauda_status_enum = require('../../../../enums/sauda/sauda_status_enums');
/* The code is exporting an asynchronous function as the module's default export. The function takes
three parameters: `order_status`, `page_no`, and `limit`. */

module.exports = async (order_status, page_no, limit, merchant_mobile_number) => {
    try {

        // fetching sauda list
        const sauda_list = await fetch_sauda_list_from_ml({ order_status, page_no, limit, merchant_mobile_number });
        if (!sauda_list || !sauda_list?.data || !sauda_list?.data?.data) {
            throw new ValidationError(error.saudas_not_found);
        }

        // sauda_list.data.data.sauda_list = await Promise.all(sauda_list.data.data.sauda_list.map(async element=>
        //     {
        //         if(order_status){
        //             element.sauda_status_id = Number(order_status)
        //         }
        //         else{
        //             if (is_open ===  '1'){
        //                 //random number between 1-3
        //                 element.sauda_status_id = Math.floor(Math.random() * 3) + 1;
        //             }
        //             else{
        //                 //random number between 4-7
        //                 element.sauda_status_id = Math.floor(Math.random() * 4) + 4;  // 4-7
        //             }
        //         }

        //         element.sauda_status = Object.keys(sauda_status_enum).find(key => sauda_status_enum[key] === element.sauda_status_id);

        //         return element;
        // }))
        return sauda_list?.data?.data;
    } catch (err) {
        error_log(err);
        throw err;
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sales/swagger/index.js
module.exports = {
    tags: {
        name: 'sales'
    },
    paths: {
        '/buyer': {
            get: {
                tags: ['sales'],
                summary: 'get all buyer on the bases of status',
                description: '',
                operationId: 'get_all_buyers',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'status',
                        description: '',
                        type: 'integer'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            },
            patch: {
                tags: ['sales'],
                summary: 'edit buyer',
                description: '',
                operationId: 'patch_buyer',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        required: true,
                        schema: {
                            properties: {
                                buyerId: {
                                    type: 'number'
                                },
                                state: {
                                    type: 'string'
                                },
                                district: {
                                    type: 'string'
                                },
                                pincode: {
                                    type: 'string'
                                },
                                status: {
                                    type: 'integer'
                                },
                                gstStatus: {
                                    type: 'integer'
                                },
                                pancardNumber: {
                                    type: 'string'
                                },
                                gstNumber: {
                                    type: 'string'
                                },
                                email: {
                                    type: 'string'
                                },
                                mobileNumber: {
                                    type: 'string'
                                },
                                annualTurnover: {
                                    type: 'integer'
                                },
                                product: {
                                    type: 'string'
                                },
                                repaymentTimeline: {
                                    type: 'integer'
                                },
                                workingCrops: {
                                    type: 'array',
                                    items: {
                                        properties: [],
                                        type: 'string'
                                    }
                                }
                            }
                        }
                    }

                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/buyer/order': {
            get: {
                tags: ['sales'],
                summary: 'get all sales order',
                description: '',
                operationId: 'get_all_sales_order',
                security: [{ Bearer: ['read'] }],
                parameters: [],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/buyer/order/{order_id}': {
            patch: {
                tags: ['sales'],
                summary: 'update sales order service',
                description: '',
                operationId: 'update_sales_order',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'path',
                        name: 'order_id',
                        description: '',
                        type: 'string'
                    },
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        required: true,
                        schema: {
                            required: ['data_to_update'],
                            properties: {
                                data_to_update: {
                                    type: 'array',
                                    items: {
                                        properties: {
                                            property: {
                                                type: 'string'
                                            },
                                            data: {
                                                type: 'string'
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        }
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sales/index.js
const router = require('express').Router();
const patch_buyer_controller = require('./controllers/patch_buyer_controller');
// const get_sales_order_controller = require('./controllers/get_sales_order_controller');
const update_sales_order_controller = require('./controllers/update_sales_order_controller');
const get_buyer_controller = require('../buyer/controllers/get_buyer_controller');

router.get('/buyer', get_buyer_controller);
router.patch('/buyer', patch_buyer_controller);
/** @deprecated */
// router.get('/buyer/order', get_sales_order_controller);
router.patch('/buyer/order/:order_id', update_sales_order_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sales/controllers/patch_buyer_controller.js
const HTTP_CODE = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const logger = require('../../../../common_services/market_linkage/logging/app_log_service');
const { type: LogType } = require('../../../../enums/market_linkage/enums/appLogEnum');
const user_role = require('../../../../enums/user_profile/user_role');
const { validateMIS, validateVP, validateFC } = require('../services/patch_validator');
const patch_buyer_service = require('../services/patch_buyer_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * Handles patch request for buyer.
 * Allowed roles: Sales_VP, MIS_Sales, Finance_Controller
 * @param {import("express").Request} req
 * @param {import("express").Response} res
 *
 */
const controller = async (req, res) => {
    try {
        const designation = req.user.user_role_id;
        const user_profile_id = req.user.user_profile_id;
        const allowed_designations = [user_role.SALES_VP, user_role.MIS_Executive_Sales, user_role.FINANCE_CONTROLLER];
        if (allowed_designations.includes(designation)) {
            let validated_data;

            if (designation === user_role.SALES_VP) { validated_data = validateVP(req.body); } else if (designation === user_role.MIS_Executive_Sales) { validated_data = validateMIS(req.body); } else { validated_data = validateFC(req.body); }

            const result = await patch_buyer_service(designation, validated_data, user_profile_id);
            return res.status(result.status).json(result.data);
        } else {
            throw new ValidationError('Sales VP, MIS or Finance Controller allowed only.');
        }
    } catch (err) {
        logger({ err, type: LogType.error });
        return res.status(HTTP_CODE.badRequest).json({
            message: err.message
        });
    }
}

module.exports = controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sales/controllers/update_sales_order_controller.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
const update_sales_order_service = require("../services/update_sales_order_service");

const update_sales_order_controller = async function (req, res) {
  try {
    const { data_to_update = [] } = req.body;

    const { order_id } = req.params;

    if (!data_to_update || !order_id) {
      return res.status(HTTP_status_codes.badRequest).json({
        message: "array or prop or data or Id missing",
        error: "Missing params",
      });
    }

    const updated_order_result = await update_sales_order_service({order_id,data_to_update})

    return res.status(updated_order_result.status).json(updated_order_result.data);

  } catch (err) {
    app_log_service({type:type.error,err});
    return res.status(HTTP_status_codes.internalServerError).json({
      message: err.message,
      error: err.message,
    });
  }
};

module.exports = update_sales_order_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sales/controllers/get_sales_order_controller.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
const get_sales_order_service = require("../services/get_sales_order_service");

const get_sales_order_controller = async (req, res) => {
  try {
    const all_sales_order_result = await get_sales_order_service();
    return res.status(all_sales_order_result.status).json(all_sales_order_result.data);
  } catch (e) {
    app_log_service({type:type.error,err:e});
    return res.status(HTTP_status_codes.internalServerError).json({
      message: e.message,
    });
  }
};

module.exports = get_sales_order_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sales/services/get_sales_order_service.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const buyer_order_detail = require("../../../../database/models_v2/buyer_order/buyer_order_detail");
const buyer_order_delivery_info = require("../../../../database/models_v2/buyer_order/buyer_order_delivery_info");
const buyer_order_quality_check = require("../../../../database/models_v2/buyer_order/buyer_order_quality_check");
const buyer_order_crop_info = require("../../../../database/models_v2/buyer_order/buyer_order_crop_info");
const user_profile = require("../../../../database/models/user_profile");
const error_log = require("../../../../middelware/error_log");
const qc_param_types = require("../../../../database/models_v2/procurement_order/qc_param_types");

module.exports = async function (placedByMobileNumber,buyer_order_id) {
  try {
    const filter = {}, main_filter = {};
    if (placedByMobileNumber) {
      const user = await user_profile.findOne({
        where:{
          mobile_number: placedByMobileNumber
        }
      })
      filter.id = user?.id || null;
    }
    if (buyer_order_id){
      main_filter.id = buyer_order_id;
    }
    const order_data = await buyer_order_detail.findAll({
      where: main_filter,
      include: [
        {
          model: buyer_order_delivery_info,
          as: "delivery_info"
        },
        {
          model: buyer_order_quality_check,
          include:[
              {
                  model: qc_param_types
              }
          ],
          as: "quality_checks"
        },
        {
          model: buyer_order_crop_info,
          as: "crop_info"
        },
        {
          model: user_profile,
          as: "placed_by_user",
          where: filter
        }
      ]
    });

    // set expDeliveryIn as Date rather than number.
    // create new Date with createdAt and add expDeliveryIn as date number.

    const buyer_orders = order_data.map((order) => {
      const expDeliveryInDate = new Date(order.createdAt);
      expDeliveryInDate.setDate(
        expDeliveryInDate.getDate() + order.exp_delivery_in
      );
      return {
        status: order.status,
        _id: order.id,
        buyerId: order.buyer_id,
        deliveryInfo: order.delivery_info ? {
          address: order.delivery_info.address,
          district: order.delivery_info.district_name,
          pincode: order.delivery_info.pincode,
          state: order.delivery_info.state_name
        } : null,
        orderQuantityInTon: order.order_quantity_in_ton,
        buyerOfferingPriceQuintal: order.buyer_offering_price_quintal,
        expDeliveryIn: expDeliveryInDate.toISOString(),
        packagingType: order.packaging_type,
        fullfillmentType: order.fullfillment_type,
        qualityChecks: order.quality_checks?.map((qc) => {
          return {
            id: qc.id,
            name: qc.qc_param_type?.name,
            qc_type_id: qc.qc_type_id,
            requiredValue: qc.required_value
          }
        }),
        placedBy: order.placed_by_user ? {
          id: order.placed_by_user.id,
          name: order.placed_by_user.name,
          mobileNumber: order.placed_by_user.mobile_number
        } : null,
        licenceNumber: order.licence_number,
        buyerFacilityGst: order.buyer_facility_gst,
        cashDiscountPercent: order.cash_discount_percent,
        bagDeductionPercent: order.bag_deduction_percent,
        soRepaymentTimeline: order.so_repayment_timeline,
        isInvoiceOnGross: order.is_invoice_on_gross,
        invoiceSharing: order.invoice_sharing,
        farmartId: order.farmart_id,
        remainingQuantity: order.remaining_quantity,
        buyerName: order.buyer_name,
        cropInfo: order.crop_info ? {
          cropId: order.crop_info.crop_id,
          cropName: order.crop_info.crop_name,
          varietyId: order.crop_info.variety_id,
          varietyName: order.crop_info.variety_name
        } : null,
        createdAt: order.createdAt,
        updatedAt: order.updatedAt
      }
    })
    return {
      status: HTTP_status_codes.ok,
      data: buyer_orders
    };
  } catch (err) {
    error_log(err);
    return {
      status: HTTP_status_codes.internalServerError,
      data: {
        message: "Something bad happened",
        error: err.message,
      },
    };
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sales/services/patch_validator.js
const joi = require('joi');
const { BUYER_STATUS, gstStatus, buyerType } = require('../../../../enums/market_linkage/enums/buyerEnum');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const allowedGstStatus = Object.values(gstStatus);
const allowedBuyerTypes = Object.values(buyerType);

const VP_ALLOWED_STATUS = [
    BUYER_STATUS.HOLD,
    BUYER_STATUS.REJECTED_INSUFFICIENT_DOC,
    BUYER_STATUS.REJECTED_POOR_REPAYMENT_HISTORY,
    BUYER_STATUS.APPROVED_BY_VP // pending for credit limit
];

const schemaCommon = {
    buyerId: joi.number().required(),
    traderName: joi.string().trim(),
    legalName: joi.string().trim(),
    gstStatus: joi.number().only().allow(...allowedGstStatus),
    address: joi.string().trim(),
    state: joi.string().trim(),
    district: joi.string().trim(),
    pincode: joi.string().regex(/^[0-9]+$/).trim().length(6),
    pancardNumber: joi.string().trim(),
    gstNumber: joi.string().trim(),
    email: joi.string().trim().email(),
    mobileNumber: joi.string().trim().length(10).regex(/^[0-9]+$/),
    annualTurnover: joi.number().positive(),
    product: joi.string().trim(),
    repaymentTimeline: joi.number().positive(),
    workingCrops: joi.array().items(joi.string().trim()),
    type: joi.number().only().allow(...allowedBuyerTypes)
};

const schemaFC = joi.object({
    buyerId: joi.number().required(),
    creditLimit: joi.number().positive().required()
}).and('buyerId', 'creditLimit');

const schemaMIS = joi.object({
    ...schemaCommon
}).or(...Object.keys(schemaCommon));

const schemaVP = joi.object({
    ...schemaCommon,
    status: joi.number().only().allow(...VP_ALLOWED_STATUS).required(),
    statusRemark: joi.string().trim()
}).or(...Object.keys(schemaCommon), 'status', 'statusRemark');

/**
 * Validate patch object for MIS Sales role, throws Error incase of data mismatch.
 * @param {Object} data
 * @returns {Object}
 */
const validatorMIS = (data) => {
    const result = schemaMIS.validate(data);
    if (result.error) throw new ValidationError(result.error.message);
    return result.value;
}

/**
 * Validate patch object for VP_Sales role, throws Error incase of data mismatch.
 * @param {Object} data
 * @returns {Object}
 */
const validatorVP = (data) => {
    const result = schemaVP.validate(data);
    if (result.error) throw new ValidationError(result.error.message);
    return result.value;
}

/**
 * Validate patch object for Fincance_Controller role, throws Error incase of data mismatch.
 * @param {Object} data
 * @returns {Object}
 */
const validatorFC = (data) => {
    const result = schemaFC.validate(data);
    if (result.error) throw new ValidationError(result.error.message);
    return result.value;
}

module.exports.validateVP = validatorVP;
module.exports.validateMIS = validatorMIS;
module.exports.validateFC = validatorFC;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sales/services/patch_buyer_service.js
const logger = require('../../../../common_services/market_linkage/logging/app_log_service');
const { type: LogType } = require('../../../../enums/market_linkage/enums/appLogEnum');
const HTTP_CODE = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const user_role = require('../../../../enums/user_profile/user_role');
const { BUYER_STATUS, docType, BUYER_LOG_ACTION } = require('../../../../enums/market_linkage/enums/buyerEnum');
const buyer_detail = require('../../../../database/models_v2/buyer/buyer_detail');
const buyer_document = require('../../../../database/models_v2/buyer/buyer_document');
const buyer_working_crop = require('../../../../database/models_v2/buyer/buyer_working_crop');
const master_state = require('../../../../database/models_v2/location/master_state');
const master_district = require('../../../../database/models_v2/location/master_district');
const get_buyer_service = require('../../buyer/services/get_buyer_service');
const buyer_logs = require('../../../../database/models_v2/buyer/buyer_logs');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * @param {string} userRole
 * @param {Object} data
 * @returns {Promise<{status:number, data: any}>}
 */

const new_fields = {
    email: 'email',
    mobileNumber: 'mobile_number',
    gstStatus: 'gst_status',
    traderName: 'trader_name',
    legalName: 'legal_name',
    address: 'address',
    state: 'state_name',
    district: 'district_name',
    pincode: 'pincode',
    annualTurnover: 'annual_turnover',
    type: 'type',
    product: 'product',
    repaymentTimeline: 'repayment_timeline',
    status: 'status',
    statusRemark: 'status_remark',
    creditLimit: 'credit_limit'
}

const service = async (userRole, data, user_profile_id) => {
    try {
        let buyer = await buyer_detail.findOne({
            where: {
                id: data.buyerId,
                is_active: 1
            }
        });
        if (!buyer) throw new ValidationError(`no buyer found with id: ${data.buyerId}`);

        if (userRole === user_role.MIS_Executive_Sales) {
            buyer.status = BUYER_STATUS.PENDING;
        } else if (userRole === user_role.FINANCE_CONTROLLER) {
            buyer.status = BUYER_STATUS.APPROVED;
        }

        for (const key in data) {
            if (key === 'pancardNumber' || key === 'gstNumber') {
                const docs = await buyer_document.findAll({
                    where: {
                        buyer_id: buyer.id || null,
                        is_active: 1
                    }
                });
                for (let i = 0; i < docs.length; i++) {
                    if (key === 'pancardNumber' && docs[i].type === docType.pancard) {
                        docs[i].value = data[key];
                    } else if (key === 'gstNumber' && docs[i].type === docType.gst) {
                        docs[i].value = data[key];
                    }
                    await docs[i].save();
                };
            } else if (key === 'workingCrops') {
                const crops = await buyer_working_crop.findAll({
                    where: {
                        buyer_id: buyer.id || null,
                        is_active: 1
                    }
                })
                for (let i = 0; i < crops.length; i++) {
                    crops[i].crop_name = data[key][i]
                    await crops[i].save();
                };
            } else if (key === 'state') {
                const state_data = await master_state.findOne({
                    where: {
                        name: data[key] || null,
                        is_active: 1
                    }
                });
                buyer.state_name = data[key];
                buyer.state_id = state_data?.id || null;
            } else if (key === 'district') {
                const state_data = await master_state.findOne({
                    where: {
                        name: buyer.state_name || null,
                        is_active: 1
                    }
                });
                const district_data = await master_district.findOne({
                    where: {
                        name: data[key] || null,
                        master_state_id: state_data?.id || null,
                        is_active: 1
                    }
                });
                buyer.district_name = data[key];
                buyer.district_id = district_data?.id;
            } else {
                if (key === 'status') {
                    const buyer_log_obj = {
                        user_id: user_profile_id,
                        buyer_id: data.buyerId,
                        action_by_user: BUYER_LOG_ACTION.BUYER_STATUS_CHANGE,
                        action_description: data[key]
                    }
                    await buyer_logs.create(buyer_log_obj);
                }
                buyer[new_fields[key]] = data[key];
            }
        }

        buyer = await buyer.save();

        const buyer_reponse = await get_buyer_service(null, buyer.id)

        return {
            status: HTTP_CODE.ok,
            data: buyer_reponse
        };
    } catch (err) {
        logger({ err, type: LogType.error });
        return {
            status: HTTP_CODE.internalServerError,
            data: {
                message: err.message
            }
        };
    }
}

module.exports = service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sales/services/update_sales_order_service.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
const buyer_order_detail = require("../../../../database/models_v2/buyer_order/buyer_order_detail");
const buyer_order_delivery_info = require("../../../../database/models_v2/buyer_order/buyer_order_delivery_info");
const buyer_order_quality_check = require("../../../../database/models_v2/buyer_order/buyer_order_quality_check");
const buyer_order_crop_info = require("../../../../database/models_v2/buyer_order/buyer_order_crop_info");
const master_state = require("../../../../database/models_v2/location/master_state");
const master_district = require("../../../../database/models_v2/location/master_district");
const crop_detail = require("../../../../database/models_v2/crop/crop_detail");
const crop_varieties_detail = require("../../../../database/models_v2/crop/crop_varieties_detail");
const buyer_detail_model = require("../../../../database/models_v2/buyer/buyer_detail");
const { BUYER_STATUS, orderStatus } = require("../../../../enums/market_linkage/enums/buyerEnum");

const new_fields = {
  status: "status",
  buyerId: "buyer_id",
  orderQuantityInTon: "order_quantity_in_ton",
  buyerOfferingPriceQuintal: "buyer_offering_price_quintal",
  expDeliveryIn: "exp_delivery_in",
  packagingType: "packaging_type",
  fullfillmentType: "fullfillment_type",
  licenceNumber: "licence_number",
  buyerFacilityGst: "buyer_facility_gst",
  cashDiscountPercent: "cash_discount_percent",
  bagDeductionPercent: "bag_deduction_percent",
  soRepaymentTimeline: "so_repayment_timeline",
  isInvoiceOnGross: "is_invoice_on_gross",
  invoiceSharing: "invoice_sharing",
  farmartId: "farmart_id",
  remainingQuantity: "remaining_quantity",
  buyerName: "buyer_name",
  eInvoiceRequired: "e_invoice_required"
}


module.exports = async (params) => {
  try {
    const { data_to_update, order_id } = params;

    const updatedOrder = await buyer_order_detail.findOne({
      where: {
        id: order_id
      },
      plain: true
    })

    if (!updatedOrder) {
      return {
        status: HTTP_status_codes.badRequest,
        data: {
          message: "invalid orderId"
        },
      }
    }

    for (const data of data_to_update) {
      if (data.property === "deliveryInfo") {
        const state_data = await master_state.findOne({
          where: {
            name: data.data?.state || null,
            is_active: 1
          }
        });
        const district_data = await master_district.findOne({
          where: {
            name: data.data?.district || null,
            master_state_id: state_data?.id || null,
            is_active: 1
          }
        });
        const delivery_info = await buyer_order_delivery_info.findOne({
          where: {
            buyer_order_id: order_id || null,
            is_active: 1
          }
        })
        if(delivery_info){
          delivery_info.address = data.data?.address || null;
          delivery_info.district_name = data.data?.district || null;
          delivery_info.pincode = data.data?.pincode || null;
          delivery_info.state_name = data.data?.state || null;
          delivery_info.state_id = state_data?.id || null;
          delivery_info.district_id = district_data?.id || null;
          delivery_info.buyer_order_id = updatedOrder.id || null;
          delivery_info.image = data.data?.image || null;
          await delivery_info.save();
        }
      }
      else if (data.property === "cropInfo") {
        const crop = await crop_detail.findOne({
          where: {
            name: data.data?.cropName || null,
            is_active: 1,
          }
        });
        const variety = await crop_varieties_detail.findOne({
          where: {
            crop_id: crop?.id || null,
            quality_check_guide_url: data.data?.qualityCheckGuideURL || null,
            name: data.data?.name || null,
            is_active: 1,
          }
        });
        const crop_info = await buyer_order_crop_info.findOne({
          where: {
            buyer_order_id: order_id || null,
            is_active: 1
          }
        })
        if(crop_info){
          crop_info.crop_name = data.data?.cropName || null;
          crop_info.crop_id = crop?.id || null;
          crop_info.buyer_order_id = updatedOrder.id || null;
          crop_info.variety_name = data.data?.varietyName || null;
          crop_info.variety_id = variety?.id || null;
          await crop_info.save();
        }
      }
      else if (data.property === "orderQuantityInTon") {
        updatedOrder[new_fields[data.property]] = data.data;
        updatedOrder.remaining_quantity = data.data;
      }
      else {
        if (data.property === "status" && data.data == orderStatus.APPROVED_BY_CFO) {
          const buyer_details = await buyer_detail_model.findOne({
            where: {
              is_active: true,
              id: updatedOrder.buyer_id
            }
          })
          if (buyer_details && buyer_details.status != BUYER_STATUS.APPROVED) {
            return {
              status: HTTP_status_codes.badRequest,
              data: {
                message: "Buyer is not approved",
                error: "Buyer is not approved",
              },
            };
          }
        }
        updatedOrder[new_fields[data.property]] = data.data
      }
    }
    await updatedOrder.save();

    return { status: HTTP_status_codes.ok, data: true };
  } catch (err) {
    app_log_service({ type: type.error, err });
    return {
      status: HTTP_status_codes.internalServerError,
      data: {
        message: "Something bad happened",
        error: err.message,
      },
    };
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/order_tracking/swagger/index.js
module.exports = {
    tags: {
        name: 'order_tracking'
    },
    paths: {
        '/request_lead/pa': {
            post: {
                tags: ['order_tracking'],
                summary: '',
                description: 'for market linkage',
                operationId: 'map_pa_to_leads',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'lead_id',
                        description: '',
                        type: 'integer',
                        required: true
                    },
                    {
                        in: 'formData',
                        name: 'farmart_lead_id',
                        description: '',
                        type: 'string',
                        required: true
                    },
                    {
                        in: 'formData',
                        name: 'pa_name',
                        description: '',
                        type: 'string',
                        required: true
                    },
                    {
                        in: 'formData',
                        name: 'pa_mobile_number',
                        description: '',
                        type: 'integer',
                        required: true
                    }
                ],
                responses: {
                    405: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/request_lead': {
            put: {
                tags: ['order_tracking'],
                summary: '',
                description: '',
                operationId: 'update_request_leads_status',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'lead_id',
                        description: 'database lead id',
                        required: true,
                        type: 'integer'
                    },
                    {
                        in: 'formData',
                        name: 'farmart_lead_id',
                        description: '',
                        required: true,
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'stage',
                        description: '(8->reschedule,\n7->customer_not_available,\n 6-> po_generated,\n 5-> rejected_by_merchant,\n 2->created,\n 3->accepted,\n 4-> sample_created,\n 1-> rejected by farmart)',
                        required: true,
                        type: 'integer'
                    },
                    {
                        in: 'formData',
                        name: 'rejection_reason',
                        description: '',
                        required: false,
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'source',
                        description: '',
                        required: true,
                        type: 'integer',
                        format: 'int64'
                    }
                ],
                responses: {
                    405: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/request_leads': {
            get: {
                tags: ['order_tracking'],
                summary: '',
                description: '',
                operationId: 'get_request_leads',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'status',
                        description: '1 pending 2 completed 3 cancelled',
                        required: false,
                        type: 'integer',
                        default: 1
                    },
                    {
                        in: 'query',
                        name: 'page_no',
                        description: '',
                        required: false,
                        type: 'integer'
                    },
                    {
                        in: 'query',
                        name: 'limit',
                        description: '',
                        required: false,
                        type: 'integer'
                    },
                    {
                        in: 'header',
                        name: 'language_id',
                        description: '',
                        required: false,
                        type: 'integer',
                        format: 'int64'
                    }
                ],
                responses: {
                    405: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }

        },
        '/cancel_request_lead': {
            post: {
                tags: ['order_tracking'],
                summary: '',
                description: '',
                operationId: 'cancel_request_lead',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'request_lead_id',
                        description: '',
                        required: true,
                        type: 'integer'
                    }
                ],
                responses: {
                    405: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/po_by_request_lead_id': {
            get: {
                tags: ['order_tracking'],
                summary: '',
                description: '',
                operationId: 'get_po_by_request_lead_id',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'request_lead_id',
                        description: '',
                        required: true,
                        type: 'integer'
                    },
                    {
                        in: 'query',
                        name: 'page_no',
                        description: '',
                        required: false,
                        type: 'integer'
                    },
                    {
                        in: 'query',
                        name: 'limit',
                        description: '',
                        required: false,
                        type: 'integer'
                    }
                ],
                responses: {
                    405: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/po_status': {
            put: {
                tags: ['order_tracking'],
                summary: '',
                description: '',
                operationId: 'update_po_status',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'po_id',
                        description: '',
                        required: true,
                        type: 'integer'
                    },
                    {
                        in: 'formData',
                        name: 'action',
                        description: '1:reject,2:accept,',
                        required: true,
                        type: 'integer',
                        default: 1
                    },
                    {
                        in: 'formData',
                        name: 'tnc_url',
                        description: '',
                        required: false,
                        type: 'string'
                    }
                ],
                responses: {
                    405: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/po_tracking_stages': {
            get: {
                tags: ['order_tracking'],
                summary: '',
                description: '',
                operationId: 'get_po_tracking_stages',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'po_id',
                        description: '',
                        required: true,
                        type: 'integer'
                    }
                ],
                responses: {
                    405: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/purchase_order': {
            post: {
                tags: ['order_tracking'],
                summary: '',
                description: '',
                operationId: 'notify_creation_po',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'lead_id',
                        description: 'database lead id',
                        required: true,
                        type: 'integer'
                    },
                    {
                        in: 'formData',
                        name: 'farmart_lead_id',
                        description: '',
                        required: true,
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'po_id',
                        description: 'database lead id',
                        required: true,
                        type: 'integer'
                    },
                    {
                        in: 'formData',
                        name: 'farmart_po_id',
                        description: '',
                        required: true,
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'weight_in_kg',
                        description: '',
                        required: true,
                        type: 'integer'
                    },
                    {
                        in: 'formData',
                        name: 'price_per_kg',
                        description: '',
                        required: true,
                        type: 'integer',
                        format: 'int64'
                    },
                    {
                        in: 'formData',
                        name: 'po_doc_url',
                        description: '',
                        required: true,
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'tnc_url',
                        description: '',
                        required: false,
                        type: 'string'
                    }
                ],
                responses: {
                    405: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            },
            put: {
                tags: ['order_tracking'],
                summary: '',
                description: '',
                operationId: 'notify_updation_po',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'lead_id',
                        description: 'database lead id',
                        required: true,
                        type: 'integer'
                    },
                    {
                        in: 'formData',
                        name: 'po_id',
                        description: 'database po id',
                        required: true,
                        type: 'integer'
                    },
                    {
                        in: 'formData',
                        name: 'farmart_po_id',
                        description: '',
                        required: true,
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'stage',
                        description: '',
                        required: true,
                        type: 'integer'
                    },
                    {
                        in: 'formData',
                        name: 'weight_in_kg',
                        description: '',
                        required: true,
                        type: 'integer'
                    },
                    {
                        in: 'formData',
                        name: 'price_per_kg',
                        description: '',
                        required: true,
                        type: 'integer',
                        format: 'int64'
                    },
                    {
                        in: 'formData',
                        name: 'rejection_reason',
                        description: '',
                        required: false,
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'vehicle_loading_url',
                        description: '',
                        required: false,
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'payment_part_1',
                        description: '',
                        required: false,
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'payment_part_2',
                        description: '',
                        required: false,
                        type: 'string'
                    }
                ],
                responses: {
                    405: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        }
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/order_tracking/index.js
const router = require('express').Router();
const authorize = require('../../../middelware/authorized_routes');
const user_roles_enum = require('../../../enums/user_profile/user_role');
const get_request_leads_controller = require('./controllers/get_request_leads_controller');
const cancel_request_lead_controller = require('./controllers/cancel_request_lead_controller');
const get_po_by_request_lead_id_controller = require('./controllers/get_po_by_request_lead_id_controller');
const update_po_status_controller = require('./controllers/update_po_status_controller');
const get_po_tracking_stages_controller = require('./controllers/get_po_tracking_stages_controller');
// const update_order_lead_controller = require("./controllers/update_order_lead_controller");
// const notify_map_pa_controller = require("./controllers/notify_map_pa_controller");
// const notify_creation_of_po_controller = require("./controllers/notify_creation_of_po_controller");
// const notify_updation_of_po_controller = require("./controllers/notify_updation_of_po_controller");

/** @deprecated */
// router.post("/request_lead/pa", authorize([user_roles_enum.market_linkage_system]), notify_map_pa_controller); //deprecated
// router.put("/request_lead", authorize([user_roles_enum.market_linkage_system]), update_order_lead_controller); //deprecated
// router.post("/purchase_order", authorize([user_roles_enum.market_linkage_system]), notify_creation_of_po_controller);  //deprecated
// router.put("/purchase_order", authorize([user_roles_enum.market_linkage_system]), notify_updation_of_po_controller);   //deprecated

router.get('/request_leads', authorize([user_roles_enum.Merchant]), get_request_leads_controller);
router.post('/cancel_request_lead', authorize([user_roles_enum.Merchant]), cancel_request_lead_controller);
router.get('/po_by_request_lead_id', authorize([user_roles_enum.Merchant]), get_po_by_request_lead_id_controller);
router.put('/po_status', authorize([user_roles_enum.Merchant]), update_po_status_controller);
router.get('/po_tracking_stages', authorize([user_roles_enum.Merchant]), get_po_tracking_stages_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/order_tracking/controllers/get_request_leads_controller.js
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const get_request_leads_service = require('../services/get_request_leads_service');
const language_enum = require("../../../../entities_v2/metadata/enums/global/langauge");
const lead_tracking_status_enum = require('../../../../enums/order_tracking/lead_tracking_status_enum');

module.exports = async (req, res) => {
    try {
        //status (pending,completed,cancelled)
        const page_no = +req.query.page_no || 1,
            limit = +req.query.limit || 10,
            status = +req.query.status || lead_tracking_status_enum.pending;
        const master_merchant_id = +req.user.master_merchant_id || null;
        const merchant_detail_id = +req.user.user_profile_id;
        const language_id = +req.headers.language || language_enum.hindi;

        let request_leads = await get_request_leads_service({
            master_merchant_id,
            merchant_detail_id,
            status,
            page_no,
            limit,
            language_id
        });
        let request_leads_response = create_api_response(true, "successfull", request_leads);
        return res.status(http_status_code_enum.ok).json(request_leads_response);
    } catch (ex) {
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/order_tracking/controllers/get_po_tracking_stages_controller.js
const error_log=require('../../../../middelware/error_log');
const create_api_response=require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const get_po_tracking_stages_service=require('../services/get_po_tracking_stages_service');

module.exports=async (req,res)=>{
    try{
        const po_id=+req.query.po_id;
        if(!po_id)
        {
            let message="po_id is mandatory paarameter"
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false,message));
        }
        let po_stages =await get_po_tracking_stages_service(po_id);
        let po_stages_response=create_api_response(true,"successfull",po_stages);
        return res.status(http_status_code_enum.ok).json(po_stages_response);
    }catch(ex){
       return res.status(http_status_code_enum.bad_request).json(create_api_response(false,ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/order_tracking/controllers/update_po_status_controller.js
const error_log=require('../../../../middelware/error_log');
const create_api_response=require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const update_po_status_service=require('../services/update_po_status_service');

module.exports=async (req,res)=>{
    try{
        //action (accepted/rejected/generated and so on)
        const po_id  =+req.body.po_id ,action=+req.body.action, tnc_url=req.body.tnc_url;
        if(!po_id || !action)
        {
            let message ="po_id and action are mandatory parameter"
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false,message));
        }
        let updated_po_status =await update_po_status_service(po_id,action,tnc_url);
        let updated_po_status_response=create_api_response(true,"successfull");
        return res.status(http_status_code_enum.ok).json(updated_po_status_response);
    }catch(ex){
       return res.status(http_status_code_enum.bad_request).json(create_api_response(false,ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/order_tracking/controllers/notify_updation_of_po_controller.js
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const { clear_po_detail_by_id_to_redis } = require("../../../../data_abstraction_layer/order_tracking/purchase_order_in_redis");
const http_status_codes = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const po_notification = require("../../notification/services/po_notification");
const get_purchase_crop_lead_by_id = require("../../../../data_abstraction_layer/purchase_crop_leads/get_purchase_crop_lead_by_id");
module.exports = async (req, res) => {
    try {
        const lead_id = +req.body.lead_id;
        const po_id = +req.body.po_id || 0;
        const po_farmart_id = req.body.farmart_po_id || req.body.po_farmart_id || "";
        const stage = +req.body.stage || 0;
        const weight_in_kg = +req.body.weight_in_kg || 0;
        const price_per_kg = +req.body.price_per_kg || 0;
        const rejection_reason = req.body.rejection_reason || "";
        const weight_slip_url = req.body.weight_slip_url || "";
        const handover_document_url = req.body.handover_document_url || "";
        const payment_part_1 = req.body.payment_part_1;
        const payment_part_2 = req.body.payment_part_2;
        let master_merchant_detail_id = +req.body.master_merchant_detail_id || null;
        if (!po_id || !po_farmart_id || !stage || !weight_in_kg || !price_per_kg) {
            const error_message = "mandatory params missing";
            return res.status(http_status_codes.bad_request).json(
                create_api_response(false, error_message)
            );
        }
        let lead_data = await get_purchase_crop_lead_by_id(lead_id);
        if (!master_merchant_detail_id)
            master_merchant_detail_id = lead_data?.master_merchant_id;
        po_notification({ payment_part_1, payment_part_2, weight_slip_url, handover_document_url, po_id, master_merchant_detail_id, weight_in_kg, stage, po_farmart_id })
            .catch(err => error_log(err));
        await clear_po_detail_by_id_to_redis({ po_id })
        return res.status(http_status_codes.ok).json(
            create_api_response(true, "success")
        );
    }
    catch (err) {
        return res.status(http_status_codes.bad_request).json(
            create_api_response(false, err.message)
        );
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/order_tracking/controllers/cancel_request_lead_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const cancel_request_lead_service = require('../services/cancel_request_lead_service');

module.exports = async (req, res) => {
    try {
        const request_lead_id = +req.body.request_lead_id || null;
        const master_merchant_id = +req.user.master_merchant_id || null;
        const merchant_detail_id = +req.user.user_profile_id || null;
        if (!request_lead_id) {
            let message = "request_lead_id is mandatory parameter";
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false, message));
        }
        let request_leads = await cancel_request_lead_service(request_lead_id, merchant_detail_id, master_merchant_id);
        let request_leads_response = create_api_response(true, "successfull");
        return res.status(http_status_code_enum.ok).json(request_leads_response);
    } catch (ex) {
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/order_tracking/controllers/notify_map_pa_controller.js
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const http_status_codes = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const notify_map_pa_service = require("../services/notify_map_pa_service");

module.exports = async (req, res) => {
    try {
        const lead_id = +req.body.lead_id || 0;
        const farmart_lead_id = req.body.farmart_lead_id || "";
        const pa_name = req.body.pa_name || "";
        const pa_mobile_number = +req.body.pa_mobile_number || 0;
        if (!lead_id || !farmart_lead_id || !pa_name || !pa_mobile_number) {
            let error_message = "mandatory params missing";
            return res.status(http_status_codes.bad_request).json(
                create_api_response(false, error_message)
            )
        }
        await notify_map_pa_service({ lead_id, farmart_lead_id, pa_mobile_number, pa_name, farmart_lead_id });
        return res.status(http_status_codes.ok).json(
            create_api_response(true, "success")
        );
    }
    catch (err) {
        return res.status(http_status_codes.bad_request).json(
            create_api_response(false, err.message)
        );
    }
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/order_tracking/controllers/notify_creation_of_po_controller.js
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const { clear_po_by_request_lead_id_to_redis } = require("../../../../data_abstraction_layer/order_tracking/request_leads_in_redis");
const http_status_codes = require("../../../../entities_v2/metadata/enums/global/http_status_codes")
const notify_creation_po_service = require("../services/notify_creation_po");

module.exports = async (req, res) => {
    try {
        const lead_id = +req.body.lead_id || 0;
        const farmart_lead_id = req.body.farmart_lead_id || "";
        const po_id = +req.body.po_id || 0;
        const farmart_po_id = req.body.farmart_po_id || "";
        const weight_in_kg = +req.body.weight_in_kg || 0;
        const price_per_kg = +req.body.price_per_kg || 0;
        const po_doc_url = req.body.po_doc_url || "";
        const tnc_url = req.body.tnc_url || "";
        if (!lead_id || !farmart_lead_id || !po_id || !farmart_po_id || !weight_in_kg || !price_per_kg || !po_doc_url) {
            let error_message = "mandatory params missing";
            return res.status(http_status_codes.bad_request).json(
                create_api_response(false, error_message)
            )
        }
        await notify_creation_po_service({ lead_id, farmart_lead_id, po_id, farmart_po_id ,weight_in_kg});
        return res.status(http_status_codes.ok).json(
            create_api_response(true, "success")
        );
    }
    catch (err) {
        return res.status(http_status_codes.bad_request).json(
            create_api_response(false, err.message)
        );
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/order_tracking/controllers/get_po_by_request_lead_id_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const get_po_by_request_lead_id_service = require('../services/get_po_by_request_lead_id_service');

module.exports = async (req, res) => {
    try {
        const request_lead_id = +req.query.request_lead_id || null;
        const merchant_detail_id = +req.user.user_profile_id;
        const master_merchant_id = +req.user.master_merchant_id;
        if (!request_lead_id) {
            let message = "request_lead_id is mandatory paarameter"
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false, message));
        }
        let po = await get_po_by_request_lead_id_service({ master_merchant_id, merchant_detail_id, request_lead_id });
        let po_response = create_api_response(true, "successfull", po);
        return res.status(http_status_code_enum.ok).json(po_response);
    } catch (ex) {
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/order_tracking/controllers/update_order_lead_controller.js
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const http_status_codes = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const { clear_leads_cache } = require("../../../../data_abstraction_layer/order_tracking/order_tracking_leads_in_redis");
const order_tracking_notification = require("../../notification/services/order_tracking_notification");
const get_purchase_crop_lead_by_id = require("../../../../data_abstraction_layer/purchase_crop_leads/get_purchase_crop_lead_by_id");
const convert_kg_to_ton = require("../../../../utilities/unit_conversion/convert_kg_to_ton");
const update_order_lead_service = require("../services/update_order_lead_service");

module.exports = async (req, res) => {
    try {
        const lead_id = +req.body.lead_id || 0;
        const farmart_lead_id = req.body.farmart_lead_id || "";
        const stage = +req.body.stage || 0;
        const rejection_reason = req.body.rejection_reason || "";
        const source = +req.body.source || 0;
        let weight_in_ton = +req.body.weight_in_ton || 0;
        let crop_id = +req.body.crop_id || 0;
        if (!lead_id || !farmart_lead_id || !stage || !source) {
            const err_message = "lead_id, farmart_lead_id, stage and source are mandatory params";
            return res.status(http_status_codes.ok).json({
                status: false,
                message: err_message
            });
        }
        await update_order_lead_service({ lead_id, stage, weight_in_ton, crop_id, farmart_lead_id })

        return res.status(http_status_codes.ok).json(
            create_api_response(true, "success")
        );
    }
    catch (err) {
        return res.status(http_status_codes.bad_request).json(
            create_api_response(false, err.message)
        );
    }
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/order_tracking/services/cancel_request_lead_service.js
const error_log = require("../../../../middelware/error_log");
const lead_stage_enum = require('../../../../enums/order_tracking/lead_stage_enum')
const patch_request = require("../../../../utilities/external_API_calls/patch_request");
const global_config = require("../../../../config/global_config");
const constants = require("../../../../constants");
const env_enum = require("../../../../enums/env/env_enum");
const { clear_leads_cache } = require("../../../../data_abstraction_layer/order_tracking/order_tracking_leads_in_redis");
const { clear_po_by_request_lead_id_to_redis } = require("../../../../data_abstraction_layer/order_tracking/request_leads_in_redis");

module.exports = async (request_lead_id, merchant_detail_id) => {
  try {
    // computation for cancelling
    let base_url = global_config.market_linkage_system_url ;
    let token = global_config.retailer_token;
    let endpoint = `/v2/campaign/lead`;
    const body = {
      lead_id: request_lead_id,
      stage: lead_stage_enum.rejected_by_merchant
    }
    const response = await patch_request(base_url + endpoint, body, {
      Authorization: token
    });
    await clear_leads_cache({ merchant_detail_id });
    await clear_po_by_request_lead_id_to_redis({request_lead_id})
    return response;
  } catch (err) {
    error_log(err);
    throw err;
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/order_tracking/services/update_order_lead_service.js
const error_log = require("../../../../middelware/error_log");
const order_tracking_notification = require("../../notification/services/order_tracking_notification");
const get_purchase_crop_lead_by_id = require("../../../../data_abstraction_layer/purchase_crop_leads/get_purchase_crop_lead_by_id");
const convert_kg_to_ton = require("../../../../utilities/unit_conversion/convert_kg_to_ton");
const { clear_leads_cache } = require("../../../../data_abstraction_layer/order_tracking/order_tracking_leads_in_redis");
const { get_shop_details } = require("../../../../data_abstraction_layer/merchant/shop_details");
const order_tracking_whatsapp = require("../../notification/services/order_tracking_whatsapp");
const language_enum = require("../../../../enums/global/language");
module.exports = async ({ lead_id, merchant_detail_id, stage, weight_in_ton, crop_id, farmart_lead_id, rejection_reason = "-", language_selected = null, pa_name, pa_mobile_number }) => {
    try {

        // get lead data to get merchant detail id and crop id 
        let lead_data = await get_purchase_crop_lead_by_id(lead_id);
        if (!merchant_detail_id)
            merchant_detail_id = lead_data?.merchant_detail_id
        if (!pa_name || !pa_mobile_number) {
            pa_name = lead_data?.dataValues?.pa_mapped.name;
            pa_mobile_number = lead_data?.dataValues?.pa_mapped.mobile_number;
        }

        //to show weight in the notification we have to fetch weight , now weight is not pass in params so using abs layer
        if (!weight_in_ton)
            weight_in_ton = await convert_kg_to_ton({ weight_in_kg: lead_data?.quantity_in_kg }).weight_in_kg;

        if (!crop_id)
            crop_id = lead_data?.crop_id;

        // language for merchant
        if (!language_selected) {
            let shop_details = await get_shop_details({ merchant_detail_id });
            language_selected = shop_details.rows[0]?.language_selected || language_enum.english
        }

        // order_tracking_notification will need stage or notification_event_id for fetch string notification string
        order_tracking_notification({ merchant_detail_id, stage, lead_id, weight_in_ton, crop_id, language_selected })
            .catch(err => error_log(err));

        order_tracking_whatsapp({ farmart_lead_id, rejection_reason, language_selected, merchant_detail_id, stage, crop_id, weight_in_ton, pa_name, pa_mobile_number })
            .catch(err => {
                error_log(err);
            });

        await clear_leads_cache({ merchant_detail_id });

    }
    catch (err) {
        error_log(err);
        throw err;
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/order_tracking/services/update_po_status_service.js
const error_log = require("../../../../middelware/error_log");
const patch_request = require("../../../../utilities/external_API_calls/patch_request");
const global_config = require("../../../../config/global_config");
const constants = require("../../../../constants");
const env_enum = require("../../../../enums/env/env_enum");
const { clear_po_detail_by_id_to_redis, clear_po_by_request_lead_id_to_redis, get_po_detail_by_id_from_redis } = require("../../../../data_abstraction_layer/order_tracking/purchase_order_in_redis");

module.exports = async (po_id, action, tnc_url) => {
  try {
    let base_url = global_config.market_linkage_system_url;
    let token = global_config.retailer_token;
    const body = {
      po_id,
      action,
      tnc_url
    }
    const response = await patch_request(base_url + "/v2/campaign/purchase_order", body, {
      Authorization: token
    })
    // clear po from redis
    await clear_po_detail_by_id_to_redis({po_id});
    return response;
  } catch (err) {
    error_log(err);
    throw err;
  }
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/order_tracking/services/get_po_data_from_ml.js
const global_config = require("../../../../config/global_config");
const constants = require("../../../../constants");
const error_log = require("../../../../middelware/error_log");
const env_enum = require("../../../../enums/env/env_enum");
const get_request = require("../../../../utilities/external_API_calls/get_request");

const get_po_data_from_ml = async ({ master_merchant_id, request_lead_id, page_no, limit }) => {
    try {
        let endpoint = "/v2/campaign/purchase_order"
        let url = global_config.market_linkage_system_url + endpoint + "?",
            token = global_config.retailer_token;
        if (master_merchant_id)
            url += `&master_merchant_detail_id=${master_merchant_id}`
        if (request_lead_id)
            url += `&lead_id=${request_lead_id}`
        if (page_no)
            url += `&page_no=${page_no}`
        if (limit)
            url += `&limit=${limit}`
        let po_data = await get_request(url, { Authorization: token });
        po_data = po_data?.data?.data;
        for (let index = 0; index < po_data.purchase_orders.length; index++) {
            let element = po_data.purchase_orders[index];
            const po = {
                po_id: element.po_id,
                weight_in_ton: element.weight_in_kg / 1000,
                price_per_quintal: element.price_per_kg * 100,
                farmart_po_id: element.po_farmart_id,
                po_stage: element.stage,
                po_receipt_url: element.po_doc_url || null
            }
            po_data.purchase_orders[index] = po;
        }
        return {
            purchase_order: po_data.purchase_orders,
            total_count: po_data.total_records
        };
    }
    catch (err) {
        error_log(err);
        throw err;
    }
}
module.exports = get_po_data_from_ml;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/order_tracking/services/get_leads_data_from_ml.js
const global_config = require("../../../../config/global_config");
const constants = require("../../../../constants");
const error_log = require("../../../../middelware/error_log");
const env_enum = require("../../../../enums/env/env_enum");
const get_request = require("../../../../utilities/external_API_calls/get_request");
const fetch_campaign_crop_service = require("../../campaign/_services/fetch_campaign_crop_service");
const lead_status_enum = require("../../../../enums/order_tracking/lead_tracking_status_enum");

const get_leads_data_from_ml = async ({ master_merchant_id, status, page_no, limit, language_id, merchant_detail_id }) => {
    try {
        if (!master_merchant_id) {
            return {
                leads: [],
                total_records: 0
            }
        }
        let endpoint = "/v2/campaign/lead"
        let url = global_config.market_linkage_system_url + endpoint + "?",
        token = global_config.retailer_token;
        if (master_merchant_id)
            url += `&master_merchant_detail_id=${master_merchant_id}`
        let rejected = 0;
        if (status == lead_status_enum.cancelled)
            rejected = 1;
        url += `&is_rejected=${rejected}`
        if (page_no)
            url += `&page_no=${page_no}`
        if (limit)
            url += `&limit=${limit}`
        let lead_data = await get_request(url, { Authorization: token });
        lead_data = lead_data?.data?.data;
        for (let index = 0; index < lead_data.leads.length; index++) {
            let element = lead_data.leads[index];
            const crop = await fetch_campaign_crop_service(language_id, element.crop_id);
            const lead = {
                lead_id: element.lead_id,
                farmart_lead_id: element.farmart_lead_id,
                lead_stage_id: element.stage,
                rejection_reason: element.rejection_reason || null,
                source: element.source,
                crop_id: element.crop_id,
                weight_in_ton: (element.weight_in_kg / 1000).toFixed(2),
                price_per_quintal: (element.price_per_kg * 100).toFixed(2),
                lead_created_date: element.lead_created_date,
                crop_name: crop?.name || "",
                crop_image_url: crop?.crop_img_url || "",
                pa_mobile_number: element.pa_mapped?.mobile_number || null,
                pa_name: element.pa_mapped?.name || null
            }
            lead_data.leads[index] = lead;
        }
        return lead_data;
    }
    catch (err) {
        error_log(err);
        throw err;
    }
}
module.exports = get_leads_data_from_ml;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/order_tracking/services/get_po_tracking_stages_service.js
const error_log = require("../../../../middelware/error_log");
const get_request = require("../../../../utilities/external_API_calls/get_request");
const global_config = require("../../../../config/global_config");
const { get_po_detail_by_id_from_redis, add_po_detail_by_id_to_redis } = require("../../../../data_abstraction_layer/order_tracking/purchase_order_in_redis");

module.exports = async (po_id) => {
  try {
    const endpoint = "/v2/campaign/purchase_order/details";
    let base_url = global_config.market_linkage_system_url;
    let token = global_config.retailer_token;
    //data abstraction layer of redis
    // let po_detail=null
    let po_detail=await get_po_detail_by_id_from_redis({po_id});
    if(!po_detail)
    {
      //get data from ml side api
      po_detail = await get_request(base_url + endpoint + "?po_id=" + po_id, {
        Authorization: token
      });
      //format po_detail data
      po_detail = po_detail.data.data;
      po_detail = {
        lead_request_id: po_detail?.lead_id,
        po_id: po_detail?.po_id,
        farmart_po_id: po_detail?.po_farmart_id,
        po_stage: po_detail?.stage,
        weight_slip_url: po_detail?.weight_slip_url,
        handover_document_url: po_detail?.handover_document_url,
        po_doc_url: po_detail?.po_doc_url,
        payment_part_1: po_detail?.payment_part_1,
        payment_part_2: po_detail?.payment_part_2,
      }
      //add above data to redis
      await add_po_detail_by_id_to_redis({po_id,po_data:po_detail}).catch(
        (err) => {
          error_log(err);
        });
    }
    return po_detail;
  } catch (err) {
    error_log(err);
    return null;
  }
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/order_tracking/services/notify_creation_po.js
const error_log = require("../../../../middelware/error_log");
const order_tracking_notification = require("../../notification/services/order_tracking_notification");
const notification_event_enum = require("../../../../enums/notification/notification_event_enum");
const { clear_po_by_request_lead_id_to_redis } = require("../../../../data_abstraction_layer/order_tracking/request_leads_in_redis");
const get_purchase_crop_lead_by_id = require("../../../../data_abstraction_layer/purchase_crop_leads/get_purchase_crop_lead_by_id");
const stage_enum = require('../../../../enums/order_tracking/lead_stage_enum');
const convert_kg_to_ton = require("../../../../utilities/unit_conversion/convert_kg_to_ton");
const order_tracking_whatsapp = require("../../notification/services/order_tracking_whatsapp");
const get_merchant_language_selected = require("../../../../data_abstraction_layer/merchant/get_merchant_language_selected");
module.exports = async ({ lead_id, weight_in_kg, }) => {
    try {
        // convert weight form kg to ton
        let weight_in_ton = await convert_kg_to_ton({ weight_in_kg }).weight_in_kg;
        // caching management
        await clear_po_by_request_lead_id_to_redis({ request_lead_id: lead_id });
        const purchase_crop_lead = await get_purchase_crop_lead_by_id(lead_id);
        if (purchase_crop_lead) {
            // language for merchant
            const language = await get_merchant_language_selected(purchase_crop_lead.merchant_detail_id);
            order_tracking_notification({
                language,
                merchant_detail_id: purchase_crop_lead.merchant_detail_id,
                lead_id,
                crop_id: purchase_crop_lead.crop_id,
                notification_event_id: notification_event_enum.po_generated,
                stage: stage_enum.po_generated,
                weight_in_ton
            })
                .catch(err => {
                    error_log(err);
                })

            order_tracking_whatsapp({
                language_selected: language,
                crop_id: purchase_crop_lead.crop_id,
                merchant_detail_id: purchase_crop_lead.merchant_detail_id,
                weight_in_ton,
                stage: stage_enum.po_generated
            })
                .catch(err => error_log(err));

        }
    }
    catch (err) {
        error_log(err);
        throw err;
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/order_tracking/services/get_po_by_request_lead_id_service.js
const error_log = require("../../../../middelware/error_log");
const {
  get_po_by_request_lead_id_from_redis,
  add_po_by_request_lead_id_to_redis,
} = require("../../../../data_abstraction_layer/order_tracking/request_leads_in_redis");
const get_request = require("../../../../utilities/external_API_calls/get_request");
const global_config = require("../../../../config/global_config");
const get_po_data_from_ml = require("./get_po_data_from_ml");

module.exports = async ({ merchant_detail_id, request_lead_id, master_merchant_id }) => {
  try {
    //data abstraction layer of redis
    let po_data = await get_po_by_request_lead_id_from_redis({
      request_lead_id,
    });
    if (!po_data) {
      //get from db ,send it to user and update it in redis

      //ml api for getting purchase_orders without pagination
      po_data = await get_po_data_from_ml({ master_merchant_id, request_lead_id, page_no: 1, limit: Number.MAX_SAFE_INTEGER });

      //ml api for getting purchase_orders with pagination
      // po_data = await get_po_data_from_ml({ master_merchant_id, request_lead_id, page_no, limit });

      //adding leads to redis
      let po_data_to_be_cached = await po_data_for_cache(po_data);
      if (po_data_to_be_cached?.purchase_order?.length)
        add_po_by_request_lead_id_to_redis({ request_lead_id, po_data: po_data_to_be_cached }).catch(
          (err) => {
            error_log(err);
          }
        );
    }
    return po_data;
  } catch (err) {
    error_log(err);
    return null;
  }
};

const po_data_for_cache = async (po_data) => {
  let cached_po_data = []
  for (let i = 0; i < po_data.purchase_order.length; i++) {
    let po_obj = {
      po_id: po_data.purchase_order[i].po_id,
      farmart_po_id: po_data.purchase_order[i].farmart_po_id,
      weight_in_ton: po_data.purchase_order[i].weight_in_ton,
      price_per_quintal: po_data.purchase_order[i].price_per_quintal,
      po_receipt_url: po_data.purchase_order[i].po_receipt_url,
    }
    cached_po_data.push(po_obj);
  }
  return {
    purchase_order: cached_po_data,
    total_count: po_data.total_count
  };
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/order_tracking/services/notify_map_pa_service.js
const error_log = require("../../../../middelware/error_log");
const order_tracking_notification = require("../../notification/services/order_tracking_notification");
const notification_event_enum = require("../../../../enums/notification/notification_event_enum");
const { clear_leads_cache } = require("../../../../data_abstraction_layer/order_tracking/order_tracking_leads_in_redis");
const { get_crop_id_from_lead_id } = require('../../../../data_abstraction_layer/order_tracking/purchase_crop_leads');
const lead_mapping_pa_whatsapp = require("../../../../common_services/order_tracking/lead_mapping_pa_whatsapp");
const get_merchant_language_selected = require("../../../../data_abstraction_layer/merchant/get_merchant_language_selected");
const get_merchant_by_mobile_number = require("../../../../data_abstraction_layer/merchant/get_merchant_by_mobile_number");

module.exports = async ({ lead_id, merchant_detail_id, crop_id, pa_name, pa_mobile_number, farmart_lead_id }) => {
    try {
        let leads_details = await get_crop_id_from_lead_id({ lead_id, attributes: ['crop_id', 'merchant_detail_id'] })
        crop_id = leads_details?.crop_id
        merchant_detail_id = leads_details?.merchant_detail_id;

        const language = await get_merchant_language_selected(merchant_detail_id);

        order_tracking_notification({ language, lead_id, crop_id, merchant_detail_id, notification_event_id: notification_event_enum.lead_accepted })
            .catch(err => error_log(err));
        const merchant = await get_merchant_by_mobile_number({ merchant_detail_id });
        lead_mapping_pa_whatsapp(language, merchant.name, pa_name, pa_mobile_number, merchant.mobile_number, merchant.country_code)
            .catch(err => error_log(err));
        await clear_leads_cache({ merchant_detail_id });
    }
    catch (err) {
        error_log(err);
        throw err;
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/order_tracking/services/get_request_leads_service.js
const error_log = require("../../../../middelware/error_log");
const lead_stage_enum = require("../../../../enums/order_tracking/lead_stage_enum");
const {
  get_leads_from_redis,
  add_leads_to_redis
} = require("../../../../data_abstraction_layer/order_tracking/order_tracking_leads_in_redis");
const get_leads_data_from_ml = require("./get_leads_data_from_ml");
const fetch_campaign_crop_service = require("../../campaign/_services/fetch_campaign_crop_service");
const { is_uploaded_sell_crop_picture } = require("../../../../data_abstraction_layer/campaign/sell_crop_picture");
const get_po_by_request_lead_id = require("./get_po_by_request_lead_id_service");

module.exports = async ({ master_merchant_id, status, page_no, limit, language_id, merchant_detail_id }) => {
  try {
    //data abstraction layer
    let leads_data = null
    leads_data = await get_leads_data_from_ml({ master_merchant_id, status, page_no, limit, language_id, merchant_detail_id });
    leads_data.leads = await Promise.all(leads_data.leads.map(async (element) => {
      try {
        const crop = await fetch_campaign_crop_service(language_id, element.crop_id);
        element.crop_name = crop?.name || "";
        element.crop_image_url = crop?.crop_img_url || "";
        // checking if the user uploaded picture for a particular lead or not 
        element.is_uploaded_sell_crop_picture = await is_uploaded_sell_crop_picture({ merchant_detail_id, lead_id: element.lead_id })
        //checking if there is atleast one po generated against this lead
        if (element.lead_stage_id == lead_stage_enum.sample_created) {
          const po = await get_po_by_request_lead_id({ master_merchant_id, merchant_detail_id, request_lead_id: element.lead_id, page_no: 1, limit: 1 });
          if (po?.total_count)
            element.lead_stage_id = lead_stage_enum.po_generated;
        }
        return element;
      }
      catch (err) {
        error_log(err);
        return element;
      }
    }));
    return leads_data;
  } catch (err) {
    error_log(err);
    return null;
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/farmer/swagger/index.js
module.exports = {
  tags: {
    name: "farmer",
  },
  paths: {
    "/all": {
      get: {
        tags: ["farmer"],
        summary:
          "get farmers list in sorted order by specified property in pages",
        description: "",
        operationId: "get_farmers_sorted",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "sort_by",
            description: "0->created_at \n1->pending_amount",
            required: true,
            type: "string",
            enum: [0, 1],
          },
          {
            in: "query",
            name: "limit",
            description: "no of records per page",
            required: false,
            type: "integer",
          },
          {
            in: "query",
            name: "page_no",
            description: "",
            required: false,
            type: "integer",
          },
          {
            in: "query",
            name: "time_stamp",
            description: "",
            required: false,
            type: "string",
          },
          {
            in: "query",
            name: "sort_fashion",
            description: "'asc' ->ascending order \n'desc' -> descending order",
            required: true,
            type: "string",
            enum: ["asc", "desc"],
          },
        ],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
      },
      "/": {
        post: {
          tags: ["farmer"],
          summary: "add farmer",
          description: "",
          operationId: "add_farmer",
          security: [{ Bearer: ["read"] }],
          parameters: [
            {
              in: "body",
              name: "body",
              description:
                "list with 'name' and 'mobile_number' property needed in each element",
              required: true,
              "schema": {
                "type": "object",
                "properties": {
                    "farmer_to_add": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "mobile_number": {
                                    "type": "number"
                                },
                            }
                        }
                    },
                }
            }
              
            },
          ],
          responses: {
            405: {
              description: "Invalid input",
            },
            200: {
              description: "success",
            },
          },
        },
    },
    "/ordered_list": {
      get: {
        tags: ["farmer"],
        summary:"",
        description: "get farmer in alphabetically order ",
        operationId: "get_farmers_list_sorted_order",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "limit",
            description: "no of records per page",
            required: false,
            type: "integer",
          },
          {
            in: "query",
            name: "page_no",
            description: "",
            required: false,
            type: "integer",
          },
          {
            in: "query",
            name: "sort_fashion",
            description: "'asc' ->ascending order \n'desc' -> descending order",
            required: true,
            type: "string",
            enum: ["asc", "desc"],
          },
          {
            in: "query",
            name: "search_param",
            description: "can search on the bases of mobile number or name ",
            required: false,
            type: "string",
          },
        ],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
      },
    "/transaction_list": {
      get: {
        tags: ["farmer"],
        summary:"",
        description: "get farmer in alphabetically order ",
        operationId: "get_farmer_transaction_list",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "limit",
            description: "no of records per page",
            required: false,
            type: "integer",
          },
          {
            in: "query",
            name: "page_no",
            description: "",
            required: false,
            type: "integer",
          },
          {
            in: "query",
            name: "sort_fashion",
            description: "'asc' ->ascending order \n'desc' -> descending order",
            required: true,
            type: "string",
            enum: ["desc","asc"],
          },
          {
            in: "query",
            name: "search_param",
            description: "can search on the bases of mobile number or name ",
            required: false,
            type: "string",
          },
        ],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
      },
  },
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/farmer/index.js
const router = require("express").Router();
const authorize = require("../../../middelware/authorized_routes");
const user_roles_enum = require("../../../entities/metadata/enums/user_roles");
const update_farmer_profile_controller =require('./controllers/update_farmer_profile_controller')
const delete_farmer_controller = require("./controllers/delete_farmer_controller");
const get_farmers_sorted_controller = require("./controllers/get_farmers_sorted_controller");
const add_farmer_controller = require("./controllers/add_farmer_controller");
const get_farmers_list_sorted_by_name_controller = require("./controllers/get_farmers_list_sorted_by_name_controller");
const transaction_list_controller = require("./controllers/transaction_list_controller");

router.patch("/profile",authorize([user_roles_enum.Merchant]),update_farmer_profile_controller);
router.delete("/profile",authorize([user_roles_enum.Merchant]),delete_farmer_controller);

router.get("/all",authorize([user_roles_enum.Merchant]),get_farmers_sorted_controller);
router.post('/',authorize([user_roles_enum.Merchant]),add_farmer_controller);
router.get("/ordered_list",authorize([user_roles_enum.Merchant]),get_farmers_list_sorted_by_name_controller);
router.get("/transaction_list",authorize([user_roles_enum.Merchant]),transaction_list_controller);

module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/farmer/controllers/delete_farmer_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const delete_farmer_service = require("../../../../entities_v2/farmer/service/delete_farmer_service");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");

module.exports = async (req, res) => {
  try {
    let farmer_ids = req.body.farmer_ids || [];
    const merchant_detail_id = req.user.user_profile_id;
    if (farmer_ids.length === 0) {
      return res.status(http_status_code_enum.bad_request).json(create_api_response(false,"farmer_ids is a mandatory param"));
    }
    const farmer_deleted = await delete_farmer_service(farmer_ids, merchant_detail_id);
    let deleted_farmer_response = create_api_response(true, "successfull");
    res.status(http_status_code_enum.ok).json(deleted_farmer_response);
  } catch (err) {
    error_log(err);
    res
      .status(http_status_code_enum.bad_request)
      .json(create_api_response(false, err.message));
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/farmer/controllers/update_farmer_profile_controller.js
const error_log = require('../../../../middelware/error_log');
const update_farmer_profile_service = require('../services/update_farmer_profile_service');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const farmer_name = req.body.farmer_name;
        const farmer_detail_id = +req.body.farmer_detail_id;
        const merchant_detail_id = req.user.user_profile_id;
        if (!farmer_detail_id || !farmer_name) {
            throw new ValidationError('farmer id and farmer name is mandatory to update');
        }

        const updated_farmer = await update_farmer_profile_service(farmer_name, farmer_detail_id, merchant_detail_id);
        const farmer_api_response = create_api_response(true, 'farmer name updated', updated_farmer);
        res.status(http_status_code_enum.ok).json(farmer_api_response);

    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/farmer/controllers/get_farmers_list_sorted_by_name_controller.js
'use strict';
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const get_farmers_list_sorted_by_name_service = require('../services/get_farmers_list_sorted_by_name_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const limit = +req.query.limit || 10;
        const page_no = +req.query.page_no || 1;
        const sort_fashion = req.query.sort_fashion || 'asc';
        const user_profile_id = +req.user.user_profile_id;
        const search_param = req.query.search_param || null;
        if (sort_fashion !== 'asc' && sort_fashion !== 'desc') {
            throw new ValidationError('wrong value in sort_fashion');
        }
        const farmers = await get_farmers_list_sorted_by_name_service(user_profile_id, limit, page_no, sort_fashion, search_param);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'Farmers Found', farmers));
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message, null));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/farmer/controllers/add_farmer_controller.js
// we have depricated the register_merchant_game_task_progress service on 18th jun 2024.
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const { adding_farmer_service } = require('../../../../entities/farmers/service/v4/adding_farmer_service');
const country_code_enum = require('../../../../enums/global/country_code');

const adding_farmer_controller = async (req, res) => {
    try {
        // Extract the merchant profile ID from the request user object
        const merchant_profile_id = +req.user.user_profile_id;

        // Extract the list of farmers to add from the request body
        let farmers_to_add = req.body.farmer_to_add || [];
        const farmers_to_add_length = farmers_to_add.length;

        // Extract the country code from the request user object or default to India
        const country_code = req.user?.country?.country_code || country_code_enum.india;

        let added_farmers = [];

        // Check if there are any farmers to add
        if (farmers_to_add.length > 0) {
            /* This code snippet is filtering out duplicate entries in the `farmers_to_add` array based
            on the `mobile_number` property and ensuring that the `mobile_number` is a valid
            10-digit number. Here's a breakdown of what it does: */
            farmers_to_add = [
                ...new Map( // spread operator here converts the iterators into array
                    farmers_to_add
                        .filter(obj => obj.mobile_number >= 1000000000 && obj.mobile_number < 10000000000)
                        .map(obj => [`${obj.mobile_number}`, obj]) // By using the mobile number as the key, we ensure that each key in the Map is unique.
                ).values()
            ];

            // Call the service to add farmers
            if (farmers_to_add.length > 0) { added_farmers = await adding_farmer_service({ merchant_profile_id, farmers_to_add, country_code }); }
        }

        // Create a success message
        const message = `${added_farmers.length} new farmers added from your selected ${farmers_to_add_length} successfully.`;

        // Send the success response
        return res.status(http_status_code_enum.ok).json(create_api_response(true, message, { farmers_added: added_farmers }));

    } catch (err) {
        // Log the error and send a bad request response
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}

module.exports = adding_farmer_controller



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/farmer/controllers/transaction_list_controller.js
'use strict';
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const transaction_list_service = require('../services/transaction_list_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const limit = +req.query.limit || 10;
        const page_no = +req.query.page_no || 1;
        const sort_fashion = req.query.sort_fashion || 'desc';
        const search_param = req.query.search_param || null;
        const user_profile_id = +req.user.user_profile_id;
        if (sort_fashion !== 'asc' && sort_fashion !== 'desc') {
            throw new ValidationError('wrong value in sort_fashion');
        }
        const farmers = await transaction_list_service(user_profile_id, limit, page_no, sort_fashion, search_param);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'successfull', farmers));
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message, null));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/farmer/controllers/get_farmers_sorted_controller.js
'use strict';
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const get_farmers_sorted = require('../../../../entities/farmers/service/v6/get_farmers_in_sorted_order');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const sort_by = +req.query.sort_by;
        const limit = +req.query.limit || 10;
        const page_no = +req.query.page_no || 1;
        const sort_fashion = req.query.sort_fashion || 'desc';
        const time_stamp = req.query.time_stamp || 0;
        const user_profile_id = +req.user.user_profile_id;
        if (sort_fashion !== 'asc' && sort_fashion !== 'desc') {
            throw new ValidationError('wrong value in sort_fashion');
        }
        const farmers = await get_farmers_sorted(user_profile_id, sort_by, time_stamp, limit, page_no, sort_fashion);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'Farmers Found', farmers));
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message, null));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/farmer/services/transaction_list_service.js
const {
  get_farmers_name_by_id,
  get_farmers_detail_by_id,
} = require("../../../../data_abstraction_layer/farmer/farmer_details");
const {
  get_farmer_wallet_details,
} = require("../../../../data_abstraction_layer/farmer/farmer_wallet");
const error_log = require("../../../../middelware/error_log");
const get_farmers_list_sorted_by_name_service=require('./get_farmers_list_sorted_by_name_service');

const transaction_list_service = async (
  user_profile_id,
  limit = 10,
  page_no = 1,
  sort_fashion = "desc",
  search_param
) => {
  try {
    // response to send
    let response = {
      farmer_transaction_details: [],
      count: 0,
    };
    let offset = (page_no - 1) * limit;
    // if search param then call ordered_farmer_list service 
    let farmer_ids=[],farmer_list;
    if(search_param || search_param?.length>0)
    {
      // not passing page number and limit because it will then effect the following code for wallet, and
      // sort fashion is also not passed because here it is unnecessary , in the following code we are sorting 
      farmer_list=await get_farmers_list_sorted_by_name_service(user_profile_id,0,0,null,search_param);
      farmer_ids=farmer_list.rows.map(element=>{
        return element?.id
      })
      // if the search farmer is not present then return empty response
      if(farmer_ids.length===0){
        return response
      }
    }
    // get farmer wallet detail for showing transaction details
    let farmer_wallet_detail = await get_farmer_wallet_details({
      user_profile_id,
      sort_fashion,
      limit,
      offset,
      farmer_ids,
      transacted:1
    });
    response.count=farmer_wallet_detail.count
    // loop through farmer walltet details to attach more details
      response.farmer_transaction_details=await Promise.all(farmer_wallet_detail.rows.map(async(element)=> {
      let farmer_detail_id = element?.farmer_detail_id;
      // get_farmers_detail_by_id is called to get the name and mobile number 
      let farmer_detail = await get_farmers_detail_by_id({
        farmer_detail_id,
        attributes: ["mobile_number", "name"],
      });
      // get_farmers_name_by_id is called to get the farmer name that merchant has stored in its contact
      let farmer_name_obj = await get_farmers_name_by_id({
        merchant_detail_id: user_profile_id,
        farmer_detail_id,
        attributes: ["farmer_name"],
      });
      // formatting the response to be sent 
      let response_obj = {
        farmer_name: farmer_name_obj?.farmer_name || farmer_detail.name,
        mobile_number: farmer_detail?.mobile_number,
        farmer_detail_id,
        pending_amount: element?.total_credit_amount || 0,
        cash_amount: element?.total_cash_amount || 0,
        payment_receive_amount: element?.total_payment_received || 0,
      };
      return response_obj;
    }))
    return response;
  } catch (ex) {
    error_log(ex);
    return { count: 0, rows: [] };
  }
};
module.exports = transaction_list_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/farmer/services/update_farmer_profile_service.js
const error_log = require('../../../../middelware/error_log');
const merchant_farmer_map_model = require('../../../../database/models/merchant_farmer_map');
const farmer_detail_model = require('../../../../database/models/farmer_detail');
const farmer_wallet_model = require('../../../../database/models/farmer_wallet');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const update_farmer_profile_service = (farmer_name, farmer_detail_id, user_profile_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            const merchant_farmer_map_exist = await merchant_farmer_map_model.findOne({
                where: {
                    merchant_detail_id: user_profile_id,
                    farmer_detail_id,
                    is_active: true
                }
            });
            if (merchant_farmer_map_exist) {
                merchant_farmer_map_exist.farmer_name = farmer_name;
                await merchant_farmer_map_exist.save();
                const formatted_response = await format_merchant_farmer_response(merchant_farmer_map_exist, user_profile_id, farmer_detail_id);
                resolve(formatted_response);
            } else {
                throw new ValidationError('no farmer mapped to this merchant');
            }
        } catch (ex) {
            error_log(ex);
            reject({ message: ex.message });
        }
    })
}

const format_merchant_farmer_response = async (merchant_farmer_map_data, user_profile_id, farmer_id) => {

    const { dnd_activated, createdAt, farmer_name, is_opt_out } = merchant_farmer_map_data
    const merchant_farmer_formatted_response = {
        dnd_activated,
        createdAt,
        farmer_name,
        is_opt_out,
        id: farmer_id
    }
    const farmer_pending_credit = await farmer_wallet_model.findOne({
        where: {
            merchant_detail_id: user_profile_id,
            farmer_detail_id: farmer_id,
            is_active: true
        }
    });
    if (farmer_pending_credit) {
        merchant_farmer_formatted_response.pending_amount = farmer_pending_credit.total_credit_amount;
        merchant_farmer_formatted_response.cash_amount = farmer_pending_credit.total_cash_amount;
        merchant_farmer_formatted_response.payment_receive_amount = farmer_pending_credit.total_payment_received;
    } else {
        merchant_farmer_formatted_response.pending_amount = 0;
        merchant_farmer_formatted_response.cash_amount = 0;
        merchant_farmer_formatted_response.payment_receive_amount = 0;
    }
    const farmer_details = await farmer_detail_model.findOne({
        where: {
            id: farmer_id,
            is_active: true
        },
        attributes: ['id', 'mobile_number']
    });
    merchant_farmer_formatted_response.mobile_number = farmer_details?.mobile_number;
    return ({ farmer: merchant_farmer_formatted_response });

}

module.exports = update_farmer_profile_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/farmer/services/enable_farmer_whatsapp.js
const error_log = require("../../../../middelware/error_log");
const farmer_detail_model = require("../../../../database/models/farmer_detail");
const Op = require("sequelize").Op;

module.exports = async (farmer_mobile_numbers, farmer_detail_ids) => {
    try {
        let query = {
            is_active: 1,
            whatsapp_enabled: 0
        };
        if (farmer_mobile_numbers && farmer_mobile_numbers?.length) {
            query.mobile_number = {
                [Op.in]: farmer_mobile_numbers
            }
        }
        if (farmer_detail_ids && farmer_detail_ids?.length) {
            query.id = {
                [Op.in]: farmer_detail_ids,
            }
        }
        const farmers = await farmer_detail_model.findAll({
            where: query,
            attributes: ["id", "whatsapp_enabled"]
        });
        for (let index = 0; index < farmers.length; index++) {
            farmers[index].whatsapp_enabled = true;
            await farmers[index].save();
        }
        return farmers;
    }
    catch (err) {
        error_log(err);
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/farmer/services/get_farmers_list_sorted_by_name_service.js
const {
  get_farmers_list,
} = require("../../../../data_abstraction_layer/farmer/farmer_details");
const { get_farmer_wallet_details } = require("../../../../data_abstraction_layer/farmer/farmer_wallet");
const error_log = require("../../../../middelware/error_log");
const get_farmers_list_sorted_by_name_service = async (
  user_profile_id,
  limit,
  page_no,
  sort_fashion,
  search_param
) => {
  try {
    //attributes to fetch for the table
    let farmer_detail_attributes = ["name", "mobile_number","whatsapp_enabled"],
      merchant_farmer_map_attributes = [
        "dnd_activated",
        "farmer_name",
        "is_opt_out",
      ];
      //fetching farmer list for a merchant 
    let farmer_list = await get_farmers_list({
      user_profile_id,
      limit,
      page_no,
      sort_fashion,
      farmer_detail_attributes,
      merchant_farmer_map_attributes,
      search_param
    });
  // formatting the response for front end and adding pending amount bcz FE needs its
    farmer_list.rows=await Promise.all(farmer_list.rows.map(async element=>{
      let farmer_transaction_details=await get_farmer_wallet_details({user_profile_id,
        attributes:['total_credit_amount'],
        farmer_ids:[element?.farmer_detail?.id]})
      return {
        dnd_activated:element?.dnd_activated,
        farmer_name:element?.farmer_name,
        is_opt_out:element?.is_opt_out,
        name:element?.farmer_detail?.name,
        mobile_number:element?.farmer_detail?.mobile_number,
        whatsapp_enabled:element?.farmer_detail?.whatsapp_enabled,
        id:element?.farmer_detail?.id,
        farmer_detail_id:element?.farmer_detail?.id,
        pending_amount: farmer_transaction_details.rows[0]?.total_credit_amount || 0,
      }
    }))
    return farmer_list;
  } catch (ex) {
    error_log(ex);
    return {count :0,rows:[]};
  }
};

module.exports = get_farmers_list_sorted_by_name_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sms/swagger/index.js
module.exports = {
    tags: {
      name: "sms",
    },
    paths: {
      "/sms_balance": {
        get: {
          tags: ["sms"],
          summary: "get sms_balace",
          description: "get sms_balace",
          operationId: "get_sms_balace",
          security: [{ Bearer: ["read"] }],
          parameters: [
          ],
          responses: {
            400: {
              description: "Invalid input",
            },
            200: {
              description: "success",
            },
          },
        }
      }
    },
  };
  


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sms/index.js
const router = require("express").Router();
const user_roles_enum = require("../../../entities/metadata/enums/user_roles");
const authorize = require("../../../middelware/authorized_routes");
const fetch_sms_balance_controller = require("../sms/controllers/fetch_sms_balance_controller");

router.get("/sms_balance", authorize([user_roles_enum.Merchant]),fetch_sms_balance_controller );

module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sms/controllers/fetch_sms_balance_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const fetch_sms_balance_service = require('../services/fetch_sms_balance_service');

const fetch_sms_balance_controller = async (req, res) => {
    try {
        const merchant_detail_id = req.user.user_profile_id;
        const sms_balance = await fetch_sms_balance_service(merchant_detail_id);

        const response = create_api_response(true, 'success', sms_balance);
        return res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}

module.exports = fetch_sms_balance_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/sms/services/fetch_sms_balance_service.js
const error_log = require('../../../../middelware/error_log');
const get_shop_wallet_detail = require('../../../../data_abstraction_layer/shop_wallet/get_shop_wallet_detail');
const get_promotional_media_by_feature_id = require('../../../../data_abstraction_layer/promotional/get_promotional_media_by_feature_id');
const features_enum = require('../../../../enums/features/features_enum');
const error = require('../../../../config/errors')
const get_cdn_url = require('../../../../common_services/aws/get_cdn_url');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * The function fetches SMS balance and promotional media for a user profile.
 * @param user_profile_id - The `user_profile_id` parameter is used to identify a specific user profile
 * in the system. It is required for fetching the SMS balance service for that particular user.
 * @returns The function `fetch_sms_balance_service` returns the SMS balance information for a user
 * profile along with promotional media related to shop promotions.
 */
const fetch_sms_balance_service = async (user_profile_id) => {
    try {
        if (!user_profile_id) {
            throw new ValidationError(error.no_user_profile_id);
        }
        const feature_id = features_enum.shop_promotion;
        let attributes = ['total_sms_credit_point'];
        const sms_balance = await get_shop_wallet_detail({ merchant_detail_id: user_profile_id, attributes });
        attributes = ['media_url', 'thumbnail'];
        let promotional_media = await get_promotional_media_by_feature_id({ feature_id, attributes });
        const cdn_url = await get_cdn_url();
        promotional_media = await Promise.all(promotional_media.map((element) => {
            return {
                thumbnail: cdn_url + element?.dataValues?.thumbnail,
                media_url: cdn_url + element?.dataValues?.media_url
            }
        }))
        sms_balance.dataValues.promotional_media = promotional_media;
        return sms_balance;
    } catch (err) {
        error_log(err);
        throw err;
    }
}

module.exports = fetch_sms_balance_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/auth/swagger/index.js
module.exports = {
    tags: {
        name: 'auth'
    },
    paths: {
        '/initiate_otp': {
            post: {
                tags: ['auth'],
                summary: 'get otp for a specifice mobile number.',
                description: '',
                operationId: 'initialize_otp',

                parameters: [
                    {
                        in: 'formData',
                        name: 'mobile_number',
                        description: 'this is users mobile number',
                        required: true,
                        type: 'integer'
                    },
                    {
                        in: 'formData',
                        name: 'country_code',
                        required: true,
                        type: 'integer'
                    },
                    {
                        in: 'formData',
                        name: 'message_id',
                        description: '',
                        required: false,
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'send_over_medium',
                        description: '1-> text, 2-> whatsapp, 3-> all',
                        required: false,
                        type: 'integer'
                    }
                ],
                responses: {
                    405: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/verify_otp': {
            post: {
                tags: ['auth'],
                summary: 'validate otp and generate token',
                description: 'validate otp send to the merchant mobile number and provide token to them',
                operationId: 'validate_otp',
                security: [],
                parameters: [
                    {
                        in: 'formData',
                        name: 'mobile_number',
                        description: 'mandatory',
                        required: true,
                        type: 'integer',
                        format: 'int64'
                    },
                    {
                        in: 'formData',
                        name: 'otp',
                        description: 'mandatory only if one_tap_token not available',
                        required: false,
                        type: 'integer',
                        format: 'int32'
                    },
                    {
                        in: 'formData',
                        name: 'role_id',
                        description: '1->Super_Admin\n2->Op_Manager\n3->Call_Center_Agent\n4->Finance_Manager \n5->Tiktok_Agent\n6->Merchant\n7->accounts\n8->digital_marketing\n9->District_Manager',
                        required: false,
                        type: 'string',
                        enum: [1, 2, 3, 4, 5, 6, 7, 8, 9]
                    }
                ],
                responses: {
                    405: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/sign_in': {
            post: {
                tags: [
                    'auth'
                ],
                summary: 'for login to the internal user',
                description: 'provide the valid crediential and get the associated token of the user',
                operationId: 'sign_in',
                security: [
                    {
                        Bearer: [
                            'read'
                        ]
                    }
                ],
                parameters: [
                    {
                        in: 'formData',
                        name: 'mobile_number',
                        description: 'this is users mobile number',
                        required: true,
                        type: 'integer'
                    },
                    {
                        in: 'formData',
                        name: 'password',
                        description: 'this is users password',
                        required: true,
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'role_id',
                        description: 'mandatory for signing in as a merchant \n 1->Super_Admin\n2->Op_Manager\n3->Call_Center_Agent\n4->Finance_Manager \n5->Tiktok_Agent\n7->accounts\n8->digital_marketing\n9->District_Manager\n10->Analytics_user\n11->Market linkage user',
                        required: false,
                        type: 'string',
                        enum: [
                            1,
                            2,
                            3,
                            4,
                            5,
                            7,
                            8,
                            9,
                            10,
                            11
                        ]
                    }
                ],
                responses: {
                    405: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        }
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/auth/index.js
const router = require('express').Router();

// const initialize_otp = require('./controllers/initialize_otp');
// const validate_otp = require('./controllers/validate_otp');
// const sign_in = require('./controllers/sign_in');
/*     ********deprecated ******
router.post('/initiate_otp', initialize_otp);
router.post('/verify_otp', validate_otp);
router.post('/sign_in', sign_in);
*/

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/auth/controllers/initialize_otp.js
const error_log = require('../../../../middelware/error_log');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const send_otp_via_text_service = require('../../../../entities/auth/service/send_otp_via_text');
const send_otp_via_whatsapp_service = require('../../../../entities_v2/auth/service/otp/send_otp_via_whatsapp');
const otp_send_medium_enum = require('../../../../entities_v2/metadata/enums/auth/otp_send_medium_enum');
const language_enum = require('../../../../entities_v2/metadata/enums/global/langauge');
const country_code_enum = require('../../../../enums/global/country_code');
const { generate_otp } = require('../../../../entities/auth/service/auth_service');
const DEFAULT_MESSAGE_ID = 'u6o+RJnCqoX';
const BLACK_LISTED = [9825031150];
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
module.exports = async (req, res) => {
    try {
        const mobile_number = +req.body.mobile_number;
        if (!mobile_number) {
            return res.status(http_status_code_enum.ok).json({
                message: 'Message not sent'
            });
        }
        if (BLACK_LISTED.indexOf(mobile_number) >= 0) {
            const err_message = 'Mobile number black listed';
            return res.status(http_status_code_enum.bad_request)
                .json(create_api_response(false, err_message, null));
        }
        const country_code = +req.body.country_code || country_code_enum.india;
        const send_over_medium = req.body.send_over_medium ?? otp_send_medium_enum.all;
        const language_id = +req.headers.language || language_enum.hindi;
        // have to call is_mobile_number function
        if (typeof mobile_number !== 'number' || mobile_number < 1000000000) {
            throw new ValidationError('Invalid mobile_number');
        }
        const message_id = DEFAULT_MESSAGE_ID;
        if (mobile_number) {
            const { otp } = await generate_otp(mobile_number, country_code);
            if (mobile_number !== 9896111054) {
                if (send_over_medium === otp_send_medium_enum.whatsapp) {
                    send_otp_via_whatsapp_service(mobile_number, otp, language_id, country_code)
                        .catch(err => {
                            error_log(err);
                        });
                } else if (send_over_medium === otp_send_medium_enum.all) {
                    send_otp_via_whatsapp_service(mobile_number, otp, language_id, country_code)
                        .catch(err => {
                            error_log(err);
                        });
                    send_otp_via_text_service(mobile_number, message_id, otp, language_id, country_code)
                        .catch(err => {
                            error_log(err);
                        });
                } else {
                    send_otp_via_text_service(mobile_number, message_id, otp, language_id, country_code)
                        .catch(err => {
                            error_log(err);
                        });
                }
            }
            res.json({
                status: true,
                message: 'OTP send to ' + mobile_number
            })
        } else {
            res.json({
                status: false,
                message: 'send mobile number',
                error_code: error_code.EMPTY_MOBILE
            })
        }
    } catch (ex) {
        /** logging */
        error_log(ex);
        res.json({
            status: false,
            message: ex.message,
            error_code: error_code.EX_MESSAGE
        })
    }
}

// const extract_mobile_number = async (mobile_number_hash) => {
//     try {
//         const { OTP_KEY } = require('../../../../constants/config');
//         const decrypt_service = require('../../../../utilities/decrypt');

//         const mobile_number_checksum = await decrypt_service(mobile_number_hash, OTP_KEY);
//         const today = new Date();
//         if (mobile_number_checksum.slice(0, 2) === today.getDate() && mobile_number_checksum.slice(-2) === today.getMonth()) {
//             return +mobile_number_checksum.slice(2, -2);
//         }
//         return null;
//     } catch (err) {
//         error_log(err);
//         throw err;
//     }
// }

const error_code = {
    EMPTY_MOBILE: 111,
    EX_MESSAGE: 112
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/auth/controllers/sign_in.js
const auth_service = require("../../../../common_services/auth/auth_service");
const error_log = require("../../../../middelware/error_log");

module.exports = async (req, res) => {
  try {
    let mobile_number = +req.body.mobile_number;
    let password = req.body.password;
    let role_id = +req.body.role_id;
    /** check user exist and activated else add merchant and generate secret*/
    if (mobile_number && password) {
      auth_service
        .verify_password(mobile_number, password, role_id)
        .then(async () => {
          /**generate token for user */
          const {
            generate_token,
          } = require("../../../../entities/auth/service/generate_token");
          try {
            var token = await generate_token(mobile_number, role_id);
            res.json({
              status: true,
              data: token,
            });
          } catch (ex) {
            /**logging */
            error_log(ex);
            res.json({
              status: false,
              message: ex.message,
            });
          }
        })
        .catch((ex) => {
          /** logging */
          error_log(ex);
          res.json({
            status: false,
            message: ex.message,
          });
        });
    } else {
      res.json({
        status: false,
        message: "send mobile number, password ",
      });
    }
  } catch (ex) {
    /** logging */
    error_log(ex);
    res.json({
      status: false,
      message: ex.message,
    });
  }
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/auth/controllers/validate_otp.js

const error_log = require('../../../../middelware/error_log');
const auth_service = require("../../../../entities/auth/service/auth_service");
const one_tap_call_status_service = require('../../../../entities/auth/service/one_tap_call_status_service');
const authentication_agent_enum = require("../../../../enums/authorization/authentication_agent_enum")
const create_authentication_log_service = require("../../../../entities_v2/auth/service/create_authentication_log");
const env = require("../../../../config/global_config").env;
const env_enum = require("../../../../enums/env/env_enum");
const country_code_enum = require("../../../../enums/global/country_code");
module.exports = async (req, res) => {
    try {
        let mobile_number = +req.body.mobile_number;
        let otp = req.body.otp;
        let role_id = +req.body.role_id;
        let one_tap_token = req.body.one_tap_token || '';
        let correlationId = req.body.correlationId;
        let country_code = +req.body.country_code || country_code_enum.india;
        let one_tap_response = req.body.one_tap_response;

        /** check user exist and activated else add merchant and generate secret*/
        if (!otp && (!mobile_number || !correlationId || !one_tap_response)) {
            res.json({
                status: false,
                message: "something is missing from the mobile_number or correlationId and otp"
            })
        }
        else {
            if (mobile_number && otp) {
                let valid;
                if ((otp === "0000" && env !== env_enum.production) || (mobile_number === 9896111054 && otp === "9074") || (mobile_number === 9999999999 && otp === "0000"))
                    valid = true;
                else
                    valid = await auth_service.validate_otp(mobile_number, otp, country_code);
                if (valid) {
                    const { generate_token } = require('../../../../entities/auth/service/generate_token');
                    create_authentication_log_service(mobile_number, authentication_agent_enum.otp)
                        .catch(err => {
                            error_log(err);
                        });
                    try {
                        let token = await generate_token(mobile_number, role_id, country_code);
                        res.json({
                            status: true,
                            data: { token }
                        })
                    }
                    catch (ex) {
                        /**logging */
                        error_log(ex);
                        res.json({
                            status: false,
                            message: ex.message,
                            error_code: error_code.EX_MESSAGE_1
                        })
                    }

                }
                else {
                    res.json({
                        status: false,
                        message: "Invalid OTP",
                        error_code: error_code.INVALID_OTP
                    })
                }
            }
            else if (mobile_number && correlationId && one_tap_token) {
                one_tap_call_status_service(mobile_number, one_tap_token, correlationId, one_tap_response)
                    .catch(ex => {
                        error_log(ex);
                    });
                let valid = await auth_service.validate_one_tap(correlationId, mobile_number);
                if (valid) {
                    /** if otp verified then generate token and send to merchant */
                    const { generate_token } = require('../service/generate_token');
                    create_authentication_log_service(mobile_number, authentication_agent_enum.oneTap)
                        .catch(err => {
                            error_log(err);
                        });
                    try {
                        let token = await generate_token(mobile_number, role_id, country_code);
                        res.json({
                            status: true,
                            data: { token }

                        })
                    }
                    catch (ex) {
                        /**logging */
                        error_log(ex);
                        res.json({
                            status: false,
                            message: ex.message,
                            error_code: error_code.EX_MESSAGE_1
                        })
                    }

                }
                else {
                    res.json({
                        status: true,
                        data: { token: null }

                    })
                }
            }
            else {
                res.json({
                    status: false,
                    message: "send mobile number and otp or one_tap_token and role_id",
                    error_code: error_code.MISSING_PARAMS
                })
            }
        }
    }
    catch (ex) {
        /** logging */
        error_log(ex);
        res.json({
            status: false,
            message: ex.message,
            error_code: error_code.EX_MESSAGE_2
        })
    }
}

const error_code = {
    "INVALID_OTP": 121,
    "EX_MESSAGE_1": 122,
    "MISSING_PARAMS": 123,
    "EX_MESSAGE_2": 124,
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/trade/swagger/index.js
module.exports = {
    tags: {
        name: 'trade'
    },
    paths: {
        '/fetch_trade_list': {
            post: {
                tags: ['trade'],
                summary: 'fetch trade list',
                description: '',
                operationId: 'fetch_trade_list',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'page_no',
                        description: 'page_no',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'limit',
                        description: 'limit',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'master_state_district_map',
                        description: 'array of strings (concatinated string value of district, state)',
                        required: false,
                        type: 'array'
                    },
                    {
                        in: 'formData',
                        name: 'crop_id',
                        description: '',
                        required: false,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'variety_id',
                        description: '',
                        required: false,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'supplier_state_id',
                        description: '',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'supplier_district_id',
                        description: '',
                        required: true,
                        type: 'number'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/fetch_trade_details': {
            get: {
                tags: ['trade'],
                summary: 'fetch trade details',
                description: '',
                operationId: 'fetch_trade_details',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'trade_price_id',
                        description: 'trade_price_id',
                        required: true,
                        type: 'string'
                    },
                    {
                        in: 'query',
                        name: 'supplier_state_id',
                        description: 'supplier_state_id',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'query',
                        name: 'supplier_district_id',
                        description: 'supplier_district_id',
                        required: true,
                        type: 'number'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/fetch_trade_serviceability_details': {
            get: {
                tags: ['trade'],
                summary: 'fetch trade serviceability details',
                description: '',
                operationId: 'fetch_trade_serviceability_details',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'supplier_state_id',
                        description: 'supplier_state_id',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'query',
                        name: 'supplier_district_id',
                        description: 'supplier_district_id',
                        required: true,
                        type: 'number'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        }
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/trade/index.js
const router = require('express').Router();
const authorize = require('../../../middelware/authorized_routes');
const user_roles_enum = require('../../../enums/user_profile/user_role');

const fetch_trade_list_from_ml_controller = require('./controllers/fetch_trade_list_from_ml_controller');
const fetch_trade_details_from_ml_controller = require('./controllers/fetch_trade_details_from_ml_controller');
const fetch_trade_serviceability_details_from_ml_controller = require('./controllers/fetch_trade_serviceability_details_from_ml_controller');

router.post('/fetch_trade_list', authorize([user_roles_enum.Merchant, user_roles_enum.Guest_user_b2c_app]), fetch_trade_list_from_ml_controller);
router.get('/fetch_trade_details', authorize([user_roles_enum.Merchant, user_roles_enum.Guest_user_b2c_app]), fetch_trade_details_from_ml_controller);
router.get('/fetch_trade_serviceability_details', authorize([user_roles_enum.Merchant, user_roles_enum.Guest_user_b2c_app]), fetch_trade_serviceability_details_from_ml_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/trade/controllers/fetch_trade_serviceability_details_from_ml_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const fetch_trade_serviceability_details_service = require('../services/fetch_trade_serviceability_details_from_ml_service');
const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const supplier_state_id = +req.query?.supplier_state_id || null;
        const supplier_district_id = +req.query?.supplier_district_id || null;

        // if supplier_state_id and supplier_district_id is not given, throw error
        if (!supplier_state_id || !supplier_district_id) {
            throw new ValidationError(error.supplier_state_and_district_id_check);
        }

        const is_serviceable = await fetch_trade_serviceability_details_service(supplier_state_id, supplier_district_id);

        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'successfull', is_serviceable));
    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/trade/controllers/fetch_trade_list_from_ml_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const fetch_trade_list_from_ml_service = require('../services/fetch_trade_list_from_ml_service');
const error = require('../../../../config/errors');
const feature_usage_counter_service = require('../../../../common_services/features/feature_usage_counter_service');
const feature_enums = require('../../../../enums/features/features_enum');
const user_role_enums = require('../../../../enums/user_profile/user_role');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const language_enum = require('../../../../entities_v2/metadata/enums/global/langauge');
const features_enum = require('../../../../enums/features/features_enum');
const feature_promotion_media_types_enum = require('../../../../enums/features/feature_promotion_media_types');

const trade_banner_display_number = require('../../../../constants/feature_promotion').TRADE_BANNER_DISPLAY;

const get_feature_promotional_media_service = require('../../../../common_services/features/get_feature_promotional_media_service');

module.exports = async (req, res) => {
    try {
        const page_no = +req.body?.page_no || 1;
        const limit = +req.body?.limit || 10;
        const crop_id = +req.body.crop_id;
        const variety_id = +req.body.variety_id;
        const master_state_district_map = req.body.master_state_district_map;
        const supplier_state_id = +req.body.supplier_state_id;
        const supplier_district_id = +req.body.supplier_district_id;
        const merchant_detail_id = +req.user.user_profile_id;
        const merchant_mobile_number = +req.user.mobile_number;
        const user_role = +req.user.user_role_id;

        let buyer_state_district_map;

        if (master_state_district_map && !Array.isArray(master_state_district_map)) {
            throw new ValidationError(error.invalid_master_state_district_map);
        }

        if (!page_no || !limit || !supplier_state_id || !supplier_district_id) {
            throw new ValidationError(error.no_page_no_or_limit_or_supplier_state_or_supplier_district_id);
        }

        // if variety_id is given, then crop_id can not be null
        if (!crop_id && variety_id) {
            throw new ValidationError(error.variety_is_given_but_not_crop_id);
        }

        if (master_state_district_map) {
            buyer_state_district_map = await Promise.all(master_state_district_map.map(async (location_element, i) => {
                const [district_id, state_id] = location_element.split('||');
                return {
                    state_id,
                    district_id
                }
            }));
        }
        // fetching list of all the trades (with filters like crop_id, variety_id, buyer_state_district_map),
        // passing on the supplier_state_id and supplier_district_id alongside. So that ML can check the serviceability of this trade.
        const trade_list = await fetch_trade_list_from_ml_service(page_no, limit, crop_id, variety_id, buyer_state_district_map, supplier_state_id, supplier_district_id, merchant_mobile_number);
        // everytime a person clicks on any tab or any feature(for ex - trade)
        // we increase the frequency count of feature usage in the db, so below is just the service call to increase the count. To avoid multiple occurence we call this API only on first page fetch

        /* This block of code is fetching promotional media for a specific feature. Here's a breakdown
        of what each line is doing: */
        const attributes = ['media_url', 'action_url'];
        const language_id = +req.headers.language || language_enum.hindi;
        const feature_id = features_enum.trade;
        const media_type_id = feature_promotion_media_types_enum.media_type_id

        const promotional_media = await get_feature_promotional_media_service({ feature_id, attributes, language_id, media_type_id });
        trade_list.promotional_media = promotional_media

        /* This block of code is iterating over the `active_trade_list` array within the `trade_list`
        object. It checks if the length of `active_trade_list` is greater than 0, if
        `trade_banner_display_number` is truthy, and if the length of `promotional_media` array is
        greater than 0. */
        if (trade_list?.active_trade_list.length > 0 && trade_banner_display_number && promotional_media.length > 0) {
            trade_list.active_trade_list.forEach((trade, index) => {
                if (index % trade_banner_display_number === 0) {
                    trade.show_banner = 1;
                } else {
                    trade.show_banner = 0;
                }
            });
        }

        if (page_no === 1 && user_role !== user_role_enums.Guest_user_b2c_app) {
            feature_usage_counter_service({ feature_id: feature_enums.trade, merchant_detail_id, state_id: supplier_state_id, district_id: supplier_district_id })
                .catch(err => {
                    error_log(err);
                });
        }
        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'successfull', trade_list));
    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/trade/controllers/fetch_trade_details_from_ml_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const fetch_trade_details_from_ml_service = require('../services/fetch_trade_details_from_ml_services');
const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const trade_price_id = req.query.trade_price_id;
        const supplier_state_id = +req.query.supplier_state_id;
        const supplier_district_id = +req.query.supplier_district_id;
        const merchant_mobile_number = +req.user.mobile_number;

        if (!trade_price_id || !supplier_district_id || !supplier_state_id) {
            throw new ValidationError(error.trade_price_id_supplier_state_district_id_check);

        }

        // fetching details of a specific trade, passing on the supplier_state_id and supplier_district_id alongside. So that ML can check the serviceability of this trade.
        const trade_details = await fetch_trade_details_from_ml_service(trade_price_id, supplier_state_id, supplier_district_id, merchant_mobile_number);

        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'successfull', trade_details));
    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/trade/services/fetch_trade_details_from_ml_services.js
const error_log = require('../../../../middelware/error_log');
const fetch_trade_details_from_ml = require('../../../../data_abstraction_layer/trade/fetch_trade_details_from_ml');
const error = require('../../../../config/errors');
const { generate_branch_io_link_service } = require('../../../../common_services/branch_io/generate_link_service')
const utm_enums = require('../../../../enums/branch_io/utm_enum');
const branch_io_enums = require('../../../../enums/branch_io/branch_io_enums')
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (trade_price_id, supplier_state_id, supplier_district_id, merchant_mobile_number) => {
    try { // fetching trade details of a specific trade through trade_price_id
        const trade_details = await fetch_trade_details_from_ml(trade_price_id, supplier_state_id, supplier_district_id, merchant_mobile_number);
        if (!trade_details || !trade_details?.data || !trade_details?.data?.data || Object.keys(trade_details?.data?.data).length === 0) {
            throw new ValidationError(error.no_trade_found);
        }

        const { price_breakup_buyer = {}, price_breakup_grn = {} } = trade_details?.data?.data || {};
        if (price_breakup_buyer?.net_buyer_price &&
            price_breakup_buyer?.unloading_price &&
            price_breakup_buyer?.gross_price &&
            price_breakup_buyer?.farmart_fee &&
            price_breakup_buyer?.net_price
        ) {

            price_breakup_buyer.net_price_without_discount =
                ((price_breakup_buyer?.net_buyer_price) -
                (price_breakup_buyer?.unloading_price) -
                ((price_breakup_buyer?.farmart_fee / 100) * (price_breakup_buyer?.gross_price))) || 0;

            price_breakup_buyer.net_price_without_discount = parseFloat(price_breakup_buyer.net_price_without_discount.toFixed(2));

            price_breakup_buyer.net_discount = Math.abs(
                (price_breakup_buyer?.net_price_without_discount) -
            (price_breakup_buyer?.net_price)
            );

            price_breakup_buyer.net_discount = parseFloat(price_breakup_buyer.net_discount.toFixed(2));

        } else {
            price_breakup_buyer.net_price_without_discount = null;
            price_breakup_buyer.net_discount = null;

        }
        if (price_breakup_grn?.net_buyer_price &&
            price_breakup_grn?.unloading_price &&
            price_breakup_grn?.gross_price &&
            price_breakup_grn?.farmart_fee &&
            price_breakup_grn?.net_price
        ) {

            price_breakup_grn.net_price_without_discount =
            ((price_breakup_grn?.net_buyer_price) -
            (price_breakup_grn?.unloading_price) -
            ((price_breakup_grn?.farmart_fee / 100) * (price_breakup_grn?.gross_price))) || 0;

            price_breakup_grn.net_price_without_discount = parseFloat(price_breakup_grn.net_price_without_discount.toFixed(2));

            price_breakup_grn.net_discount = Math.abs(
                (price_breakup_grn?.net_price_without_discount) -
                (price_breakup_grn?.net_price)
            );
            price_breakup_grn.net_discount = parseFloat(price_breakup_grn.net_discount.toFixed(2));
        } else {
            price_breakup_grn.net_price_without_discount = null;
            price_breakup_grn.net_discount = null;
        }

        // appending this price_breakup to trade_details
        trade_details.data.data.price_breakup_buyer = price_breakup_buyer;
        trade_details.data.data.price_breakup_grn = price_breakup_grn;

        // generating branch_io link for this trade_price_id
        const branch_io_link = await generate_branch_io_link_service({ props: { trade_id: trade_price_id }, utm: utm_enums.share, branch_io_enums_id: branch_io_enums.trade_detail });
        if (branch_io_link) {
            trade_details.data.data.branch_io_link = branch_io_link?.branchUrl || ''
        }
        // appending this branch_io link to trade brake_up
        return trade_details?.data?.data;
    } catch (err) {
        error_log(err);
        throw err;
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/trade/services/fetch_trade_list_from_ml_service.js
const error_log = require('../../../../middelware/error_log');
const fetch_trade_list_from_ml = require('../../../../data_abstraction_layer/trade/fetch_trade_list_from_ml');
const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (page_no, limit, crop_id, variety_id, buyer_state_district_map, supplier_state_id, supplier_district_id, merchant_mobile_number) => {
    try { // fetching trade_list in respect to crop_id, variety_id and state_districts
        const trade_list = await fetch_trade_list_from_ml(page_no, limit, crop_id, variety_id, buyer_state_district_map, supplier_state_id, supplier_district_id, merchant_mobile_number);
        if (!trade_list || !trade_list?.data || !trade_list?.data?.data ||
            !trade_list?.data?.data?.active_trade_list ||
            !trade_list?.data?.data?.expired_trade_list
            // (trade_list?.data?.data?.active_trade_list?.length<1 && trade_list?.data?.data?.active_trade_list?.length<1)

        ) { // checking if active_trade_list is empty or it has a length of 1 but the first element(object) is emtpy only (though this case occurs less but now, it's also managed)
            throw new ValidationError(error.no_trade_list_found);
        }
        return trade_list?.data?.data;
    } catch (err) {
        error_log(err);
        throw err;
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/trade/services/fetch_trade_serviceability_details_from_ml_service.js
const error_log = require('../../../../middelware/error_log');
const fetch_trade_serviceability_details = require('../../../../data_abstraction_layer/trade/fetch_trade_serviceability_details');
const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (supplier_state_id, supplier_district_id) => {
    try {
        const is_serviceable = await fetch_trade_serviceability_details(supplier_state_id, supplier_district_id);
        if (!is_serviceable || !is_serviceable?.data || !is_serviceable?.data?.data) {
            throw new ValidationError(error.no_serviceability_details);
        }
        return is_serviceable?.data?.data;
    } catch (err) {
        error_log(err);
        throw err;
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/gamification/swagger/index.js
module.exports = {
    tags: {
      name: "gamification",
    },
    paths: {
      "/banner_reports": {
        get: {
          tags: ["gamification"],
          summary: "get gamification banner",
          description: "",
          operationId: "get_gamification_banner",
          security: [{ Bearer: ["read"] }],
          parameters: [
            {
              in: "query",
              name: "start_date",
              description: "2015-03-25 10:15:19",
              required: true,
              type: "string",
            },
            {
                in: "query",
                name: "end_date",
                description: "2015-03-25 10:15:19",
                required: true,
                type: "string",
              },
          ],
          responses: {
            400: {
              description: "Invalid input",
            },
            200: {
              description: "success",
            },
          },
        },
      },    
      "/banner/reject": {
        post: {
          tags: ["gamification"],
          summary: "reject gamification banner",
          description: "",
          operationId: "reject_gamification_banner",
          security: [{ Bearer: ["read"] }],
          parameters: [
            {
                in: "formData",
                name: "gamification_banner_id",
                description: "",
                required: true,
                type: "string",
              },
          ],
          responses: {
            400: {
              description: "Invalid input",
            },
            200: {
              description: "success",
            },
          },
        },
      },      
    },
  };
  


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/gamification/index.js
const router = require("express").Router();
const authorize = require("../../../middelware/authorized_routes");
const user_roles_enum = require("../../../entities/metadata/enums/user_roles");
const fetch_pending_banner_controller=require('./controllers/fetch_pending_banner');
const approve_banner_changes_controller=require('./controllers/approve_banner_changes_controller')
const update_banner_controller=require('./controllers/update_banner_controller')
const get_gamification_banner_controller = require("../../v1/gamification/controllers/get_gamification_banner_controller");
const reject_gamification_banner_controller = require("./controllers/reject_gamification_banner_controller");

router.get("/banner/pending",authorize([user_roles_enum.digital_marketing]),fetch_pending_banner_controller);
router.patch("/banner/approve",authorize([user_roles_enum.digital_marketing]),approve_banner_changes_controller);
router.patch("/banner",authorize([user_roles_enum.digital_marketing]),update_banner_controller);
router.get("/banner_reports", authorize([user_roles_enum.digital_marketing]), get_gamification_banner_controller);
router.post("/banner/reject", authorize([user_roles_enum.digital_marketing]), reject_gamification_banner_controller);

module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/gamification/service/update_banner_details_service.js
const error_log = require("../../../../middelware/error_log");
const gamification_banners_model = require("../../../../database/mongoose/mongoose_models/gamification_banners");
const gamification_banner_status_enum = require("../../../../entities_v2/metadata/enums/gamification/gamification_banner_status_enum");
const post_request_service = require("../../../../utilities/external_API_calls/post_request");
const save_banner_url_in_s3=require('../../../../common_services/media/save_banner_url_in_s3');
const { GAMIFICATION_BANNER_API_KEY } = require("../../../../constants/global");
module.exports = async (
  gamification_banner_id,
  merchant_name,
  mobile_number,
  shop_name,
  full_address,
  pin_code,
  merchant_uploaded_image_url,
  banner_height,
  banner_width
) => {
  return new Promise(async (resolve, reject) => {
    try {
      let where_condition = {
        _id: gamification_banner_id,
        is_active:1
      };
      let gaimification_banners_details =
        await gamification_banners_model.findOne(where_condition);

      if (
        gaimification_banners_details &&
        gaimification_banners_details.status ===
          gamification_banner_status_enum.completed
      ) {
        let selected_image_url;
        let selected_template_id;
        for (let i = 0; i < gaimification_banners_details.banners.length; i++) {

          if (gaimification_banners_details.banners[i].selected) {
            let banner_template_id_ =
              gaimification_banners_details.banners[i].banner_template_id;

            const banner_created = await generate_banner(
              banner_template_id_,
              merchant_uploaded_image_url,
              full_address,
              mobile_number,
              merchant_name,
              shop_name
            );
            if (
              !banner_created ||
              !banner_created?.data?.uid ||
              !banner_created?.data?.image_url_png
            )
              throw new Error("banner not generated");
            gaimification_banners_details.banners[i].uid =
              banner_created.data.uid;
              banner_created.data.image_url= await save_banner_url_in_s3(banner_created.data.image_url)
            gaimification_banners_details.banners[i].image_url =
              banner_created.data.image_url_png;
            selected_image_url = banner_created.data.image_url_png;
            selected_template_id = gaimification_banners_details.banners[i].banner_temmplate_id;
          }
        }
        gaimification_banners_details.merchant_name = merchant_name;
        gaimification_banners_details.mobile_number = mobile_number;
        gaimification_banners_details.shop_name = shop_name;
        gaimification_banners_details.full_address = full_address;
        gaimification_banners_details.pin_code = pin_code;
        gaimification_banners_details.merchant_uploaded_image_url =
          merchant_uploaded_image_url;
        gaimification_banners_details.banner_height = banner_height;
        gaimification_banners_details.banner_width = banner_width;
        await gaimification_banners_details.updateOne(
          gaimification_banners_details
        );
        let temp_pending_banner_obj = gaimification_banners_details.toObject();
        temp_pending_banner_obj.selected_image_url = selected_image_url;
        temp_pending_banner_obj.gamification_banner_id =
          gaimification_banners_details.id;
        delete temp_pending_banner_obj.banners;
        delete temp_pending_banner_obj["_id"];
        return resolve(temp_pending_banner_obj);
      } else {
        return reject({ message: "banner not found " });
      }
    } catch (err) {
      error_log(err);
      return reject({ message: err.message });
    }
  });
};

const generate_banner = (
  banner_template_id,
  merchant_uploaded_image_url,
  full_address,
  mobile_number,
  merchant_name,
  shop_name
) => {
  return new Promise(async (resolve, reject) => {
    try {
      const API_URL = "https://sync.api.bannerbear.com/v2/images";
      const API_KEY = GAMIFICATION_BANNER_API_KEY;
      const API_HEADERS = {
        "Content-Type": "application/json",
        Authorization: `Bearer ${API_KEY}`,
      };

      const body = {
        template: banner_template_id,
        modifications: [
          {
            name: "Retailer_image",
            image_url: merchant_uploaded_image_url,
          },
          {
            name: "Shop_Address_Pincode",
            text: full_address,
            color: null,
            background: null,
          },
          {
            name: "Mobile_Number",
            text: mobile_number,
            color: null,
            background: null,
          },
          {
            name: "Retailer_name",
            text: merchant_name,
            color: null,
            background: null,
          },
          {
            name: "mobileNumberTitle",
            text: "मोबाइल नंबर: ",
            color: null,
            background: null,
          },
          {
            name: "Shop_Name",
            text: shop_name.toUpperCase(),
            color: null,
            background: null,
          },
        ],
        transparent: false,
      };
      const response = await post_request_service(
        API_URL,
        body,
        API_HEADERS,
        "Gamification"
      );
      return resolve(response);
    } catch (err) {
      error_log(err);
      return reject({ message: err.message });
    }
  });
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/gamification/service/get_gamification_banner_service.js
const error_log = require("../../../../middelware/error_log");
const gamification_banner_model = require("../../../../database/mongoose/mongoose_models/gamification_banners");

module.exports = async (start_date,end_date) => {
    try {
        let where_condition = {
            createdAt:{$gte:start_date,$lt:end_date},
            is_active:1
        }
        let gamification_banner_data=await gamification_banner_model.find(where_condition)
        gamification_banner_data=formatt_gamification_response(gamification_banner_data)
        return gamification_banner_data
    }
    catch (err) {
        error_log(err);
        return ({ message: err.message });
    }
}

const formatt_gamification_response=(gamification_banner_data)=>{
    try{
    let banner_arr=[]
    for(let i=0;i<gamification_banner_data.length;i++)
    {
        let banner_obj={}
        banner_obj._id=gamification_banner_data[i].id
        banner_obj.banner_height=gamification_banner_data[i].banner_height
        banner_obj.banner_width=gamification_banner_data[i].banner_width
        banner_obj.full_address=gamification_banner_data[i].full_address
        banner_obj.merchant_name=gamification_banner_data[i].merchant_name
        banner_obj.merchant_uploaded_image_url=gamification_banner_data[i].merchant_uploaded_image_url
        banner_obj.mobile_number=gamification_banner_data[i].mobile_number
        banner_obj.shop_name=gamification_banner_data[i].shop_name
        banner_obj.created_at=gamification_banner_data[i].createdAt
        banner_obj.updated_at=gamification_banner_data[i].updatedAt
        banner_obj.pin_code=gamification_banner_data[i].pin_code
        let banner=gamification_banner_data[i].banners
        for(let j=0;j<banner.length;j++)
        {
            if(banner[j].selected)
            {
                banner_obj.banner_selected_img_url=banner[j].image_url
            }
        }
        banner_arr.push(banner_obj);
    }
    return banner_arr;
}
catch(err){
    error_log(err);
    return ({ message: err.message });
}
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/gamification/service/reject_gamification_banner_service.js
const error_log = require("../../../../middelware/error_log");
const gamification_banner_model = require("../../../../database/mongoose/mongoose_models/gamification_banners");

module.exports = async (gamification_banner_id) => {
    try {
        let where_condition = {
            _id:gamification_banner_id,
            is_active:1
        }
        let gamification_banner_data=await gamification_banner_model.findOne(where_condition);
        if(gamification_banner_data)
        {
            gamification_banner_data.is_active=0
            await gamification_banner_data.save();
        }
        else{
            throw new Error("banner not found to delete");
        }
        return {gamification_banner_data}
    }
    catch (err) {
        error_log(err);
        return ({ message: err.message });
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/gamification/service/approve_banner_changes_service.js
const error_log = require("../../../../middelware/error_log");
const gamification_banners_model = require("../../../../database/mongoose/mongoose_models/gamification_banners");
const gamification_banner_status_enum = require("../../../../entities_v2/metadata/enums/gamification/gamification_banner_status_enum");
module.exports = async (gamification_banner_id) => {
  return new Promise(async (resolve, reject) => {
    try {
        let where_condition={
            _id:gamification_banner_id,
            is_active:1
        }
        let gaimification_banners = await gamification_banners_model
        .findOne(where_condition);
        console.log(gaimification_banners); 
        if(gaimification_banners || gaimification_banners?.status === gamification_banner_status_enum.completed)
        {
            gaimification_banners.status=gamification_banner_status_enum.approved
            await gaimification_banners.save();
            return resolve(gaimification_banners);
        }
        else
        {
            return reject({message:"gamification not completed "}); 
        }

    } catch (err) {
      error_log(err);
      return reject({ message: err.message });
    }
  });
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/gamification/service/fetch_pending_banner_service.js
const error_log = require("../../../../middelware/error_log");
const gamification_banners_model = require("../../../../database/mongoose/mongoose_models/gamification_banners");
const gamification_banner_status_enum = require("../../../../entities_v2/metadata/enums/gamification/gamification_banner_status_enum");
module.exports = async (start_date, page_no, limit) => {
  return new Promise(async (resolve, reject) => {
    try {
      let where_condition = {
        status: gamification_banner_status_enum.completed,
        is_active:1
      };
      if (start_date) {
        where_condition.createdAt = { $gte: start_date };
      }
      let pending_banners = await gamification_banners_model
        .find(where_condition)
        .sort({ updatedAt: -1 })
        .skip((page_no - 1) * limit)
        .limit(limit)
        .select(
          "banners banner_height banner_width merchant_name merchant_uploaded_image_url mobile_number shop_name pin_code full_address is_active"
        );
      pending_banner_response = pending_banners.map((pending_banner) => {
        let temp_pending_banner_obj = pending_banner.toObject();
        pending_banner.banners.forEach((element) => {
          if (element.selected) {
            temp_pending_banner_obj.selected_image_url = element.image_url;
            temp_pending_banner_obj.selected_template_id =
              element.banner_template_id;
          }
        });
        temp_pending_banner_obj.gamification_banner_id = pending_banner.id;
        delete temp_pending_banner_obj.banners;
        delete temp_pending_banner_obj["_id"];
        return temp_pending_banner_obj;
      });
      return resolve(pending_banner_response);
    } catch (err) {
      error_log(err);
      return reject({ message: err.message });
    }
  });
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/gamification/controllers/fetch_pending_banner.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const fetch_pending_banner_service=require('../service/fetch_pending_banner_service');
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
module.exports = async (req, res) => {
    try {

        let page_no = +req.query.page_no || 1;
        let limit = +req.query.limit || 20;
        let start_date = +req.query.start_date||0 ;

        const pending_banner_response= await fetch_pending_banner_service(start_date,page_no,limit);
        
        let response = create_api_response(true, "success", pending_banner_response);
        res.status(http_status_code_enum.ok).json(response);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/gamification/controllers/reject_gamification_banner_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const reject_gamification_banner_service = require('../service/reject_gamification_banner_service')
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const gamification_banner_id = req.body.gamification_banner_id
        if (!gamification_banner_id) {
            throw new ValidationError('gamification_banner_id is missing')
        }
        await reject_gamification_banner_service(gamification_banner_id);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'success'));
    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/gamification/controllers/update_banner_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const update_banner_details_service = require('../service/update_banner_details_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const gamification_banner_id = req.body.gamification_banner_id;
        const { merchant_name, mobile_number, shop_name, full_address } = req.body;
        const { merchant_uploaded_image_url } = req.body;
        const banner_height = +req.body.banner_height || 0;
        const banner_width = +req.body.banner_width || 0;
        const pin_code = +req.body.pin_code || 0;

        if (!banner_height || !banner_width) {
            throw new ValidationError('banner_height and banner_width are mandatory parameters');
        }

        if (!merchant_name || !mobile_number || !shop_name || !full_address || !merchant_uploaded_image_url) {
            throw new ValidationError('name, mobile_number, shop_name, full_address and merchant_uploaded_image_url are mandatory params');
        }
        if (!pin_code) {
            throw new ValidationError('pin_code is mandatory param');
        }
        const updated_banner = await update_banner_details_service(gamification_banner_id, merchant_name, mobile_number, shop_name, full_address, pin_code, merchant_uploaded_image_url, banner_height, banner_width);

        const response = create_api_response(true, 'banners successfully updated', updated_banner);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/gamification/controllers/get_gamification_banner_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const get_gamification_banner_service = require('../service/get_gamification_banner_service')
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        let start_date = req.query.start_date;
        let end_date = req.query.end_date;
        start_date = new Date(start_date);
        end_date = new Date(end_date);
        if (!start_date || !end_date) {
            throw new ValidationError('start date or end date is missing')
        }
        const gamification_banner_response = await get_gamification_banner_service(start_date, end_date);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'success', { gamification_banner_response }));
    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/gamification/controllers/approve_banner_changes_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const gamification_banner_satatus_enum=require('../../../../entities_v2/metadata/enums/gamification/gamification_banner_status_enum');
const approve_banner_changes_service=require('../service/approve_banner_changes_service');
module.exports = async (req, res) => {
    try {
        const gamification_banner_id=req.body.gamification_banner_id;
        const approve_banner_changes_response= await approve_banner_changes_service(gamification_banner_id);
        
        let response = create_api_response(true, "success", approve_banner_changes_response);
        res.status(http_status_code_enum.ok).json(response);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/notification/swagger/index.js
module.exports = {
  tags: {
    name: "notification",
  },
  paths: {
    "/set_fcm_token": {
      post: {
        tags: ["notification"],
        summary: "set fcm token for ml users and merchant",
        description: "set_fcm_token",
        operationId: "set_fcm_token",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "formData",
            name: "fcm_token",
            description: "fcm token for firebase notification",
            required: true,
            type: "string",
          },
        ],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    }
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/notification/index.js
const router = require("express").Router();
const set_fcm_token_controller = require("./controllers/set_fcm_token_controller");

router.post("/set_fcm_token", set_fcm_token_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/notification/controllers/set_fcm_token_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");

const fcm_token_service = require('../services/set_fcm_token_service');

module.exports = async (req, res) => {
    try {
        let { user_profile_id, user_role_id } = req.user;
        let { fcm_token } = req.body;
        if (fcm_token) {
            let result = await fcm_token_service(user_profile_id, user_role_id, fcm_token);
            return res.status(http_status_code_enum.ok).json(create_api_response(true, result.message));
        }
        else {
            return res.json(create_api_response(false, 'fcm_token not supplied.'));
        }

    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }

}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/notification/services/po_notification.js
const error_log = require("../../../../middelware/error_log");
const notification_event_enum = require("../../../../enums/notification/notification_event_enum");
const order_tracking_notification = require("./order_tracking_notification");
const { get_shop_details } = require("../../../../data_abstraction_layer/merchant/shop_details");
const { get_po_details_by_id } = require('../../../../data_abstraction_layer/order_tracking/purchase_crop_orders');
const convert_kg_to_ton = require("../../../../utilities/unit_conversion/convert_kg_to_ton");
const po_stage_enum = require("../../../../enums/order_tracking/po_stage_enum");
const po_payment_1_whatsapp = require("../../../../common_services/order_tracking/po_payment_1_whatsapp");

const { get_crop_vernacular_metadata_by_id } = require("../../../../data_abstraction_layer/crop/crop_vernacular_metadata");
const { get_merchant_detail_by_id } = require("../../../../data_abstraction_layer/merchant/merchant_details");
const po_payment_2_whatsapp = require("../../../../common_services/order_tracking/po_payment_2_whatsapp");
const po_rejected_by_farmart_whatsapp = require("../../../../common_services/order_tracking/po_rejected_by_farmart_whatsapp");
module.exports = async (
  {
    payment_part_1, payment_part_2, weight_slip_url, handover_document_url, po_id, master_merchant_detail_id, weight_in_kg, stage, po_farmart_id
  }
) => {
  try {
    let po_details = await get_po_details_by_id({ po_id, attributes: ['crop_id'] });
    let shop_details = await get_shop_details({
      master_merchant_detail_id, attributes: ['merchant_detail_id', 'language_selected']
    });
    let weight_in_ton = await convert_kg_to_ton({ weight_in_kg }).weight_in_kg;
    let crop_id = po_details?.crop_id;
    let merchant_detail_ids = shop_details.rows.map(async (ele) => {
      let merchant_detail_id = ele.merchant_detail_id
      const merchant_detail = await get_merchant_detail_by_id({ merchant_detail_id });
      let language_selected = ele?.language_selected
      let crop_detail;
      if (crop_id) {
        crop_detail = await get_crop_vernacular_metadata_by_id({ crop_id, language_id: language_selected, attributes: ['name'] })
      }
      //reject po by farmart notification
      if (stage == po_stage_enum.rejected_by_farmart) {
        await po_rejected_by_farmart_whatsapp({ language: language_selected, merchant_name: merchant_detail?.name, crop_name: crop_detail?.name, weight_in_mt: weight_in_ton, branch_url: "https://farmart.app.link/myorder", merchant_mobile_number: merchant_detail?.mobile_number, country_code: merchant_detail?.country_code });
        await order_tracking_notification({ merchant_detail_id, crop_id, notification_event_id: notification_event_enum.po_rejected_by_farmart, weight_in_ton, language_selected });
      }
      else if (payment_part_2) {
        await po_payment_2_whatsapp({ language: language_selected, crop_name: crop_detail?.name, farmart_po_id: po_farmart_id, weight_in_mt: weight_in_ton, branch_url: "https://farmart.app.link/myorder", payment_amount: payment_part_2.amount, merchant_mobile_number: merchant_detail?.mobile_number, country_code: merchant_detail?.country_code });
        await order_tracking_notification({ merchant_detail_id, crop_id, notification_event_id: notification_event_enum.payment_2_completed, weight_in_ton, language_selected });
      }
      else if (payment_part_1) {
        await po_payment_1_whatsapp({ language: language_selected, crop_name: crop_detail?.name, farmart_po_id: po_farmart_id, weight_in_mt: weight_in_ton, branch_url: "https://farmart.app.link/myorder", payment_amount: payment_part_1.amount, merchant_mobile_number: merchant_detail?.mobile_number, country_code: merchant_detail?.country_code });
        await order_tracking_notification({ merchant_detail_id, crop_id, notification_event_id: notification_event_enum.payment_1_completed, weight_in_ton, language_selected });
      }
      else if (weight_slip_url || handover_document_url) {
        await order_tracking_notification({ merchant_detail_id, crop_id, notification_event_id: notification_event_enum.loading_completed, language_selected });
      }
    });
  } catch (err) {
    error_log(err);
    return null;
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/notification/services/order_tracking_whatsapp.js
const error_log = require("../../../../middelware/error_log");
const firebase_admin = require("../../../../notifier/firebase_admin");
const fetch_notification_string_service = require("../../../../entities_v2/notification/services/fetch_notification_string");
const notification_event_enum = require("../../../../enums/notification/notification_event_enum");
const stage_enum = require('../../../../enums/order_tracking/lead_stage_enum')
const { get_crop_vernacular_metadata_by_id } = require("../../../../data_abstraction_layer/crop/crop_vernacular_metadata");
const lead_reschedule_whatsapp = require("../../../../common_services/order_tracking/lead_reschedule_whatsapp");
const get_merchant_by_mobile_number = require("../../../../data_abstraction_layer/merchant/get_merchant_by_mobile_number");
const lead_customer_not_available_whatsapp = require("../../../../common_services/order_tracking/lead_customer_not_available_whatsapp");
const lead_rejected_by_farmart = require("../../../../common_services/order_tracking/lead_rejected_by_farmart");
const po_generated_whatsapp = require("../../../../common_services/order_tracking/po_generated_whatsapp");
module.exports = async (
  {
    pa_name,
    pa_mobile_number,
    farmart_lead_id,
    language_selected,
    merchant_detail_id,
    stage,
    lead_id,
    notification_event_id,
    crop_id,
    weight_in_ton,
    rejection_reason
  }
) => {
  try {
    let crop_detail;
    if (crop_id) {
      crop_detail = await get_crop_vernacular_metadata_by_id({ crop_id, language_id: language_selected, attributes: ['name'] })
    }
    const merchant = await get_merchant_by_mobile_number({ merchant_detail_id });
    let whatsapp_response = null;
    if (stage) {
      switch (stage) {
        case stage_enum.sample_created:
          notification_event_id = notification_event_enum.sample_created;
          break;
        case stage_enum.po_generated:
          whatsapp_response = await po_generated_whatsapp({ weight_in_mt: weight_in_ton, language: language_selected, crop_name: crop_detail?.name, merchant_name: merchant?.name, merchant_mobile_number: merchant?.mobile_number, country_code: merchant?.country_code, branch_url: "myorder" });
          break;
        case stage_enum.rejected_by_farmart:
          whatsapp_response = await lead_rejected_by_farmart({ crop_name: crop_detail?.name, language: language_selected, merchant_name: merchant?.name, weight_in_mt: weight_in_ton, farmart_lead_id, branch_url: "myorder", rejection_reason, merchant_mobile_number: merchant?.mobile_number, country_code: merchant?.country_code });
          break;
        case stage_enum.customer_not_available:
          whatsapp_response = await lead_customer_not_available_whatsapp({ pa_name, pa_mobile_number, language: language_selected, merchant_name: merchant?.name, merchant_mobile_number: merchant?.mobile_number, country_code: merchant?.country_code });
          break;
        case stage_enum.reschedule:
          whatsapp_response = await lead_reschedule_whatsapp({ pa_name, pa_mobile_number, language: language_selected, merchant_name: merchant?.name, merchant_mobile_number: merchant?.mobile_number, country_code: merchant?.country_code });
          break;
      }
    }
    console.log(whatsapp_response);


  } catch (err) {
    error_log(err);
    return null;
  }
};

const send_push_notification = async (crop_name, notification_event_id, merchant_ids, weight_in_ton, language_selected) => {
  const campaign_broadcast_notification = await fetch_notification_string_service(
    notification_event_id,
    language_selected,
    {
      crop_name,
      weight_in_ton
    }
  );
  firebase_admin.send_notification(
    merchant_ids,
    campaign_broadcast_notification.title,
    campaign_broadcast_notification.message,
    "", //img url
    {
      new_screen_name: "ORDER_TRACKING",
      new_tab_name: "MARKETING_TAB",
    }
  )
    .catch((err) => {
      error_log(err);
    });
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/notification/services/order_tracking_notification.js
const error_log = require("../../../../middelware/error_log");
const language_enum = require("../../../../enums/global/language");
const firebase_admin = require("../../../../notifier/firebase_admin");
const fetch_notification_string_service = require("../../../../entities_v2/notification/services/fetch_notification_string");
const notification_event_enum = require("../../../../enums/notification/notification_event_enum");
const stage_enum = require('../../../../enums/order_tracking/lead_stage_enum')
const { get_crop_id_from_lead_id } = require('../../../../data_abstraction_layer/order_tracking/purchase_crop_leads');
const { get_crop_vernacular_metadata_by_id } = require("../../../../data_abstraction_layer/crop/crop_vernacular_metadata");
const { get_shop_details } = require("../../../../data_abstraction_layer/merchant/shop_details");
module.exports = async (
  {
    language,
    merchant_detail_id,
    merchant_detail_ids,
    lead_id,
    stage,
    notification_event_id,
    crop_id,
    weight_in_ton,
    language_selected
  }
) => {
  try {
    //abs layer
    // if (lead_id) {
    //   let leads_details = await get_crop_id_from_lead_id({ lead_id, attributes: ['crop_id', 'merchant_detail_id'] })
    //   crop_id = leads_details?.crop_id
    //   merchant_detail_id = leads_details?.merchant_detail_id;
    // }
    if (!language_selected) {
      let shop_details = await get_shop_details({ merchant_detail_id });
      language_selected = shop_details.rows[0]?.language_selected || language_enum.english
    }
    let crop_detail;
    if (crop_id) {
      crop_detail = await get_crop_vernacular_metadata_by_id({ crop_id, language_id: language_selected, attributes: ['name'] })
    }
    if (stage) {
      switch (stage) {
        case stage_enum.sample_created:
          notification_event_id = notification_event_enum.sample_created;
          break;
        case stage_enum.po_generated:
          notification_event_id = notification_event_enum.po_generated;
          break;
        case stage_enum.rejected_by_farmart:
          notification_event_id = notification_event_enum.rejected_by_farmart;
          break;
        case stage_enum.customer_not_available:
          notification_event_id = notification_event_enum.customer_not_available;
          break;
        case stage_enum.reschedule:
          notification_event_id = notification_event_enum.reschedule;
          break;
      }
    }
    if (notification_event_id)
      await send_push_notification(crop_detail?.name, notification_event_id, merchant_detail_ids || [merchant_detail_id], weight_in_ton, language_selected);

    return " sms and notification send ";
  } catch (err) {
    error_log(err);
    return null;
  }
};

const send_push_notification = async (crop_name, notification_event_id, merchant_ids, weight_in_ton, language_selected) => {
  const campaign_broadcast_notification = await fetch_notification_string_service(
    notification_event_id,
    language_selected,
    {
      crop_name,
      weight_in_ton
    }
  );

  firebase_admin.send_notification(
    merchant_ids,
    campaign_broadcast_notification.title,
    campaign_broadcast_notification.message,
    "", //img url
    {
      new_screen_name: "ORDER_TRACKING",
      new_tab_name: "MARKETING_TAB",
    }
  )
    .catch((err) => {
      error_log(err);
    });
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/notification/services/set_fcm_token_service.js
const error_log = require('../../../../middelware/error_log');
const fcm_token_for_notification_model = require('../../../../database/models/fcm_token_for_notification');
const user_role = require('../../../../enums/user_profile/user_role');

const set_fcm_token = (user_profile_id, user_role_id, fcm_token) => {
    return new Promise(async (resolve, reject) => {
        try {
            const query = {
                is_active: true,
                merchant_detail_id: null,
                user_profile_id: null
            }
            if(user_role_id === user_role.Merchant)
                query.merchant_detail_id = user_profile_id
            else
                query.user_profile_id = user_profile_id

            let fcm_token_exist = await fcm_token_for_notification_model.findOne({
                where: query
            });
            if (fcm_token_exist) {
                fcm_token_exist.token = fcm_token;
                await fcm_token_exist.save();
                resolve({ message: 'token updated' });
            }
            else {
                let fcm_token_obj = {
                    token: fcm_token,
                    ...query
                };
                await fcm_token_for_notification_model.build(fcm_token_obj).save();
                resolve({ message: 'token added' });
            }
        } catch (ex) {
            error_log(ex);
            reject({ message: ex.message })
        }
    })
}
module.exports = set_fcm_token;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/faq/swagger/index.js
module.exports = {
    tags: {
        name: 'faq'
    },
    paths: {
        '/': {
            get: {
                tags: ['faq'],
                summary: 'fetch faq_list',
                description: '',
                operationId: 'faq_list',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'language_id',
                        description: 'hindi: 1, english: 2, default: 1, marathi: 3, bengali: 4, kannada: 5, gujrati: 6, tamil: 7, telugu: 8, punjabi: 9,odiya: 10',
                        required: true,
                        type: 'integer',
                        enum: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/whatsapp_help_query': {
            post: {
                tags: ['faq'],
                summary: 'save whatsapp_help_query',
                description: 'platform type is [app:1, web:2]',
                operationId: 'save_whatsapp_help_query',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'body',
                        name: 'body',
                        required: ['help_query', 'screen_name'],
                        properties: {
                            help_text: {
                                type: 'string'
                            },
                            product_name: {
                                type: 'string'
                            },
                            master_state_id: {
                                type: 'integer'
                            },
                            master_district_id: {
                                type: 'integer'
                            },
                            language_id: {
                                type: 'integer'
                            },
                            question_id: {
                                type: 'string'
                            },
                            screen_name: {
                                type: 'string'
                            },
                            platform_type: {
                                type: 'integer'
                            }
                        }
                    }
                ],
                responses: {
                    405: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        }
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/faq/index.js
const router = require('express').Router();
const authorize = require('../../../middelware/authorized_routes');
const user_roles_enum = require('../../../enums/user_profile/user_role');

const fetch_faq_controller = require('./controllers/fetch_faq_controller');
const save_whatsapp_help_query_controller = require('./controllers/save_whatsapp_help_query_controller');

router.get('/', authorize([user_roles_enum.Merchant, user_roles_enum.Guest_user_b2c_app]), fetch_faq_controller);
router.post('/whatsapp_help_query', authorize([user_roles_enum.Merchant, user_roles_enum.Guest_user_b2c_app]), save_whatsapp_help_query_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/faq/controllers/save_whatsapp_help_query_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const save_whatsapp_help_query_service = require('../services/save_whatsapp_help_query_service');
const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');
const language_enum = require('../../../../enums/global/language');

module.exports = async (req, res) => {
    try {
        /* This block of code is responsible for extracting data from the request body and performing
        some validations before proceeding with further actions. Here's a breakdown of what each
        line is doing: */
        const help_text = req.body.help_text || null
        const product_name = req.body.product_name || null
        const master_state_id = +req.body.master_state_id || null
        const master_district_id = +req.body.master_district_id || null
        const language_id = +req.body.language_id || language_enum?.hindi
        const question_id = req.body.question_id || null
        const screen_name = req.body.screen_name || null
        const platform_type = +req.body.platform_type
        const mobile_number = +req.user.mobile_number

        /* This `if` statement is checking if either `help_text` or `screen_name` is falsy (empty,
        null, undefined, etc.). If either of them is falsy, it throws a `ValidationError` with the
        error message `error.WHATSAPP_HELP_QUERY_PARAMS_MISSING`. This validation ensures that both
        `help_text` and `screen_name` are provided in the request body before proceeding with
        further actions in the code. */
        if (!help_text || !screen_name || !platform_type) {
            throw new ValidationError(error.WHATSAPP_HELP_QUERY_PARAMS_MISSING);
        }

        const whatsapp_help_query_details = await save_whatsapp_help_query_service(help_text, product_name, master_state_id, master_district_id, language_id, question_id, screen_name, platform_type, mobile_number);

        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'successfull', whatsapp_help_query_details));
    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/faq/controllers/fetch_faq_controller.js
/* This code snippet is a Node.js module that defines an asynchronous function to handle a specific API
endpoint. Here's a breakdown of what each part of the code is doing: */
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const fetch_faq_service = require('../services/fetch_faq_service');
const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');
const language_enum = require('../../../../enums/global/language')
module.exports = async (req, res) => {
    try {
        /* This part of the code snippet is extracting the `language_id` from the query parameters of
        the incoming request. It uses optional chaining (`?.`) to safely access the `language_id`
        property from the `req.query` object. If the `language_id` is not provided in the query
        parameters, it assigns `null` to the `language_id` variable. */
        const language_id = +req.query?.language_id || language_enum.hindi;

        // if language_id is not given, throw error
        if (!language_id) {
            throw new ValidationError(error.MISSING_LANGUAGE_ID);
        }

        const faq_details = await fetch_faq_service(language_id);

        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'successfull', faq_details));
    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/faq/services/fetch_faq_service.js
const error_log = require('../../../../middelware/error_log');
const { fetch_faq_list } = require('../../../../data_abstraction_layer/faq/fetch_faq');
const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');
const {
    key_gen_redis,
    read_string,
    write_string
} = require('../../../../database/redis/helper_redis_methods');
const redis_key_entities = require('../../../../database/redis/redis_key_entities');
const zlib = require('zlib')
const Buffer = require('buffer').Buffer;

module.exports = async (language_id) => {
    try {
        /* This code snippet is fetching a list of frequently asked questions (FAQs) based on the
        provided `language_id`. Here's a breakdown of what it's doing: */
        // checking in redis if present the return the redis response
        const faq_cache_key = await key_gen_redis(redis_key_entities.FAQ, language_id);
        let faq_response = await read_string(faq_cache_key);
        if (faq_response) {
            const buffer = Buffer.from(faq_response, 'base64');
            const redisValue = zlib.inflateSync(buffer);
            faq_response = JSON.parse(redisValue.toString());
            return { faq: faq_response };
        }
        // fetching the faq list
        faq_response = await fetch_faq_list({ language_id });
        if (!faq_response) {
            throw new ValidationError(error.FAQ_DETAILS_NOT_FOUND);
        }
        const faq_strigify_response = JSON.stringify(faq_response);
        // The code snippet `zlib.deflate(faq_strigify_response, function (err, zippedValue) { ... })` is using the Node.js built-in zlib module to compress the `faq_response` JSON string.
        zlib.deflate(faq_strigify_response, function (err, zippedValue) {
            if (err) {
                // console.log('Error deflating!');
                error_log(err)
                return null;
            }
            write_string(
                faq_cache_key,
                zippedValue.toString('base64'),
                43200 // time to live in seconds 12hr
            ).catch((err) => {
                error_log(err);
            });

        })
        return { faq: faq_response };
    } catch (err) {
        error_log(err);
        throw err;
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/faq/services/save_whatsapp_help_query_service.js
const error_log = require('../../../../middelware/error_log');
const { save_whatsapp_help_query } = require('../../../../data_abstraction_layer/faq/whatsapp_help_query');
const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (help_text, product_name, master_state_id, master_district_id, language_id, question_id, screen_name, platform_type, mobile_number) => {
    try {
        /* This code snippet is a function that saves a WhatsApp help query with specific details
        provided as parameters. Here's a breakdown of what it does: */
        const whatsapp_help_query_details = await save_whatsapp_help_query({ help_text, product_name, master_state_id, master_district_id, language_id, question_id, screen_name, platform_type, mobile_number });
        if (!whatsapp_help_query_details) {
            throw new ValidationError(error.WHATSAPP_HELP_QUERY_NOT_SAVED);
        }
        return { query_id: whatsapp_help_query_details._id };
    } catch (err) {
        error_log(err);
        throw err;
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/swagger/index.js
module.exports = {
    tags: {
        name: 'location'
    },
    paths: {
        '/state/detail': {
            get: {
                tags: ['location'],
                summary: 'get detail of state',
                description: '',
                operationId: 'get_state_detail',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'state_name',
                        description: '',
                        required: true,
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/district/detail': {
            get: {
                tags: ['location'],
                summary: 'get detail of district',
                description: '',
                operationId: 'get_district_detail',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'state_name',
                        description: '',
                        required: true,
                        type: 'string'
                    },
                    {
                        in: 'query',
                        name: 'district_name',
                        description: '',
                        required: true,
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/states': {
            get: {
                tags: ['location'],
                summary: 'get list of master states',
                description: '',
                operationId: 'states',
                security: [{ Bearer: ['read'] }],
                parameters: [],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/state': {
            get: {
                tags: ['location'],
                summary: 'get state name from id',
                description: '',
                operationId: 'get_state_name_by_id',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'master_state_id',
                        description: '',
                        required: true,
                        type: 'number'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/nearby_districts': {
            get: {
                tags: ['location'],
                summary: 'get list of master districts near mentioned master district',
                description: '',
                operationId: 'nearby_districts',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'master_state_id',
                        description: '',
                        required: true,
                        type: 'integer',
                        format: 'int64'
                    },
                    {
                        in: 'query',
                        name: 'master_district_id',
                        description: '',
                        required: true,
                        type: 'integer',
                        format: 'int64'
                    },
                    {
                        in: 'query',
                        name: 'page_no',
                        description: '',
                        required: true,
                        type: 'integer',
                        format: 'int64'
                    },
                    {
                        in: 'query',
                        name: 'limit',
                        description: '',
                        required: true,
                        type: 'integer',
                        format: 'int64'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/districts': {
            get: {
                tags: ['location'],
                summary: 'get list of master districts',
                description: '',
                operationId: 'districts',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'master_state_id',
                        description: '',
                        required: true,
                        type: 'integer',
                        format: 'int64'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            },
            patch: {
                tags: ['location'],
                summary: 'map state ,district to master',
                description: '',
                operationId: 'map_districts',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        required: true,
                        schema: {
                            properties: {
                                master_district_id: {
                                    type: 'integer'
                                },
                                district_ids: {
                                    type: 'array',
                                    items: {
                                        type: 'integer'
                                    }
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/district': {
            get: {
                tags: ['location'],
                summary: 'get district name from id',
                description: '',
                operationId: 'get_district_name_by_id',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'master_state_id',
                        description: '',
                        required: true,
                        type: 'integer',
                        format: 'int64'
                    },
                    {
                        in: 'query',
                        name: 'master_district_id',
                        description: '',
                        required: true,
                        type: 'integer',
                        format: 'int64'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },

        '/taluk': {
            get: {
                tags: ['location'],
                summary: 'get list of master taluk',
                description: '',
                operationId: 'taluk',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'master_state_id',
                        description: '',
                        required: true,
                        type: 'integer',
                        format: 'int64'
                    },
                    {
                        in: 'query',
                        name: 'master_district_id',
                        description: '',
                        required: true,
                        type: 'integer',
                        format: 'int64'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/detail': {
            get: {
                tags: ['location'],
                summary: 'get location by pincode',
                description: '',
                operationId: 'detail',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'pincode',
                        description: '',
                        required: true,
                        type: 'integer',
                        format: 'int64'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/geocode': {
            get: {
                tags: ['location'],
                summary: 'get lat long from address',
                description: 'get lattitude and longitude from address',
                operationId: 'geocode',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'address',
                        description: '',
                        required: true,
                        type: 'string'
                    },
                    {
                        in: 'query',
                        name: 'location_id',
                        description: 'google maps api can find address or lat long from location_id also',
                        required: false,
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/reverse_geocode': {
            get: {
                tags: ['location'],
                summary: 'get address from location',
                description: 'get address from latitude and longitude',
                operationId: 'reverse_geocode',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'lat',
                        description: '',
                        required: true,
                        type: 'string'
                    },
                    {
                        in: 'query',
                        name: 'long',
                        description: '',
                        required: true,
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/geocode_by_pincode': {
            get: {
                tags: ['location'],
                summary: 'get address from pincode',
                description: 'get latitude and longitude from pincode of area',
                operationId: 'get_address_from_pincode',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'pincode',
                        description: '',
                        required: true,
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/search_pincode': {
            get: {
                tags: ['location'],
                summary: 'get pincodes upon searching',
                description: 'get pincodes upon searching',
                operationId: 'get_search_pincode',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'search_param',
                        description: 'pincode',
                        required: true,
                        type: 'string'
                    },
                    {
                        in: 'query',
                        name: 'page_no',
                        description: 'page_no',
                        required: false,
                        type: 'number'
                    },
                    {
                        in: 'query',
                        name: 'limit',
                        description: 'limit',
                        required: false,
                        type: 'number'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/serviceable': {
            get: {
                tags: ['location'],
                summary: 'get serviceable feature by location',
                description: 'get serviceable feature by location',
                operationId: 'get_serviceable_feature_by_location',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'pincode',
                        description: '',
                        required: true,
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/procurable': {
            get: {
                tags: ['location'],
                summary: 'get serviceability details',
                description: 'get serviceability details',
                operationId: 'get_procurable_details',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'master_state_ids',
                        description: 'master_state_ids',
                        required: false,
                        type: 'string'
                    },
                    {
                        in: 'query',
                        name: 'page_no',
                        description: 'page_no',
                        required: false,
                        type: 'number'
                    },
                    {
                        in: 'query',
                        name: 'limit',
                        description: 'limit',
                        required: false,
                        type: 'number'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/procurable_districts': {
            put: {
                tags: ['location'],
                summary: 'update serviceable location block by block',
                description: 'update serviceable location block by block',
                operationId: 'update_procurable_districts',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'body',
                        name: 'body',
                        description: 'for user_platform 1-ml,2-retailer,3-both ------- serviceability_action-> 1-enable,2->temp_disable,3-disable',
                        required: true,
                        schema: {
                            properties: {
                                updated_serviceability_details: {
                                    type: 'array',
                                    items: {
                                        required: ['master_state_id', 'master_district_id', 'user_platform', 'serviceability_action'],
                                        properties: {
                                            master_state_id: {
                                                type: 'integer'
                                            },
                                            master_district_id: {
                                                type: 'integer'
                                            },
                                            user_platform: {
                                                type: 'integer'
                                            },
                                            serviceability_action: {
                                                type: 'integer'
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/procurable_states': {
            put: {
                tags: ['location'],
                summary: 'update procurable location details in a state at once',
                description: 'update procurable location details in a state at once',
                operationId: 'update_procurable_states',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'master_state_id',
                        description: '',
                        required: true,
                        type: 'integer'
                    },
                    {
                        in: 'formData',
                        name: 'user_platform',
                        description: '1-ml ,2 retailer,3-both',
                        required: true,
                        type: 'integer',
                        enum: [1, 2, 3]
                    },
                    {
                        in: 'formData',
                        name: 'serviceability_action',
                        description: '1-enable, temp_disable,3-disable',
                        required: true,
                        type: 'integer',
                        enum: [1, 2, 3]
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/fetch_state_districts_of_buyers_ml': {
            get: {
                tags: ['location'],
                summary: 'get state district map from ml',
                description: '',
                operationId: 'get_state_district_map_from_ml',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'page_no',
                        description: 'page_no',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'query',
                        name: 'limit',
                        description: 'limit',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'query',
                        name: 'search_param',
                        description: 'search_param',
                        required: false,
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/ip_address_location': {
            post: {
                tags: ['location'],
                summary: 'post location corresponding to IP addresses in db',
                description: 'save location corresponding to IP addresses in db',
                operationId: 'post_ip_address_location',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'lat_long',
                        description: 'comma seperated lat long string',
                        required: true,
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/state_district_mapping': {
            get: {
                tags: ['location'],
                summary: 'get master state district map ',
                description: '',
                operationId: 'get_state_district_mapping',
                security: [{ Bearer: ['read'] }],
                parameters: [
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        }
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/index.js
const router = require('express').Router();
const get_all_master_states_controller = require('./controller/get_all_master_states_controller');
const get_master_districts_controller = require('./controller/get_master_districts_controller');

const get_master_state_controller = require('./controller/get_master_state_controller');
const get_master_district_controller = require('./controller/get_master_district_controller');

const get_master_taluk_controller = require('./controller/get_master_taluk_controller');
const get_location_by_pincode_controller = require('./controller/get_location_by_pincode_controller');
const get_state_code_controller = require('./controller/get_state_code_controller');
const get_district_code_controller = require('./controller/get_district_code_controller');
const authorize = require('../../../middelware/authorized_routes');
const user_roles_enum = require('../../../enums/user_profile/user_role');
const state_district_to_master_mapping_controller = require('./controllers/state_district_to_master_mapping_controller');
const geocode_controller = require('./controllers/geocode_controller');
const reverse_geocode_controller = require('./controllers/reverse_geocode_controller');
const geocode_by_pincode_controller = require('./controllers/geocode_by_pincode_controller');
const serviceable_location_controller = require('./controllers/serviceable_location_controller');
const swagger_path_from_auth = '../apis/v1/location/swagger';
const search_pincode_controller = require('./controllers/search_pincode_controller');
const update_procurable_districts_details_controller = require('./controllers/update_procurable_districts_details_controller');
const update_procurable_states_details_controller = require('./controllers/update_procurable_states_details_controller');
const get_procurable_details_controller = require('../../v1/location/controllers/get_procurable_details_controller');
const get_nearby_districts_controller = require('./controllers/get_nearby_districts_controller')
const fetch_state_district_map_of_buyers_from_ml_controller = require('./controllers/fetch_state_district_map_of_buyers_from_ml_controller');
const save_ip_address_location_controller = require('./controllers/save_ip_address_location_controller');
const get_all_master_state_districts_controller = require('./controller/get_all_master_state_districts_controller')

router.get('/state/detail', authorize([...Object.values(user_roles_enum)], swagger_path_from_auth, '/state/detail', 'get'), get_state_code_controller);
router.get('/district/detail', authorize([...Object.values(user_roles_enum)], swagger_path_from_auth, '/district/detail', 'get'), get_district_code_controller);

router.get('/states', authorize([...Object.values(user_roles_enum)], swagger_path_from_auth, '/states', 'get'), get_all_master_states_controller);
router.get('/state', authorize([...Object.values(user_roles_enum)], swagger_path_from_auth, '/states', 'get'), get_master_state_controller);

router.get('/nearby_districts', authorize([user_roles_enum.Merchant]), get_nearby_districts_controller);
router.get('/districts', authorize([...Object.values(user_roles_enum)], swagger_path_from_auth, '/districts', 'get'), get_master_districts_controller);
router.get('/district', authorize([...Object.values(user_roles_enum)], swagger_path_from_auth, '/districts', 'get'), get_master_district_controller);
router.patch('/districts', authorize([...Object.values(user_roles_enum)], swagger_path_from_auth, '/districts', 'patch'), state_district_to_master_mapping_controller);

router.get('/taluk', authorize([...Object.values(user_roles_enum)], swagger_path_from_auth, '/taluk', 'get'), get_master_taluk_controller);
router.get('/detail', authorize([...Object.values(user_roles_enum)], swagger_path_from_auth, '/detail', 'get'), get_location_by_pincode_controller);
router.get('/geocode', geocode_controller);
router.get('/reverse_geocode', reverse_geocode_controller);
router.get('/geocode_by_pincode', geocode_by_pincode_controller);
router.get('/search_pincode', authorize([...Object.values(user_roles_enum)]), search_pincode_controller);

router.get('/serviceable', authorize([user_roles_enum.Merchant]), serviceable_location_controller);

router.get('/procurable', authorize([user_roles_enum.Op_Manager]), get_procurable_details_controller);
router.put('/procurable_districts', authorize([user_roles_enum.Op_Manager]), update_procurable_districts_details_controller);
router.put('/procurable_states', authorize([user_roles_enum.Op_Manager]), update_procurable_states_details_controller);

router.get('/fetch_state_districts_of_buyers_ml', authorize([user_roles_enum.Merchant, user_roles_enum.Guest_user_b2c_app]), fetch_state_district_map_of_buyers_from_ml_controller);
router.post('/ip_address_location', save_ip_address_location_controller);

router.get('/state_district_mapping', authorize([...Object.values(user_roles_enum)]), get_all_master_state_districts_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/controller/get_all_master_states_controller.js
const error_log=require('../../../../middelware/error_log');
const create_api_response=require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const get_all_master_state_service=require('../services/get_all_master_states_service');

module.exports=async (req,res)=>{
    try{
        let master_states = await get_all_master_state_service();
        let master_state_response=create_api_response(true,"successfull",master_states);
        res.status(http_status_code_enum.ok).json(master_state_response);
        
              
    }catch(ex){
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false,ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/controller/get_master_state_controller.js
const error_log = require("../../../../middelware/error_log");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const get_master_state_service_by_id = require("../services/get_master_state_service_by_id");

module.exports = async (req, res) => {
  try {
    const master_state_id = req.query.master_state_id || "";
    if (!master_state_id) {
      throw new Error("master_state_id is a mandatory parameter");
    }

    const master_state = await get_master_state_service_by_id(master_state_id);
    const master_state_response = create_api_response(
      true,
      "successfull",
      master_state
    );
    res.status(http_status_code_enum.ok).json(master_state_response);
  } catch (ex) {
    error_log(ex);
    res
      .status(http_status_code_enum.bad_request)
      .json(create_api_response(false, ex.message));
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/controller/get_master_districts_controller.js
const error_log=require('../../../../middelware/error_log');
const create_api_response=require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const get_master_districts_service=require('../services/get_master_districts_service');

module.exports=async (req,res)=>{
    try{
        let master_state_id=req.query.master_state_id
        if(!master_state_id){
            throw new Error("master_state_id is compulsory parameter")
        }
        let master_districts = await get_master_districts_service(master_state_id);
        let master_districts_response=create_api_response(true,"successfull",master_districts);
        res.status(http_status_code_enum.ok).json(master_districts_response);              
    }catch(ex){
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false,ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/controller/get_state_code_controller.js
const error_log = require("../../../../middelware/error_log");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const get_state_service = require("../services/get_state_service");

module.exports = async (req, res) => {
  try {
    let state_name = req.query.state_name || "";
    if (!state_name) {
      throw new Error("state_name is a mandatory parameter");
    }

    let master_state = await get_state_service(state_name);
    let master_state_response = create_api_response(
      true,
      "successfull",
      master_state
    );
    res.status(http_status_code_enum.ok).json(master_state_response);
  } catch (ex) {
    error_log(ex);
    res
      .status(http_status_code_enum.bad_request)
      .json(create_api_response(false, ex.message));
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/controller/get_master_taluk_controller.js
const error_log=require('../../../../middelware/error_log');
const create_api_response=require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const get_master_taluk_service=require('../services/get_master_taluk_service');

module.exports=async (req,res)=>{
    try{
        let master_state_id=+req.query.master_state_id || 0;
        let master_district_id=+req.query.master_district_id || 0;

        if(!master_state_id || !master_district_id){
            throw new Error("master_state_id and master_district_id are compulsory parameter")
        }
        let master_taluk = await get_master_taluk_service(master_state_id,master_district_id);
        let master_taluk_response=create_api_response(true,"successfull",master_taluk);
        res.status(http_status_code_enum.ok).json(master_taluk_response);
        
              
    }catch(ex){
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false,ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/controller/get_district_code_controller.js
const error_log = require("../../../../middelware/error_log");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const get_district_service = require("../services/get_district_service");

module.exports = async (req, res) => {
  try {
    let district_name = req.query.district_name || "";
    let state_name = req.query.state_name || "";
    if (!district_name || !state_name) {
      throw new Error("district_name and state_name are compulsory parameters");
    }

    let master_district = await get_district_service(state_name, district_name);
    let master_district_response = create_api_response(
      true,
      "successfull",
      master_district
    );
    res.status(http_status_code_enum.ok).json(master_district_response);
  } catch (ex) {
    error_log(ex);
    res
      .status(http_status_code_enum.bad_request)
      .json(create_api_response(false, ex.message));
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/controller/get_master_district_controller.js
const error_log=require('../../../../middelware/error_log');
const create_api_response=require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const get_master_district_service_by_id=require('../services/get_master_district_service_by_id');

module.exports=async (req,res)=>{
    try{
        let master_state_id=req.query.master_state_id
        let master_district_id=req.query.master_district_id
        if (!master_state_id || !master_district_id) {
            throw new Error("master_state_id and master_district_id are compulsory parameter")
        }
        let master_districts = await get_master_district_service_by_id(master_state_id, master_district_id);
        
        let master_districts_response=create_api_response(true,"successfull",master_districts);
        res.status(http_status_code_enum.ok).json(master_districts_response);              
    }catch(ex){
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false,ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/controller/get_location_by_pincode_controller.js
const error_log=require('../../../../middelware/error_log');
const create_api_response=require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const get_location_by_pincode_service=require('../services/get_location_by_pincode_service');

module.exports=async (req,res)=>{
    try{
        let pincode=+req.query.pincode||0;

        if(!pincode){
            throw new Error("pincode is compulsory parameter")
        }
        let location_detail = await get_location_by_pincode_service(pincode);
        let location_detail_response=create_api_response(true,"successfull",location_detail);
        res.status(http_status_code_enum.ok).json(location_detail_response);
        
              
    }catch(ex){
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false,ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/controller/get_all_master_state_districts_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const get_all_master_state_district_service = require('../services/get_all_master_state_district_service');

module.exports = async (req, res) => {
    try {
        const master_state_districts = await get_all_master_state_district_service();
        const master_state_districts_response = create_api_response(true, 'successfull', master_state_districts);
        res.status(http_status_code_enum.ok).json(master_state_districts_response);
    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/controllers/get_all_master_states_controller.js
const error_log=require('../../../../middelware/error_log');
const create_api_response=require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const get_all_master_state_service=require('../services/get_all_master_states_service');

module.exports=async (req,res)=>{
    try{
        let master_states = await get_all_master_state_service();
        let master_state_response=create_api_response(true,"successfull",master_states);
        res.status(http_status_code_enum.ok).json(master_state_response);
        
              
    }catch(ex){
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false,ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/controllers/update_procurable_districts_details_controller.js
const error_log = require("../../../../middelware/error_log");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const update_procurable_districts_details_service = require("../services/update_procurable_districts_details_service");
const merchant_platform_enum = require("../../../../enums/merchant/merchant_platform");
const serviceable_enum = require("../../../../enums/serviceability/serviceable_enum");

module.exports = async (req, res) => {
  try {
    let updated_serviceability_details = req.body.updated_serviceability_details || []
    // default user_platform is ml and default serviceability_action is disable
    if (updated_serviceability_details.length==0||updated_serviceability_details==null ) {
        let message = "mandatory parameters missing"
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, message));
    }

    let updated_procurable_details = await update_procurable_districts_details_service(updated_serviceability_details);
    return res.status(http_status_code_enum.ok).json(create_api_response(true, "successfull", {}));
  } catch (ex) {
    error_log(ex);
    res
      .status(http_status_code_enum.bad_request)
      .json(create_api_response(false, ex.message));
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/controllers/get_procurable_details_controller.js
const error_log = require("../../../../middelware/error_log");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const serviceable_data_service = require("../services/get_procurable_details_service");

module.exports = async (req, res) => {
  try {
    let master_state_ids = req.query?.master_state_ids || null;  //taking master_state_id as a string

    if (master_state_ids) {
      let state_id = master_state_ids.split(",");  //splitting the master_state_id string on the basis of "," and convering it into an array of strings. 
      master_state_ids = state_id.filter(function (str) {  //converting array of strings to array of integers.
        return parseInt(str);
      });
    }

    let page_no = +req.query.page_no || 1;
    let limit = +req.query.limit || 10;
    let serviceable = await serviceable_data_service(master_state_ids, page_no, limit);
    return res.status(http_status_code_enum.ok).json(create_api_response(true, "successfull", serviceable));
  } catch (ex) {
    error_log(ex);
    res
      .status(http_status_code_enum.bad_request)
      .json(create_api_response(false, ex.message));
  }
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/controllers/reverse_geocode_controller.js
const http_status_codes = require('../../../../enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const reverse_geocode_service = require('../services/reverse_geocode_service')
module.exports = async (req, res) => {
    try {
        const lat = +req.query.lat || 0;
        const long = +req.query.long || 0;
        if (!lat || !long) {
            const error_message = 'lat and long are mandatory params';
            return res.status(http_status_codes.bad_request).json(create_api_response(false, error_message));
        }
        const reverse_geocode = await reverse_geocode_service(lat, long);
        return res.status(http_status_codes.ok).json(create_api_response(true, 'success', { reverse_geocode }));
    } catch (err) {
        return res.status(http_status_codes.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/controllers/state_district_to_master_mapping_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const state_district_to_master_mapping_service = require('../services/state_district_to_master_mapping_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const district_ids = req.body.district_ids; const master_district_id = +req.body.master_district_id;

        if (!master_district_id || district_ids.length === 0) {
            throw new ValidationError('master_district_id and district_ids are compulsory parameter')
        }
        const result = await state_district_to_master_mapping_service(district_ids, master_district_id);
        const response = create_api_response(true, 'successfull', result);
        res.status(http_status_code_enum.ok).json(response);

    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/controllers/save_ip_address_location_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const save_ip_address_location_service = require('../services/save_ip_address_location_service');
const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/* This code snippet is defining an asynchronous function that handles a specific route in a Node.js
application. Here's a breakdown of what the code is doing: */
module.exports = async (req, res) => {
    try {
        const ip_address = req.headers['x-forwarded-for'] || '';
        const lat_long = req.body.lat_long;

        if (!ip_address || !lat_long) {
            throw new ValidationError(error.no_ip_address_or_lat_long);
        }
        await save_ip_address_location_service(ip_address, lat_long);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'successfull', { ip_address }));
    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/controllers/geocode_by_pincode_controller.js
const http_status_codes = require("../../../../enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const geocode_by_pincode_service=require('../services/geocode_by_pincode_service')
module.exports = async (req, res) => {
    try {
        const pincode = +req.query.pincode || 0;
        if (!pincode) {
            let error_message = "pincode is mandatory params";
            return res.status(http_status_codes.bad_request).json(create_api_response(false, error_message));
        }
        const location_details = await geocode_by_pincode_service(pincode);
        return res.status(http_status_codes.ok).json(create_api_response(true, "success", { location_details }));
    }
    catch (err) {
        return res.status(http_status_codes.bad_request).json(create_api_response(false, err.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/controllers/get_master_districts_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const get_master_districts_service = require('../services/get_master_districts_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const master_state_id = req.query.master_state_id
        if (!master_state_id) {
            throw new ValidationError('master_state_id is compulsory parameter')
        }
        const master_districts = await get_master_districts_service(master_state_id);
        const master_districts_response = create_api_response(true, 'successfull', master_districts);
        res.status(http_status_code_enum.ok).json(master_districts_response);
    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/controllers/search_pincode_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const search_pincode_service = require('../services/search_pincode_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const search_param = req.query.search_param || ''; // takes pincode as a string
        const page_no = +req.query.page_no || 1;
        const limit = +req.query.limit || 10;
        if (search_param) {
            if ((search_param.trim().length) >= 4) {
                const pincodes_list = await search_pincode_service(search_param, page_no, limit);
                const response = create_api_response(true, 'success', pincodes_list);
                return res.status(http_status_code_enum.ok).json(response);
            } else {
                throw new ValidationError('Please enter atleast 4 characters.')
            }
        } else {
            return res.json(create_api_response(false, 'please provide your pincode'));
        }
    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/controllers/geocode_controller.js
const http_status_codes = require("../../../../enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const geocode_service=require('../services/geocode_service')
module.exports = async (req, res) => {
    try {
        const address = req.query.address || "";
        const location_id = req.query.location_id || "";
        if (!address) {
            let error_message = "address and location_id are mandatory params";
            return res.status(http_status_codes.bad_request).json(create_api_response(false, error_message));
        }
        const geocode = await geocode_service(address, location_id);
        return res.status(http_status_codes.ok).json(create_api_response(true, "success", { geocode }));
    }
    catch (err) {
        return res.status(http_status_codes.bad_request).json(create_api_response(false, err.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/controllers/get_state_code_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const get_state_service = require('../services/get_state_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const state_name = req.query.state_name || '';
        if (!state_name) {
            throw new ValidationError('state_name is a mandatory parameter');
        }

        const master_state = await get_state_service(state_name);
        const master_state_response = create_api_response(
            true,
            'successfull',
            master_state
        );
        res.status(http_status_code_enum.ok).json(master_state_response);
    } catch (ex) {
        error_log(ex);
        res
            .status(http_status_code_enum.bad_request)
            .json(create_api_response(false, ex.message));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/controllers/get_nearby_districts_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const get_nearby_district_service = require('../services/get_nearby_district_service');

module.exports = async (req, res) => {
    try {
        const master_state_id = +req.query.master_state_id || null;
        const master_district_id = +req.query.master_district_id || null;
        const page_no = +req.query.page_no || 1;
        const limit = +req.query.limit || 10;
        const response = await get_nearby_district_service(master_state_id, master_district_id, page_no, limit);

        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'success', response));
    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/controllers/get_master_taluk_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const get_master_taluk_service = require('../services/get_master_taluk_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const master_state_id = +req.query.master_state_id || 0;
        const master_district_id = +req.query.master_district_id || 0;

        if (!master_state_id || !master_district_id) {
            throw new ValidationError('master_state_id and master_district_id are compulsory parameter')
        }
        const master_taluk = await get_master_taluk_service(master_state_id, master_district_id);
        const master_taluk_response = create_api_response(true, 'successfull', master_taluk);
        res.status(http_status_code_enum.ok).json(master_taluk_response);

    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/controllers/get_district_code_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const get_district_service = require('../services/get_district_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const district_name = req.query.district_name || '';
        const state_name = req.query.state_name || '';
        if (!district_name || !state_name) {
            throw new ValidationError('district_name and state_name are compulsory parameters');
        }

        const master_district = await get_district_service(state_name, district_name);
        const master_district_response = create_api_response(
            true,
            'successfull',
            master_district
        );
        res.status(http_status_code_enum.ok).json(master_district_response);
    } catch (ex) {
        error_log(ex);
        res
            .status(http_status_code_enum.bad_request)
            .json(create_api_response(false, ex.message));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/controllers/serviceable_location_controller.js
const error_log = require("../../../../middelware/error_log");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const serviceable_location_services = require("../services/serviceable_location_services");

module.exports = async (req, res) => {
  try {
    let pincode = req.query.pincode;
    let master_merchant_id = req.user.master_merchant_id;
    if (!pincode) {
        let message = "pincode is mandatory"
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, message));
    }

    let serviceable = await serviceable_location_services(pincode,master_merchant_id);
    return res.status(http_status_code_enum.ok).json(create_api_response(true, "successfull", {serviceable}));
  } catch (ex) {
    error_log(ex);
    res
      .status(http_status_code_enum.bad_request)
      .json(create_api_response(false, ex.message));
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/controllers/get_location_by_pincode_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const get_location_by_pincode_service = require('../services/get_location_by_pincode_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const pincode = +req.query.pincode || 0;

        if (!pincode) {
            throw new ValidationError('pincode is compulsory parameter')
        }
        const location_detail = await get_location_by_pincode_service(pincode);
        const location_detail_response = create_api_response(true, 'successfull', location_detail);
        res.status(http_status_code_enum.ok).json(location_detail_response);

    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/controllers/update_procurable_states_details_controller.js
const error_log = require("../../../../middelware/error_log");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const update_procurable_states_details_service = require("../services/update_procurable_states_details_service");
const merchant_platform_enum = require("../../../../enums/merchant/merchant_platform");
const serviceable_enum = require("../../../../enums/serviceability/serviceable_enum");
module.exports = async (req, res) => {
  try {
    let master_state_id = +req.body.master_state_id,
    user_platform=+req.body.user_platform,
    serviceability_action=+req.body.serviceability_action;
    if(!master_state_id)
    {
        let message = "master_state_id is a mandatory parameter"
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, message));
    }

    let updated_procurable_state_details = await update_procurable_states_details_service(master_state_id,user_platform,serviceability_action);
    return res.status(http_status_code_enum.ok).json(create_api_response(true, "successfull", {}));
  } catch (ex) {
    error_log(ex);
    res
      .status(http_status_code_enum.bad_request)
      .json(create_api_response(false, ex.message));
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/controllers/fetch_state_district_map_of_buyers_from_ml_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const fetch_states_districts_of_buyers_from_ml_service = require("../services/fetch_state_district_map_of_buyers_from_ml_service");

module.exports = async(req, res) => {
    try{
        const page_no = +req.query?.page_no || 1;
        const limit = +req.query?.limit || 10;
        const search_param = req.query?.search_param || "";

        //fetching list of state and districts of buyers from ML database
        const state_district_map = await fetch_states_districts_of_buyers_from_ml_service(page_no, limit, search_param);

        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'successfull', state_district_map));
    }catch(err){
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/services/serviceable_location_services.js
const { get_serviceable_feature } = require("../../../../data_abstraction_layer/location/feature_serviceability");
const serviceable_enum = require("../../../../enums/serviceability/serviceable_enum");
const error_log = require("../../../../middelware/error_log");
const merchant_platform_enum = require("../../../../enums/merchant/merchant_platform");

const serviceable_location_services = async (pincode,master_merchant_id) => {
    try {
        //get serviceable location detail from pincode
        let is_serviceable= await get_serviceable_feature({pincode})
        if(is_serviceable?.is_procuring==serviceable_enum.enable)
        {
            if(master_merchant_id)
            {
                if(is_serviceable?.user_platform==merchant_platform_enum.ML || is_serviceable?.user_platform==merchant_platform_enum.Both)
                    return true;
                else
                    return false;
            }
            else{
                if(is_serviceable?.user_platform==merchant_platform_enum.Retailer || is_serviceable?.user_platform==merchant_platform_enum.Both)
                    return true;
                else
                    return false;
            }
        }
        else
        return false;
    } catch (err) {
        error_log(err);
        return null;
    }
};

module.exports = serviceable_location_services;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/services/search_pincode_service.js
const error_log = require("../.././../../middelware/error_log");
const get_pincode_by_search = require('../../../../data_abstraction_layer/location/get_pincode_by_search');
const get_taluk_name = require("../../../../data_abstraction_layer/location/get_master_taluk_by_id");
const get_district_name = require("../../../../data_abstraction_layer/location/get_master_district_by_id");
const get_state_name = require("../../../../data_abstraction_layer/location/get_master_state_by_id");

const search_pincode_service = async (search_param, page_no, limit) => {
  try {
    let attributes = ['pincode', 'master_taluka_id', 'master_district_id', 'master_state_id'];

    let pincodes_list = await get_pincode_by_search({ search_param: `${search_param}%`, page_no, limit, attributes });

    let pincodes = await Promise.all(pincodes_list.rows.map(async (pincode_element, i) => {
      let taluk_details = await get_taluk_name(pincodes_list.rows[i].master_state_id, pincodes_list.rows[i].master_district_id, pincodes_list.rows[i].master_taluka_id);
      let taluk_name = taluk_details?.name || null;
      if (taluk_name == "NA") {
        taluk_name = null
      }

      let district_details = await get_district_name(pincodes_list.rows[i].master_state_id, pincodes_list.rows[i].master_district_id);
      let district_name = district_details?.name || null;

      let state_details = await get_state_name(pincodes_list.rows[i].master_state_id);
      let state_name = state_details?.name;
      return {
        pincode: pincodes_list.rows[i].pincode,
        taluk_name: taluk_name,
        district_name: district_name,
        state_name: state_name,
        taluk_id: pincodes_list.rows[i].master_taluka_id,
        district_id: pincodes_list.rows[i].master_district_id,
        state_id: pincodes_list.rows[i].master_state_id,
      }
    }));
    let obj = {}
    obj = {
      pincodes: pincodes,
      total_count: pincodes_list.count
    }
    return obj;
  } catch (ex) {
    error_log(ex);
    throw ex;
  }
};
module.exports = search_pincode_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/services/get_all_master_states_service.js
const error_log=require('../../../../middelware/error_log');
const master_state_model=require('../../../../database/models_v2/location/master_state');

const get_all_master_state_service=()=>{
    return new Promise(async (resolve, reject)=>{
        try{
            let all_master_states = await master_state_model.findAll({
                where :{
                    is_active:true
                },
                attributes:["id","name",["master_state_code","code"]]
            });
         resolve({"state":all_master_states})
        }
        catch(ex){
            error_log(ex);
            reject({message:ex.message});
        }
    })
}


module.exports=get_all_master_state_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/services/get_nearby_district_service.js
const error_log = require('../../../../middelware/error_log');
// const geoLocation = require('@opencollabnexus/geolocation').GeoLocationFactory();
// const get_master_state_by_id = require('../../../../data_abstraction_layer/location/get_master_state_by_id');
// const get_master_district_by_id = require('../../../../data_abstraction_layer/location/get_master_district_by_id');
// const get_rake_history = require('../../../v3/rake/service/get_rake_history').fetch_rake_history;
// const language_enum = require('../../../../enums/global/language');
// const get_master_district_id_by_name = require('../../../../data_abstraction_layer/location/get_master_district_id_by_name');
// const get_master_state_id_by_name = require('../../../../data_abstraction_layer/location/get_master_state_id_by_name');
const LocationManager = require('../../../../common_services/location/LocationManager');
const RakeManager = require('../../../../common_services/rake/RakeManager');

const get_nearby_district_service = async (master_state_id, master_district_id, page_no, limit) => {
    try {
        return new LocationManager().getNearbyDistricts(master_state_id, master_district_id, new RakeManager(), page_no, limit)
        // const master_state = await get_master_state_by_id(master_state_id);
        // const master_district = await get_master_district_by_id(master_state_id, master_district_id);
        // const nearby_districts = geoLocation.nearByDistrictsFromDistrict(master_district.name, master_state.name, 150);
        // const nearby_district_objects = nearby_districts.slice(((page_no - 1) * limit), (page_no * limit));
        // for (let index = 0; index < nearby_district_objects.length; index++) {
        //     const district_detail = nearby_district_objects[index];
        //     const response = {}
        //     const master_state = await get_master_state_id_by_name(district_detail.state);
        //     response.master_state_id = master_state.id;
        //     response.master_state_name = master_state.name;
        //     const master_district = await get_master_district_id_by_name(response.master_state_id, district_detail.district);
        //     response.master_district_id = master_district.id;
        //     response.master_district_name = master_district.name;
        //     const rake = await get_rake_history(response.master_state_id, response.master_district_id, 1, 1, language_enum.default);
        //     response.rake_count = rake.count;
        //     nearby_district_objects[index] = response;
        // }
        // const current_district_rake = await get_rake_history(master_state_id, master_district_id, 1, 1, language_enum.default);
        // return {
        //     current_rake_count: current_district_rake.count,
        //     rows: nearby_district_objects,
        //     count: nearby_districts.length
        // };

    } catch (ex) {
        error_log(ex);
        throw ex;
    }
};
module.exports = get_nearby_district_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/services/geocode_by_pincode_service.js
const error_log = require('../../../../middelware/error_log');
const constants = require("../../../../constants");
const get_request = require('../../../../utilities/external_API_calls/get_request');
const { geocode } = require('../../../../common_services/location/geolocation');
const options = {
    provider: constants.global_constants.NODE_GEO_CODER_PROVIDER,
    apiKey: constants.global_constants.NODE_GEO_CODER_KEY
};



const geocode_by_pincode_service = async (pincode) => {
    try {
        let pincode_location = geocode(pincode + "");
        if (pincode_location?.length) {
            pincode_location = pincode_location[0];
            pincode_location = {
                latitude: pincode_location.lat,
                longitude: pincode_location.long,
                pincode: pincode_location.pincode
            }
        }

        if (!pincode_location) {
            let url = `${constants.global_constants.GEO_MAPS_API_URL}/geocode/json?address=${pincode}&key=${options.apiKey}`
            let res = await get_request(url)
            if (res.statusText == 'OVER_QUERY_LIMIT') {
                return ({ message: res.statusText })
            }
            else if (res.statusText == 'OK') {
                if (res.data.results.length > 0) {
                    let location_obj = res.data.results[0].geometry.location;
                    // console.log(location_obj)
                    location_obj.pincode = pincode
                    return (location_obj);
                }
            }
            else {
                return ({ message: res.statusText });
            }
        }
        return { lat: pincode_location.latitude, lng: pincode_location.longitude, pincode: pincode_location.pincode }
    }
    catch (ex) {
        error_log(ex);
        return ({ message: ex.message });
    }
}
module.exports = geocode_by_pincode_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/services/state_district_to_master_mapping_service.js
const error_log = require('../../../../middelware/error_log');
const master_district_model = require('../../../../database/models_v2/location/master_district');
const district_model = require('../../../../database/models/district');
const state_model = require('../../../../database/models/state');
const Op = require("sequelize").Op;

const state_district_to_master_mapping_service = (district_ids, master_district_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            let master_state_data = await master_district_model.findOne({
                where: {
                    id: master_district_id,
                    is_active: true
                },
                attributes: ["master_state_id"]
            });
            for (let i = 0; i < district_ids.length; i++) {
                let district_data = await district_model.findOne({
                    where: {
                        id: district_ids[i],
                        is_active: true
                    },
                    attributes: ["id", "state_id", "master_state_id", "master_district_id"]
                });

                if (district_data.state_id && master_state_data.master_state_id) {
                    const state_update = await state_model.update(
                        {
                            master_state_id: master_state_data.master_state_id
                        }
                        , {
                            where: {
                                id: district_data.state_id,
                                is_active: 1
                            }
                        }
                    );
                    district_data.master_district_id = master_district_id
                    district_data.master_state_id = master_state_data.master_state_id
                    await district_data.save();
                }
            }

            return resolve({ "data": "success" })
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}


module.exports = state_district_to_master_mapping_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/services/update_procurable_districts_details_service.js
const { update_procurable_states_details } = require("../../../../data_abstraction_layer/location/feature_serviceability");
const { delete_key, key_gen_redis } = require("../../../../database/redis/helper_redis_methods");
const redis_key_entities = require("../../../../database/redis/redis_key_entities");
const serviceable_enum = require("../../../../enums/serviceability/serviceable_enum");
const error_log = require("../../../../middelware/error_log");

const update_procurable_districts_details_service = async (updated_serviceability_details) => {
    try {
        //traverse of the payload in order to update 
        for(let j=0;j<updated_serviceability_details.length;j++)
        {
           let {master_state_id,master_district_id,user_platform,serviceability_action}=updated_serviceability_details[j];
          //delete keys from redis
           let redis_key=await key_gen_redis(redis_key_entities.PROCURABLE_LOCATION,master_state_id,master_district_id);
           await delete_key(redis_key);

           //using update serviceablity abstraction layer 
           try{
                let updated_serviceability_detail=await update_procurable_states_details({master_state_id,master_district_id,user_platform,serviceability_action});
            }catch(err){
                error_log(err);
                return []; 
            }
        }
        return updated_serviceability_details;
    } catch (err) {
        error_log(err);
        return [];
    }
};

module.exports = update_procurable_districts_details_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/services/get_state_service.js
const error_log = require("../../../../middelware/error_log");
const master_state_model = require("../../../../database/models_v2/location/master_state");

const get_state_code_service = (state_name) => {
  return new Promise(async (resolve, reject) => {
    try {
      let master_state_condition = {
        name: state_name,
        is_active: true,
      };
      let master_state = await master_state_model.findOne({
        where: master_state_condition,
        attributes: [
          ["master_state_code", "code"],
          ["id", "state_id"],
          ["name", "state_name"],
        ],
      });
      resolve({ state: master_state?.dataValues || null });
    } catch (ex) {
      error_log(ex);
      reject({ message: ex.message });
    }
  });
};

module.exports = get_state_code_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/services/save_ip_address_location_service.js
const error_log = require('../../../../middelware/error_log');
const { save_ip_address_location_db_layer } = require('../../../../data_abstraction_layer/location/save_ip_address_location_db_layer');
const { update_ip_address_location_db_layer } = require('../../../../data_abstraction_layer/location/update_ip_address_location_db_layer');
const { get_ip_address_location_db_layer } = require('../../../../data_abstraction_layer/location/get_ip_address_location_db_layer');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/* This code snippet is exporting an asynchronous function that takes two parameters: `ip_address` and
`lat_long`. Inside the function, it attempts to save the `lat_long` corresponding to the provided
`ip_address` in a database by calling the `save_ip_address_location_db_layer` function. */
module.exports = async (ip_address, lat_long) => {
    try {
        let ip_address_location = await get_ip_address_location_db_layer({ ip_address });
        if (!ip_address_location) {
            // saving lat_long corresponding to the provided ip_address in db.
            ip_address_location = await save_ip_address_location_db_layer({ ip_address, lat_long });
        }
        const location = ip_address_location?.dataValues?.lat_long;
        if (location !== lat_long) {
            ip_address_location = await update_ip_address_location_db_layer({ ip_address_id: ip_address_location.id });
            // saving lat_long corresponding to the provided ip_address in db.
            ip_address_location = await save_ip_address_location_db_layer({ ip_address, lat_long });
        }
        return ip_address_location;
    } catch (err) {
        error_log(err);
        throw new ValidationError(err);
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/services/get_master_taluk_service.js
const error_log=require('../../../../middelware/error_log');
const master_taluka_model=require('../../../../database/models_v2/location/master_taluka');

const get_master_taluk_service=(master_state_id,master_district_id)=>{
    return new Promise(async (resolve, reject)=>{
        try{
            let master_taluk = await master_taluka_model.findAll({
                where :{
                    master_state_id:master_state_id,
                    master_district_id,
                    is_active:true
                },
                attributes:["id","name"]
            });
         resolve({"taluk":master_taluk})
        }
        catch(ex){
            error_log(ex);
            reject({message:ex.message});
        }
    })
}


module.exports=get_master_taluk_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/services/get_procurable_details_service.js
const error_log = require("../.././../../middelware/error_log");
const get_state_name = require("../../../../data_abstraction_layer/location/get_master_state_by_id");
const { get_districts } = require("../../../../data_abstraction_layer/location/get_master_districts_pagination");
const { get_procurable_details } = require("../../../../data_abstraction_layer/location/feature_serviceability");
const { read_string,key_gen_redis, write_string } = require("../../../../database/redis/helper_redis_methods");
const redis_key_entities_enum = require("../../../../database/redis/redis_key_entities");

const serviceable_data_service = async (master_state_ids, page_no, limit) => {
  try {
    if (master_state_ids) {
      master_state_ids = master_state_ids.filter(checknull);   //filtering the null entries in master_state_id array
      function checknull(id) {
        return id > 0;
      }
    }

    let district_list = await get_districts({ master_state_ids, page_no, limit });
    let serviceable_data = await Promise.all(district_list.rows.map(async (master_district, i) => {
      const serviceable_redis_key=await key_gen_redis(redis_key_entities_enum.PROCURABLE_LOCATION,master_district.master_state_id,master_district.id);
      let serviceable_datum=await read_string(serviceable_redis_key);
      if(serviceable_datum)
      {
        return JSON.parse(serviceable_datum);
      }
      let state = await get_state_name(master_district.master_state_id);
      let state_name = state?.name || "";
      let state_id = state.id;
      let district_name = master_district.name;
      let district_id = master_district.id;
      let serviceability = await get_procurable_details({ master_district_id: district_id });
      let user_platform = serviceability.rows[0]?.user_platform || null;
      let serviceability_action = serviceability.rows[0].is_procuring;
      serviceable_datum={
        master_district_id: district_id,
        master_state_id: state_id,
        master_district_name: district_name,
        master_state_name: state_name,
        user_platform: user_platform,
        serviceability: serviceability_action
      }
      let ttl=60*60*6 // 6 hours in seconds
      await write_string(serviceable_redis_key,JSON.stringify(serviceable_datum),ttl);
      return serviceable_datum
    }));
    let serviceability_details = {}
    serviceability_details = {
      procurable_details: serviceable_data,
      total_count: district_list.count
    }
    return serviceability_details;
  } catch (err) {
    error_log(err);
    return null;
  }
}

module.exports = serviceable_data_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/services/get_master_state_service_by_id.js
const error_log = require("../../../../middelware/error_log");
const master_state_model = require("../../../../database/models_v2/location/master_state");

const get_master_state_service_by_id = (master_state_id) => {
  return new Promise(async (resolve, reject) => {
    try {
      let master_state_condition = {
        id: master_state_id,
        is_active: true,
      };
      let master_state = await master_state_model.findOne({
        where: master_state_condition,
        attributes: [
          ["master_state_code", "code"],
          ["id", "state_id"],
          ["name", "state_name"],
        ],
      });
      resolve({ state: master_state?.dataValues || null });
    } catch (ex) {
      error_log(ex);
      reject({ message: ex.message });
    }
  });
};

module.exports = get_master_state_service_by_id;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/services/update_procurable_states_details_service.js
const {update_procurable_states_details } = require("../../../../data_abstraction_layer/location/feature_serviceability");
const { key_gen_redis, delete_key, get_all_entity_keys } = require("../../../../database/redis/helper_redis_methods");
const redis_key_entities = require("../../../../database/redis/redis_key_entities");
const serviceable_enum = require("../../../../enums/serviceability/serviceable_enum");
const error_log = require("../../../../middelware/error_log");

const update_procurable_states_details_service = async (master_state_id,user_platform,serviceability_action) => {
    try {
        //clear redis
        await clear_redis_for_procurable_states(master_state_id)
        // using update procurable location abstraction layer
        let updated_state_procurable_data=await update_procurable_states_details({master_state_id,user_platform,serviceability_action})
        return updated_state_procurable_data;
    } catch (err) {
        error_log(err);
        return [];
    }
};
const clear_redis_for_procurable_states=async (master_state_id)=>{
// clear redis for whole state
    let redis_key=await key_gen_redis(redis_key_entities.PROCURABLE_LOCATION,master_state_id)
    let all_keys=await get_all_entity_keys(redis_key);
    for (let index = 0; index < all_keys.length; index++) {
        await delete_key(all_keys[index]);
    }
}

module.exports = update_procurable_states_details_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/services/get_location_by_pincode_service.js
const error_log = require("../../../../middelware/error_log");
const master_state_model = require("../../../../database/models_v2/location/master_state");
const master_district_model = require("../../../../database/models_v2/location/master_district");
const master_taluka_model = require("../../../../database/models_v2/location/master_taluka");
const master_pincode_model = require("../../../../database/models_v2/location/master_pincode");
const get_lat_long_from_pincode = require("../../../../entities/global/services/get_lat_long_from_pincode");

const get_location_by_pincode_service = (pincode) => {
  return new Promise(async (resolve, reject) => {
    try {
      let location_detail = await master_pincode_model.findOne({
        where: {
          pincode,
          is_active: true,
        },
        attributes: ["pincode"],
        include: [
          {
            model: master_state_model,
            where: {
              is_active: 1,
            },
            attributes: [
              "id",
              "name",
              ["master_state_code", "state_code"]
            ],
            required: true,
          },
          {
            model: master_district_model,
            where: {
              is_active: 1,
            },
            attributes: [
              "id",
              "name",
              ["master_district_code", "district_code"]
            ],
            required: true,
          }, {
            model: master_taluka_model,
            where: {
              is_active: 1,
            },
            attributes: [
              "id",
              "name"
            ],
            required: true,
          },
        ],
      });
      let new_location_detail = null;
      if (location_detail) {
        const lat_long_data = await get_lat_long_from_pincode(location_detail.pincode, 'zipcode ' + location_detail.pincode, 'India');
        new_location_detail = {
          pincode: location_detail.pincode,
          state: location_detail.master_state,
          district: location_detail.master_district,
          taluk: location_detail.master_taluka,
          lat: lat_long_data.lat,
          long: lat_long_data.long
        }
      }
      resolve({ "location_detail": new_location_detail });
    } catch (ex) {
      error_log(ex);
      reject({ message: ex.message });
    }
  });
};

module.exports = get_location_by_pincode_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/services/fetch_state_district_map_of_buyers_from_ml_service.js
const error_log = require('../../../../middelware/error_log');
const fetch_state_district_map_of_buyers_from_ml = require('../../../../data_abstraction_layer/location/fetch_state_district_map_of_buyers_for_ml');
const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (page_no, limit, search_param) => {
    try { // fetching state districts of unique buyers who have added trade from ml with pagination
        const state_district_map = await fetch_state_district_map_of_buyers_from_ml(page_no, limit, search_param);
        if (!state_district_map || !state_district_map?.data ||
            !state_district_map?.data?.data || !state_district_map?.data?.data?.location_list
        // || state_district_map?.data?.data?.location_list?.length<1
        ) { // checking if location_list is empty or it has a length of 1 but the first element(object) is emtpy only (though this case occurs less but now, it's also managed)
            throw new ValidationError(error.no_state_districts_are_found);
        }
        return state_district_map?.data?.data;
    } catch (err) {
        error_log(err);
        throw new ValidationError(err);
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/services/get_master_districts_service.js
const error_log=require('../../../../middelware/error_log');
const master_district_model=require('../../../../database/models_v2/location/master_district');

const get_master_districts_service=(master_state_id)=>{
    return new Promise(async (resolve, reject)=>{
        try{
            let master_districts = await master_district_model.findAll({
                where :{
                    master_state_id:master_state_id,
                    is_active:true
                },
                attributes:["id","name",["master_district_code","code"]]
            });
         resolve({"district":master_districts})
        }
        catch(ex){
            error_log(ex);
            reject({message:ex.message});
        }
    })
}


module.exports=get_master_districts_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/services/get_master_district_service_by_id.js
const error_log=require('../../../../middelware/error_log');
const master_district_model=require('../../../../database/models_v2/location/master_district');

const get_master_districts_service=(master_state_id,master_district_id)=>{
    return new Promise(async (resolve, reject)=>{
        try{
            let master_districts = await master_district_model.findOne({
                where :{
                    master_state_id:master_state_id,
                    id: master_district_id,
                    is_active:true
                },
                attributes:[
                    ["id","district_id"],
                    ["name", "district_name"],
                    ["master_district_code","code"]
                ]
            });
         resolve({ district: master_districts?.dataValues || null });
        }
        catch(ex){
            error_log(ex);
            reject({message:ex.message});
        }
    })
}


module.exports=get_master_districts_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/services/reverse_geocode_service.js
const error_log = require('../.././../../middelware/error_log');
const get_address_from_lat_long = require('../../../../entities/global/services/get_address_from_lat_long');
const { get_pincode_details_by_pincode } = require('../../../../data_abstraction_layer/location/master_pincodes');
const get_master_taluk_by_id = require('../../../../data_abstraction_layer/location/get_master_taluk_by_id');
const get_master_district_by_id = require('../../../../data_abstraction_layer/location/get_master_district_by_id');
const get_master_state_by_id = require('../../../../data_abstraction_layer/location/get_master_state_by_id');
const { ValidationError } = require('../../../../utilities/error/custom_error');
const fetch_state_district_by_lat_long = require('../../../../common_services/location/fetch_state_district_by_lat_long');
const save_location_by_lat_long_in_redis = require('../../../../common_services/location/save_location_by_lat_long_in_redis.js');
const fetch_location_by_lat_long_from_redis = require('../../../../common_services/location/fetch_location_by_lat_long_from_redis');

const reverse_geocode_service = async (lat, long) => {
    try {
        // common service for fetching location_by_lat_long_from_redis
        const cached_location_obj = await fetch_location_by_lat_long_from_redis(lat, long)
        if (cached_location_obj) return cached_location_obj
        // if location not found from redis then get from below
        const location_details = await get_address_from_lat_long(lat, long);
        let location_obj = {
            city: location_details?.city,
            state: location_details?.administrativeLevels?.level1long,
            district: location_details?.administrativeLevels?.level3long,
            country: location_details?.country,
            formatted_address: location_details?.formattedAddress || location_details?.formatted_address,
            zipcode: location_details?.zipcode,
            raw: location_details
        };
        // adding master details from the pincode
        location_obj = await add_master_details(location_obj);
        // adding state_id and district_id
        // fetch_state_district_by_lat_long , it first fetch from geocode/openstreet then finds id from table
        const state_district_details = await fetch_state_district_by_lat_long(lat, long)
        location_obj.state_id = state_district_details?.location?.state_id
        location_obj.district_id = state_district_details?.location?.district_id
        // save location details in redis
        await save_location_by_lat_long_in_redis(lat, long, location_obj)
        return location_obj;
    } catch (ex) {
        error_log(ex);
        throw ex;
    }
};
const add_master_details = async (location_obj) => {
    if (location_obj?.zipcode) {
    // fetching pincode details
        const pincode_details = await get_pincode_details_by_pincode({ pincode: location_obj?.zipcode });
        if (!pincode_details) {
            throw new ValidationError('pincode not found in the master model');
        }
        const { master_taluka_id, master_state_id, master_district_id } = pincode_details
        // get_master_taluka_name
        const taluk_details = await get_master_taluk_by_id(master_state_id, master_district_id, master_taluka_id);
        if (!taluk_details) { throw new ValidationError('taluk not found'); }
        // get master_district_name
        const district_details = await get_master_district_by_id(master_state_id, master_district_id);
        if (!district_details) { throw new ValidationError('master district not found'); }
        // get master_state_name
        const state_details = await get_master_state_by_id(master_state_id);
        if (!state_details) { throw new ValidationError('master state not found'); }
        // appending mater details in location object
        location_obj.master_taluk_id = master_taluka_id;
        location_obj.master_state_id = master_state_id;
        location_obj.master_district_id = master_district_id;
        location_obj.master_taluk_name = taluk_details?.name;
        location_obj.master_state_name = state_details?.name;
        location_obj.master_district_name = district_details?.name;
    }
    return location_obj;
}
module.exports = reverse_geocode_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/services/get_all_master_state_district_service.js
const error_log = require('../../../../middelware/error_log');
const master_district_model = require('../../../../database/models_v2/location/master_district');
const master_state_model = require('../../../../database/models_v2/location/master_state');

const get_all_master_state_district_service = () => {
    return new Promise(async (resolve, reject) => {
        try {
            // Perform a join between master_state and master_district models
            const all_master_states = await master_state_model.findAll({
                where: { is_active: true },
                attributes: ['id', 'name', ['master_state_code', 'code']],
                include:
                [{
                    model: master_district_model,
                    attributes: ['id', 'name', ['master_district_code', 'code'], ['master_state_id', 'state_id']],
                    where: { is_active: true } // Filter active districts only
                }]

            });
            resolve({ master_states: all_master_states });
        } catch (ex) {
            error_log(ex);
            reject({ message: ex.message });
        }
    })
}

module.exports = get_all_master_state_district_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/services/geocode_service.js
const error_log = require('../.././../../middelware/error_log');
const constants = require("../.././../../constants");
const get_request = require('../.././../../utilities/external_API_calls/get_request');
const options = {
    provider: constants.global_constants.NODE_GEO_CODER_PROVIDER,
    apiKey: constants.global_constants.NODE_GEO_CODER_KEY
};

const { geocode } = require("../../../../common_services/location/geolocation")
const geocode_service = async (address, location_id) => {
    try {
        let geocode_result = null;
        if (address) {
            geocode_result = geocode(address);
            if (geocode_result && geocode_result?.length) {
                return { lat: geocode_result[0].lat, long: geocode_result[0].long };
            }
        }
        let url = `${constants.global_constants.GEO_MAPS_API_URL}/geocode/json?address=${address}&key=${options.apiKey}`
        if (location_id) {
            url = `${constants.global_constants.GEO_MAPS_API_URL}/geocode/json?place_id=${location_id}&key=${options.apiKey}`
        }
        let res = await get_request(url)
        if (res.statusText == 'OVER_QUERY_LIMIT') {
            return ({ message: res.statusText })
        }
        else if (res.statusText == 'OK') {

            if (res.data.results.length > 0) {
                let data_obj = res.data.results[0].geometry.location
                return (data_obj);
            }
        }
        else {
            return ({ message: res.statusText });
        }
    }
    catch (ex) {
        error_log(ex);
        return ({ message: ex.message });
    }
}
module.exports = geocode_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/location/services/get_district_service.js
const error_log = require("../../../../middelware/error_log");
const master_district_model = require("../../../../database/models_v2/location/master_district");
const master_state_model = require("../../../../database/models_v2/location/master_state");

const get_district_code_service = (state_name, district_name) => {
  return new Promise(async (resolve, reject) => {
    try {
      let master_district = await master_district_model.findOne({
        where: {
          name: district_name,
          is_active: true,
        },
        attributes: [
          ["master_district_code", "district_code"],
          ["id", "district_id"],
          ["name", "district_name"],
        ],
        include: [
          {
            model: master_state_model,
            where: {
              is_active: 1,
              name: state_name,
            },
            required: true,
            attributes: [],
          },
        ],
      });
      resolve({ district: master_district });
    } catch (ex) {
      error_log(ex);
      reject({ message: ex.message });
    }
  });
};

module.exports = get_district_code_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/swagger/index.js
module.exports = {
    tags: {
        name: 'payment'
    },
    paths: {
        '/': {
            get: {
                tags: ['payment'],
                summary: 'get all payments',
                description: '',
                operationId: 'get_payment_table',
                security: [{ Bearer: ['read'] }],
                parameters: [],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/generate_bank_payment_format': {
            post: {
                tags: ['payment'],
                summary: 'generate_bank_payment',
                description: '',
                operationId: 'generate_bank_payment',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        required: true,
                        schema: {
                            required: ['data'],
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        required: [
                                            'id',
                                            'paymentFor',
                                            'paymentType',
                                            'selectedBank',
                                            'poNumber',
                                            'accountNumber',
                                            'ifscCode',
                                            'accountHolder',
                                            'amount'
                                        ],
                                        properties: {
                                            id: {
                                                type: 'string'
                                            },
                                            paymentFor: {
                                                type: 'string'
                                            },
                                            paymentType: {
                                                type: 'string'
                                            },
                                            selectedBank: {
                                                type: 'string'
                                            },
                                            poNumber: {
                                                type: 'string'
                                            },
                                            accountNumber: {
                                                type: 'string'
                                            },
                                            ifscCode: {
                                                type: 'string'
                                            },
                                            accountHolder: {
                                                type: 'string'
                                            },
                                            amount: {
                                                type: 'integer',
                                                format: 'int64'
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/banking_details': {
            post: {
                tags: ['payment'],
                summary: 'submit banking details of retailer and transport',
                description: '',
                operationId: 'submit_banking_details',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        required: true,
                        schema: {
                            required: [
                                'id',
                                'detailsOf',
                                'accountNumber',
                                'ifscCode',
                                'accountHolderName'
                            ],
                            properties: {
                                id: {
                                    type: 'string'
                                },
                                detailsOf: {
                                    type: 'string'
                                },
                                accountNumber: {
                                    type: 'string'
                                },
                                ifscCode: {
                                    type: 'string'
                                },
                                accountHolderName: {
                                    type: 'string'
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/part_one': {
            post: {
                tags: ['payment'],
                summary: 'submit part one payment of retailer and transport',
                description: '',
                operationId: 'submit_part_one_payment',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        required: true,
                        schema: {
                            required: ['id', 'utr', 'paymentFor'],
                            properties: {
                                id: {
                                    type: 'string'
                                },
                                utr: {
                                    type: 'string'
                                },
                                paymentFor: {
                                    type: 'string'
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/part_two': {
            post: {
                tags: ['payment'],
                summary: 'submit part two payment of retailer and transport',
                description: '',
                operationId: 'submit_part_two_payment',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        required: true,
                        schema: {
                            required: ['id', 'utr', 'paymentFor'],
                            properties: {
                                id: {
                                    type: 'string'
                                },
                                utr: {
                                    type: 'string'
                                },
                                paymentFor: {
                                    type: 'string'
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/utr_number': {
            post: {
                tags: ['payment'],
                summary: 'post utr number',
                description: '',
                operationId: 'post_utr_number',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'id',
                        description: '',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'utrNumber',
                        description: '',
                        required: true,
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'status',
                        description: '',
                        required: true,
                        type: 'number'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/payment_deduction/retailer': {
            get: {
                tags: ['payment'],
                summary: 'get retailer payment deduction and reason',
                description: '',
                operationId: 'fetch_retailer_payment_deduction',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'po_id',
                        description: '',
                        required: true,
                        type: 'number'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/payment_deduction/transport': {
            get: {
                tags: ['payment'],
                summary: 'get transport payment deduction and reason',
                description: '',
                operationId: 'fetch_transport_payment_deduction',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'po_id',
                        description: '',
                        required: true,
                        type: 'number'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/details': {
            get: {
                tags: ['payment'],
                summary: 'get payment details',
                description: '',
                operationId: 'fetch_payment_details',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'po_id',
                        description: '',
                        required: true,
                        type: 'number'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/deduction_reasons/retailer': {
            get: {
                tags: ['payment'],
                summary: 'get deduction reasons for retailer',
                description: '',
                operationId: 'fetch_deduction_reasons_for_retailer',
                security: [{ Bearer: ['read'] }],
                parameters: [],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/deduction_reasons/transport': {
            get: {
                tags: ['payment'],
                summary: 'get deduction reasons for transport',
                description: '',
                operationId: 'fetch_deduction_reasons_for_transport',
                security: [{ Bearer: ['read'] }],
                parameters: [],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/final_payment/retailer': {
            post: {
                tags: ['payment'],
                summary: 'submit final payment of retailer',
                description: '',
                operationId: 'submit_retailer_final_payment_controller',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        required: true,
                        schema: {
                            required: ['po_id', 'deduction_amount', 'deduction_reason', 'final_payable_amount'],
                            properties: {
                                po_id: {
                                    type: 'number'
                                },
                                deduction_amount: {
                                    type: 'number'
                                },
                                deduction_reason: {
                                    type: 'number'
                                },
                                final_payable_amount: {
                                    type: 'number'
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/final_payment/transport': {
            post: {
                tags: ['payment'],
                summary: 'submit final payment of transport',
                description: '',
                operationId: 'submit_transport_final_payment_controller',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        required: true,
                        schema: {
                            required: [
                                'po_id',
                                'halting_charges',
                                'unloading_charges',
                                'route_change_charges',
                                'commodity_cost',
                                'deduction_amount',
                                'reason_for_deduction',
                                'revised_bill_t_url',
                                'revised_transport_cost',
                                'final_payable_to_tpt_cost'
                            ],
                            properties: {
                                po_id: {
                                    type: 'number'
                                },
                                halting_charges: {
                                    type: 'number'
                                },
                                unloading_charges: {
                                    type: 'number'
                                },
                                route_change_charges: {
                                    type: 'number'
                                },
                                commodity_cost: {
                                    type: 'number'
                                },
                                reason_for_deduction: {
                                    type: 'number'
                                },
                                revised_bill_t_url: {
                                    type: 'string'
                                },
                                revised_transport_cost: {
                                    type: 'number'
                                },
                                final_payable_to_tpt_cost: {
                                    type: 'number'
                                },
                                deduction_amount: {
                                    type: 'number'
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/retailer/gst_details/{payment_id}': {
            get: {
                tags: ['payment'],
                summary: 'fetch gst details',
                description: '',
                operationId: 'fetch_gst_details',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'path',
                        name: 'payment_id',
                        description: '',
                        required: true,
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        }
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/index.js
const router = require('express').Router();
// const authorize = require("../../../middelware/authorized_routes");
// const user_roles_enum = require("../../../enums/user_profile/user_role");
const generate_bank_payment_format_controller = require('./controllers/generate_bank_payment_format_controller');
const submit_bank_details_controller = require('./controllers/submit_bank_details_controller');
// const submit_payment_controller = require('./controllers/submit_payment_controller');
const fetch_po_detail_for_part1_payment_controller = require('./controllers/fetch_po_detail_for_part1_payment_controller');
// const get_payments_for_table_controller = require('./controllers/get_payments_for_table_controller');
// const getPendingRetailerPaymentbyIdController = require('./controllers/getPendingRetailerPaymentbyIdController');
const getPendingTransporterPaymentbyIdController = require('./controllers/getPendingTransporterPaymentbyIdController');
const post_utr_number_controller = require('./controllers/post_utr_number_controller');
const fetch_deduction_reasons_for_transport_controller = require('./controllers/fetch_deduction_reasons_for_transport_controller');
const fetch_deduction_reasons_for_retailer_controller = require('./controllers/fetch_deduction_reasons_for_retailer_controller');
const submit_retailer_final_payment_controller = require('./controllers/submit_retailer_final_payment_controller');
const submit_transport_final_payment_controller = require('./controllers/submit_transport_final_payment_controller');
const fetch_retailer_payment_deduction_controller = require('./controllers/fetch_retailer_payment_deduction_controller');
const fetch_transport_payment_deduction_controller = require('./controllers/fetch_transport_payment_deduction_controller');
const fetch_payment_details_controller = require('./controllers/fetch_payment_details_controller');
const { get_gst_detail_controller } = require('./controllers/get_gst_details_controller');

/** @deprecated */
// router.get("/", get_payments_for_table_controller);
// router.get("/retailer/:id", getPendingRetailerPaymentbyIdController);
// router.post("/", submit_payment_controller);

router.get('/transporter/:id', getPendingTransporterPaymentbyIdController);
router.post('/banking_details', submit_bank_details_controller);
router.post('/generate_bank_payment_format', generate_bank_payment_format_controller);

router.get('/po_detail_for_part1_payment', fetch_po_detail_for_part1_payment_controller);

router.post('/utr_number', post_utr_number_controller);

router.get('/deduction_reasons/retailer', fetch_deduction_reasons_for_retailer_controller);
router.get('/deduction_reasons/transport', fetch_deduction_reasons_for_transport_controller);
router.post('/final_payment/retailer', submit_retailer_final_payment_controller);
router.post('/final_payment/transport', submit_transport_final_payment_controller);
router.get('/payment_deduction/retailer', fetch_retailer_payment_deduction_controller);
router.get('/payment_deduction/transport', fetch_transport_payment_deduction_controller);
router.get('/details', fetch_payment_details_controller);
router.get('/retailer/gst_details/:payment_id', get_gst_detail_controller)
module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/_services/getPendingTransporterPaymentbyIdService.js
const procurementPayments = require("../../../../database/models_v2/procurement_payments/procurement_payments");
const procurementCropSampleModel = require("../../../../database/models_v2/procurement_sample/procurment_crop_sample");
const orderDeliveryDetailModel = require("../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail");
const purchaseCropOrdersModel = require("../../../../database/models_v2/procurement_order/purchase_crop_orders");
const masterMerchantDetailModel = require("../../../../database/models_v2/merchant/master_merchant_detail");
const bankAccountDetailsModel = require("../../../../database/models_v2/transactions/account_details");
const bankDetailsModel = require("../../../../database/models_v2/transactions/banks");
// const orderDeliveryDetail = require("../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail");
const procurementBillComponentsModel = require("../../../../database/models_v2/procurement_payments/procurement_bill_components");
const procurementBillComponentsEnumsModel = require("../../../../database/models_v2/procurement_payments/procurement_order_bill_component_enums");
const masterDistrictModel = require("../../../../database/models_v2/location/master_district");
const masterStateModel = require("../../../../database/models_v2/location/master_state");
const masterTalukModel = require("../../../../database/models_v2/location/master_taluka");
const merchant_verification_docs_model = require("../../../../database/models_v2/merchant/merchant_verification_docs");
const errorLog = require("../../../../middelware/error_log");
const locations = require("../../../../database/models_v2/global/locations");
const procurement_dispatch_document = require("../../../../database/models_v2/procurement_order/procurement_dispatch_document");
const order_delivery_document_type_enum_model = require("../../../../database/models_v2/procurement_order_deliveries/order_delivery_document_type_enums");
const order_delivery_documents_model = require("../../../../database/models_v2/procurement_order_deliveries/order_delivery_documents");
const po_unloading_docs_model = require("../../../../database/models_v2/po_unloading/po_unloading_docs");
const po_unloading_doc_types_model = require("../../../../database/models_v2/po_unloading/po_unloading_doc_types");
const get_procurement_delivery_detail = require("./get_procurement_delivery_detail");
const crop_detail = require("../../../../database/models_v2/crop/crop_detail");
const { payment_for } = require('../../../../enums/purchase_order/procurement_payment_enum');
const fetch_transport_payment_deduction_service = require("./fetch_transport_payment_deduction_service");
const unloading_doc_type_enum = require("../../../../enums/market_linkage/enums/unloading_doc_type_enum");
const po_doc_type = require("../../../../enums/purchase_order/purchase_order_document_enum").doc_type;
const getPendingTransporterPaymentbyIdService = (paymentId) => {
  return new Promise(async (resolve, reject) => {
    try {
      const filter = { 
        // status: paymentEnum.PENDING, 
         is_active: 1,
         is_additional_payment: false
      };
      if (paymentId) {
        filter.id = paymentId;
      }
      const payment = await procurementPayments.findOne({
        where: filter,
        include: [
          {
            model: purchaseCropOrdersModel,
            include: [
              {
                model: masterMerchantDetailModel,
                include: [
                  { model: masterStateModel,
                    where : {
                      is_active:true
                    }, attributes: ["name"],
                    required:false },
                  { model: masterDistrictModel,
                    where : {
                      is_active:true
                    }, attributes: ["name"],
                    required:false },
                  { model: masterTalukModel,
                    where : {
                      is_active:true
                    }, attributes: ["name"],
                    required:false },
                  { model: locations,
                    where : {
                      is_active:true
                    }, attributes: ["latitude","longitude"],
                    required:false },
                  { model: merchant_verification_docs_model,
                    where : {
                      is_active:true
                    },
                    required:false },
                ],
                where : {
                  is_active:true
                },
                required:false
              },
              {
                model: crop_detail,
                where : {
                  is_active:true
                },
                required:false
              },
              {
                model: procurementBillComponentsModel,
                where : {
                  is_active:true
                },
                include: [{ model: procurementBillComponentsEnumsModel,
                  where : {
                    is_active:true
                  },
                  required:false }],
                  required:false
              },
              {
                model: procurementCropSampleModel,
                attributes: ["empty_bag_weight", "id","bag_deduction"],
                where : {
                  is_active:true
                },
                required:false
              },
              {
                model: orderDeliveryDetailModel,
                attributes: ["gross_weight"],
                where : {
                  is_active:true
                },
                required:false
              },
              {
                model: po_unloading_docs_model,
                where : {
                  is_active:true
                },
                include:[
                  {
                    model:po_unloading_doc_types_model,
                    where : {
                      is_active:true
                    },
                    required:false
                  }
                ],
                required:false
              },
            ],
            where : {
              is_active:true
            },
            required:false
          },
          { model: orderDeliveryDetailModel ,
            where : {
              is_active:true
            },
          include:[
            {
              model:order_delivery_documents_model,
              where : {
                is_active:true
              },
              include:[
                {
                  model:procurement_dispatch_document,
                  where : {
                    is_active:true
                  },
                  required:false
                },
                {
                  model:order_delivery_document_type_enum_model,
                  where : {
                    is_active:true
                  },
                  required:false
                }
              ],
              required:false
            }
          ],
          required:false},
          {
            model: bankAccountDetailsModel,
            where : {
              is_active:true
            },
            include: [{ model: bankDetailsModel,
              where : {
                is_active:true
              }, attributes: ["name"],
              required:false }],
              required:false
          },
        ],
      });
let response_obj=await get_procurement_delivery_detail(payment?.order_delivery_id)
response_obj.cropName=payment?.purchase_crop_order?.crop_detail?.name || null 
response_obj.totalPayment=payment?.order_delivery_detail?.total_transport_cost || 0
if(payment.payment_for ==payment_for?.ORDER_DELIVERY  && payment?.installment_number==1){
response_obj.advancePayment=(+payment?.amount) || 0

// response_obj.deduction=calculate_deduction(payment.purchase_crop_order.procurement_order_bill_components)
  response_obj.pendingPayment=payment?.order_delivery_detail?.total_transport_cost-(+payment?.amount) || 0
}

response_obj.accountNumber=payment?.bank_account_detail?.account_number || null
response_obj.ifscCode=payment?.bank_account_detail?.ifsc_code || null 
response_obj.bankName=payment?.bank_account_detail?.bank.name || null 
response_obj.acountHolderName=payment?.bank_account_detail?.account_holder_name || null


      let temp_doc_ar=payment?.order_delivery_detail?.order_delivery_documents
      let doc_url=[];
      for(let i=0;i<temp_doc_ar.length;i++)
      {
        let single_doc=temp_doc_ar[i]
        let doc_obj={}
        if(single_doc?.order_transport_doc_type_id || single_doc?.name!='9r' && !(payment?.installment_number === 2 && single_doc?.name === po_doc_type.transportBillImage))
        {
          doc_obj.docId=single_doc?.id || null 
          doc_obj.docUrl=single_doc?.doc_url || null
          if(single_doc?.order_transport_doc_type_id )
            doc_obj.docName=single_doc?.order_delivery_document_type_enum?.name || null
          else
            if(!single_doc?.order_delivery_document_type_id){
              doc_obj.docName=single_doc?.name || null
            }else{
              doc_obj.docName=single_doc?.procurement_dispatch_document?.name || null
            }
            

          doc_url.push(doc_obj);
        }
      }
      
      let unloading=payment?.purchase_crop_order?.po_unloading_docs
      for(let i=0;i<unloading.length;i++)
        {
          let unlaoding_element=unloading[i];
          if(unlaoding_element?.po_unloading_doc_type?.name=="KANTA PARCHI")
          {
            doc_url.push({
              docId:unlaoding_element?.id || null ,
              docName:unlaoding_element?.po_unloading_doc_type?.name || null ,
              docUrl:unlaoding_element?.doc_url || null,
            })
          }
      } 
      // it will be done when bill split will be available
      // if(payment.installment_number==2)
      // {
        
      // }
      response_obj.docInfo=doc_url

      if(payment?.installment_number === 2){
        const transport_deduction_details = await fetch_transport_payment_deduction_service(payment?.purchase_crop_order_id);
        response_obj.haltingCharge = transport_deduction_details?.halting_charges || null;
        response_obj.unloadingCharge = transport_deduction_details?.unloading_charges || null;
        response_obj.routeChangeCost = transport_deduction_details?.route_change_charges || null;
        response_obj.commodityCost = transport_deduction_details?.commodity_cost || null; 
        response_obj.revisedTotalPayment = transport_deduction_details?.revised_transport_cost || null;
        response_obj.deduction = transport_deduction_details?.deduction_amount || null;
        response_obj.deductionReason = transport_deduction_details?.reason_for_deduction || null;
        response_obj.pendingPayment = transport_deduction_details?.final_payable_to_tpt_cost || null;

        if(transport_deduction_details?.final_payable_to_tpt_cost && transport_deduction_details?.deduction_amount)
          response_obj.advancePayment = transport_deduction_details?.revised_transport_cost - (transport_deduction_details?.final_payable_to_tpt_cost + transport_deduction_details?.deduction_amount)
        else if(transport_deduction_details?.deduction_amount)
          response_obj.advancePayment = transport_deduction_details?.revised_transport_cost - transport_deduction_details?.deduction_amount
        else if(transport_deduction_details?.final_payable_to_tpt_cost)
          response_obj.advancePayment = transport_deduction_details?.revised_transport_cost - transport_deduction_details?.final_payable_to_tpt_cost
        else
          response_obj.advancePayment = transport_deduction_details?.revised_transport_cost

        doc_url.push({
          docId: null,
          docName: "revised transport bill",
          docUrl: transport_deduction_details?.revised_bill_t_url || null,
        })

        for (let i = 0; i < unloading.length; i++) {
          let unloading_element = unloading[i];
          if (unloading_element?.po_unloading_doc_type?.id !== unloading_doc_type_enum["KANTA PARCHI"]) {
            doc_url.push({
              docId: unloading_element?.id || null,
              docName: unloading_element?.po_unloading_doc_type?.name || null,
              docUrl: unloading_element?.doc_url || null,
            })
          }
        }
      }

      return resolve(response_obj);
    } catch (err) {
      errorLog(err);
      return reject({ message: err.message });
    }
  });
};


module.exports = { getPendingTransporterPaymentbyIdService };



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/_services/fetch_deduction_reasons_for_retailer_service.js
const retailer_payment_deduction_reasons = require('../../../../enums/market_linkage/enums/retailer_payment_deduction_reasons');
const error_log = require('../../../../middelware/error_log');

const fetch_deduction_reasons_for_retailer_service = () => {
    return new Promise(async (resolve, reject) => {
        try {
            const deduction_reasons = Object.entries(retailer_payment_deduction_reasons);
            const response_data = deduction_reasons.map((reason)=>{
                return {
                    id: reason[1],
                    name: reason[0]
                }
            })
            resolve(response_data);
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

module.exports = fetch_deduction_reasons_for_retailer_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/_services/get_procurement_delivery_detail.js
const error_log = require("../../../../middelware/error_log");
const order_delivery_detail_model = require("../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail");

module.exports = async (order_delivery_id) => {
    try {
        const order_delivery_detail = await order_delivery_detail_model.findOne({
            where: {
                id: order_delivery_id,
                is_active: 1
            }
        });
        if(!order_delivery_detail)
        {
            throw new Error("no order delivery details for this id")
        }
        let order_delivery_obj={}
        order_delivery_obj.vehicleNumber=order_delivery_detail.vehicle_number
        order_delivery_obj.driverName=order_delivery_detail.driver_name
        order_delivery_obj.transporterName=order_delivery_detail.transport_name
        order_delivery_obj.mobileNumber=order_delivery_detail.driver_mobile_number
        order_delivery_obj.commodityWeight=order_delivery_detail.gross_weight
        console.log(order_delivery_obj);
        return order_delivery_obj;
    }
    catch (err) {
        error_log(err);
        throw new Error(err.message);
    }
}





File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/_services/get_payments_for_table_service.js
const procurement_payments = require("../../../../database/models_v2/procurement_payments/procurement_payments");
const purchase_crop_orders = require("../../../../database/models_v2/procurement_order/purchase_crop_orders");
const master_merchant_detail = require("../../../../database/models_v2/merchant/master_merchant_detail");
const order_delivery_detail = require("../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail");
const payment_deduction_for_transport_model = require("../../../../database/models_v2/procurement_payments/payment_deduction_for_transport");
const payment_deduction_for_retailer_model = require("../../../../database/models_v2/procurement_payments/payment_deduction_for_retailer");
const procurement_bill_components = require("../../../../database/models_v2/procurement_payments/procurement_bill_components");
const procurement_order_bill_component_enums_model = require("../../../../database/models_v2/procurement_payments/procurement_order_bill_component_enums");
const procurement_lots_model = require("../../../../database/models_v2/procurement_sample/procurement_lots");
const error_log = require("../../../../middelware/error_log");
const bill_operation_enum = require("../../../../enums/purchase_order/bill_operation_enum");
const { getPaymentInfo } = require("../../purchase_order/services/get_po_details_service");
const round_off_to_two_decimal = require("../../utilities/round_off/round_off_to_two_decimal");

const get_payments_for_table_service = (id) => {
  return new Promise(async (resolve, reject) => {
    try {
      const filter = {
        // status: payment_enum.PENDING,
        is_active: 1,
      };

      if (id) {
        filter.id = id;
      }

      const payment = await procurement_payments.findAll({
        where: filter,
        include: [
          {
            model: purchase_crop_orders,
            where:{
              is_active:1
            },
            include: [
              {
                model: master_merchant_detail,
                where:{
                  is_active:1
                },
              },
              {
                model: procurement_lots_model,
                where:{
                  is_active:1
                },
                include:[
                  {
                    model:procurement_bill_components,
                    where:{
                      is_active:1
                    },
                    include:[{
                      model:procurement_order_bill_component_enums_model,
                      where:{
                        is_active:1
                      }
                    }]
                  }
                ]
              },
              {
                model: payment_deduction_for_transport_model,
                where:{
                  is_active:1
                },
                required:false
              },
              {
                model: payment_deduction_for_retailer_model,
                where:{
                  is_active:1
                },
                required:false
              }
            ],
          },
          {
            model: order_delivery_detail,
            where:{
              is_active:1
            },
          },
        ],
        order: [["created_at", "desc"]],
      });
      let payments = [];
      for (let i = 0; i < payment.length; i++) {
        let payment_object = {};
        payment_object.poNumber = payment[i]?.purchase_crop_order?.farmart_id || null;
        payment_object.name =
          payment[i]?.purchase_crop_order?.master_merchant_detail?.name || null;
        payment_object.paymentType = payment[i]?.installment_number || null;
        payment_object.zohoPoId=payment[i]?.purchase_crop_order?.procurement_lot?.zoho_po_id || null;
        if (payment[i].payment_for == 1) {
          payment_object.paymentTo ="retailer";
          const transaction=await getPaymentInfo(payment[i]?.purchase_crop_order?.price,payment[i]?.purchase_crop_order?.procurement_lot?.procurement_order_bill_components,payment[i]?.order_delivery_detail,payment[i]?.purchase_crop_order?.mandi_tax_value);
          payment_object.totalAmount= calculate_amount(transaction);
          payment_object.deductionAmount = (payment[i].installment_number==2)?payment[i]?.purchase_crop_order?.payment_deductions_for_retailers[0]?.deduction_amount || 0:0;
          // payment_object.totalAmount =
          //   payment[i]?.purchase_crop_order?.total_payment || 0;
        } else {
          payment_object.paymentTo ="transport";
          payment_object.totalAmount =
          payment[i]?.order_delivery_detail?.total_transport_cost || 0;
          payment_object.deductionAmount = (payment[i].installment_number==2)?payment[i]?.purchase_crop_order?.payment_deductions_for_transports[0]?.deduction_amount || 0:0;
        }
        payment_object.payableAmount = payment[i]?.revised_payment || 0;
        // payment_object.deductionAmount = calculate_deduction(
        //   payment[i]?.purchase_crop_order?.procurement_order_bill_components
        // );
        payment_object.utrNumber = payment[i]?.utr_number || '';
        payment_object.id = payment[i]?.id;
        if (payment[i].account_detail_id) {
          payment_object.isBankInformationAvailable = true;
        } else {
          payment_object.isBankInformationAvailable = false;
        }
        payments.push(payment_object);
      }

      return resolve({ payments });
    } catch (err) {
      error_log(err);
      return reject({ message: err.message });
    }
  });
};

const calculate_deduction = (bill_component=[]) => {
  let total_deduction = 0;
  for (let i = 0; i < bill_component.length; i++) {
    if (bill_component[i]?.order_bill_operation_id == bill_operation_enum.addition) {
      total_deduction += bill_component[i]?.amount;
    } else {
      total_deduction -= bill_component[i]?.amount;
    }
  }
  return total_deduction;
};

const calculate_amount = (transaction=[]) => {
  let total_amount = 0;
  for (let i = 0; i < transaction.length; i++) {
    total_amount += transaction[i]?.toBePaid;
  }
  return (round_off_to_two_decimal(total_amount)).toString();
};

module.exports = {
  get_payments_for_table_service,
  calculate_deduction
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/_services/get_gst_detail_service.js
const { Op } = require("sequelize")
const crop_variety_gst_detail = require("../../../../database/models_v2/crop/crop_variety_gst_detail")
const purchase_crop_orders = require("../../../../database/models_v2/procurement_order/purchase_crop_orders")
const procurement_payments = require("../../../../database/models_v2/procurement_payments/procurement_payments")
const procurment_crop_sample = require("../../../../database/models_v2/procurement_sample/procurment_crop_sample")
const { dispatchBy } = require("../../../../enums/market_linkage/enums/procurement_crop_sample")
const { installment_number, payment_for } = require("../../../../enums/purchase_order/procurement_payment_enum")
const error_log = require("../../../../middelware/error_log")

const get_gst_detail_service = async (payment_id) => {

    try {

        const part_three_payment = await procurement_payments.findOne({
            where: {
                is_active: 1,
                id: payment_id     
            }
        })

        if(!part_three_payment)
            return {status: false, message: "Wrong payment_id"}

        const result = {
            igst: part_three_payment.dataValues.igst,
            sgst: part_three_payment.dataValues.sgst,
            cgst: part_three_payment.dataValues.cgst,
            gst: part_three_payment.dataValues.gst_amount,
            gst_percent: part_three_payment.dataValues.gst_percent,
            taxable_amount: 0
        }

        const po = await purchase_crop_orders.findOne({
            where: {
                id: part_three_payment.dataValues.purchase_crop_order_id,
                is_active: 1
            },
            include: [
                {
                    model: procurment_crop_sample
                }
            ]
        })

        const crop_variety_gst = await crop_variety_gst_detail.findOne({
            where: {
                crop_variety_id: po.dataValues.crop_variety_id,
                is_active: 1
            },
            attributes: ["is_gst_applicable"]
        })

        let is_gst_applicable = false

        if(crop_variety_gst)
            is_gst_applicable = crop_variety_gst.dataValues.is_gst_applicable

        if(is_gst_applicable){

            const all_retailer_payments = await procurement_payments.findAll({
                where: {
                    is_active: 1,
                    purchase_crop_order_id: part_three_payment.dataValues.purchase_crop_order_id,
                    is_additional_payment: 0,
                    installment_number: {
                        [Op.in]: [installment_number.ONE, installment_number.TWO]
                    }
                }
            })

            const sample_data = po.dataValues.procurment_crop_sample
            const is_FOR = sample_data.dataValues.f_o_r
            const dispatch_by = sample_data.dataValues.dispatch_by

            let total_amount = 0

            for(let i=0; i<all_retailer_payments.length; i++){
                const payment_data = all_retailer_payments[i].dataValues
                
                if(is_FOR && dispatch_by === dispatchBy.RETAILER)
                    total_amount += parseFloat(payment_data.amount)
                else
                    total_amount += payment_data.payment_for === payment_for.PO ? parseFloat(payment_data.amount) : 0

            }
            
            result.taxable_amount = total_amount

        }

        return {status: true, data: result}
        
    } catch (error) {
        error_log(error)
        return {status: false, message: error.message}
    }

}

module.exports = {
    get_gst_detail_service
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/_services/submit_retailer_final_payment/retailer_deduction_update_by_sh.js
const purchase_crop_orders_model = require("../../../../../database/models_v2/procurement_order/purchase_crop_orders");
const order_delivery_detail_model = require("../../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail");
const payment_deductions_for_retailer_model = require("../../../../../database/models_v2/procurement_payments/payment_deduction_for_retailer");
const procurement_payments_model = require("../../../../../database/models_v2/procurement_payments/procurement_payments");
const { payment_for } = require("../../../../../enums/purchase_order/procurement_payment_enum");
const error_log = require("../../../../../middelware/error_log");
const create_payment_service = require("../../../purchase_order/_services/update_po_payment_info/create_payment");

const retailer_deduction_update_by_sh = async (
    po_id,
    deduction_amount,
    deduction_reason,
    final_payable_amount
) => {
    return new Promise(async (resolve, reject) => {
        try {
            const [purchase_order, part_one_payment_data] = await Promise.all([
                purchase_crop_orders_model.findOne({
                    where: {
                        is_active: true,
                        id: po_id
                    },
                    include: [
                        {
                            model: order_delivery_detail_model,
                            required: true,
                            where: {
                                is_active: true
                            }
                        },
                        {
                            model: payment_deductions_for_retailer_model,
                            required: false,
                            where: {
                                is_active: true
                            }
                        }
                    ]
                }),
                procurement_payments_model.findOne({
                    where: {
                        is_active: true,
                        payment_for: payment_for.PO,
                        installment_number: 1,
                        purchase_crop_order_id: po_id,
                        is_additional_payment: false
                    }
                })
            ])
            if (!purchase_order) {
                throw new Error("invalid po_id");
            }
            if (!part_one_payment_data) {
                throw new Error("part one payment not done");
            }
            // const part_one_payment = parseFloat(part_one_payment_data.amount);
            // const total_transport_cost = purchase_order.total_payment;
            // const final_payment = total_transport_cost - (part_one_payment + deduction_amount);
            // if (final_payment !== final_payable_amount) {
            //     throw new Error("please check the calculation of final_payable_amount");
            // }
            let payment_deduction_obj = await payment_deductions_for_retailer_model.findOne({
                where: {
                    is_active: true,
                    purchase_crop_order_id: po_id
                }
            })
            if (payment_deduction_obj && payment_deduction_obj.approved_by_state_head) {
                throw new Error("part two payment is already created. cannot update deduction.")
            }
            else {
                if (payment_deduction_obj) {
                    payment_deduction_obj.is_active = false;
                    await payment_deduction_obj.save();
                }
                await payment_deductions_for_retailer_model.build({
                    deduction_amount,
                    final_payable_amount,
                    retailer_payment_deduction_reason_id: deduction_reason,
                    purchase_crop_order_id: po_id,
                    approved_by_rpm: true,
                    approved_by_state_head: true,
                    is_active: true
                }).save();
                await create_payment_service({
                    poId: po_id,
                    orderDeliveryId: purchase_order.order_delivery_detail.id,
                    buyerOrderId: purchase_order.buyer_order_id,
                    amount: final_payable_amount,
                    installment: 2,
                    paymentFor: payment_for.PO,
                    accountDetailId: part_one_payment_data.account_detail_id
                })
            }
            resolve(true);
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}
module.exports = retailer_deduction_update_by_sh


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/_services/submit_retailer_final_payment/retailer_deduction_update_by_rpm.js
const purchase_crop_orders_model = require("../../../../../database/models_v2/procurement_order/purchase_crop_orders");
const payment_deductions_for_retailer_model = require("../../../../../database/models_v2/procurement_payments/payment_deduction_for_retailer");
const procurement_payments_model = require("../../../../../database/models_v2/procurement_payments/procurement_payments");
const { payment_for } = require("../../../../../enums/purchase_order/procurement_payment_enum");
const error_log = require("../../../../../middelware/error_log");

const retailer_deduction_update_by_rpm = async (
    po_id,
    deduction_amount,
    deduction_reason,
    final_payable_amount
) => {
    return new Promise(async (resolve, reject) => {
        try {
            const [part_one_payment_data, purchase_order] = await Promise.all([
                procurement_payments_model.findOne({
                    where: {
                        is_active: true,
                        payment_for: payment_for.PO,
                        installment_number: 1,
                        purchase_crop_order_id: po_id,
                        is_additional_payment: false
                    }
                }),
                purchase_crop_orders_model.findOne({
                    where: {
                        is_active: true,
                        id: po_id
                    }
                })
            ])
            if (!purchase_order) {
                throw new Error("invalid po_id");
            }
            if (!part_one_payment_data) {
                throw new Error("part one payment not done");
            }
            // const part_one_payment = parseFloat(part_one_payment_data.amount);
            // const total_transport_cost = purchase_order.total_payment;
            // const final_payment = total_transport_cost - (part_one_payment + deduction_amount);
            // if (final_payment !== final_payable_amount) {
            //     throw new Error("please check the calculation of final_payable_amount");
            // }
            let payment_deduction_obj = await payment_deductions_for_retailer_model.findOne({
                where: {
                    is_active: true,
                    purchase_crop_order_id: po_id
                }
            })
            if (payment_deduction_obj && payment_deduction_obj.approved_by_state_head) {
                throw new Error("deduction is already approved by state head")
            }
            if (payment_deduction_obj && payment_deduction_obj.approved_by_rpm) {
                if (payment_deduction_obj.deduction_amount !== deduction_amount
                    || payment_deduction_obj.retailer_payment_deduction_reason_id !== deduction_reason) {
                    payment_deduction_obj.deduction_amount = deduction_amount;
                    payment_deduction_obj.retailer_payment_deduction_reason_id = deduction_reason;
                    payment_deduction_obj.final_payable_amount = final_payable_amount;
                    await payment_deduction_obj.save();
                }
            }
            else {
                if (payment_deduction_obj) {
                    payment_deduction_obj.is_active = false;
                    await payment_deduction_obj.save();
                }
                await payment_deductions_for_retailer_model.build({
                    deduction_amount,
                    final_payable_amount,
                    retailer_payment_deduction_reason_id: deduction_reason,
                    purchase_crop_order_id: po_id,
                    approved_by_rpm: true,
                    approved_by_state_head: false,
                    is_active: true
                }).save();
            }
            resolve(true);
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}
module.exports = retailer_deduction_update_by_rpm


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/_services/submit_retailer_final_payment/retailer_deduction_update_by_pa.js
const purchase_crop_orders_model = require("../../../../../database/models_v2/procurement_order/purchase_crop_orders");
const payment_deductions_for_retailer_model = require("../../../../../database/models_v2/procurement_payments/payment_deduction_for_retailer");
const procurement_payments_model = require("../../../../../database/models_v2/procurement_payments/procurement_payments");
const { payment_for } = require("../../../../../enums/purchase_order/procurement_payment_enum");
const error_log = require("../../../../../middelware/error_log");

const retailer_deduction_update_by_pa = async (
    po_id,
    deduction_amount,
    deduction_reason,
    final_payable_amount
) => {
    return new Promise(async (resolve, reject) => {
        try {
            const [part_one_payment_data, purchase_order] = await Promise.all([
                procurement_payments_model.findOne({
                    where: {
                        is_active: true,
                        payment_for: payment_for.PO,
                        installment_number: 1,
                        purchase_crop_order_id: po_id,
                        is_additional_payment: false
                    }
                }),
                purchase_crop_orders_model.findOne({
                    where: {
                        is_active: true,
                        id: po_id
                    }
                })
            ])
            if (!purchase_order) {
                throw new Error("invalid po_id");
            }
            if (!part_one_payment_data) {
                throw new Error("part one payment not done");
            }
            // const part_one_payment = parseFloat(part_one_payment_data.amount);
            // const total_transport_cost = purchase_order.total_payment;
            // const final_payment = total_transport_cost - (part_one_payment + deduction_amount);
            // if (final_payment !== final_payable_amount) {
            //     throw new Error("please check the calculation of final_payable_amount");
            // }
            let payment_deduction_obj = await payment_deductions_for_retailer_model.findOne({
                where: {
                    is_active: true,
                    purchase_crop_order_id: po_id
                }
            })
            if (payment_deduction_obj) {
                if (payment_deduction_obj.approved_by_rpm) {
                    throw new Error("deduction is already approved by rpm or state head")
                }
                if (payment_deduction_obj.deduction_amount !== deduction_amount
                    || payment_deduction_obj.retailer_payment_deduction_reason_id !== deduction_reason) {
                    payment_deduction_obj.deduction_amount = deduction_amount;
                    payment_deduction_obj.retailer_payment_deduction_reason_id = deduction_reason;
                    payment_deduction_obj.final_payable_amount = final_payable_amount;
                    await payment_deduction_obj.save();
                }
            }
            else {
                await payment_deductions_for_retailer_model.build({
                    deduction_amount,
                    final_payable_amount,
                    retailer_payment_deduction_reason_id: deduction_reason,
                    purchase_crop_order_id: po_id,
                    approved_by_rpm: false,
                    approved_by_state_head: false,
                    is_active: true
                }).save();
            }
            resolve(true);
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}
module.exports = retailer_deduction_update_by_pa


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/_services/fetch_deduction_reasons_for_transport_service.js
const transport_payment_deduction_reasons = require('../../../../enums/market_linkage/enums/transport_payment_deduction_reasons');
const error_log = require('../../../../middelware/error_log');

const fetch_deduction_reasons_for_transport_service = () => {
    return new Promise(async (resolve, reject) => {
        try {
            const deduction_reasons = Object.entries(transport_payment_deduction_reasons);
            const response_data = deduction_reasons.map((reason)=>{
                return {
                    id: reason[1],
                    name: reason[0]
                }
            })
            resolve(response_data);
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

module.exports = fetch_deduction_reasons_for_transport_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/_services/get_payment_detail_service.js
const paymentModel = require("../../../../database/mongoose/market_linkage_db/payment.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");
const procurement_payments_model=require('../../../../database/models_v2/procurement_payments') 
const purchase_crop_orders_model=require('../../../../database/models_v2/procurement_order/purchase_crop_orders') 
const buyer_order_model=require('../../../../database/models_v2/buyer_order') 
const master_merchant_detail_model=require('../../../../database/models_v2/merchant/master_merchant_detail') 
const merchant_verification_docs_model=require('../../../../database/models_v2/merchant/merchant_verification_docs') 

const get_payments_service = async () => {
    try {
        const payments = await paymentModel.aggregate([
            {
                $lookup : {
                    from: "purchaseorders",
                    localField: "poId",
                    foreignField: "_id",
                    as: "purchaseOrder"
                }
            },
            {
                $lookup: {
                    from: "buyerorders",
                    localField: "soId",
                    foreignField: "_id",
                    as: "salesOrder"
                }
            },
            {
                $lookup: {
                    from: "procurementsources",
                    localField: "retailerId",
                    foreignField: "_id",
                    as: "retailer"
                }
            },
            {
                $lookup: {
                    from: "procurementsourcedocuments",
                    localField: "retailerId",
                    foreignField: "userId",
                    as: "retailerDocs"
                }
            }
        ]);
        return {
            status: HTTP_status_codes.ok,
            data: payments.map((payment)=>{
                return {
                    ...payment,
                    purchaseOrder: payment.purchaseOrder[0],
                    salesOrder: payment.salesOrder[0],
                    retailer: payment.retailer[0]
                }
            })
        }
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

module.exports = {
    get_payments_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/_services/generate_bank_payment_service.js
const error_log = require("../../../../middelware/error_log");
const procurement_payments_model = require("../../../../database/models_v2/procurement_payments/procurement_payments");
const purchase_crop_orders_model = require("../../../../database/models_v2/procurement_order/purchase_crop_orders");
const bank_account_details_model = require("../../../../database/models_v2/transactions/account_details");
const banks_model = require("../../../../database/models_v2/transactions/banks");
const procurement_payment_for_enum =
  require("../../../../enums/purchase_order/procurement_payment_enum").payment_for;
const generate_bank_payment_service = (data, selected_bank) => {
  return new Promise(async (resolve, reject) => {
    try {
      let arr = [];
      for (let i = 0; i < data.length; i++) {
        let payment_id = data[i];
        const filter = { is_active: 1 };
        if (payment_id) {
          filter.id = payment_id;
        }
        const payment = await procurement_payments_model.findOne({
          where: filter,
          include: [
            {
              model: purchase_crop_orders_model,
              where: {
                is_active: 1,
              },
              required: false
            },
            {
              model: bank_account_details_model,
              where: {
                is_active: 1,
              },
              required: false,
              include: [
                {
                  model: banks_model,
                  where: {
                    is_active: 1,
                  },
                  required: false
                },
              ],
            },
          ],
        });
        let payment_for = payment?.payment_for;
        let payment_type = payment?.installment_number;
        let po_number = payment?.purchase_crop_order?.farmart_id;
        let account_number = payment?.bank_account_detail?.account_number;
        let ifsc_code = payment?.bank_account_detail?.ifsc_code;
        let account_holder = payment?.bank_account_detail?.account_holder_name;
        let amount = +payment?.revised_payment;
        if (
          !payment_for ||
          !selected_bank ||
          !po_number ||
          !account_number ||
          !ifsc_code ||
          !account_holder
        ) {
          throw new Error("some fields are missing");
        }
        let bank_payment = {};
        if (selected_bank == "hdfc") {
          bank_payment = format_for_hdfc_bank(
            account_number,
            amount,
            account_holder,
            po_number,
            ifsc_code,
            payment_type,
            payment_for
          );
        }
        else if (selected_bank == "icici") {
          bank_payment = format_for_icici_bank(
            account_number,
            amount,
            account_holder,
            po_number,
            ifsc_code,
            payment_type,
            payment_for
          );
        }
        else {
          throw new Error("invalid bank name");
        }
        arr.push(bank_payment);
      }
      resolve(arr);
    } catch (ex) {
      error_log(ex);
      reject({ message: ex.message });
    }
  });
};

const format_for_hdfc_bank = (
  account_number,
  amount,
  account_holder,
  po_number,
  ifsc_code,
  payment_type,
  payment_for
) => {
  try {
    let bank_payment = {}
    let d = new Date();
    let ye = new Intl.DateTimeFormat("en", { year: "numeric" }).format(d);
    let mo = new Intl.DateTimeFormat("en", { month: "2-digit" }).format(
      d
    );
    let da = new Intl.DateTimeFormat("en", { day: "2-digit" }).format(d);
    let trn_date = `${da}/${mo}/${ye}`;
    bank_payment["Transaction Type (N – NFET, R – RTGS,I-HDFC to HDFC)"] =
      "N";
    bank_payment["Beneficiary Code * (Inter - HDFC to HDFC)"] = "";
    bank_payment["Beneficiary Account Number"] = account_number;
    bank_payment["Instrument Amount"] = amount;
    bank_payment[
      "Beneficiary Name (Upto 40 character withput any special character)"
    ] = account_holder;
    bank_payment["Drawee Location"] = "";
    bank_payment["BPrint Location"] = "";
    bank_payment["Bene Address 1"] = "";
    bank_payment["Bene Address 2"] = "";
    bank_payment["Bene Address 3"] = "";
    bank_payment["Bene Address 4"] = "";
    bank_payment["Bene Address 5"] = "";
    bank_payment["Instruction Reference Number"] = "";
    bank_payment[
      "Customer Reference Number(Any alpha numeric character upto 20)"
    ] = po_number;
    bank_payment["Payment details 1"] = "";
    bank_payment["Payment details 2"] = "";
    bank_payment["Payment details 3"] = "";
    bank_payment["Payment details 4"] = "";
    bank_payment["Payment details 5"] = "";
    bank_payment["Payment details 6"] = "";
    bank_payment["Payment details 7"] = "";
    bank_payment["Cheque Number"] = "";
    bank_payment["Chq / Trn Date (DD/MM/YYYY)"] = trn_date;
    bank_payment["MICR Number"] = "";
    bank_payment["IFSC Code"] = ifsc_code;
    bank_payment["Bene Bank Name( Not Madatory)"] = "";
    bank_payment["Bene Bank Branch Name( Not Madatory)"] = "";
    bank_payment["Beneficiary email id"] = "payment@farmart.co";

    if (ifsc_code.substr(0, 4) == "HDFC") {
      bank_payment[
        "Transaction Type (N – NFET, R – RTGS,I-HDFC to HDFC)"
      ] = "I";
    }
    if (payment_type == 1) {
      bank_payment[
        "Customer Reference Number(Any alpha numeric character upto 20)"
      ] += "_P1";
    }
    else if (payment_type == 2) {
      bank_payment[
        "Customer Reference Number(Any alpha numeric character upto 20)"
      ] += "_P2";
    }
    else {
      bank_payment[
        "Customer Reference Number(Any alpha numeric character upto 20)"
      ] += "_AD";
    }
    if (payment_for == procurement_payment_for_enum.PO) {
      bank_payment[
        "Customer Reference Number(Any alpha numeric character upto 20)"
      ] += (payment_type === 1 || payment_type === 2) ? "_R" : "R";
    }
    else if ((payment_for == procurement_payment_for_enum.ORDER_DELIVERY)) {
      bank_payment[
        "Customer Reference Number(Any alpha numeric character upto 20)"
      ] += (payment_type === 1 || payment_type === 2) ? "_T" : "T";
    }
    else if ((payment_for == procurement_payment_for_enum.BROKER)) {
      bank_payment[
        "Customer Reference Number(Any alpha numeric character upto 20)"
      ] += (payment_type === 1 || payment_type === 2) ? "_BR" : "BR";
    }
    else if ((payment_for == procurement_payment_for_enum.BUYER)) {
      bank_payment[
        "Customer Reference Number(Any alpha numeric character upto 20)"
      ] += (payment_type === 1 || payment_type === 2) ? "_BU" : "BU";
    }
    else if ((payment_for == procurement_payment_for_enum.CENTRAL_GOVT)) {
      bank_payment[
        "Customer Reference Number(Any alpha numeric character upto 20)"
      ] += (payment_type === 1 || payment_type === 2) ? "_CG" : "CG";
    }
    else if ((payment_for == procurement_payment_for_enum.MANDI)) {
      bank_payment[
        "Customer Reference Number(Any alpha numeric character upto 20)"
      ] += (payment_type === 1 || payment_type === 2) ? "_MD" : "MD";
    }
    else if ((payment_for == procurement_payment_for_enum.OTHERS)) {
      bank_payment[
        "Customer Reference Number(Any alpha numeric character upto 20)"
      ] += (payment_type === 1 || payment_type === 2) ? "_OT" : "OT";
    }
    else if ((payment_for == procurement_payment_for_enum.STATE_GOVT)) {
      bank_payment[
        "Customer Reference Number(Any alpha numeric character upto 20)"
      ] += (payment_type === 1 || payment_type === 2) ? "_SG" : "SG";
    }
    return bank_payment;
  }
  catch (err) {
    throw new Error(err.message);
  }
}

const format_for_icici_bank = (
  account_number,
  amount,
  account_holder,
  po_number,
  ifsc_code,
  payment_type,
  payment_for
) => {
  try {
    let bank_payment = {}
    let d = new Date();
    let ye = new Intl.DateTimeFormat("en", { year: "numeric" }).format(d);
    let mo = new Intl.DateTimeFormat("en", { month: "short" }).format(d);
    let da = new Intl.DateTimeFormat("en", { day: "2-digit" }).format(d);
    mo = mo.toUpperCase();
    let inst_date = `${da}-${mo}-${ye}`;
    bank_payment["Debit Ac No"] = "777705966338";
    bank_payment["Beneficiary Ac No"] = account_number;
    bank_payment["Beneficiary Name"] = account_holder;
    bank_payment["Amt"] = amount;
    bank_payment["Pay Mod"] = "N";
    bank_payment["Payment_Instruction_Date"] = inst_date;
    bank_payment["IFSC"] = ifsc_code;
    bank_payment["Payable Location name"] = "";
    bank_payment["Print Location"] = "";
    bank_payment["Bene Mobile no"] = "";
    bank_payment["Bene email id"] = "payment@farmart.co";
    bank_payment["Ben add1"] = "";
    bank_payment["Ben add2"] = "";
    bank_payment["Ben add3"] = "";
    bank_payment["Ben add4"] = "";
    bank_payment["Add details 1"] = "";
    bank_payment["Add details 2"] = "";
    bank_payment["Add details 3"] = "";
    bank_payment["Add details 4"] = "";
    bank_payment["Add details 5"] = "";
    bank_payment["Remarks"] = po_number;
    if (payment_type == 1) {
      bank_payment["Remarks"] += "_P1";
    }
    else if (payment_type == 2) {
      bank_payment["Remarks"] += "_P2";
    }
    else {
      bank_payment["Remarks"] += "_AD";
    }
    if (payment_for == procurement_payment_for_enum.PO) {
      bank_payment["Remarks"] += (payment_type === 1 || payment_type === 2) ? "_R" : "R";
    }
    else if ((payment_for == procurement_payment_for_enum.ORDER_DELIVERY)) {
      bank_payment["Remarks"] += (payment_type === 1 || payment_type === 2) ? "_T" : "T";
    }
    else if ((payment_for == procurement_payment_for_enum.BROKER)) {
      bank_payment["Remarks"] += (payment_type === 1 || payment_type === 2) ? "_BR" : "BR";
    }
    else if ((payment_for == procurement_payment_for_enum.BUYER)) {
      bank_payment["Remarks"] += (payment_type === 1 || payment_type === 2) ? "_BU" : "BU";
    }
    else if ((payment_for == procurement_payment_for_enum.CENTRAL_GOVT)) {
      bank_payment["Remarks"] += (payment_type === 1 || payment_type === 2) ? "_CG" : "CG";
    }
    else if ((payment_for == procurement_payment_for_enum.MANDI)) {
      bank_payment["Remarks"] += (payment_type === 1 || payment_type === 2) ? "_MD" : "MD";
    }
    else if ((payment_for == procurement_payment_for_enum.OTHERS)) {
      bank_payment["Remarks"] += (payment_type === 1 || payment_type === 2) ? "_OT" : "OT";
    }
    else if ((payment_for == procurement_payment_for_enum.STATE_GOVT)) {
      bank_payment["Remarks"] += (payment_type === 1 || payment_type === 2) ? "_SG" : "SG";
    }
    return bank_payment;
  }
  catch (err) {
    throw new Error(err.message);
  }
}

module.exports = generate_bank_payment_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/_services/fetch_transport_payment_deduction_service.js
const error_log = require("../../../../middelware/error_log");
const payment_deductions_for_transport_model = require("../../../../database/models_v2/procurement_payments/payment_deduction_for_transport");

const fetch_transport_payment_deduction_service = async (po_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            const deduction_details = await payment_deductions_for_transport_model.findOne({
                where: {
                    is_active: true,
                    purchase_crop_order_id: po_id
                }
            })
            if(!deduction_details){
                return resolve({})
            }
            const transport_deduction_response = {
                halting_charges: deduction_details.halting_charges,
                unloading_charges: deduction_details.unloading_charges,
                route_change_charges: deduction_details.route_change_charges,
                commodity_cost: deduction_details.commodity_cost,
                revised_bill_t_url: deduction_details.revised_bill_t_url,
                revised_transport_cost: deduction_details.revised_transport_cost,
                final_payable_to_tpt_cost: deduction_details.final_payable_amount,
                deduction_amount: deduction_details.deduction_amount,
                reason_for_deduction: deduction_details.transport_payment_deduction_reason_id,
            }
            resolve(transport_deduction_response);
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}
module.exports = fetch_transport_payment_deduction_service


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/_services/fetch_po_detail_for_part1_payment_service.js
const error_log = require('../../../../middelware/error_log');
const procurment_crop_sample_model = require('../../../../database/models_v2/procurement_sample/procurment_crop_sample');
const procurement_lots_model = require('../../../../database/models_v2/procurement_sample/procurement_lots');
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const procurement_bill_components_model = require("../../../../database/models_v2/procurement_payments/procurement_bill_components");
const procurement_bill_components_enum_model = require("../../../../database/models_v2/procurement_payments/procurement_order_bill_component_enums");
const order_delivery_detail = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const revision_before_payments = require('../../../../database/models_v2/procurement_payments/revision_before_payment');
const procurement_payments = require('../../../../database/models_v2/procurement_payments/procurement_payments');
const bank_account_details = require('../../../../database/models_v2/transactions/account_details');
const { payment_for } = require('../../../../enums/purchase_order/procurement_payment_enum');
const round_off_to_two_decimal = require('../../utilities/round_off/round_off_to_two_decimal');

const fetch_po_detail_for_part1_payment = (po_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            let _po_detail_resp = {
                weight_with_bag: 0,
                bag_deduction: 0,
                weight_without_bag: 0,
                commodity_price: 0,
                retailer_commission: 0,
                labor_and_gunny_bag_cost: 0,
                mandi_tax: 0,
                payable_amount_to_retailer: 0,
                payable_amount_to_transport: 0,
                part1_perc_to_retailer: 0,
                part1_to_retailer: 0,
                part1_to_transport: 0,
            };
            let po_detail = await purchase_crop_orders_model.findOne({
                where: {
                    id: po_id,
                    is_active: true
                },
                include: [
                    {
                        model: procurement_lots_model,
                        required: true,
                        where: { is_active: true },
                        include: [
                            {
                                model: procurment_crop_sample_model,
                                required: true,
                                where: { is_active: true }
                            },
                            {
                                model: procurement_bill_components_model,
                                required: false,
                                where: { is_active: 1 },
                                include: {
                                    model: procurement_bill_components_enum_model,
                                    required: true,
                                    where: { is_active: 1 }
                                }
                            }
                        ]
                    },
                    {
                        model: procurement_payments,
                        required: false,
                        where: { is_active: 1 },
                        include: { model: bank_account_details, required: true, where: { is_active: 1 } }
                    },
                    {
                        model: order_delivery_detail,
                        required: false,
                        where: { is_active: true },
                        include: [
                            {
                                model: revision_before_payments,
                                required: false,
                                where: { is_active: 1 }
                            },
                        ]
                    }
                ]
            });

            if (!po_detail) {
                throw new Error("invalid po id")
            }
            const mandiTaxObj = po_detail.procurement_lot.procurement_order_bill_components.find(bc => {
                const bcEnum = bc.procurement_order_bill_component_enum;
                return (bcEnum && (bcEnum.name === "mandi_tax"))
            });
            const commissionObj = po_detail.procurement_lot.procurement_order_bill_components.find(bc => {
                const bcEnum = bc.procurement_order_bill_component_enum;
                return (bcEnum && (bcEnum.name === "retailer_commision"))
            });
            const labourBagObj = po_detail.procurement_lot.procurement_order_bill_components.find(bc => {
                const bcEnum = bc.procurement_order_bill_component_enum;
                return (bcEnum && (bcEnum.name === "labour_and_bag_cost"))
            });

            const revisionPayments =po_detail.order_delivery_detail?.revision_before_payments;

            const partOneRetailer = revisionPayments.find(pp => {
                return (pp.payment_for === payment_for.PO);
            });
            const partOneTransport = revisionPayments.find(pp => {
                return (pp.payment_for === payment_for.ORDER_DELIVERY);
            });
            
            _po_detail_resp.bag_deduction = po_detail.bag_deduction_value ?? round_off_to_two_decimal(po_detail.order_delivery_detail?.gross_weight * (po_detail.procurement_lot.bag_deduction / 100));
            _po_detail_resp.commodity_price = round_off_to_two_decimal((po_detail.price) * (po_detail.order_delivery_detail?.net_weight / 100));
            _po_detail_resp.labor_and_gunny_bag_cost = round_off_to_two_decimal((labourBagObj?.amount) * (po_detail.order_delivery_detail?.net_weight / 100));
            _po_detail_resp.mandi_tax = po_detail.mandi_tax_value ?? round_off_to_two_decimal((mandiTaxObj?.amount) * (po_detail.order_delivery_detail?.net_weight / 100));
            _po_detail_resp.part1_to_retailer = partOneRetailer?.amount || 0;
            _po_detail_resp.part1_perc_to_retailer = partOneRetailer?.percentage || 0;
            _po_detail_resp.part1_to_transport = partOneTransport?.amount || po_detail.order_delivery_detail?.advance_transport_cost;
            _po_detail_resp.payable_amount_to_transport = po_detail.order_delivery_detail?.total_transport_cost;
            _po_detail_resp.retailer_commission = round_off_to_two_decimal((commissionObj?.amount) * (po_detail.order_delivery_detail?.net_weight / 100));
            _po_detail_resp.weight_with_bag = po_detail.order_delivery_detail?.gross_weight;
            _po_detail_resp.weight_without_bag = po_detail.order_delivery_detail?.net_weight;
            _po_detail_resp.payable_amount_to_retailer = round_off_to_two_decimal((_po_detail_resp.commodity_price || 0)
                + (_po_detail_resp.labor_and_gunny_bag_cost || 0)
                + (_po_detail_resp.mandi_tax || 0)
                + (_po_detail_resp.retailer_commission || 0))

            resolve(_po_detail_resp);
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

module.exports = fetch_po_detail_for_part1_payment;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/_services/update_retailer_total_transaction.js
const { Op } = require("sequelize")
const retailer_yearly_transaction = require("../../../../database/models_v2/merchant/retailer_yearly_transaction")
const purchase_crop_orders = require("../../../../database/models_v2/procurement_order/purchase_crop_orders")
const procurement_payments = require("../../../../database/models_v2/procurement_payments/procurement_payments")
const procurment_crop_sample = require("../../../../database/models_v2/procurement_sample/procurment_crop_sample")
const tds_yearly_data = require("../../../../database/models_v2/tds_yearly_data")
const { dispatchBy } = require("../../../../enums/market_linkage/enums/procurement_crop_sample")
const { payment_for } = require("../../../../enums/purchase_order/procurement_payment_enum")
const error_log = require("../../../../middelware/error_log")

function getFinancialYear(date){
    let fiscalYearStart = new Date();
    let fiscalYearEnd = new Date();
    if ((date.getMonth() + 1) <= 3) {
      fiscalYearStart = new Date(`${(date.getFullYear() - 1)}-04-01 00:00:00`)
      fiscalYearEnd = new Date(`${date.getFullYear()}-03-31 23:59:59`)
    } else {
      fiscalYearStart = new Date(`${date.getFullYear()}-04-01 00:00:00`)
      fiscalYearEnd = new Date(`${(date.getFullYear() + 1)}-03-31 23:59:59`)
    }
    return {fiscalYearStart,fiscalYearEnd}
}

const get_retailer_yearly_trx = async ({sample_id, createdAt, master_merchant_id}) => {

    try {

        const sample_data = await procurment_crop_sample.findOne({
            where: {
                id: sample_id,
                is_active: 1
            }
        })

        if(!sample_data)
            return {status: false, message: 'Invalid sample_id'}

        const is_for = sample_data.dataValues.f_o_r || 0

        const tds_data = await tds_yearly_data.findOne({
            where: {
                financial_year_start: {
                    [Op.lte]: createdAt
                },
                financial_year_end: {
                    [Op.gte]: createdAt
                },
                is_active: 1
            }
        })

        const retailer_trx_details = await retailer_yearly_transaction.findOne({
            where: {
                master_merchant_id: master_merchant_id,
                financial_year_start: {
                    [Op.lte]: createdAt
                },
                financial_year_end: {
                    [Op.gte]: createdAt
                },
                is_active: 1
            }
        })

        let total_retailer_transaction = 0

        if(retailer_trx_details)
            total_retailer_transaction = retailer_trx_details.dataValues.total_amount

        return {status: true, data: {total_retailer_transaction,is_for,threshold_amount: tds_data.dataValues.threshold_amount}, message: ''}
        
    } catch (error) {
        error_log(error)
        return {status: false, data: {}, message: error.message}
    }

}

const update_retailer_total_transaction_v2 = async ({po_id,prev_total_payment, new_total_payment, prev_total_transport, new_total_transport}) => {

    // try {

    //     const po_data = await purchase_crop_orders.findOne({
    //         where: {
    //             id: po_id,
    //             is_active: 1
    //         },
    //         include: [
    //             {
    //                 model: procurment_crop_sample,
    //                 where: {
    //                     is_active: 1
    //                 }
    //             }
    //         ]
    //     })

    //     if(!po_data)
    //         return {status: false, message: 'Invalid po_id'}

    //     let retail_total_new_cost = new_total_payment
    //     let retail_total_old_cost = prev_total_payment

    //     const is_for = po_data.dataValues.procurment_crop_sample.dataValues.f_o_r

    //     if(is_for){
    //         retail_total_new_cost += new_total_transport
    //         retail_total_old_cost += prev_total_transport
    //     }

    //     const payment = await procurement_payments.findAll({
    //         where: {
    //             is_active: 1,
    //             purchase_crop_order_id: po_id
    //         }
    //     })

    //     let is_tds_applicable = false

    //     const tds_data = await tds_yearly_data.findOne({
    //         where: {
    //             financial_year_start: {
    //                 [Op.lte]: po_data.dataValues.createdAt
    //             },
    //             financial_year_end: {
    //                 [Op.gte]: po_data.dataValues.createdAt
    //             },
    //             is_active: 1
    //         }
    //     })

    //     const retailer_trx_details = await retailer_yearly_transaction.findOne({
    //         where: {
    //             master_merchant_id: po_data.dataValues.master_merchant_id,
    //             financial_year_start: {
    //                 [Op.lte]: po_data.dataValues.createdAt
    //             },
    //             financial_year_end: {
    //                 [Op.gte]: po_data.dataValues.createdAt
    //             },
    //             is_active: 1
    //         }
    //     })

    //     let is_new_payment = true

    //     if(payment && payment.length > 0)
    //         is_new_payment = false

    //     if(retailer_trx_details){

    //         let total_retailer_transaction = retailer_trx_details.dataValues.total_amount

    //         retail_total_new_cost = is_new_payment ? total_retailer_transaction + retail_total_new_cost : total_retailer_transaction + (retail_total_new_cost - retail_total_old_cost)


    //         let update_obj = {
    //             total_amount: retail_total_new_cost
    //         }
            
    //         if(retail_total_new_cost > tds_data.dataValues.threshold_amount){
    //             is_tds_applicable = true
    //             update_obj.is_tds_applicable = true
    //         }
    //         else{
    //             is_tds_applicable = false
    //             update_obj.is_tds_applicable = false
    //         }

    //         await retailer_trx_details.update(update_obj)

    //     } else {

    //         const fiscalYear = getFinancialYear(po_data.dataValues.createdAt)

    //         if(retail_total_new_cost > tds_data.dataValues.threshold_amount)
    //             is_tds_applicable = true

    //         await retailer_yearly_transaction.create({
    //             total_amount: retail_total_new_cost,
    //             is_tds_applicable: is_tds_applicable,
    //             tds_percent: tds_data.dataValues.tds_percent,
    //             is_active: 1,
    //             master_merchant_id: po_data.dataValues.master_merchant_id,
    //             financial_year_start: fiscalYear.fiscalYearStart,
    //             financial_year_end: fiscalYear.fiscalYearEnd,
    //         })

    //     }

    //     return {status: true, data:{is_tds_applicable}, message: 'Success'}
        
    // } catch (error) {
    //     error_log(error)
    //     return {status: false, message: error.message}
    // }

}

const update_retailer_total_transaction = async (payment_id) => {

    try {

        const payment_data = await procurement_payments.findOne({
            where: {
                id: payment_id,
                is_active: 1
            },
            include: [
                {
                    model: purchase_crop_orders,
                    where: {
                        is_active: 1
                    }
                }
            ]
        })

        if(!payment_data)
            return {status: false, message: 'Invalid payment_id'}

        const payment_details = payment_data.dataValues

        const po_details = payment_details.purchase_crop_order.dataValues

        const retailer_id = po_details.master_merchant_id

        let total_retailer_transaction = 0

        if(payment_details.payment_for === payment_for.ORDER_DELIVERY){

            const sample_id = po_details.purchase_sample_id

            const sample_data = await procurment_crop_sample.findOne({
                where: {
                    id: sample_id,
                    is_active: 1
                }
            })

            if(sample_data){

                const is_FOR = sample_data.dataValues.f_o_r
                const dispatch_by = sample_data.dataValues.dispatch_by

                if(is_FOR)
                    total_retailer_transaction += parseFloat(payment_details.revised_payment)

            }

        } else if(payment_details.payment_for === payment_for.PO)
            total_retailer_transaction += parseFloat(payment_details.revised_payment)

        const tds_data = await tds_yearly_data.findOne({
            where: {
                financial_year_start: {
                    [Op.lte]: po_details.createdAt
                },
                financial_year_end: {
                    [Op.gte]: po_details.createdAt
                },
                is_active: 1
            }
        })

        const retailer_trx_details = await retailer_yearly_transaction.findOne({
            where: {
                master_merchant_id: retailer_id,
                financial_year_start: {
                    [Op.lte]: po_details.createdAt
                },
                financial_year_end: {
                    [Op.gte]: po_details.createdAt
                },
                is_active: 1
            }
        })
        let is_tds_applicable = false

        if(retailer_trx_details){

            total_retailer_transaction += retailer_trx_details.dataValues.total_amount

            let update_obj = {
                total_amount: total_retailer_transaction
            }
            
            if(total_retailer_transaction > tds_data.dataValues.threshold_amount){
                is_tds_applicable = true
                update_obj.is_tds_applicable = is_tds_applicable
            }

            await retailer_trx_details.update(update_obj)

        } else {

            if(total_retailer_transaction > tds_data.dataValues.threshold_amount)
                is_tds_applicable = true

            const fiscalYear = getFinancialYear(po_details.createdAt)

            await retailer_yearly_transaction.create({
                total_amount: total_retailer_transaction,
                is_tds_applicable: is_tds_applicable,
                tds_percent: tds_data.dataValues.tds_percent,
                is_active: 1,
                master_merchant_id: retailer_id,
                financial_year_start: fiscalYear.fiscalYearStart,
                financial_year_end: fiscalYear.fiscalYearEnd,
            })

        }

        return {status: true, message: 'Success'}
        
    } catch (error) {
        error_log(error)
        return {status: false, message: error.message}
    }

}

module.exports = {
    update_retailer_total_transaction,
    update_retailer_total_transaction_v2,
    get_retailer_yearly_trx
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/_services/getPendingRetailerPaymentbyIdService.js
const procurementPaymentsModel = require("../../../../database/models_v2/procurement_payments/procurement_payments");
const procurementCropSampleModel = require("../../../../database/models_v2/procurement_sample/procurment_crop_sample");
const orderDeliveryDetailModel = require("../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail");
const purchaseCropOrdersModel = require("../../../../database/models_v2/procurement_order/purchase_crop_orders");
const masterMerchantDetailModel = require("../../../../database/models_v2/merchant/master_merchant_detail");
const bankAccountDetailsModel = require("../../../../database/models_v2/transactions/account_details");
const bankDetailsModel = require("../../../../database/models_v2/transactions/banks");
// const orderDeliveryDetail = require("../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail");
const procurementBillComponentsModel = require("../../../../database/models_v2/procurement_payments/procurement_bill_components");
const procurementBillComponentsEnumsModel = require("../../../../database/models_v2/procurement_payments/procurement_order_bill_component_enums");
const masterDistrictModel = require("../../../../database/models_v2/location/master_district");
const masterStateModel = require("../../../../database/models_v2/location/master_state");
const masterTalukModel = require("../../../../database/models_v2/location/master_taluka");
const merchant_verification_docs_model = require("../../../../database/models_v2/merchant/merchant_verification_docs");
const procurement_lots_model = require("../../../../database/models_v2/procurement_sample/procurement_lots");
const payment_for_enum=require("../../../../enums/purchase_order/procurement_payment_enum").payment_for;
const errorLog = require("../../../../middelware/error_log");
const locations = require("../../../../database/models_v2/global/locations");
const procurement_dispatch_document = require("../../../../database/models_v2/procurement_order/procurement_dispatch_document");
const order_delivery_document_type_enum_model = require("../../../../database/models_v2/procurement_order_deliveries/order_delivery_document_type_enums");
const order_delivery_documents_model = require("../../../../database/models_v2/procurement_order_deliveries/order_delivery_documents");
const { getPaymentInfo } = require("../../purchase_order/services/get_po_details_service");
const procurementSourceEnum=require('../../../../enums/market_linkage/enums/procurementSources').documentNameToTypeApp
const po_unloading_docs_model = require("../../../../database/models_v2/po_unloading/po_unloading_docs");
const po_unloading_doc_types_model = require("../../../../database/models_v2/po_unloading/po_unloading_doc_types");
const revision_before_payment_model = require("../../../../database/models_v2/procurement_payments/revision_before_payment");
const { doc_type } = require("../../../../enums/purchase_order/purchase_order_document_enum");
const round_off_to_two_decimal = require("../../utilities/round_off/round_off_to_two_decimal");

const getPendingRetailerPaymentbyIdService = (paymentId) => {
  return new Promise(async (resolve, reject) => {
    try {
      const filter = {
        //  status: paymentEnum.PENDING, 
         is_active: 1 ,
         is_additional_payment: false
      };
      if (paymentId) {
        filter.id = paymentId;
      }
      const payment = await procurementPaymentsModel.findOne({
        where: filter,
        include: [
          {
            model: purchaseCropOrdersModel,
            where:{
              is_active:true
            },
            include: [
              {
                model: masterMerchantDetailModel,
                where:{
                  is_active:true
                },
                include: [
                  { model: masterStateModel, attributes: ["name"], where:{
                    is_active:true
                  },required: false},
                  { model: masterDistrictModel, attributes: ["name"] ,where:{
                    is_active:true
                  },required: false},
                  { model: masterTalukModel, attributes: ["name"] ,where:{
                    is_active:true
                  }, required: false},
                  { model: locations, attributes: ["latitude","longitude"] ,where:{
                    is_active:true
                  },required: false},
                  { model: merchant_verification_docs_model ,where:{
                    is_active:true
                  },required: false},
                ],
                required: false
              },
              { model: revision_before_payment_model, where:{ is_active:true, payment_for:payment_for_enum.PO },required: false },
              {
                model: procurement_lots_model,
                where:{
                  is_active:1
                },
                include:[
                  {
                    model:procurementBillComponentsModel,
                    where:{
                      is_active:1
                    },
                    include:[{
                      model:procurementBillComponentsEnumsModel,
                      where:{
                        is_active:1
                      },
                      required: false
                    }],
                    required: false
                  }
                ],
                required: false
              },
              {
                model: procurementCropSampleModel,
                where:{
                  is_active:true
                },
                attributes: ["empty_bag_weight", "id","bag_deduction"],
                required: false
              },
              {
                model: orderDeliveryDetailModel,
                where:{
                  is_active:true
                },
                attributes: ["gross_weight"],
                required: false
              },
              {
                model: po_unloading_docs_model,
                where:{
                  is_active:true
                },
                include:[
                  {
                    model:po_unloading_doc_types_model,
                    where:{
                      is_active:true
                    },
                    required: false
                  }
                ],
                required: false
              },
            ],
            required: false
          },
          { model: orderDeliveryDetailModel ,
            where:{
              is_active:true
            },
            include:[
            {
              model:order_delivery_documents_model,
              where:{
                is_active:true
              },
              include:[
                {
                  model:procurement_dispatch_document,
                  where:{
                    is_active:true
                  },
                  required: false
                },
                {
                  model:order_delivery_document_type_enum_model,
                  where:{
                    is_active:true
                  },
                  required: false
                }
              ],
              required: false
            }],
            required: false
          },
          {
            model: bankAccountDetailsModel,
            where:{
              is_active:true
            },
            include: [{ model: bankDetailsModel, attributes: ["name"],where:{
              is_active:true
            }, }],
            required: false
          },
        ],
        required: false
      });
      let response_obj={};
      response_obj.name=payment?.purchase_crop_order?.master_merchant_detail?.name || null
      response_obj.businessName=payment?.purchase_crop_order?.master_merchant_detail?.business_name || null
      response_obj.email=payment?.purchase_crop_order?.master_merchant_detail?.email || null
      response_obj.shopAddress=payment?.purchase_crop_order?.master_merchant_detail?.full_address || null
      response_obj.mobileNumber=payment?.purchase_crop_order?.master_merchant_detail?.mobile_number || null
      response_obj.talukName=payment?.purchase_crop_order?.master_merchant_detail?.master_taluka?.name || null
      response_obj.stateName=payment?.purchase_crop_order?.master_merchant_detail?.master_state?.name || null
      response_obj.districtName=payment?.purchase_crop_order?.master_merchant_detail?.master_district?.name || null
      response_obj.pincode=payment?.purchase_crop_order?.master_merchant_detail?.pincode || null
      response_obj.partPerc=payment?.purchase_crop_order?.revision_before_payments[0]?.percentage|| null
      response_obj.geoLocation={
        lat:payment?.purchase_crop_order?.master_merchant_detail?.location?.latitude,
        long:payment?.purchase_crop_order?.master_merchant_detail?.location?.longitude
      }

      response_obj.accountNumber=payment?.bank_account_detail?.account_number || null
      response_obj.ifscCode=payment?.bank_account_detail?.ifsc_code || null
      response_obj.bankName=payment?.bank_account_detail?.bank.name || null
      response_obj.acountHolderName=payment?.bank_account_detail?.account_holder_name || null

      response_obj.grossWeight=payment?.order_delivery_detail?.gross_weight || 0
      response_obj.bagDeduction = payment?.purchase_crop_order?.bag_deduction_value ?? (round_off_to_two_decimal(response_obj.grossWeight * (payment?.purchase_crop_order?.procurement_lot?.bag_deduction || 0) / 100)).toString();

      const transaction=await getPaymentInfo(payment?.purchase_crop_order?.price,payment?.purchase_crop_order?.procurement_lot?.procurement_order_bill_components,payment?.order_delivery_detail,payment?.purchase_crop_order?.mandi_tax_value);
      response_obj.transactionDetail=transaction 


      let temp_doc_ar=payment?.order_delivery_detail?.order_delivery_documents
      let doc_url=[];
      for(let i=0;i<temp_doc_ar.length;i++)
      {
        let single_doc=temp_doc_ar[i]
        let doc_obj={}
        if(single_doc?.order_delivery_document_type_id || single_doc?.name === doc_type.primary9rImage || single_doc?.name === doc_type.loadedTruckWeightSlip )
        {
          doc_obj.docId=single_doc?.id
          doc_obj.docUrl=single_doc?.doc_url
          if(single_doc?.order_delivery_document_type_id )
          doc_obj.docName=single_doc?.procurement_dispatch_document?.name
          else
            doc_obj.docName=single_doc?.name

          doc_url.push(doc_obj);
        }
      }
      
      let doc_arr=payment?.purchase_crop_order?.master_merchant_detail?.merchant_verification_docs
      for(let i=0;i<doc_arr.length;i++)
      {
        let retailer_check_doc={}
        if(doc_arr[i]?.document_type==procurementSourceEnum.bankAccount)
        {
          retailer_check_doc.docId=doc_arr[i]?.id || null 
          retailer_check_doc.docName="retailer cheque"
          retailer_check_doc.docUrl=doc_arr[i]?.front_image || null

          doc_url.push(retailer_check_doc)
        }
      }
      
      
      if(payment.installment_number==2)
      {
        let unloading=payment?.purchase_crop_order?.po_unloading_docs
        for(let i=0;i<unloading.length;i++)
        {
          let unlaoding_element=unloading[i];
          if(unlaoding_element?.po_unloading_doc_type?.name=="UNLOADING RECEIPT")
          {
            doc_url.push({
              docId:unlaoding_element?.id || null ,
              docName:unlaoding_element?.po_unloading_doc_type?.name || null ,
              docUrl:unlaoding_element?.doc_url || null,
            })
          }
        }
      }
      response_obj.docInfo=doc_url
      return resolve(response_obj);
    } catch (err) {
      errorLog(err);
      return reject({ message: err.message });
    }
  });
};

module.exports = { getPendingRetailerPaymentbyIdService };



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/_services/update_payment_gst_details.js
const purchase_crop_orders = require("../../../../database/models_v2/procurement_order/purchase_crop_orders")
const procurement_payments = require("../../../../database/models_v2/procurement_payments/procurement_payments")
const crop_variety_gst_detail = require("../../../../database/models_v2/crop/crop_variety_gst_detail")
const { payment_for, installment_number } = require("../../../../enums/purchase_order/procurement_payment_enum")
const error_log = require("../../../../middelware/error_log")
const round_off_to_two_decimal = require("../../utilities/round_off/round_off_to_two_decimal")
const procurment_crop_sample = require("../../../../database/models_v2/procurement_sample/procurment_crop_sample")
const { dispatchBy } = require("../../../../enums/market_linkage/enums/procurement_crop_sample")

const check_transporter_part_two_payment = (payments=[]) => {
    let is_done = false

    for(let i=0; i<payments.length; i++){
        const payment_data = payments[i].dataValues

        if(payment_data.payment_for === payment_for.ORDER_DELIVERY && payment_data.installment_number === installment_number.TWO && Boolean(payment_data.utr_number))
            is_done = true

    }

    return is_done

}

const update_payment_gst_details = async (po_id) => {
    
    try {
        if(!po_id)
            return {status: false, message: 'po_id required'}

        const po = await purchase_crop_orders.findOne({
            where: {
                id: po_id,
                is_active: 1
            },
            include: [
                {
                    model: procurment_crop_sample
                }
            ]
        })

        if(!po)
            return {status: false, message: 'Wrong po_id'}

        const all_retailer_payments = await procurement_payments.findAll({
            where: {
                is_active: 1,
                purchase_crop_order_id: po_id,
                is_additional_payment: 0
            }
        })

        if(all_retailer_payments.length === 0)
            return {status: false, message: 'no payment is done'}

        // const crop_variety_gst = await crop_variety_gst_detail.findOne({
        //     where: {
        //         crop_variety_id: po.dataValues.crop_variety_id,
        //         is_active: 1
        //     },
        //     attributes: ["is_gst_applicable"]
        // })

        // let is_gst_applicable = false

        // if(crop_variety_gst)
        //     is_gst_applicable = crop_variety_gst.dataValues.is_gst_applicable

        // if(!is_gst_applicable)
        //     return {status: false, message: 'Gst not applicable'}
        
        let total_payment_done = 0

        let part_three_payment_data = {}

        const sample_data = po.dataValues.procurment_crop_sample
        const is_FOR = sample_data.dataValues.f_o_r

        if(is_FOR){
            const is_transporter_payment_done = check_transporter_part_two_payment(all_retailer_payments)
            if(!is_transporter_payment_done)
                return {status: false, message: 'Part 2 transporter payment not done'}
        }

        const dispatch_by = sample_data.dataValues.dispatch_by

        let is_part_two_done = false

        for(let i=0; i<all_retailer_payments.length; i++){
            const payment_data = all_retailer_payments[i].dataValues

            if(payment_data.payment_for === payment_for.PO && payment_data.installment_number === installment_number.THREE && Boolean(payment_data.utr_number))
                return {status: false, message: 'Part 3 payment already done'}
            
            if(payment_data.payment_for === payment_for.PO && payment_data.installment_number === installment_number.TWO && !Boolean(payment_data.utr_number))
                return {status: false, message: 'Part 2 payment not done'}

            if(payment_data.installment_number === installment_number.ONE || payment_data.installment_number === installment_number.TWO){

                part_three_payment_data.order_delivery_id = payment_data.payment_for === payment_for.PO ? payment_data.order_delivery_id : part_three_payment_data.order_delivery_id
                part_three_payment_data.account_detail_id = payment_data.payment_for === payment_for.PO ? payment_data.account_detail_id : part_three_payment_data.account_detail_id
                part_three_payment_data.buyer_order_id = payment_data.payment_for === payment_for.PO ? payment_data.buyer_order_id : part_three_payment_data.buyer_order_id
                part_three_payment_data.paid_by = payment_data.payment_for === payment_for.PO ? payment_data.paid_by : part_three_payment_data.paid_by

                if(is_FOR)
                    total_payment_done += parseFloat(payment_data.amount)
                else
                    total_payment_done += payment_data.payment_for === payment_for.PO ? parseFloat(payment_data.amount) : 0
            }

            if(payment_data.installment_number === installment_number.TWO && payment_data.payment_for === payment_for.PO)
                is_part_two_done = true
        }

        if(!is_part_two_done)
            return {status: false, message: 'Part 2 payment not initiated'}

        const igst_percent = po.dataValues.igst_percentage
        const sgst_percent = po.dataValues.sgst_percentage
        const cgst_percent = po.dataValues.cgst_percentage

        if(igst_percent + sgst_percent + cgst_percent === 0)
            return {status: false, message: 'gst not applicable on po'}

        const igst_amount = igst_percent * total_payment_done * 0.01
        const sgst_amount = sgst_percent * total_payment_done * 0.01
        const cgst_amount = cgst_percent * total_payment_done * 0.01

        part_three_payment_data.is_active = 1
        part_three_payment_data.purchase_crop_order_id = po_id
        part_three_payment_data.payment_for = payment_for.PO
        part_three_payment_data.is_additional_payment = 0
        part_three_payment_data.installment_number = installment_number.THREE
        part_three_payment_data.amount = round_off_to_two_decimal(igst_amount + cgst_amount + sgst_amount)
        part_three_payment_data.revised_payment = igst_amount + cgst_amount + sgst_amount
        part_three_payment_data.gst_amount = igst_amount + cgst_amount + sgst_amount
        part_three_payment_data.gst_percent = igst_percent + sgst_percent + cgst_percent
        part_three_payment_data.igst = igst_amount
        part_three_payment_data.cgst = cgst_amount
        part_three_payment_data.sgst = sgst_amount
        part_three_payment_data.is_gst_applicable = igst_percent + sgst_percent + cgst_percent !== 0 ? true : false

        const part_three_payment = await procurement_payments.findOne({
            where: {
                is_active: 1,
                purchase_crop_order_id: po_id,
                payment_for: payment_for.PO,
                is_additional_payment: 0,
                installment_number: installment_number.THREE        
            }
        })

        if(part_three_payment)
            await part_three_payment.update(part_three_payment_data)
        else
            await procurement_payments.create(part_three_payment_data)

        return {status: true, message: 'Success'}
        
    } catch (error) {
        error_log(error)
        return {status: false, message: error.message}
    }

}

module.exports = {
    update_payment_gst_details
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/_services/submit_bank_details_service.js
const error_log = require("../../../../middelware/error_log");
const procurement_payment_model = require("../../../../database/models_v2/procurement_payments/procurement_payments");
const account_detail_model = require("../../../../database/models_v2/transactions/account_details");
const banks_model = require("../../../../database/models_v2/transactions/banks");
const order_delivery_detail_model = require("../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail");
const purchase_crop_order_model = require("../../../../database/models_v2/procurement_order/purchase_crop_orders");
const payment_for_enum = require("../../../../enums/purchase_order/procurement_payment_enum").payment_for;
module.exports = async (payment_id, account_number, account_holder_name, ifsc_code, bank_name) => {
    try {
        const procurement_payment = await procurement_payment_model.findOne({
            where: {
                id: payment_id,
                is_additional_payment: false,
                is_active: 1
            }
        });
        if (procurement_payment) {
            if (procurement_payment.payment_for==payment_for_enum.PO) {
                const purchase_crop_order = await purchase_crop_order_model.findOne({
                    where: {
                        id: procurement_payment.purchase_crop_order_id,
                        is_active: 1
                    }
                });
                const master_merchant_detail_id = purchase_crop_order.master_merchant_id;
                const account_details = await get_bank_detail_id(bank_name, account_number, ifsc_code, account_holder_name, master_merchant_detail_id);
                procurement_payment.account_detail_id = account_details.id;
            }
            else if (procurement_payment.payment_for==payment_for_enum.ORDER_DELIVERY) {
                const order_delivery_detail = await order_delivery_detail_model.findOne({
                    where: {
                        id: procurement_payment.order_delivery_id,
                        is_active: 1
                    }
                });
                const account_details = await get_bank_detail_id(bank_name, account_number, ifsc_code, account_holder_name);
                order_delivery_detail.account_detail_id = account_details.id;
                procurement_payment.account_detail_id = account_details.id;
                await order_delivery_detail.save();
            }
            else{
                throw new Error("not ready for payment");
            }
            await procurement_payment.save();
           return({ifscCode:ifsc_code,accountHolderName:account_holder_name,accountNumber:account_number,id:payment_id });
        }
        else
            throw new Error("procurement_payment record not found");
    }
    catch (err) {
        error_log(err);
        throw new Error(err.message);
    }
}

const get_bank_detail_id = async (bank_name, account_number, ifsc_code, account_holder_name, master_merchant_id = null) => {
    try {
        const [bank_detail, bank_detail_created] = await banks_model.findOrCreate({
            where: {
                name: bank_name,
                is_active: 1
            }
        });
        const account_detail_query = {
            account_number,
            ifsc_code,
            account_holder_name,
            master_merchant_id,
            bank_id: bank_detail.id,
            is_active: 1
        };
        const [account_detail, account_detail_created] = await account_detail_model.findOrCreate({
            where: account_detail_query
        });
        return account_detail;
    }
    catch (err) {
        error_log(err);
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/_services/post_utr_number_service.js
const master_merchant_detail_model = require('../../../../database/models_v2/merchant/master_merchant_detail');
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const procurement_payments = require('../../../../database/models_v2/procurement_payments/procurement_payments');
const fetch_ml_notification_string = require('../../../../entities_v2/notification/services/fetch_ml_notification_string');
const language = require('../../../../enums/global/language');
const ml_notification_event_enum = require('../../../../enums/notification/ml_notification_event_enum');
const { payment_for } = require('../../../../enums/purchase_order/procurement_payment_enum');
const error_log = require('../../../../middelware/error_log');
const { send_notification_for_ml } = require('../../../../notifier/firebase_admin_ml');
const { fetch_po_details_by_id_service } = require('../../../v2/campaign/services/fetch_po_details_by_id_service');
const ENV = require("../../../../config/global_config").env;
const global_config = require("../../../../config/global_config");
const env_enum = require("../../../../enums/env/env_enum");
const put_request = require("../../../../utilities/external_API_calls/put_request");
const { update_retailer_total_transaction } = require('./update_retailer_total_transaction');
const { update_payment_gst_details } = require('./update_payment_gst_details');
const RETAILER_STAGE_URL = require("../../../../constants/global").RETAILER_STAGE_URL;
const RETAILER_PROD_URL = require("../../../../constants/global").RETAILER_PROD_URL;
const API_HEADERS = {
    'Content-Type': 'application/json',
    Authorization: `Bearer ${ENV == global_config.market_linkage_system_token}`,
};

const post_utr_number_service = (id, utr_number, status, user_profile_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            const payment_data = await procurement_payments.findOne({
                where: {
                    is_active: 1,
                    id: id
                },
                include: [
                    {
                        model: purchase_crop_orders_model,
                        where: {
                            is_active: true
                        },
                        include: [
                            {
                                model: master_merchant_detail_model,
                                where: {
                                    is_active: true
                                },
                                required: false
                            },
                            {
                                model: order_delivery_detail_model,
                                where: {
                                    is_active: true
                                },
                                required: false
                            }
                        ],
                        required: false
                    }
                ]
            })
            if (!payment_data) {
                throw new Error("payment not found to update utr number")
            }
            payment_data.utr_number = utr_number;
            payment_data.status = status;
            payment_data.paid_at = new Date();
            payment_data.paid_by = user_profile_id;
            await payment_data.save();

            //send po update to retailer app
            if (!payment_data.is_additional_payment) {
                fetch_po_details_by_id_service(payment_data.purchase_crop_order_id)
                    .then((API_BODY) => {
                        const API_URL = (ENV == env_enum.production ? RETAILER_PROD_URL : RETAILER_STAGE_URL) + 'v1/order_tracking/purchase_order';
                        put_request(API_URL, API_BODY, API_HEADERS)
                            .catch(err => {
                                error_log(err);
                            });
                    })
                    .catch(err => {
                        error_log(err);
                    });
            }

            // push notification for payment done 
            const variables = {
                po_farmart_id: payment_data.purchase_crop_order?.farmart_id,
                utr_number
            }
            let notification;
            if (payment_data.payment_for == payment_for.PO) {
                variables.retailer_name = payment_data.purchase_crop_order?.master_merchant_detail?.name;
                if (payment_data.installment_number == 1)
                    notification = await fetch_ml_notification_string(ml_notification_event_enum.payment_part_one_retailer, language.english, variables);
                else if (payment_data.installment_number == 2)
                    notification = await fetch_ml_notification_string(ml_notification_event_enum.payment_part_two_retailer, language.english, variables);
            }
            else if (payment_data.payment_for == payment_for.ORDER_DELIVERY) {
                variables.transporter_name = payment_data.purchase_crop_order?.order_delivery_detail?.transport_name;
                if (payment_data.installment_number == 1)
                    notification = await fetch_ml_notification_string(ml_notification_event_enum.payment_part_one_transporter, language.english, variables);
                else if (payment_data.installment_number == 2)
                    notification = await fetch_ml_notification_string(ml_notification_event_enum.payment_part_two_transporter, language.english, variables);
            }
            if (notification) {
                send_notification_for_ml([payment_data.purchase_crop_order?.user_profile_id], notification.title, notification.message, notification.image)
                    .catch(err => {
                        error_log(err);
                    });
            }

            await update_retailer_total_transaction(id)

            await update_payment_gst_details(payment_data.purchase_crop_order?.id)
            return resolve(true);
        } catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    });
};


module.exports = {
    post_utr_number_service
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/_services/submit_transport_final_payment/transport_deduction_update_by_rpm.js
const payment_deductions_for_transport_model = require("../../../../../database/models_v2/procurement_payments/payment_deduction_for_transport");
const procurement_payments_model = require("../../../../../database/models_v2/procurement_payments/procurement_payments");
const { payment_for } = require("../../../../../enums/purchase_order/procurement_payment_enum");
const error_log = require("../../../../../middelware/error_log");

const transport_deduction_update_by_rpm = async (
    po_id,
    halting_charges,
    unloading_charges,
    route_change_charges,
    commodity_cost,
    deduction_amount,
    reason_for_deduction,
    revised_bill_t_url,
    revised_transport_cost,
    final_payable_to_tpt_cost
) => {
    return new Promise(async (resolve, reject) => {
        try {
            const part_one_payment_data = await procurement_payments_model.findOne({
                where: {
                    is_active: true,
                    payment_for: payment_for.ORDER_DELIVERY,
                    installment_number: 1,
                    purchase_crop_order_id: po_id,
                    is_additional_payment: false
                }
            })
            if (!part_one_payment_data) {
                throw new Error("part one payment not done");
            }
            // const part_one_payment = parseFloat(part_one_payment_data.amount);
            // const total_transport_cost = halting_charges + unloading_charges + route_change_charges + commodity_cost;
            // const total_payable_amount = total_transport_cost - (part_one_payment + deduction_amount);
            // if (total_transport_cost !== revised_transport_cost) {
            //     throw new Error("please check the calculation of revised_transport_cost");
            // }
            // if (total_payable_amount !== final_payable_to_tpt_cost) {
            //     throw new Error("please check the calculation of final_payable_to_tpt_cost");
            // }
            let payment_deduction_obj = await payment_deductions_for_transport_model.findOne({
                where: {
                    is_active: true,
                    purchase_crop_order_id: po_id
                }
            })
            if (payment_deduction_obj && payment_deduction_obj.approved_by_state_head) {
                throw new Error("deduction is already approved by state head")
            }
            if (payment_deduction_obj && payment_deduction_obj.approved_by_rpm) {
                payment_deduction_obj.halting_charges = halting_charges;
                payment_deduction_obj.unloading_charges = unloading_charges;
                payment_deduction_obj.route_change_charges = route_change_charges;
                payment_deduction_obj.commodity_cost = commodity_cost;
                payment_deduction_obj.deduction_amount = deduction_amount;
                payment_deduction_obj.revised_bill_t_url = revised_bill_t_url;
                payment_deduction_obj.revised_transport_cost = revised_transport_cost;
                payment_deduction_obj.final_payable_amount = final_payable_to_tpt_cost;
                payment_deduction_obj.transport_payment_deduction_reason_id = reason_for_deduction
                await payment_deduction_obj.save();
            }
            else {
                if (payment_deduction_obj) {
                    payment_deduction_obj.is_active = false;
                    await payment_deduction_obj.save();
                }
                await payment_deductions_for_transport_model.build({
                    deduction_amount,
                    halting_charges,
                    unloading_charges,
                    route_change_charges,
                    commodity_cost,
                    deduction_amount,
                    revised_bill_t_url,
                    revised_transport_cost,
                    final_payable_amount: final_payable_to_tpt_cost,
                    transport_payment_deduction_reason_id: reason_for_deduction,
                    purchase_crop_order_id: po_id,
                    approved_by_rpm: true,
                    approved_by_state_head: false,
                    is_active: true
                }).save();
            }
            resolve(true);
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}
module.exports = transport_deduction_update_by_rpm


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/_services/submit_transport_final_payment/transport_deduction_update_by_sh.js
const purchase_crop_orders_model = require("../../../../../database/models_v2/procurement_order/purchase_crop_orders");
const order_delivery_detail_model = require("../../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail");
const payment_deductions_for_transport_model = require("../../../../../database/models_v2/procurement_payments/payment_deduction_for_transport");
const procurement_payments_model = require("../../../../../database/models_v2/procurement_payments/procurement_payments");
const { payment_for } = require("../../../../../enums/purchase_order/procurement_payment_enum");
const error_log = require("../../../../../middelware/error_log");
const create_payment_service = require("../../../purchase_order/_services/update_po_payment_info/create_payment");

const transport_deduction_update_by_sh = async (
    po_id,
    halting_charges,
    unloading_charges,
    route_change_charges,
    commodity_cost,
    deduction_amount,
    reason_for_deduction,
    revised_bill_t_url,
    revised_transport_cost,
    final_payable_to_tpt_cost
) => {
    return new Promise(async (resolve, reject) => {
        try {
            const [purchase_order, part_one_payment_data] = await Promise.all([
                purchase_crop_orders_model.findOne({
                    where: {
                        is_active: true,
                        id: po_id
                    },
                    include: [
                        {
                            model: order_delivery_detail_model,
                            required: true,
                            where: {
                                is_active: true
                            }
                        },
                        {
                            model: payment_deductions_for_transport_model,
                            required: false,
                            where: {
                                is_active: true
                            }
                        }
                    ]
                }),
                procurement_payments_model.findOne({
                    where: {
                        is_active: true,
                        payment_for: payment_for.ORDER_DELIVERY,
                        installment_number: 1,
                        purchase_crop_order_id: po_id,
                        is_additional_payment: false
                    }
                })
            ])
            if (!part_one_payment_data) {
                throw new Error("part one payment not done");
            }
            // const part_one_payment = parseFloat(part_one_payment_data.amount);
            // const total_transport_cost = halting_charges + unloading_charges + route_change_charges + commodity_cost;
            // const total_payable_amount = total_transport_cost - (part_one_payment + deduction_amount);
            // if (total_transport_cost !== revised_transport_cost) {
            //     throw new Error("please check the calculation of revised_transport_cost");
            // }
            // if (total_payable_amount !== final_payable_to_tpt_cost) {
            //     throw new Error("please check the calculation of final_payable_to_tpt_cost");
            // }
            let payment_deduction_obj = await payment_deductions_for_transport_model.findOne({
                where: {
                    is_active: true,
                    purchase_crop_order_id: po_id
                }
            })
            if (payment_deduction_obj && payment_deduction_obj.approved_by_state_head) {
                throw new Error("part two payment is already created. cannot update deduction.")
            }
            else {
                if (payment_deduction_obj) {
                    payment_deduction_obj.is_active = false;
                    await payment_deduction_obj.save();
                }
                await payment_deductions_for_transport_model.build({
                    deduction_amount,
                    halting_charges,
                    unloading_charges,
                    route_change_charges,
                    commodity_cost,
                    deduction_amount,
                    revised_bill_t_url,
                    revised_transport_cost,
                    final_payable_amount: final_payable_to_tpt_cost,
                    transport_payment_deduction_reason_id: reason_for_deduction,
                    purchase_crop_order_id: po_id,
                    approved_by_rpm: true,
                    approved_by_state_head: true,
                    is_active: true
                }).save();
                await create_payment_service({
                    poId: po_id,
                    orderDeliveryId: purchase_order.order_delivery_detail.id,
                    buyerOrderId: purchase_order.buyer_order_id,
                    amount: final_payable_to_tpt_cost,
                    installment: 2,
                    paymentFor: payment_for.ORDER_DELIVERY,
                    accountDetailId: part_one_payment_data.account_detail_id
                })
            }
            resolve(true);
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}
module.exports = transport_deduction_update_by_sh


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/_services/submit_transport_final_payment/transport_deduction_update_by_pa.js
const payment_deductions_for_transport_model = require("../../../../../database/models_v2/procurement_payments/payment_deduction_for_transport");
const procurement_payments_model = require("../../../../../database/models_v2/procurement_payments/procurement_payments");
const { payment_for } = require("../../../../../enums/purchase_order/procurement_payment_enum");
const error_log = require("../../../../../middelware/error_log");

const transport_deduction_update_by_pa = async (
    po_id,
    halting_charges,
    unloading_charges,
    route_change_charges,
    commodity_cost,
    deduction_amount,
    reason_for_deduction,
    revised_bill_t_url,
    revised_transport_cost,
    final_payable_to_tpt_cost
) => {
    return new Promise(async (resolve, reject) => {
        try {
            const part_one_payment_data = await procurement_payments_model.findOne({
                where: {
                    is_active: true,
                    payment_for: payment_for.ORDER_DELIVERY,
                    installment_number: 1,
                    purchase_crop_order_id: po_id,
                    is_additional_payment: false
                }
            })
            if (!part_one_payment_data) {
                throw new Error("part one payment not done");
            }
            // const part_one_payment = parseFloat(part_one_payment_data.amount);
            // const total_transport_cost = halting_charges + unloading_charges + route_change_charges + commodity_cost;
            // const total_payable_amount = total_transport_cost - (part_one_payment + deduction_amount);
            // if (total_transport_cost !== revised_transport_cost) {
            //     throw new Error("please check the calculation of revised_transport_cost");
            // }
            // if (total_payable_amount !== final_payable_to_tpt_cost) {
            //     throw new Error("please check the calculation of final_payable_to_tpt_cost");
            // }
            let payment_deduction_obj = await payment_deductions_for_transport_model.findOne({
                where: {
                    is_active: true,
                    purchase_crop_order_id: po_id
                }
            })
            if (payment_deduction_obj) {
                if (payment_deduction_obj.approved_by_rpm)
                    throw new Error("deduction is already approved by rpm or state head")
                payment_deduction_obj.halting_charges = halting_charges;
                payment_deduction_obj.unloading_charges = unloading_charges;
                payment_deduction_obj.route_change_charges = route_change_charges;
                payment_deduction_obj.commodity_cost = commodity_cost;
                payment_deduction_obj.deduction_amount = deduction_amount;
                payment_deduction_obj.revised_bill_t_url = revised_bill_t_url;
                payment_deduction_obj.revised_transport_cost = revised_transport_cost;
                payment_deduction_obj.final_payable_amount = final_payable_to_tpt_cost;
                payment_deduction_obj.transport_payment_deduction_reason_id = reason_for_deduction
                await payment_deduction_obj.save();
            }
            else {
                await payment_deductions_for_transport_model.build({
                    halting_charges,
                    unloading_charges,
                    route_change_charges,
                    commodity_cost,
                    deduction_amount,
                    revised_bill_t_url,
                    revised_transport_cost,
                    final_payable_amount: final_payable_to_tpt_cost,
                    transport_payment_deduction_reason_id: reason_for_deduction,
                    purchase_crop_order_id: po_id,
                    approved_by_rpm: false,
                    approved_by_state_head: false,
                    is_active: true
                }).save();
            }
            resolve(true);
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}
module.exports = transport_deduction_update_by_pa


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/_services/submit_payment_service.js
const user_profile = require("../../../../database/models/user_profile");
const buyer_order_detail = require("../../../../database/models_v2/buyer_order/buyer_order_detail");
const purchase_crop_orders = require("../../../../database/models_v2/procurement_order/purchase_crop_orders");
const order_delivery_detail = require("../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail");
const procurement_payments = require("../../../../database/models_v2/procurement_payments/procurement_payments");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");

const submit_payment_service = async (paymentData) => {
    try {
        let payment_data = await procurement_payments.findOne({
            where: {
                id: paymentData.id,
                is_additional_payment: false,
                is_active: 1
            },
            include: [
                {
                    model: user_profile,
                    required: false
                },
                {
                    model: purchase_crop_orders,
                    required: false
                },
                {
                    model: buyer_order_detail,
                    required: false
                },
                {
                    model: order_delivery_detail,
                    required: false
                }
            ]
        });
        if (!payment_data)
            throw new Error(`no payment record found with id ${paymentData.id}`);

        payment_data.installment_number = paymentData.installment_number;
        payment_data.paid_at = new Date();
        payment_data.utr_number = paymentData.utr;
        payment_data.paid_by = paymentData.paidBy?.id;
        payment_data = await payment_data.save();

        const response_data = {
            _id: payment_data.id,
            poNumber: payment_data.purchase_crop_order?.farmart_id,
            poId: payment_data.purchase_crop_order?.id,
            soId: payment_data.buyer_order_detail?.id,
            retailerId: payment_data.purchase_crop_order?.master_merchant_id,
            totalAmountRetailer: payment_data.purchase_crop_order?.price,
            totalAmountTransport: order_delivery_payment.amount,
            createdAt: payment_data.createdAt,
            updatedAt: payment_data.updatedAt
        }

        const paid_by_data = await user_profile.findOne({
            where:{
                id: paymentData.paidBy?.id || null,
                is_active: 1
            }
        })

        response_data[(payment_data.installment_number) ? "partOne" : "partTwo"]
        [(payment_data.payment_for === payment_for.PO) ? "retailer" : "transport"] = {
            payableAmount: payment_data.amount,
            paidAt: payment_data.paid_at,
            paidBy: {
                id: paid_by_data?.id,
                name: paid_by_data?.name,
                mobileNumber: paid_by_data?.mobile_number
            },
            utr: payment_data.utr_number
        }

        return {
            status: HTTP_status_codes.ok,
            data: response_data
        }
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

module.exports = {
    submit_payment_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/_services/fetch_payment_details_service.js
const purchase_crop_orders_model = require("../../../../database/models_v2/procurement_order/purchase_crop_orders");
const order_delivery_detail_model = require("../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail");
const payment_deductions_for_retailer_model = require("../../../../database/models_v2/procurement_payments/payment_deduction_for_retailer");
const payment_deductions_for_transport_model = require("../../../../database/models_v2/procurement_payments/payment_deduction_for_transport");
const procurement_payments_model = require("../../../../database/models_v2/procurement_payments/procurement_payments");
const { payment_for } = require("../../../../enums/purchase_order/procurement_payment_enum");
const error_log = require("../../../../middelware/error_log");

const fetch_payment_details_service = async (po_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            const po_detail = await purchase_crop_orders_model.findOne({
                where: {
                    is_active: true,
                    id: po_id
                },
                include: [
                    {
                        model: order_delivery_detail_model,
                        where: {
                            is_active: true
                        },
                        required: true
                    },
                    {
                        model: payment_deductions_for_transport_model,
                        where: {
                            is_active: true
                        },
                        required: true
                    },
                    {
                        model: payment_deductions_for_retailer_model,
                        where: {
                            is_active: true
                        },
                        required: true
                    },
                    {
                        model: procurement_payments_model,
                        where: {
                            is_active: true,
                            installment_number: 1,
                            is_additional_payment: false
                        },
                        required: true
                    }
                ]
            })

            if(!po_detail){
                throw new Error("no payment detail found");
            }

            let payable_to_retailer = po_detail.total_payment;
            let part1_paid_amount = parseFloat((po_detail.procurement_payments).find((payment)=> payment.payment_for === payment_for.PO)?.amount || 0);
            let deduction_to_retailer = po_detail.payment_deductions_for_retailers[0]?.deduction_amount;
            let final_payable_to_retailer = po_detail.payment_deductions_for_retailers[0]?.final_payable_amount;
            let primary_payment_amount_transport = po_detail.order_delivery_detail?.total_transport_cost;
            let advanced_paid_to_transport = parseFloat((po_detail.procurement_payments).find((payment)=> payment.payment_for === payment_for.ORDER_DELIVERY)?.amount || 0);
            let revised_transport_cost = po_detail.payment_deductions_for_transports[0]?.revised_transport_cost;
            let deduction_to_transport = po_detail.payment_deductions_for_transports[0]?.deduction_amount;
            let final_payable_to_transport = po_detail.payment_deductions_for_transports[0]?.final_payable_amount;
            
            const payment_response = {
                payable_to_retailer, 
                part1_paid_amount, 
                deduction_to_retailer, 
                final_payable_to_retailer, 
                primary_payment_amount_transport, 
                advanced_paid_to_transport, 
                revised_transport_cost, 
                deduction_to_transport, 
                final_payable_to_transport
            }

            resolve(payment_response);
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}
module.exports = fetch_payment_details_service


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/_services/fetch_retailer_payment_deduction_service.js
const error_log = require("../../../../middelware/error_log");
const payment_deductions_for_retailer_model = require("../../../../database/models_v2/procurement_payments/payment_deduction_for_retailer");

const fetch_retailer_payment_deduction_service = async (po_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            const deduction_details = await payment_deductions_for_retailer_model.findOne({
                where: {
                    is_active: true,
                    purchase_crop_order_id: po_id
                }
            })
            if(!deduction_details){
                return resolve({})
            }
            const retailer_deduction_response = {
                deduction_amount: deduction_details.deduction_amount,
                deduction_reason: deduction_details.retailer_payment_deduction_reason_id,
            }
            resolve(retailer_deduction_response);
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}
module.exports = fetch_retailer_payment_deduction_service


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/controllers/get_payments_for_table_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const {
  get_payments_for_table_service,
} = require("../_services/get_payments_for_table_service");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");

module.exports = async (req, res) => {
  try {
    // not using this ID for now
    // keeping this only for future use case
    const id = req.params.id;

    const payment = await get_payments_for_table_service(id);
    let response = create_api_response(true, "success", payment);
    res.status(http_status_code_enum.ok).json(response);
  } catch (err) {
    error_log(err);
    res
      .status(http_status_code_enum.bad_request)
      .json(create_api_response(false, err.message));
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/controllers/generate_bank_payment_format_controller.js
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const generate_bank_payment_service = require('../_services/generate_bank_payment_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const data = req.body.data || []; // use empty array as default value because you are using length property

        const selected_bank = req.body.selected_bank || '';

        if (data.length === 0) {
            throw new ValidationError('no rows selected');
        }

        if (selected_bank === '') {
            throw new ValidationError('selected bank is empty');
        }

        const bank_payment = await generate_bank_payment_service(data, selected_bank);
        const bank_payment_response = create_api_response(
            true,
            'successfull',
            bank_payment
        );
        res.status(http_status_code_enum.ok).json(bank_payment_response);
    } catch (ex) {
        res
            .status(http_status_code_enum.bad_request)
            .json(create_api_response(false, ex.message));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/controllers/post_utr_number_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const { post_utr_number_service } = require('../_services/post_utr_number_service');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const id = +req.body.id
        const utr_number = req.body.utrNumber
        const status = +req.body.status
        const { user_profile_id } = req.user;
        if (!id || !utr_number || !status) {
            throw new ValidationError('id, utr and status number is mandatory params');
        }
        const utr_number_added = await post_utr_number_service(id, utr_number, status, user_profile_id);
        const response = create_api_response(true, 'success', utr_number_added);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/controllers/fetch_po_detail_for_part1_payment_controller.js
const error_log=require('../../../../middelware/error_log');
const create_api_response=require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const fetch_po_detail_for_part1_payment_service=require('../_services/fetch_po_detail_for_part1_payment_service');

module.exports=async (req,res)=>{
    try{
        let po_id=+req.query.po_id;
        if(!po_id){
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false,'please send po_id'));    
        }
        else{
            let po_detail=await fetch_po_detail_for_part1_payment_service(po_id);
            let po_detail_response=create_api_response(true,"successfull",po_detail);
            return res.status(http_status_code_enum.ok).json(po_detail_response);
        }
    }
    catch(ex){
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false,ex.message));
    }
}




File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/controllers/fetch_retailer_payment_deduction_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const fetch_retailer_payment_deduction_service = require('../_services/fetch_retailer_payment_deduction_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { po_id } = req.query;
        if (!po_id) {
            throw new ValidationError('po_id is required')
        }
        const retailer_payment_deduction = await fetch_retailer_payment_deduction_service(po_id);
        const retailer_payment_deduction_response = create_api_response(true, 'successfull', retailer_payment_deduction);
        return res.status(http_status_code_enum.ok).json(retailer_payment_deduction_response);
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/controllers/submit_transport_final_payment_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const user_role = require('../../../../enums/user_profile/user_role');
const transport_deduction_update_by_pa_service = require('../_services/submit_transport_final_payment/transport_deduction_update_by_pa');
const transport_deduction_update_by_rpm_service = require('../_services/submit_transport_final_payment/transport_deduction_update_by_rpm');
const transport_deduction_update_by_sh_service = require('../_services/submit_transport_final_payment/transport_deduction_update_by_sh');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const {
            po_id,
            halting_charges,
            unloading_charges,
            route_change_charges,
            commodity_cost,
            deduction_amount,
            reason_for_deduction,
            revised_bill_t_url,
            revised_transport_cost,
            final_payable_to_tpt_cost
        } = req.body

        const { user_role_id } = req.user;

        if (po_id === undefined) {
            throw new ValidationError('po_id is mandatory field');
        }
        if (deduction_amount === undefined) {
            throw new ValidationError('deduction_amount is mandatory field');
        }
        if (halting_charges === undefined ||
            unloading_charges === undefined ||
            route_change_charges === undefined ||
            commodity_cost === undefined) {
            throw new ValidationError('halting_charges, unloading_charges, route_change_charges and commodity_cost are mandatory fields');
        }
        if (reason_for_deduction === undefined) {
            throw new ValidationError('reason_for_deduction is mandatory field')
        }
        if (final_payable_to_tpt_cost === undefined) {
            throw new ValidationError('final_payable_to_tpt_cost is mandatory field')
        }
        if (!revised_bill_t_url) {
            throw new ValidationError('revised_bill_t_url is mandatory field')
        }
        if (revised_transport_cost === undefined) {
            throw new ValidationError('revised_transport_cost is mandatory field')
        }

        let added_deduction;

        if (user_role_id === user_role.PROCUREMENT_ASSOCIATE || user_role_id === user_role.SALES_ASSOCIATE) {
            added_deduction = await transport_deduction_update_by_pa_service(
                po_id,
                halting_charges,
                unloading_charges,
                route_change_charges,
                commodity_cost,
                deduction_amount,
                reason_for_deduction,
                revised_bill_t_url,
                revised_transport_cost,
                final_payable_to_tpt_cost
            )
        } else if (user_role_id === user_role.REGIONAL_PROCUREMENT_MANAGER || user_role_id === user_role.REGIONAL_MANAGER_SALES) {
            added_deduction = await transport_deduction_update_by_rpm_service(
                po_id,
                halting_charges,
                unloading_charges,
                route_change_charges,
                commodity_cost,
                deduction_amount,
                reason_for_deduction,
                revised_bill_t_url,
                revised_transport_cost,
                final_payable_to_tpt_cost
            )
        } else if (user_role_id === user_role.STATE_HEAD_PROCUREMENT || user_role_id === user_role.STATE_HEAD_SALES) {
            added_deduction = await transport_deduction_update_by_sh_service(
                po_id,
                halting_charges,
                unloading_charges,
                route_change_charges,
                commodity_cost,
                deduction_amount,
                reason_for_deduction,
                revised_bill_t_url,
                revised_transport_cost,
                final_payable_to_tpt_cost
            )
        } else {
            throw new ValidationError('Only PA, RPM & State Heads are allowed to submit deduction.');
        }
        const transport_final_payment_response = create_api_response(true, 'successfull', added_deduction);
        return res.status(http_status_code_enum.ok).json(transport_final_payment_response);
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/controllers/submit_payment_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const { submit_payment_service } = require("../_services/submit_payment_service");
const { payment_data_validator } = require("../validation/payment_data_validator");


module.exports = async (req, res) => {
    try {
        const paymentData = payment_data_validator(req.body);
        const result = await submit_payment_service({
            ...paymentData,
            paidBy: {
                id: req.user?.ml_user?.id,
                name: req.user?.ml_user?.name,
                mobileNumber: `${req.user?.ml_user?.mobileNumber}`
            }
        });
        return res.status(result.status).json(result.data);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({message: err.message});
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/controllers/create_banking_details_controller.js
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const add_bank_details_to_payment_service = require('../services/add_bank_details_to_payment_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const payment_id = req.body.id || 0;
        const account_number = req.body.account_number || '';
        const ifsc_code = req.body.ifsc_code || '';
        const account_holder_name = req.body.account_holder_name || '';
        const bank_name = req.body.bank_name || '';
        if (!payment_id || !account_number || !ifsc_code || !account_holder_name || !bank_name) {
            throw new ValidationError('payment_id, account_number, ifsc_code, bank_name and account_holder_name are mandatory params');
        }
        await add_bank_details_to_payment_service(payment_id, account_number, account_holder_name, ifsc_code, bank_name);
        const response = create_api_response(true, 'success', null);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/controllers/get_gst_details_controller.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes")
const error_log = require("../../../../middelware/error_log")
const { get_gst_detail_service } = require("../_services/get_gst_detail_service")

const get_gst_detail_controller = async (req,res) => {

    try {
        
        const payment_id = req.params.payment_id

        if(!payment_id)
            return res.status(HTTP_status_codes.badRequest).json({status: false, message: "payment_id missing"})

        const response = await get_gst_detail_service(payment_id)

        if(response.status === false)
            return res.status(HTTP_status_codes.badRequest).json(response)

        return res.status(HTTP_status_codes.ok).json(response)

    } catch (error) {
        error_log(error)
        return res.status(HTTP_status_codes.internalServerError).json({status: false, message: "Internal Server Error"})
    }

}

module.exports = {
    get_gst_detail_controller
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/controllers/fetch_deduction_reasons_for_retailer_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const fetch_deduction_reasons_for_retailer_service = require('../_services/fetch_deduction_reasons_for_retailer_service');

module.exports = async (req, res) => {
    try {
        let retailer_deduction_reasons = await fetch_deduction_reasons_for_retailer_service();
        let deduction_reasons_response = create_api_response(true, "successfull", retailer_deduction_reasons);
        return res.status(http_status_code_enum.ok).json(deduction_reasons_response);
    }
    catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}




File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/controllers/fetch_payment_details_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const fetch_payment_details_service = require('../_services/fetch_payment_details_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { po_id } = req.query;
        if (!po_id) {
            throw new ValidationError('po_id is required')
        }
        const payment_detail = await fetch_payment_details_service(po_id);
        const payment_detail_response = create_api_response(true, 'successfull', payment_detail);
        return res.status(http_status_code_enum.ok).json(payment_detail_response);
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/controllers/getPendingRetailerPaymentbyIdController.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const {
    getPendingRetailerPaymentbyIdService
} = require('../_services/getPendingRetailerPaymentbyIdService');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
    // not using this ID for now
    // keeping this only for future use case
        const paymentId = req.params.id;

        if (!paymentId) {
            throw new ValidationError('id is required');
        }

        const payment = await getPendingRetailerPaymentbyIdService(paymentId);
        const response = create_api_response(true, 'success', payment);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res
            .status(http_status_code_enum.bad_request)
            .json(create_api_response(false, err.message));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/controllers/fetch_deduction_reasons_for_transport_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const fetch_deduction_reasons_for_transport_service = require('../_services/fetch_deduction_reasons_for_transport_service');

module.exports = async (req, res) => {
    try {
        let transport_deduction_reasons = await fetch_deduction_reasons_for_transport_service();
        let deduction_reasons_response = create_api_response(true, "successfull", transport_deduction_reasons);
        return res.status(http_status_code_enum.ok).json(deduction_reasons_response);
    }
    catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}




File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/controllers/getPendingTransporterPaymentbyIdController.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const {
    getPendingTransporterPaymentbyIdService
} = require('../_services/getPendingTransporterPaymentbyIdService');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
    // not using this ID for now
    // keeping this only for future use case
        const paymentId = req.params.id;

        if (!paymentId) {
            throw new ValidationError('id is required');
        }

        const payment = await getPendingTransporterPaymentbyIdService(paymentId);
        const response = create_api_response(true, 'success', payment);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res
            .status(http_status_code_enum.bad_request)
            .json(create_api_response(false, err.message));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/controllers/submit_bank_details_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const submit_bank_details_service = require('../_services/submit_bank_details_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const payment_id = +req.body.id || 0;
        const account_number = req.body.accountNumber || '';
        const ifsc_code = req.body.ifscCode || '';
        const account_holder_name = req.body.accountHolderName || '';
        const bank_name = req.body.bankName || '';
        const details_of = req.body.detailsOf;
        if (!payment_id || !account_number || !ifsc_code || !account_holder_name || !bank_name) {
            throw new ValidationError('payment_id, account_number, ifsc_code, bank_name and account_holder_name are mandatory params');
        }
        const result = await submit_bank_details_service(payment_id, account_number, account_holder_name, ifsc_code, bank_name, details_of);
        return res.status(http_status_code_enum.ok).json(result);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({ message: err.message });
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/controllers/submit_retailer_final_payment_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const user_role = require('../../../../enums/user_profile/user_role');
const retailer_deduction_update_by_pa_service = require('../_services/submit_retailer_final_payment/retailer_deduction_update_by_pa');
const retailer_deduction_update_by_rpm_service = require('../_services/submit_retailer_final_payment/retailer_deduction_update_by_rpm');
const retailer_deduction_update_by_sh_service = require('../_services/submit_retailer_final_payment/retailer_deduction_update_by_sh');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const {
            po_id,
            deduction_amount,
            deduction_reason,
            final_payable_amount
        } = req.body

        const { user_role_id } = req.user;

        if (po_id === undefined ||
            deduction_amount === undefined ||
            deduction_reason === undefined ||
            final_payable_amount === undefined) {
            throw new ValidationError('po_id, deduction_amount, deduction_reason and final_payable_amount are mandatory fields')
        }

        let added_deduction;
        if (user_role_id === user_role.PROCUREMENT_ASSOCIATE || user_role_id === user_role.SALES_ASSOCIATE) {
            added_deduction = await retailer_deduction_update_by_pa_service(
                po_id,
                deduction_amount,
                deduction_reason,
                final_payable_amount
            )
        } else if (user_role_id === user_role.REGIONAL_PROCUREMENT_MANAGER || user_role_id === user_role.REGIONAL_MANAGER_SALES) {
            added_deduction = await retailer_deduction_update_by_rpm_service(
                po_id,
                deduction_amount,
                deduction_reason,
                final_payable_amount
            )
        } else if (user_role_id === user_role.STATE_HEAD_PROCUREMENT || user_role_id === user_role.STATE_HEAD_SALES) {
            added_deduction = await retailer_deduction_update_by_sh_service(
                po_id,
                deduction_amount,
                deduction_reason,
                final_payable_amount
            )
        } else {
            throw new ValidationError('Only PA, RPM & State Heads are allowed to submit deduction.');
        }
        const retailer_final_payment_response = create_api_response(true, 'successfull', added_deduction);
        return res.status(http_status_code_enum.ok).json(retailer_final_payment_response);
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/controllers/fetch_transport_payment_deduction_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const fetch_transport_payment_deduction_service = require('../_services/fetch_transport_payment_deduction_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { po_id } = req.query;
        if (!po_id) {
            throw new ValidationError('po_id is required')
        }
        const transport_payment_deduction = await fetch_transport_payment_deduction_service(po_id);
        const transport_payment_deduction_response = create_api_response(true, 'successfull', transport_payment_deduction);
        return res.status(http_status_code_enum.ok).json(transport_payment_deduction_response);
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/services/submit_part_one_payment_service.js
const paymentModel = require('../../../../database/mongoose/market_linkage_db/payment.model');
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const { retailerStatus, transportStatus } = require('../../../../enums/market_linkage/enums/payment');
const error_log = require('../../../../middelware/error_log');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const submit_part_one_payment_service = async (paymentData) => {
    try {
        let payment = await paymentModel.findById(paymentData.id);
        if (!payment) { throw new ValidationError(`no payment record found with id ${paymentData.id}`); }

        payment.partOne[paymentData.paymentFor].paidAt = new Date();
        payment.partOne[paymentData.paymentFor].utr = paymentData.utr;
        payment.partOne[paymentData.paymentFor].paidBy = paymentData.paidBy;

        if (paymentData.paymentFor === 'retailer') {
            payment.retailerStatus = retailerStatus.PARTIALLY_DONE;
        } else {
            payment.transportStatus = transportStatus.PARTIALLY_DONE;
        }
        payment = await payment.save();

        return {
            status: HTTP_status_codes.ok,
            data: payment
        }
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: 'Something bad happened',
                error: err.message
            }
        };
    }
};

module.exports = {
    submit_part_one_payment_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/services/generate_bank_payment_service.js
const error_log = require('../../../../middelware/error_log');
// const master_state_model = require('../../../../database/models_v2/location/master_state');//  unused model
const { ValidationError } = require('../../../../utilities/error/custom_error');

const generate_bank_payment_service = (data) => {
    return new Promise(async (resolve, reject) => {
        try {
            const arr = [];
            for (let i = 0; i < data.length; i++) {
                // const id = data[i].id; // unused field;
                // whenever your casing style is not being followed use [""] for accessing the property
                const payment_for = data[i].paymentFor;
                const payment_type = data[i].paymentType;
                const selected_bank = data[i].selectedBank;
                const po_number = data[i].poNumber;
                const account_number = data[i].accountNumber;
                const ifsc_code = data[i].ifscCode;
                const account_holder = data[i].accountHolder;
                const amount = data[i].amount;
                if (!payment_for || !payment_type || !selected_bank || !po_number || !account_number || !ifsc_code || !account_holder) {
                    throw new ValidationError('some fields are missing')
                }
                const bank_payment = {}

                if (selected_bank === 'hdfc') { // make different methods against different bank
                // break this large function into multiple functions
                    const d = new Date();
                    const ye = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(d);
                    const mo = new Intl.DateTimeFormat('en', { month: '2-digit' }).format(d);
                    const da = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(d);
                    const trn_date = `${da}/${mo}/${ye}`
                    bank_payment['Transaction Type (N – NFET, R – RTGS,I-HDFC to HDFC)'] = 'N';
                    bank_payment['Beneficiary Code * (Inter - HDFC to HDFC)'] = '';
                    bank_payment['Beneficiary Account Number'] = account_number;
                    bank_payment['Instrument Amount'] = amount;
                    bank_payment['Beneficiary Name (Upto 40 character withput any special character)'] = account_holder;
                    bank_payment['Drawee Location'] = '';
                    bank_payment['BPrint Location'] = '';
                    bank_payment['Bene Address 1'] = '';
                    bank_payment['Bene Address 2'] = '';
                    bank_payment['Bene Address 3'] = '';
                    bank_payment['Bene Address 4'] = '';
                    bank_payment['Bene Address 5'] = '';
                    bank_payment['Instruction Reference Number'] = '';
                    bank_payment['Customer Reference Number(Any alpha numeric character upto 20)'] = po_number;
                    bank_payment['Payment details 1'] = '';
                    bank_payment['Payment details 2'] = '';
                    bank_payment['Payment details 3'] = '';
                    bank_payment['Payment details 4'] = '';
                    bank_payment['Payment details 5'] = '';
                    bank_payment['Payment details 6'] = '';
                    bank_payment['Payment details 7'] = '';
                    bank_payment['Cheque Number'] = '';
                    bank_payment['Chq / Trn Date (DD/MM/YYYY)'] = trn_date;
                    bank_payment['MICR Number'] = '';
                    bank_payment['IFSC Code'] = ifsc_code;
                    bank_payment['Bene Bank Name( Not Madatory)'] = '';
                    bank_payment['Bene Bank Branch Name( Not Madatory)'] = '';
                    bank_payment['Beneficiary email id'] = 'payment@farmart.co';

                    if (ifsc_code.substr(0, 4) === 'HDFC') {
                        bank_payment['Transaction Type (N – NFET, R – RTGS,I-HDFC to HDFC)'] = 'I'
                    }
                    if (payment_type === 'part-one') {
                        bank_payment['Customer Reference Number(Any alpha numeric character upto 20)'] += '_P1'
                    } else {
                        bank_payment['Customer Reference Number(Any alpha numeric character upto 20)'] += '_P2'
                    }
                    if (payment_for === 'retailer') {
                        bank_payment['Customer Reference Number(Any alpha numeric character upto 20)'] += '_R';
                    } else {
                        bank_payment['Customer Reference Number(Any alpha numeric character upto 20)'] += '_T'
                    }
                } else {
                    const d = new Date();
                    const ye = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(d);
                    let mo = new Intl.DateTimeFormat('en', { month: 'short' }).format(d);
                    const da = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(d);
                    mo = mo.toUpperCase();
                    const inst_date = `${da}-${mo}-${ye}`
                    bank_payment['Debit Ac No'] = '777705966338';
                    bank_payment['Beneficiary Ac No'] = account_number;
                    bank_payment['Beneficiary Name'] = account_holder;
                    bank_payment.Amt = amount;
                    bank_payment['Pay Mod'] = 'N';
                    bank_payment.Payment_Instruction_Date = inst_date;
                    bank_payment.IFSC = ifsc_code;
                    bank_payment['Payable Location name'] = '';
                    bank_payment['Print Location'] = '';
                    bank_payment['Bene Mobile no'] = '';
                    bank_payment['Bene email id'] = 'payment@farmart.co';
                    bank_payment['Ben add1'] = '';
                    bank_payment['Ben add2'] = '';
                    bank_payment['Ben add3'] = '';
                    bank_payment['Ben add4'] = '';
                    bank_payment['Add details 1'] = '';
                    bank_payment['Add details 2'] = '';
                    bank_payment['Add details 3'] = '';
                    bank_payment['Add details 4'] = '';
                    bank_payment['Add details 5'] = '';
                    bank_payment.Remarks = po_number;

                    if (payment_type === 'part-one') {
                        bank_payment.Remarks += '_P1'
                    } else {
                        bank_payment.Remarks += '_P2'
                    }
                    if (payment_for === 'retailer') {
                        bank_payment.Remarks += '_R';
                    } else {
                        bank_payment.Remarks += '_T'
                    }
                }
                arr.push(bank_payment);
            }
            resolve(arr)
        } catch (ex) {
            error_log(ex);
            reject({ message: ex.message });
        }
    })
}

module.exports = generate_bank_payment_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/services/create_payment_service.js
const paymentModel = require("../../../../database/mongoose/market_linkage_db/payment.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");

const create_payment_service = async (paymentData) => {
    try {
        const payment = await paymentModel.create(paymentData);
        return {
            status: HTTP_status_codes.ok,
            data: payment
        }
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

module.exports = {
    create_payment_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/services/submit_bank_details_service.js
const paymentModel = require('../../../../database/mongoose/market_linkage_db/payment.model');
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const error_log = require('../../../../middelware/error_log');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const submit_bank_details_service = async (bankDetails) => {
    try {
        let payment = await paymentModel.findById(bankDetails.id);
        if (!payment) { throw new ValidationError(`no payment record found with id ${bankDetails.id}`); }

        if (bankDetails.detailsOf === 'retailer') {
            payment.retailerBankInfo = {
                accountNumber: bankDetails.accountNumber,
                ifscCode: bankDetails.ifscCode,
                accountHolderName: bankDetails.accountHolderName
            }
        } else {
            payment.transportBankInfo = {
                accountNumber: bankDetails.accountNumber,
                ifscCode: bankDetails.ifscCode,
                accountHolderName: bankDetails.accountHolderName
            }
        }
        payment = await payment.save();

        return {
            status: HTTP_status_codes.ok,
            data: payment
        }
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: 'Something bad happened',
                error: err.message
            }
        };
    }
};

module.exports = {
    submit_bank_details_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/services/update_payment_service.js
const paymentModel = require("../../../../database/mongoose/market_linkage_db/payment.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");

const update_payment_service = async (poId, updateData) => {
    try {
        const updatePayment = await paymentModel.findOneAndUpdate({poId}, updateData, {new:true});
        return {
            status: HTTP_status_codes.ok,
            data: updatePayment
        }
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

module.exports = {
    update_payment_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/services/get_payments_service.js
const paymentModel = require("../../../../database/mongoose/market_linkage_db/payment.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");

const get_payments_service = async () => {
    try {
        const payments = await paymentModel.aggregate([
            {
                $lookup : {
                    from: "purchaseorders",
                    localField: "poId",
                    foreignField: "_id",
                    as: "purchaseOrder"
                }
            },
            {
                $lookup: {
                    from: "buyerorders",
                    localField: "soId",
                    foreignField: "_id",
                    as: "salesOrder"
                }
            },
            {
                $lookup: {
                    from: "procurementsources",
                    localField: "retailerId",
                    foreignField: "_id",
                    as: "retailer"
                }
            },
            {
                $lookup: {
                    from: "procurementsourcedocuments",
                    localField: "retailerId",
                    foreignField: "userId",
                    as: "retailerDocs"
                }
            }
        ]);
        return {
            status: HTTP_status_codes.ok,
            data: payments.map((payment)=>{
                return {
                    ...payment,
                    purchaseOrder: payment.purchaseOrder[0],
                    salesOrder: payment.salesOrder[0],
                    retailer: payment.retailer[0]
                }
            })
        }
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

module.exports = {
    get_payments_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/services/submit_part_two_payment_service.js
const paymentModel = require('../../../../database/mongoose/market_linkage_db/payment.model');
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const { retailerStatus, transportStatus } = require('../../../../enums/market_linkage/enums/payment');
const error_log = require('../../../../middelware/error_log');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const submit_part_two_payment_service = async (paymentData) => {
    try {
        let payment = await paymentModel.findById(paymentData.id);
        if (!payment) { throw new ValidationError(`no payment record found with id ${paymentData.id}`); }
        // part two payment can only be submitted if part one is already done
        const paymentStatus = (paymentData.paymentFor === 'retailer')
            ? payment.retailerStatus
            : payment.transportStatus;
        const pendingStatus = [retailerStatus.PENDING, transportStatus.PENDING];
        if (pendingStatus.includes(paymentStatus)) { throw new ValidationError('please complete part one payment first.'); }

        payment.partTwo[paymentData.paymentFor].paidAt = new Date();
        payment.partTwo[paymentData.paymentFor].utr = paymentData.utr;
        payment.partTwo[paymentData.paymentFor].paidBy = paymentData.paidBy;

        if (paymentData.paymentFor === 'retailer') {
            payment.retailerStatus = retailerStatus.DONE;
        } else {
            payment.transportStatus = transportStatus.DONE;
        }
        payment = await payment.save();

        return {
            status: HTTP_status_codes.ok,
            data: payment
        }
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: 'Something bad happened',
                error: err.message
            }
        };
    }
};

module.exports = {
    submit_part_two_payment_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/validation/bank_details_validator.js
const joi = require("joi");

const schema = joi.object({
    id: joi.number().required(), // payment document id
    detailsOf: joi.string().trim().lowercase()
        .only()
        .allow("transport", "retailer")
        .required(),
    accountNumber: joi.string().trim().required(),
    ifscCode: joi.string().trim().required(),
    accountHolderName: joi.string().trim().required(),
}).and("id", "detailsOf", "accountNumber", "ifscCode","accountHolderName");

/**
 * validates payment submission data, throws error incase of validation fails.
 * @param {{
 *      id: number,
 *      detailsOf: "transport" | "retailer",
 *      accountNumber: string,
 *      ifscCode: string,
 *      accountHolderName: string
 * }} data 
 * @returns {{
 *      id: number,
 *      detailsOf: "transport" | "retailer",
 *      accountNumber: string,
 *      ifscCode: string,
 *      accountHolderName: string
 * }}
 */
const validator = (data) => {
    const result = schema.validate(data || {});
    if (result.error) throw new Error(result.error.message);
    return result.value;
}

module.exports = {
    bank_details_validator: validator
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/payment/validation/payment_data_validator.js
const joi = require("joi");

const schema = joi.object({
    id: joi.string().trim().required(), // payment document id
    utr: joi.string().trim().required(),
    paymentFor: joi.string().trim().lowercase()
        .only()
        .allow("transport", "retailer")
        .required()
}).and("id", "utr", "paymentFor");

/**
 * validates payment submission data, throws error incase of validation fails.
 * @param {{
 *      id: string,
 *      utr: string,
 *      paymentFor: "transport" | "retailer"
 * }} data 
 * @returns {{
 *      id: string,
 *      utr: string,
 *      paymentFor: "transport" | "retailer"
 * }}
 */
const validator = (data) => {
    const result = schema.validate(data || {});
    if (result.error) throw new Error(result.error.message);
    return result.value;
}

module.exports = {
    payment_data_validator: validator
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/dispatch/swagger/index.js
module.exports = {
    tags: {
        name: 'dispatch'
    },
    paths: {
        '/create': {
            post: {
                tags: ['dispatch'],
                summary: 'create',
                description: 'create truck dispatch',
                operationId: 'post_truck_dispatch',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'sauda_id',
                        description: 'sauda_id',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'vehicle_number',
                        description: 'vehicle_number',
                        required: true,
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'truck_driver_mobile_number',
                        description: 'truck_driver_mobile_number',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'dispatched_weight',
                        description: 'dispatched_weight',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'number_of_bags',
                        description: 'number_of_bags',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'invoice_documents',
                        description: 'invoice_documents',
                        required: true,
                        type: 'array'
                    },
                    {
                        in: 'formData',
                        name: 'weight_slip_documents',
                        description: 'weight_slip_documents',
                        required: true,
                        type: 'array'
                    },
                    {
                        in: 'formData',
                        name: 'mandi_documents',
                        description: 'mandi_documents',
                        required: false,
                        type: 'array'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/doc_status_notification': {
            post: {
                tags: ['dispatch'],
                summary: 'doc status notification',
                description: 'doc status notification',
                operationId: 'post_doc_status_notification',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'sauda_id',
                        description: 'sauda_id',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'merchant_mobile_number',
                        description: 'merchant_mobile_number',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'dispatch_id',
                        description: 'dispatch_id',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'document_status_id',
                        description: 'document status',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'media_name',
                        description: 'media name',
                        required: false,
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'media_link',
                        description: 'media link',
                        required: false,
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/upload_documents': {
            post: {
                tags: ['dispatch'],
                summary: 'upload documents for truck dispatch',
                description: 'upload documents for truck dispatch',
                operationId: 'post_upload_truck_dispatch_documents',
                security: [{ Bearer: ['read'] }],
                consumes: ['multipart/form-data'],
                parameters: [
                    {
                        in: 'formData',
                        name: 'sauda_id',
                        description: 'sauda_id',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'doc_type_id',
                        description: 'doc_type_id',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'dispatch_id',
                        description: 'dispatch_id',
                        required: false,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'upload_doc',
                        type: 'array',
                        items: {
                            type: 'file'
                        },
                        description: 'Multiple files to upload'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/update': {
            put: {
                tags: ['dispatch'],
                summary: 'update truck dispatch',
                description: 'update truck dispatch',
                operationId: 'patch_truck_dispatch',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'sauda_id',
                        description: 'sauda_id',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'dispatch_id',
                        description: 'dispatch_id',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'invoice_documents',
                        description: 'invoice_documents',
                        required: true,
                        type: 'array'
                    },
                    {
                        in: 'formData',
                        name: 'weight_slip_documents',
                        description: 'weight_slip_documents',
                        required: true,
                        type: 'array'
                    },
                    {
                        in: 'formData',
                        name: 'mandi_documents',
                        description: 'mandi_documents',
                        required: false,
                        type: 'array'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/details': {
            get: {
                tags: ['dispatch'],
                summary: 'fetch truck dispatch details',
                description: 'fetch truck dispatch details',
                operationId: 'get_truck_dispatch_details',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'dispatch_id',
                        description: 'dispatch_id',
                        required: true,
                        type: 'number'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        }
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/dispatch/index.js
const router = require('express').Router();
const authorize = require('../../../middelware/authorized_routes');
const uploadMultipleFiles = require('../../../middelware/upload_multiple_file_multer_disk_storage');

const user_roles_enum = require('../../../enums/user_profile/user_role');

const get_truck_dispatch_details_controller = require('./controllers/get_truck_dispatch_details_controller');
const create_truck_dispatch_controller = require('./controllers/create_truck_dispatch_controller');
const update_truck_dispatch_controller = require('./controllers/update_truck_dispatch_controller');
const upload_truck_dispatch_documents_controller = require('./controllers/upload_truck_dispatch_documents_controller');
const document_status_notification_controller = require('./controllers/document_status_notification_controller');

router.get('/details', authorize([user_roles_enum.Merchant]), get_truck_dispatch_details_controller);
router.post('/create', authorize([user_roles_enum.Merchant]), create_truck_dispatch_controller);
router.put('/update', authorize([user_roles_enum.Merchant]), update_truck_dispatch_controller);
router.post('/upload_documents', authorize([user_roles_enum.Merchant]), uploadMultipleFiles, upload_truck_dispatch_documents_controller);
router.post('/doc_status_notification', authorize([user_roles_enum.Merchant, user_roles_enum.market_linkage_system]), document_status_notification_controller);
module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/dispatch/controllers/get_truck_dispatch_details_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const get_truck_dispatch_details_service = require('../services/get_truck_dispatch_details_service').get_truck_dispatch_details_service;
const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/* This code snippet is an Express route handler function in Node.js. It exports an asynchronous
function that takes two parameters, `req` (request) and `res` (response), which are objects
representing the HTTP request and response, respectively. */
module.exports = async (req, res) => {
    try {
        /* The code is extracting values from the request object (`req`) and assigning them to
        variables. */
        const dispatch_id = +req.query.dispatch_id || null;
        const supplier_mobile_number = req.user.mobile_number.toString() || null;

        if (!dispatch_id) {
            throw new ValidationError(error.no_dispatch_id);
        }
        if (!supplier_mobile_number) {
            throw new ValidationError(error.no_supplier_mobile_number);
        }

        // fetching truck dispatch details by dispatch_id from b2b side
        const dispatch_details = await get_truck_dispatch_details_service(dispatch_id, supplier_mobile_number);

        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'successfull', dispatch_details));
    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/dispatch/controllers/create_truck_dispatch_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const create_truck_dispatch_service = require('../services/create_truck_dispatch_service');
const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/* This code snippet is defining an asynchronous function that handles a POST request to create a truck
dispatch. Here's a breakdown of what the code is doing: */
module.exports = async (req, res) => {
    try {
        /* The code is extracting values from the request object (`req`) and assigning them to
        variables. */
        const sauda_id = +req.body.sauda_id || null;
        const supplier_mobile_number = req.user.mobile_number.toString() || null;
        const vehicle_number = req.body.vehicle_number || '';
        const dispatched_weight = +req.body.dispatched_weight || null;
        const number_of_bags = +req.body.number_of_bags || null;
        const invoice_documents = req.body.invoice_documents || [];
        const weight_slip_documents = req.body.weight_slip_documents || [];
        const mandi_documents = req.body.mandi_documents || [];
        const truck_driver_mobile_number = +req.body.truck_driver_mobile_number || null;
        const valid_truck_number_regex_pattern = /^[A-Za-z]{2}[ -]?\w{1,3}[ -]?[A-Za-z]{1}[ -]?\d{4}$/;

        if (!sauda_id || !vehicle_number || !dispatched_weight || !number_of_bags || !invoice_documents || !weight_slip_documents || invoice_documents?.length < 1 || weight_slip_documents?.length < 1) {
            throw new ValidationError(error.no_sauda_id_or_vehicle_number_or_dispatched_weight_or_number_of_bags_or_invoice_documents_or_weight_slip_documents);
        }
        if (!supplier_mobile_number) {
            throw new ValidationError(error.no_supplier_mobile_number);
        }
        if (!truck_driver_mobile_number) {
            throw new ValidationError(error.no_truck_driver_mobile_number);
        }
        const isValid = valid_truck_number_regex_pattern.test(vehicle_number);

        if (!isValid) {
            throw new ValidationError(error.invalid_vehicle_number);
        }

        // passing truck dispatch details to get it saved on the b2b side
        const saved_dispatch_details = await create_truck_dispatch_service(sauda_id, vehicle_number, dispatched_weight, number_of_bags, invoice_documents, weight_slip_documents, mandi_documents, supplier_mobile_number, truck_driver_mobile_number);

        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'successfull', saved_dispatch_details));
    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/dispatch/controllers/upload_truck_dispatch_documents_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const upload_truck_dispatch_documents_service = require('../services/upload_truck_dispatch_documents_service');
const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const fs = require('fs')
const { promisify } = require('util')

const unlinkAsync = promisify(fs.unlink)
/* This code snippet is a module export function in Node.js that defines an asynchronous function
handling a POST request. Here's a breakdown of what it does: */
module.exports = async (req, res) => {
    try {
        /* The code is extracting values from the request object (`req`) and assigning them to
        variables. */
        const sauda_id = +req.body.sauda_id || null;
        const supplier_mobile_number = req.user.mobile_number.toString() || null;
        const doc_type_id = +req.body.doc_type_id || null;
        const upload_doc = req.files || [];
        const dispatch_id = +req.body.dispatch_id || null;

        if (!sauda_id || !doc_type_id || !upload_doc || upload_doc.length < 1) {
            throw new ValidationError(error.no_sauda_id_or_doc_type_id_or_upload_doc);
        }
        if (!supplier_mobile_number) {
            throw new ValidationError(error.no_supplier_mobile_number);
        }

        // passing truck dispatch details to get it saved on the b2b side
        try {
            const saved_documents_details = await upload_truck_dispatch_documents_service(sauda_id, doc_type_id, dispatch_id, upload_doc, supplier_mobile_number);

            return res.status(http_status_code_enum.ok).json(create_api_response(true, 'successfull', saved_documents_details));
        } catch (err) {
            error_log(err);
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
        } finally {

            // Needed to unlink and freeup disk storage
            upload_doc.map(async file => {
                await unlinkAsync(file.path)
                // fs.unlinkSync(file.path)
            })
        }

    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/dispatch/controllers/document_status_notification_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const document_status_notification_service = require('../services/document_status_notification_service');
const error = require('../../../../config/errors');
const language_enums = require('../../../../enums/global/language');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/* This code snippet is defining an asynchronous function that handles a specific API endpoint. Here's
a breakdown of what the code is doing: */
module.exports = async (req, res) => {
    try {
        /* The code is extracting values from the request object (`req`) and assigning them to
        variables. */
        const supplier_mobile_number = +req.body.merchant_mobile_number.toString() || null;
        const sauda_id = +req.body.sauda_id || null;
        const dispatch_id = +req.body.dispatch_id || null;
        const fileName = req.body.media_name || '';
        const link = req.body.media_link || '';
        const language_id = language_enums.hindi;
        const document_status_id = +req.body.document_status_id || null;
        const media = {};
        if (fileName && link) {
            media.fileName = fileName
            media.link = link
        }

        if (!sauda_id || !dispatch_id) {
            throw new ValidationError(error.no_sauda_id_or_no_dispatch_id);
        }

        if (!supplier_mobile_number) {
            throw new ValidationError(error.no_supplier_mobile_number);
        }

        // service to send notification to the supplier upon truck dispatch document rejection
        const notification_confirmation = await document_status_notification_service(supplier_mobile_number, sauda_id, dispatch_id, document_status_id, language_id, media);

        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'successfull', notification_confirmation));
    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/dispatch/controllers/update_truck_dispatch_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const update_truck_dispatch_service = require('../services/update_truck_dispatch_service');
const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/* This code snippet is defining a function that handles a POST request to update truck dispatch
details. Here's a breakdown of what the code is doing: */
module.exports = async (req, res) => {
    try {
        /* The code is extracting values from the request object (`req`) and assigning them to
        variables. */
        const sauda_id = +req.body.sauda_id || null;
        const supplier_mobile_number = req.user.mobile_number.toString() || null;
        const dispatch_id = +req.body.dispatch_id || null;
        const invoice_documents = req.body.invoice_documents || [];
        const weight_slip_documents = req.body.weight_slip_documents || [];
        const mandi_documents = req.body.mandi_documents || [];

        if (!sauda_id || !dispatch_id) {
            throw new ValidationError(error.no_sauda_id_or_dispatch_id);
        }
        if (!supplier_mobile_number) {
            throw new ValidationError(error.no_supplier_mobile_number);
        }
        // passing updated truck dispatch details to get it saved on the b2b side
        const update_dispatch_details = await update_truck_dispatch_service(sauda_id, dispatch_id, invoice_documents, weight_slip_documents, mandi_documents, supplier_mobile_number);

        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'successfull', update_dispatch_details));
    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/dispatch/services/upload_truck_dispatch_documents_service.js
const error_log = require('../../../../middelware/error_log');
const { upload_truck_dispatch_documents_db_layer } = require('../../../../data_abstraction_layer/dispatch/upload_truck_dispatch_documents_db_layer');
const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/* This code snippet is exporting an asynchronous function that takes three parameters: `sauda_id`,
`doc_type_id`, and `upload_doc`. Inside the function, it tries to save truck dispatch details by
calling a function `upload_truck_dispatch_documents_db_layer` from the data abstraction layer. */
module.exports = async (sauda_id, doc_type_id, dispatch_id, upload_doc, supplier_mobile_number) => {
    try {
        // saving truck dispatch details by calling b2b API in the abstraction layer
        const saved_documents_details = await upload_truck_dispatch_documents_db_layer({ sauda_id, doc_type_id, dispatch_id, upload_doc, supplier_mobile_number });
        /* This code snippet is performing a series of checks on the `saved_documents_details` object
        to ensure that it contains the expected data structure. Here's a breakdown of what each
        condition is checking for: */
        if (!saved_documents_details || !saved_documents_details?.data || !saved_documents_details?.data?.data || Object.keys(saved_documents_details?.data?.data).length === 0) {
            throw new ValidationError(error.no_saved_documents_details_found);
        }
        if (!saved_documents_details?.data?.data?.doc_cdn_urls || saved_documents_details?.data?.data?.doc_cdn_urls.length < 1) {
            throw new ValidationError(error.doc_cdn_urls_are_not_provided);
        }
        return saved_documents_details?.data?.data;
    } catch (err) {
        error_log(err);
        throw err;
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/dispatch/services/document_status_notification_service.js
const error_log = require('../../../../middelware/error_log');
const error = require('../../../../config/errors');
const { send_notification } = require('../../../../common_services/whatsapp/send_notification');
const { fetch_sauda_details_from_ml } = require('../../../../data_abstraction_layer/sauda/fetch_sauda_details_from_ml');
const { get_truck_dispatch_details_db_layer } = require('../../../../data_abstraction_layer/dispatch/get_truck_dispatch_details_db_layer');
const sauda_notification_event_enums = require('../../../../enums/sauda/sauda_notification_event_enums');
const { generate_branch_io_link_service } = require('../../../../common_services/branch_io/generate_link_service')
const utm_enums = require('../../../../enums/branch_io/utm_enum');
const branch_io_enums = require('../../../../enums/branch_io/branch_io_enums');
const process_documents = require('./get_truck_dispatch_details_service').process_documents;
const country_code = require('../../../../enums/global/country_code');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * The function `document_status_notification_service` sends a notification to a supplier
 * upon rejection of a truck dispatch document.
 * @param supplier_mobile_number - The `supplier_mobile_number` parameter in the
 * `document_status_notification_service` function is the mobile number of the supplier to
 * whom the notification will be sent upon document rejection.
 * @param sauda_id - The `sauda_id` parameter in the
 * `document_status_notification_service` function is used to identify a specific sauda.
 * It is passed to various functions to fetch details related to that sauda, such as sauda
 * details and dispatch details. This ID helps in retrieving the
 * @param dispatch_id - The `dispatch_id` parameter in the
 * `document_status_notification_service` function is used to identify the specific truck
 * dispatch for which the document rejection notification is being sent. It is a unique identifier
 * associated with the dispatch record in the database.
 * @param media - The `media` parameter in the `document_status_notification_service`
 * function is used to pass any media files or attachments that need to be included in the notification
 * sent to the supplier. This could include images, documents, or any other multimedia content that is
 * relevant to the notification about the
 * @returns The function `document_status_notification_service` returns the data of the
 * notification confirmation if the notification is successfully sent.
 */
const document_status_notification_service = async (supplier_mobile_number, sauda_id, dispatch_id, document_status_id, language_id, media) => {
    try { // service to send notification to the supplier upon truck dispatch document rejection
        const sauda_details = await fetch_sauda_details_from_ml({ sauda_id, supplier_mobile_number });
        if (!sauda_details || !sauda_details?.data || !sauda_details?.data?.data || Object.keys(sauda_details?.data?.data).length === 0) {
            throw new ValidationError(error.no_sauda_found);
        }

        const dispatch_details = await get_truck_dispatch_details_db_layer({ dispatch_id, supplier_mobile_number });
        if (!dispatch_details || !dispatch_details?.data || !dispatch_details?.data?.data || Object.keys(dispatch_details?.data?.data).length === 0) {
            throw new ValidationError(error.no_truck_dispatch_detail_found);
        }

        const vehicle_number = dispatch_details?.data?.data?.vehicle_number || '';
        const sauda_farmart_id = sauda_details?.data?.data?.sauda_farmart_id || '';
        let document_name = '';

        const invoice_documents_b2c_response = await process_documents(dispatch_details?.data?.data?.invoice_documents || []);
        const invoice_documents_status = invoice_documents_b2c_response?.folder_status_id;
        if (invoice_documents_status === sauda_notification_event_enums.doc_status.document_rejected) {
            document_name = document_name + ' invoice_documents,'
        }

        const weight_slip_documents_b2c_response = await process_documents(dispatch_details?.data?.data?.weight_slip_documents || []);
        const weight_slip_documents_status = weight_slip_documents_b2c_response?.folder_status_id;
        if (weight_slip_documents_status === sauda_notification_event_enums.doc_status.document_rejected) {
            document_name = document_name + ' weight_slip_documents,'
        }

        if (dispatch_details?.data?.data?.mandi_documents && dispatch_details?.data?.data?.mandi_documents.length > 0) {
            const mandi_documents_b2c_response = await process_documents(dispatch_details?.data?.data?.mandi_documents || []);
            const mandi_documents_status = mandi_documents_b2c_response?.folder_status_id;
            if (mandi_documents_status === sauda_notification_event_enums.doc_status.document_rejected) {
                document_name = document_name + ' mandi_documents,'
            }
        }

        let branch_io_variable;
        // generating branch_io link for this trade_id
        let branch_io_link = await generate_branch_io_link_service({ props: { sauda_id, dispatch_id }, utm: utm_enums.whatsapp, branch_io_enums_id: branch_io_enums.dispatch_detail });

        if (branch_io_link) {
            branch_io_link = branch_io_link?.branchUrl || ''
            // Split the URL by '/'
            const parts = branch_io_link.split('/');

            // The last part of the branch_io_link is the part we're looking for
            branch_io_variable = parts[parts.length - 1];
        }
        supplier_mobile_number = parseInt(country_code.india.toString() + supplier_mobile_number);
        const body = { };
        body.recipentMobileNumbers = [supplier_mobile_number];
        body.languageId = language_id;
        body.priority = 1; // 1-transactional 2-promotional
        if (Object.keys(media).length > 0) {
            body.media = media
        }

        let whatsapp_event_id = ''
        switch (document_status_id) {
        case sauda_notification_event_enums.doc_status.document_rejected:
            body.variables = {
                vehicle_number,
                sauda_farmart_id,
                document_name,
                branch_io_variable
            }
            whatsapp_event_id = sauda_notification_event_enums.doc_status.document_rejected;
            body.whatsappEventName = Object.keys(sauda_notification_event_enums.doc_status).find(key => sauda_notification_event_enums.doc_status[key] === whatsapp_event_id)
            break;

        default:
            throw new ValidationError(error.invalid_doc_status_id);
        }

        const notification_confirmation = await send_notification({ body });
        if (!notification_confirmation || !notification_confirmation?.data || !notification_confirmation?.data?.data) {
            throw new ValidationError(error.no_confirmation_whatsapp_notification);
        }

        return notification_confirmation?.data?.data;
    } catch (err) {
        error_log(err);
        throw err;
    }
}
module.exports = document_status_notification_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/dispatch/services/update_truck_dispatch_service.js
const error_log = require('../../../../middelware/error_log');
const { update_truck_dispatch_db_layer } = require('../../../../data_abstraction_layer/dispatch/update_truck_dispatch_db_layer');
const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/* This code snippet is exporting an asynchronous function that takes in four parameters:
`dispatch_id`, `invoice_documents`, `weight_slip_documents`, and `mandi_documents`. */
module.exports = async (sauda_id, dispatch_id, invoice_documents, weight_slip_documents, mandi_documents, supplier_mobile_number) => {
    try {
        // saving updated truck dispatch details by calling b2b API in the abstraction layer
        const updated_dispatch_details = await update_truck_dispatch_db_layer({ sauda_id, dispatch_id, invoice_documents, weight_slip_documents, mandi_documents, supplier_mobile_number });
        /* This code snippet is performing a series of checks on the `updated_dispatch_details` object
       to ensure that it contains the necessary data after updating the truck dispatch details.
       Here's a breakdown of what each condition is checking for: */
        if (!updated_dispatch_details || !updated_dispatch_details?.data || !updated_dispatch_details?.data?.data) {
            throw new ValidationError(error.updated_dispatch_not_saved);
        }
        return updated_dispatch_details?.data?.data;
    } catch (err) {
        error_log(err);
        throw err;
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/dispatch/services/get_truck_dispatch_details_service.js
const error_log = require('../../../../middelware/error_log');
const { get_truck_dispatch_details_db_layer } = require('../../../../data_abstraction_layer/dispatch/get_truck_dispatch_details_db_layer');
const error = require('../../../../config/errors');
const sauda_notification_status_enums = require('../../../../enums/sauda/sauda_notification_event_enums')
const { ValidationError } = require('../../../../utilities/error/custom_error');

/* This code snippet is a JavaScript module that exports an asynchronous function. Here's a breakdown
of what the code does: */
const get_truck_dispatch_details_service = async (dispatch_id, supplier_mobile_number) => {
    try {
        // fetching truck dispatch details by calling b2b API in the abstraction layer
        let dispatch_details = await get_truck_dispatch_details_db_layer({ dispatch_id, supplier_mobile_number });
        /* This `if` statement is checking if the `dispatch_details` object is falsy or if any of its
        nested properties (`data`, `data.data`) are falsy or if the length of keys in
        `dispatch_details.data.data` is 0. If any of these conditions are met, it throws an error
        with the message `error.no_dispatch_details_found`. Essentially, it is checking for the
        presence of valid dispatch details and throwing an error if they are not found. */
        if (!dispatch_details || !dispatch_details?.data || !dispatch_details?.data?.data || Object.keys(dispatch_details?.data?.data).length === 0) {
            throw new ValidationError(error.no_dispatch_details_found);
        }
        if (!dispatch_details?.data?.data?.invoice_documents || !dispatch_details?.data?.data?.weight_slip_documents || dispatch_details?.data?.data?.invoice_documents.length < 1 || dispatch_details?.data?.data?.weight_slip_documents.length < 1) {
            throw new ValidationError(error.invoice_documents_and_weight_slip_documents_not_provided);
        }
        dispatch_details = dispatch_details?.data?.data;

        const documents = {
            invoice_documents: await process_documents(dispatch_details?.invoice_documents || []),
            weight_slip_documents: await process_documents(dispatch_details?.weight_slip_documents || []),
            mandi_documents: (!dispatch_details?.mandi_documents || dispatch_details?.mandi_documents.length < 1) ? [] : await process_documents(dispatch_details?.mandi_documents || [])
        }

        return {
            ...dispatch_details,
            ...documents
        };
    } catch (err) {
        error_log(err);
        throw err;
    }
}

const process_documents = async (documents) => {
    try {
        if (!documents || documents.length < 1) {
            throw new ValidationError(error.no_document_provided);
        }

        const rejectedDocs = [];
        const pendingDocs = [];
        const approvedDocs = [];

        for (const doc of documents) {
            if (doc.status_id === sauda_notification_status_enums.doc_status.document_rejected) {
                rejectedDocs.push(doc);
            } else if (doc.status_id === sauda_notification_status_enums.doc_status.document_approval_pending) {
                pendingDocs.push(doc);
            } else {
                approvedDocs.push(doc);
            }
        }

        // Concatenate the arrays in the order: Rejected -> Pending -> Approved
        const sortedDocs = rejectedDocs.concat(pendingDocs, approvedDocs);

        let folder_status_id = sauda_notification_status_enums.doc_status.document_approved;
        if (rejectedDocs.length > 0) {
            folder_status_id = sauda_notification_status_enums.doc_status.document_rejected;
        } else if (pendingDocs.length > 0) {
            folder_status_id = sauda_notification_status_enums.doc_status.document_approval_pending;
        }
        const folder_status = Object.keys(sauda_notification_status_enums.doc_status).find(key => sauda_notification_status_enums.doc_status[key] === folder_status_id);

        return {
            docs: sortedDocs,
            folder_status_id,
            folder_status
        }
    } catch (err) {
        error_log(err);
        throw err;
    }
}

module.exports = {
    get_truck_dispatch_details_service,
    process_documents
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/dispatch/services/create_truck_dispatch_service.js
const error_log = require('../../../../middelware/error_log');
const { create_truck_dispatch_db_layer } = require('../../../../data_abstraction_layer/dispatch/create_truck_dispatch_db_layer');
const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/* This code snippet is exporting an asynchronous function that takes in several parameters related to
truck dispatch details such as `sauda_id`, `vehicle_number`, `dispatched_weight`, `number_of_bags`,
`invoice_documents`, `weight_slip_documents`, and `mandi_documents`. */
module.exports = async (sauda_id, vehicle_number, dispatched_weight, number_of_bags, invoice_documents, weight_slip_documents, mandi_documents, supplier_mobile_number, truck_driver_mobile_number) => {
    try {
        // saving truck dispatch details by calling b2b API in the abstraction layer
        const saved_dispatch_details = await create_truck_dispatch_db_layer({ sauda_id, vehicle_number, dispatched_weight, number_of_bags, invoice_documents, weight_slip_documents, mandi_documents, supplier_mobile_number, truck_driver_mobile_number });
        if (!saved_dispatch_details || !saved_dispatch_details?.data || !saved_dispatch_details?.data?.data) {
            throw new ValidationError(error.dispatch_not_saved);
        }
        return saved_dispatch_details?.data?.data;
    } catch (err) {
        error_log(err);
        throw err;
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/zoho/swagger/index.js
module.exports = {
    tags: {
      name: "zoho",
    },
    paths: {
      "/repayment": {
        get: {
          tags: ["zoho"],
          summary: "get buyer repayment data",
          description: "",
          operationId: "get_buyer_repayment",
          security: [{ Bearer: ["read"] }],
          parameters: [
            {
                in: "query",
                name: "limit",
                description: "",
                type: "number",
                required: false
            },
            {
                in: "query",
                name: "page",
                description: "",
                type: "number",
                required: false
            },
            {
                in: "query",
                name: "search_param",
                description: "",
                type: "string",
                required: false
            }
        ],
          responses: {
            400: {
              description: "Invalid input",
            },
            200: {
              description: "success",
            },
          },
        }
      },
      "/buyer_details": {
        get: {
          tags: ["zoho"],
          summary: "get buyer repayment os",
          description: "",
          operationId: "get_buyer_repayment_os",
          security: [{ Bearer: ["read"] }],
          parameters: [
            {
                in: "query",
                name: "limit",
                description: "",
                type: "number",
                required: false
            },
            {
                in: "query",
                name: "page",
                description: "",
                type: "number",
                required: false
            }
        ],
          responses: {
            400: {
              description: "Invalid input",
            },
            200: {
              description: "success",
            },
          },
        }
      },
      "/post_buyer": {
        post: {
          tags: ["zoho"],
          summary: "post buyer in zoho",
          description: "",
          operationId: "post_buyer_in_zoho",
          security: [{ Bearer: ["read"] }],
          parameters: [
            {
              "in": "body",
              "name": "body",
              "description": "",
              "required": true,
              "schema": {
                "properties": {
                        "buyer_id": {
                            "type": "number",
                        }
                }
              }
            }
          ],
          responses: {
            400: {
              description: "Invalid input",
            },
            200: {
              description: "success",
            },
          },
        }
      }
    }
  };
  


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/zoho/index.js
const { get_buyers_repayment_controller } = require("./controllers/get_buyers_repayment_controller");
const { get_buyer_zoho_details_controller } = require("./controllers/get_buyer_zoho_details_controller");
const { post_buyer_in_zoho_controller } = require("./controllers/post_buyer_in_zoho_controller");
const validateZohoBuyerPostData = require("./validation/validation");

const router = require("express").Router();

router.get("/repayment",get_buyers_repayment_controller);
router.get("/buyer_details", get_buyer_zoho_details_controller)
router.post("/post_buyer", validateZohoBuyerPostData ,post_buyer_in_zoho_controller)

module.exports = router; 


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/zoho/controllers/post_buyer_in_zoho_controller.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");
const { post_buyer_in_zoho_service } = require("../services/post_buyer_in_zoho_service");

const post_buyer_in_zoho_controller = async (req,res) => {
    try {

        const {buyer_id} = req.body

        const data = await post_buyer_in_zoho_service({buyer_id})

        if(data.status === true)
            return res.status(HTTP_status_codes.ok).send(data)
        
        else
            return res.status(HTTP_status_codes.badRequest).send(data)
        
    } catch (error) {
        error_log(error)
        return res.status(HTTP_status_codes.internalServerError).json({
            status: false,
            message: "Internal Server Error"
          });
    }
}

module.exports = {
    post_buyer_in_zoho_controller
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/zoho/controllers/get_buyers_repayment_controller.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes")
const error_log = require("../../../../middelware/error_log")
const { get_buyers_repayment_service } = require("../services/get_buyers_repayment_service")

const get_buyers_repayment_controller = async (req,res) => {

    try {

        let { limit = 100, page = 1, search_param } = req.query;
        if (limit && parseInt(limit) <= 100)
            limit = parseInt(limit);
        else
            limit = 100;
        if (page)
            page = parseInt(page);

        const data = await get_buyers_repayment_service({limit,page,search_param})

        return res.status(HTTP_status_codes.ok).send(data)
        
    } catch (error) {
        error_log(error)
        return res.status(HTTP_status_codes.internalServerError).json({
            message: "Internal Server Error",
            error: error.message,
          });
    }

}

module.exports = {
    get_buyers_repayment_controller
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/zoho/controllers/get_buyer_zoho_details_controller.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes")
const error_log = require("../../../../middelware/error_log")
const { get_buyer_zoho_details_service } = require("../services/get_buyer_zoho_details_service")

const get_buyer_zoho_details_controller = async (req,res) => {

    try {

        let { limit = 100, page = 1, search_param } = req.query;
        if (limit && parseInt(limit) <= 100)
            limit = parseInt(limit);
        else
            limit = 100;
        if (page)
            page = parseInt(page);

        const data = await get_buyer_zoho_details_service({limit,page,search_param})

        return res.status(HTTP_status_codes.ok).send(data)
        
    } catch (error) {
        error_log(error)
        return res.status(HTTP_status_codes.internalServerError).json({
            message: "Internal Server Error",
            error: error.message,
          });
    }

}

module.exports = {
    get_buyer_zoho_details_controller
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/zoho/services/get_buyers_repayment_service.js
const { Op } = require("sequelize")
const buyer_detail = require("../../../../database/models_v2/buyer/buyer_detail")
const buyer_ledger = require("../../../../database/models_v2/buyer/buyer_ledger")
const zoho_buyer_invoices = require("../../../../database/models_v2/zoho_buyer_invoices")
const error_log = require("../../../../middelware/error_log")
const round_off_to_two_decimal = require("../../utilities/round_off/round_off_to_two_decimal")

const get_buyers_repayment_service = async ({limit,page,search_param}) => {

    try {

        let filter = {
            is_active: 1
        }

        if(search_param){
            const searchString = search_param.toString().trim()
            filter[Op.or] = [
                {
                    legal_name: {
                        [Op.like] : '%' + searchString + '%'
                    }
                }
            ]
      
            if((parseInt(searchString)).toString() !== 'NaN'){
                filter[Op.or].push({
                    mobile_number: {
                        [Op.like] : '%' +parseInt(searchString) + '%'
                    }
                })
              }
          }


        const buyers = await buyer_detail.findAll({
            where: filter,
            attributes: ["id","legal_name","farmart_id","mobile_number"],
            include: [{
                model: buyer_ledger,
                as: 'ledger'
            },{
                model: zoho_buyer_invoices,
                as: 'invoices'
            }],
            limit: limit,
            offset: ((page - 1) * limit) || 0
        })

        let result = []

        buyers.forEach(buyer => {

            const invoices = buyer.dataValues.invoices

            let due_date = new Date(new Date().toLocaleDateString())
            let due_by = 0
            let overdue_amount = 0

            for(let i=0; i<invoices.length; i++){
                if(invoices[i].dataValues && invoices[i].dataValues.balance > 0 && invoices[i].dataValues.due_date < new Date(new Date().toLocaleDateString())){
                    overdue_amount += invoices[i].dataValues.balance
                    if(invoices[i].dataValues.due_date <= due_date){
                        due_date = invoices[i].dataValues.due_date
                        due_by = invoices[i].dataValues.due_days
                    }
                }
            }

            // const overdue_amount = sum_invoice_balance - (buyer.dataValues.ledger && buyer.dataValues.ledger.dataValues && buyer.dataValues.ledger.dataValues.unused_credits ? buyer.dataValues.ledger.dataValues.unused_credits : 0)
            const outstanding_amount = (buyer.dataValues.ledger && buyer.dataValues.ledger.dataValues && buyer.dataValues.ledger.dataValues.outstanding_amount ? buyer.dataValues.ledger.dataValues.outstanding_amount : 0) - (buyer.dataValues.ledger && buyer.dataValues.ledger.dataValues && buyer.dataValues.ledger.dataValues.unused_credits ? buyer.dataValues.ledger.dataValues.unused_credits : 0)
            const credit_limit = buyer.dataValues.ledger && buyer.dataValues.ledger.dataValues && buyer.dataValues.ledger.dataValues.customer_credit_limit ? buyer.dataValues.ledger.dataValues.customer_credit_limit : 0

            result.push({
                legal_name: buyer.dataValues.legal_name,
                farmart_id: buyer.dataValues.farmart_id,
                overdue_amount: round_off_to_two_decimal(overdue_amount),
                outstanding_amount: round_off_to_two_decimal(outstanding_amount),
                overdue_date: overdue_amount > 0 ? due_date.toLocaleDateString() : '',
                credit_limit: credit_limit,
                available_credit_limit: round_off_to_two_decimal(credit_limit - outstanding_amount),
                overdue_by: due_by,
                mobile_no: buyer.dataValues.mobile_number,
                id: buyer.dataValues.id
            })

        })

        return {status: true, data: result}

    } catch (error) {
        error_log(error)
        return {status: false, message: 'Internal Server Error'}
    }

}

module.exports = {
    get_buyers_repayment_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/zoho/services/get_buyer_zoho_details_service.js
const error_log = require("../../../../middelware/error_log")
const buyer_detail = require("../../../../database/models_v2/buyer/buyer_detail")
const buyer_ledger = require("../../../../database/models_v2/buyer/buyer_ledger")
const zoho_buyer_invoices = require("../../../../database/models_v2/zoho_buyer_invoices")
const round_off_to_two_decimal = require("../../utilities/round_off/round_off_to_two_decimal")

const get_buyer_zoho_details_service = async ({limit,page,search_param}) => {

    try {
        const noOfResult = await buyer_detail.count()
        const buyers = await buyer_detail.findAll({
            attributes: ["id","zoho_id","legal_name","farmart_id"],
            include: [{
                model: buyer_ledger,
                as: 'ledger'
            },{
                model: zoho_buyer_invoices,
                as: 'invoices'
            }],
            limit: limit,
            offset: ((page - 1) * limit) || 0
        })

        let result = []

        buyers.forEach(buyer => {

            const invoices = buyer.dataValues.invoices

            let due_date = new Date(new Date().toLocaleDateString())
            let overdue_amount = 0

            for(let i=0; i<invoices.length; i++){
                if(invoices[i].dataValues && invoices[i].dataValues.balance > 0 && invoices[i].dataValues.due_date < new Date(new Date().toLocaleDateString())){
                    overdue_amount += invoices[i].dataValues.balance
                    if(invoices[i].dataValues.due_date <= due_date){
                        due_date = invoices[i].dataValues.due_date
                        due_by = invoices[i].dataValues.due_days
                    }
                }
            }

            //const overdue_amount = sum_invoice_balance - (buyer.dataValues.ledger && buyer.dataValues.ledger.dataValues && buyer.dataValues.ledger.dataValues.unused_credits ? buyer.dataValues.ledger.dataValues.unused_credits : 0)
            const outstanding_amount = (buyer.dataValues.ledger && buyer.dataValues.ledger.dataValues && buyer.dataValues.ledger.dataValues.outstanding_amount ? buyer.dataValues.ledger.dataValues.outstanding_amount : 0) - (buyer.dataValues.ledger && buyer.dataValues.ledger.dataValues && buyer.dataValues.ledger.dataValues.unused_credits ? buyer.dataValues.ledger.dataValues.unused_credits : 0)
            const credit_limit = buyer.dataValues.ledger && buyer.dataValues.ledger.dataValues && buyer.dataValues.ledger.dataValues.customer_credit_limit ? buyer.dataValues.ledger.dataValues.customer_credit_limit : 0

            result.push({
                overdue_amount: round_off_to_two_decimal(overdue_amount),
                outstanding_amount: round_off_to_two_decimal(outstanding_amount),
                credit_limit: credit_limit,
                available_credit_limit: round_off_to_two_decimal(credit_limit - outstanding_amount),
                zoho_id: buyer.dataValues.zoho_id,
                id: buyer.dataValues.id,
                farmart_id: buyer.dataValues.farmart_id,
                name: buyer.dataValues.legal_name,
                balance: buyer.dataValues.ledger && buyer.dataValues.ledger.dataValues && buyer.dataValues.ledger.dataValues.unused_credits ? buyer.dataValues.ledger.dataValues.unused_credits : 0
            })

        })

        return {status: true, data: {result,noOfResult}}
        
    } catch (error) {
        error_log(error)
        return {status: false, message: error.message}
    }

}

module.exports = {
    get_buyer_zoho_details_service
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/zoho/services/post_buyer_in_zoho_service.js
const error_log = require("../../../../middelware/error_log")
const { create_zoho_buyer } = require("../../../../zoho/create_zoho_buyer")

const post_buyer_in_zoho_service = async ({buyer_id}) => {

    try {

        const response = await create_zoho_buyer(buyer_id)

        return response
        
    } catch (error) {
        error_log(error)
        return {status: false, message: error.message}
    }

}

module.exports = {
    post_buyer_in_zoho_service
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/zoho/validation/validation.js
const joi = require("joi");
const httpStatusCode = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const appLogService = require("../../../../common_services/market_linkage/logging/app_log_service");
const { number, string } = require("joi");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");

const schema = joi.object({
  buyer_id: joi.number().positive().required()
});             

//------------------ Validation Middleware ------------------
const validateZohoBuyerPostData = async (req, res, next) => {
  try {
    const result = schema.validate(req.body);
    if (result.error) throw new Error(result.error.message);
    req.body = result.value;
    next();
  } catch (err) { 
    appLogService({type:type.error,err});
    res.status(httpStatusCode.badRequest).json({
      message: err.message ?? "something went wrong.",
    });
  }
};

module.exports = validateZohoBuyerPostData;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/news_feeds/swagger/index.js
module.exports = {
  tags: {
    name: "news_feed",
  },
  paths: {
    "/": {
      get: {
        tags: ["news_feed"],
        summary: "get list of news feed posts for panel",
        description: "",
        operationId: "news_feed_panel",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "state_ids",
            description: "state_ids seperated with commas",
            required: false,
            type: "string",
          },
          {
            in: "query",
            name: "news_feed_catagory_id",
            description: "",
            required: false,
            type: "integer",
            format: "int64",
          },
          {
            in: "query",
            name: "news_feed_sub_catagory_id",
            description: "",
            required: false,
            type: "integer",
            format: "int64",
          },
          {
            in: "query",
            name: "content_type_catagory_id",
            description: "",
            required: false,
            type: "integer",
            format: "int64",
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/comment": {
      post: {
        tags: ["news_feed"],
        summary: "Add comment on specified news_feed post by merchant ",
        description: "Add comment on specified news_feed post by merchant",
        operationId: "add_comment_on_news_feed_v5",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "formData",
            name: "news_id",
            description: "Type = number, default=0",
            required: true,
            type: "integer",
          },
          {
            in: "formData",
            name: "comment",
            description: "Type = number, default=0",
            required: true,
            type: "string",
          },
        ],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
      put: {
        tags: ["news_feed"],
        summary: "enable or disable comment  ",
        description: "enable or disable comment ",
        operationId: "enable_or_disable_comment ",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "formData",
            name: "comment_id",
            description: "",
            required: true,
            type: "integer",
          },
          {
            in: "formData",
            name: "status",
            description: "1 -> live \n 2 -> disable",
            required: true,
            type: "integer",
          },
        ],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/comments": {
      get: {
        tags: ["news_feed"],
        summary: "Fetch specified news_feed's comments for merchant",
        description:
          "Fetches list of comments of specified news_feed post for merchant",
        operationId: "fetch_comments_of_news_feed_v5",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "news_feed_id",
            description: "Type = number, default=0",
            required: true,
            type: "integer",
          },
          {
            in: "query",
            name: "page_number",
            description: "Type = number, default=1",
            required: false,
            type: "integer",
          },
          {
            in: "query",
            name: "limit",
            description: "Type = number, default=20",
            required: false,
            type: "integer",
          },
        ],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/action": {
      post: {
        tags: ["news_feed"],
        summary: "Add action on specified news_feed post by merchant ",
        description: "Add action on specified news_feed post by merchant",
        operationId: "action_on_news_feed_v5",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "formData",
            name: "news_feed_id",
            description: "Type = number",
            required: true,
            type: "integer",
          },
          {
            in: "formData",
            name: "news_feed_action",
            description:
              "like:1 \nshare:2 \nshare_on_whats_app:3 \nshare_on_sms:4 \nclick_on_news_feed:5 \nselect_cat_Agri_products_कृषि_उत्पाद:6 \nselect_cat_New_arrivals_नयी_जानकारियां:7 \nselect_cat_Best_agriculture_practices_कृषि_की_उन्नत_तकनीकें:8 \nselect_cat_Agri_News_कृषि_समाचार:9 \nselect_cat_Fun_Facts_खेती_की_मजेदार_बातें:10 \ndislike:11 \ncomment:12 \nclap:13",
            required: true,
            type: "string",
          },
        ],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/comment_replies": {
      get: {
        tags: ["news_feed"],
        summary: "fetch specific comment replies",
        description: "fetch specific comment replies",
        operationId: "get_comment_replies",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "news_feed_id",
            description: "news feed id",
            required: true,
            type: "number",
          },
          {
            in: "query",
            name: "ref_comment_id",
            description: "ref comment id",
            required: true,
            type: "number",
          },
          {
            in: "query",
            name: "page_no",
            description: "page_no",
            required: false,
            type: "number",
          },
          {
            in: "query",
            name: "limit",
            description: "limit",
            required: false,
            type: "number",
          }
        ],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/base_comments": {
      get: {
        tags: ["news_feed"],
        summary: "fetch all comments ",
        description: "fetch all comments",
        operationId: "get_news_feed_post_comments",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "news_feed_id",
            description: "news feed id",
            required: true,
            type: "number",
          },
          {
            in: "query",
            name: "page_no",
            description: "page_no",
            required: false,
            type: "number",
          },
          {
            in: "query",
            name: "limit",
            description: "limit",
            required: false,
            type: "number",
          }
        ],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    }
  },
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/news_feeds/index.js
const router = require("express").Router();
const authorize = require("../../../middelware/authorized_routes");
const get_panel_news_feed_controller = require("./controllers/get_panel_news_feeds");
const add_comment_on_news_feed_controller = require("./controllers/add_comment_on_news_feed_controller");
const fetch_comments_of_news_feed_controller = require("./controllers/fetch_comments_of_news_feed_controller");
const action_on_news_feed_app_controller = require("./controllers/action_on_news_feed_app_controller");
const { Merchant, Guest_user_b2c_app, digital_marketing, Promotional_Companies_News_Feed } = require("../../../enums/user_profile/user_role");
const user_roles_enum = require("../../../enums/user_profile/user_role")
const fetch_comment_replies_of_news_feed_controller = require("./controllers/fetch_comment_replies_of_news_feed_controller")
const fetch_base_level_comments_of_news_feed_post_controller = require("./controllers/fetch_base_level_comments_of_news_feed_controller");
const enable_disable_comment_controller = require("./controllers/enable_disable_comment_controller");

router.get(
  "/",
  authorize([digital_marketing]),
  get_panel_news_feed_controller
);

router.post("/comment", authorize([Merchant]), add_comment_on_news_feed_controller);
router.get("/comments", authorize([Merchant, digital_marketing, Promotional_Companies_News_Feed]), fetch_comments_of_news_feed_controller);
router.post("/action", authorize([Merchant, Guest_user_b2c_app]), action_on_news_feed_app_controller);
router.get("/comment_replies", authorize([Merchant, Guest_user_b2c_app]), fetch_comment_replies_of_news_feed_controller);
router.get("/base_comments", authorize([Merchant, Guest_user_b2c_app]), fetch_base_level_comments_of_news_feed_post_controller);
router.put("/comment", authorize([digital_marketing]), enable_disable_comment_controller);
module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/news_feeds/controllers/fetch_comment_replies_of_news_feed_controller.js
const error_log = require('../../../../middelware/error_log');
const fetch_comment_replies_of_news_feed_service = require('../services/fetch_comment_replies_of_news_feed_service');
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const user_profile_id = req.user.user_profile_id;
        const ref_comment_id = +req.query.ref_comment_id || null;
        const news_feed_id = +req.query.news_feed_id;
        const limit = +req.query.limit || 20;
        const page_no = +req.query.page_no || 1;

        if (!news_feed_id && !ref_comment_id) {
            throw new ValidationError('news_feed_id and ref_comment_id are mandatory parameters')
        }

        const replies = await fetch_comment_replies_of_news_feed_service(user_profile_id, ref_comment_id, news_feed_id, limit, page_no);

        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'success', replies));

    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/news_feeds/controllers/action_on_news_feed_app_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../enums/global/http_status_codes');

const action_on_news_feed_service = require('../services/action_on_news_feed_service');
const user_role = require('../../../../enums/user_profile/user_role');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const user_profile_id = req.user.user_profile_id;
        const news_feed_action = +req.body.news_feed_action || 0;
        const news_feed_post_id = +req.body.news_feed_id || 0;
        const user_role_id = +req.user.user_role_id;

        if (news_feed_action > 0) {
            let merchant_detail_id = null; let guest_user_b2c_apps_id = null;
            if (user_role_id === user_role.Guest_user_b2c_app) { guest_user_b2c_apps_id = user_profile_id; } else if (user_role_id === user_role.Merchant) { merchant_detail_id = user_profile_id } else { throw new ValidationError('wrong user role id'); }
            const result = await action_on_news_feed_service({ merchant_detail_id, guest_user_b2c_apps_id, news_feed_post_id, news_feed_action });
            return res.status(http_status_code_enum.ok).json(create_api_response(true, 'news_feed_list', result));
        } else {
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false, 'provide news_feed_id and news_feed_action'));
        }
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/news_feeds/controllers/add_comment_on_news_feed_controller.js
const error_log=require('../../../../middelware/error_log');
const create_api_response=require('../../../../common_services/api_responses/create_api_response');

const add_comment_in_news_feed_v5_service=require('../../../../entities/news_feed/service/v5/add_comment_in_news_feed_v5');
module.exports = async (req, res) => {
  try {
    let user_profile_id = req.user.user_profile_id;
    let user_news_comment = req.body.comment;
    let news_id = +req.body.news_id;
    if (user_news_comment && news_id) {
     let added_comment_in_news_feed_v5= await add_comment_in_news_feed_v5_service(user_profile_id,news_id,user_news_comment);
     return res.json(create_api_response(true,'Comment is added.',added_comment_in_news_feed_v5.comment));
    } else {
     return res.json(create_api_response(false,"Comment is not provided"));
    }
  } catch (ex) {
    error_log(ex);
    return res.json(create_api_response(false,ex.message));
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/news_feeds/controllers/fetch_comments_of_news_feed_controller.js
const error_log = require("../../../../middelware/error_log");
const create_api_response=require('../../../../common_services/api_responses/create_api_response');

const fetch_comment_of_news_feed_v5_service=require('../../../../entities/news_feed/service/v5/fetch_comment_of_news_feed_v5');

module.exports = async (req, res) => {
  try {
    let user_profile_id = req.user.user_profile_id;
    let news_feed_id = +req.query.news_feed_id || 0;
    let page_number = +req.query.page_number || 1;
    let limit = +req.query.limit || 20;
    let result=await fetch_comment_of_news_feed_v5_service(user_profile_id,news_feed_id,page_number,limit);
    return res.json(create_api_response(true,'Comments fetched',result));
   
  } catch (ex) {
    error_log(ex);
    return res.json(create_api_response(false,ex.message));
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/news_feeds/controllers/get_panel_news_feeds.js
const fetch_all_news_feed_post_service = require("../services/get_panel_news_feeds");
const http_status_code_enum = require("../../../../enums/global/http_status_codes");

module.exports = async (req, res) => {
  try {
    let limit = +req.body.limit || 10;
    let page_no = +req.body.page_no || 1;
    let state_list = req.body.state_ids || [];
    /**
     * add news_feed_catagory_id, news_feed_sub_catagory_id and content_type_catagory_id as optional filter params
     */
    let result = await fetch_all_news_feed_post_service(
      limit,
      page_no,
      state_list
    );
    return res.status(http_status_code_enum.ok).json({
      status: true,
      message: "success",
      data: result,
    });
  } catch (err) {
    return res.status(http_status_code_enum.bad_request).json({
      status: false,
      message: err.message,
    });
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/news_feeds/controllers/fetch_base_level_comments_of_news_feed_controller.js
// API to fetch level 1 comments of a news feed post

const error_log = require('../../../../middelware/error_log');
const fetch_base_level_comments_of_news_feed_post = require('../services/fetch_base_level_comments_of_news_feed_service');
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const user_profile_id = req.user.user_profile_id;
        const news_feed_id = +req.query.news_feed_id; // news_feed_post_id
        const limit = +req.query.limit || 20;
        const page_no = +req.query.page_no || 1;

        if (!news_feed_id) {
            throw new ValidationError('news_feed_id is a mandatory parameter')
        }

        const base_comments = await fetch_base_level_comments_of_news_feed_post(user_profile_id, news_feed_id, limit, page_no);

        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'success', base_comments));

    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/news_feeds/controllers/enable_disable_comment_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const enable_disable_comment_service = require('../services/enable_disable_comment_service');
module.exports = async (req, res) => {
    try {
        const comment_id = +req.body.comment_id || null;
        const status = +req.body.status;
        const user_profile_id = +req.user.user_profile_id;
        if (!comment_id || !status) {
            throw new ValidationError('comment_id and status are mandatory');
        }
        await enable_disable_comment_service(comment_id, status, user_profile_id);
        return res.json(create_api_response(true, 'successful'));
    } catch (ex) {
        error_log(ex);
        return res.json(create_api_response(false, ex.message));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/news_feeds/services/enable_disable_comment_service.js
const error_log = require('../../../../middelware/error_log');
const { enable_disable_comment } = require('../../../../data_abstraction_layer/news_feed/news_feed_comment');
const save_content_moderation_logs_service = require('../../../../common_services/content_moderation/save_content_moderation_logs_service');

const enable_disable_comment_service =async (comment_id,status,user_profile_id) => {
        try {
            const updated_comment_status = enable_disable_comment({comment_id,status});
            await save_content_moderation_logs_service({comment_id,news_feed_comment_status:status,user_profile_id});
            return updated_comment_status;
        }
        catch (ex) {
            error_log(ex);
            return(null);
        }
}
module.exports = enable_disable_comment_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/news_feeds/services/fetch_news_feed_content_service.js
const error_log = require("../../../../middelware/error_log");
const news_feed_content_model = require("../../../../database/models_v2/news_feed/news_feed_content");
const news_feed_content_media_maps_model = require("../../../../database/models_v2/news_feed/news_feed_content_media_map");

const fetch_news_feed_content = (news_feed_post_id, language_id = 0) => {
  return new Promise(async (resolve, reject) => {
    try {
      let content_to_be_searched = {
        news_feed_post_id: news_feed_post_id,
        is_active: true,
      };
      if (language_id != 0) {
        content_to_be_searched.language_id = language_id;
      }
      let news_feed_contents = await news_feed_content_model.findAll({
        where: content_to_be_searched,
      });
      let contents = {};
      for (let news_feed_content of news_feed_contents) {
        let news_feed_content_media_map =
          await news_feed_content_media_maps_model.findOne({
            where: {
              news_feed_content_id: news_feed_content.id,
              is_active: 1,
            },
          });

        let lang_id = news_feed_content.language_id;
        news_feed_content.setDataValue(
          "media_list",
          news_feed_content_media_map
        );
        contents[lang_id] = news_feed_content;
      }
      return resolve(contents);
    } catch (ex) {
      error_log(ex);
      reject({ message: ex.message });
    }
  });
};
module.exports = fetch_news_feed_content;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/news_feeds/services/action_on_news_feed_service.js
const error_log = require('../../../../middelware/error_log');
const news_feed_log_model = require('../../../../database/models/news_feed_log');
const news_feed_action_enum = require('../../../../enums/news_feed/news_feed_actions');
const send_notification_for_news_feed_action = require("../../../v3/news_feed/services/send_notification_for_news_feed_action");
const MAX_CLAP_COUNT = 50;
const get_news_feed_log = require('../../../../data_abstraction_layer/news_feed/get_news_feed_log');
const action_on_news_feed = ({ merchant_detail_id = null, guest_user_b2c_apps_id = null, news_feed_post_id, news_feed_action }) => {
    return new Promise(async (resolve, reject) => {
        try {
            // switch for action
            switch (news_feed_action) {
                case news_feed_action_enum.like:
                    // not already like
                    let already_liked = await get_news_feed_log(merchant_detail_id, news_feed_post_id, news_feed_action_enum.like, true)

                    if (!already_liked) {
                        send_notification_for_news_feed_action(news_feed_post_id, merchant_detail_id, news_feed_action)
                            .catch(err => {
                                error_log(err);
                            })
                        let news_feed_log = {
                            action: news_feed_action,
                            is_active: true,
                            news_feed_post_id: news_feed_post_id,
                            merchant_detail_id: merchant_detail_id
                        }
                        await news_feed_log_model.build(news_feed_log).save();
                        //create a db_layer for saving news_feed_log on database.
                        resolve({ message: 'success' });
                    }
                    else {
                        already_liked.is_active = false;
                        await already_liked.save();
                        resolve({ message: 'success' });
                    }
                    break;
                case news_feed_action_enum.click_on_news_feed:
                    let view_exist = await news_feed_log_model.findOrCreate({
                        where: {
                            is_active: true,
                            news_feed_post_id,
                            merchant_detail_id,
                            action: news_feed_action,
                            guest_user_b2c_apps_id
                        }
                    });
                    return resolve({ message: 'success' });
                case news_feed_action_enum.share:
                case news_feed_action_enum.share_on_sms:
                case news_feed_action_enum.share_on_whats_app:
                    let news_feed_share_log = {
                        action: news_feed_action,
                        is_active: true,
                        news_feed_post_id,
                        merchant_detail_id,
                        guest_user_b2c_apps_id
                    }
                    await news_feed_log_model.build(news_feed_share_log).save();
                    return resolve({ message: 'success' });
                default:
                    return resolve({ message: 'success' });
                    break;
                case news_feed_action_enum.clap:
                    let clap_count = await news_feed_log_model.count({
                        where: {
                            merchant_detail_id,
                            news_feed_post_id: news_feed_post_id,
                            action: news_feed_action_enum.clap,
                            is_active: true,
                            guest_user_b2c_apps_id
                        }
                    })
                    if (clap_count < MAX_CLAP_COUNT) {
                        await news_feed_log_model.build({
                            action: news_feed_action_enum.clap,
                            is_active: true,
                            news_feed_post_id,
                            merchant_detail_id,
                            guest_user_b2c_apps_id
                        }).save();
                    }
                    news_feed_log_model.findOrCreate({
                        where: {
                            action: news_feed_action_enum.like,
                            is_active: true,
                            news_feed_post_id: news_feed_post_id,
                            merchant_detail_id: merchant_detail_id
                        }
                    }).catch(err => error_log(err));
                    return resolve({ message: 'success' });
            }
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

module.exports = action_on_news_feed;




File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/news_feeds/services/fetch_base_level_comments_of_news_feed_service.js
const error_log = require("../../../../middelware/error_log");
const fetch_news_feed_comments_by_news_feed_post_id = require("../../../../data_abstraction_layer/news_feed/news_feed_comment").fetch_news_feed_comments_by_news_feed_post_id;
const get_merchant_detail_by_id = require("../../../../data_abstraction_layer/merchant/merchant_details").get_merchant_detail_by_id;
const get_count_of_replies_on_comment = require('../../../../data_abstraction_layer/news_feed/news_feed_comment').get_count_of_replies_on_comment;

const fetch_base_level_comments_of_news_feed_service = async(user_profile_id,news_feed_id,limit,page_no) => {
    try{
    let attributes = ["merchant_detail_id","id","comment","createdAt"];
    const result = await fetch_news_feed_comments_by_news_feed_post_id(news_feed_id,limit,page_no,attributes);
    
    let comments = await Promise.all(result.rows.map(async (comment_element, index) => {
        const merchant_detail_id = comment_element.merchant_detail_id;
        const merchant_detail = await get_merchant_detail_by_id({merchant_detail_id});
        const reply_count = await get_count_of_replies_on_comment(comment_element.id);
        if(merchant_detail)
        return {
         comment_id : comment_element.id,
         comment: comment_element.comment,
         merchant_name: merchant_detail.name,
         merchant_profile_img: merchant_detail.profile_pic_url,
         merchant_detail_id: merchant_detail.id,
         created_at: comment_element.createdAt,
         reply_count: reply_count,  //no. of replies on a base level comment
         pinned_by_farmart: false
        }
      }));
      // handling comments count
      let initial_count=comments.length;
      comments = comments.filter(comment => comment !== undefined);
      let final_count=comments.length;
      final_count=initial_count-final_count;
    let obj = {
        comments: comments,
        count: result.count-final_count
    }

    return obj;

    }catch(err){
        error_log(err);
        throw err;
    }
}

module.exports = fetch_base_level_comments_of_news_feed_service;




File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/news_feeds/services/get_panel_news_feeds.js
const error_log = require("../../../../middelware/error_log");
const news_feed_post_model = require("../../../../database/models_v2/news_feed/news_feeds_post");
const fetch_news_feed_content_service = require("./fetch_news_feed_content_service");
const news_feed_state_district_map_model = require("../../../../database/models_v2/news_feed/news_feed_state_district_map");
const Op = require("sequelize").Op;
const fetch_all_news_feed_post = (limit, page_no, state_list) => {
  return new Promise(async (resolve, reject) => {
    try {
      let news_feed_ids_filtered = [];
      if (state_list.length > 0) {
        let state_district_map_post_ids =
          await news_feed_state_district_map_model.findAll({
            where: {
              is_active: true,
              state_id: {
                [Op.in]: state_list,
              },
            },
            attributes: ["news_feed_post_id"],
          });
        news_feed_ids_filtered = state_district_map_post_ids.map(
          (state_district_map_post_id) =>
            state_district_map_post_id.news_feed_post_id
        );
      }
      let offset = (page_no - 1) * limit;
      let news_feed_post_fetch_condition = {
        is_active: true,
      };
      if (news_feed_ids_filtered.length > 0) {
        news_feed_post_fetch_condition.in = {
          [Op.in]: news_feed_ids,
        };
      }
      let news_feed_posts = await news_feed_post_model.findAll({
        where: news_feed_post_fetch_condition,
        order: [["created_at", "DESC"]],
        limit: limit,
        offset: offset,
      });
      for (let news_feed_post of news_feed_posts) {
        let news_feeds_content = await fetch_news_feed_content_service(
          news_feed_post.id
        );
        let state_district_ids = await fetch_state(news_feed_post.id);
        news_feed_post.setDataValue("content", news_feeds_content);
        news_feed_post.setDataValue("state_id_district_id", state_district_ids);
      }
      return resolve({ news_feed_posts });
    } catch (err) {
      error_log(err);
      return reject({ message: err.message });
    }
  });
};

async function fetch_state(news_feed_post_id) {
  let state_district_id = await news_feed_state_district_map_model.findAll({
    where: {
      is_active: true,
      news_feed_post_id,
    },
    attributes: ["state_id", "district_id"],
  });
  return state_district_id;
}
module.exports = fetch_all_news_feed_post;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/news_feeds/services/fetch_comment_replies_of_news_feed_service.js
const error_log = require("../../../../middelware/error_log");
const fetch_news_feed_comments_by_news_feed_post_id = require("../../../../data_abstraction_layer/news_feed/news_feed_comment").fetch_news_feed_comments_by_news_feed_post_id;
const get_merchant_detail_by_id = require("../../../../data_abstraction_layer/merchant/merchant_details").get_merchant_detail_by_id;
const get_tagged_merchant_detail_by_id = require("../../../../data_abstraction_layer/merchant/merchant_details").get_tagged_merchant_detail_by_id;

const fetch_comment_replies_of_news_feed_service = async(user_profile_id,ref_comment_id,news_feed_id,limit,page_no) => {
   try{
    let tagged_merchant_detail;
    let attributes = ["merchant_detail_id","id","comment","createdAt","tagged_merchant_id"];
    const result = await fetch_news_feed_comments_by_news_feed_post_id(news_feed_id,limit,page_no,attributes,ref_comment_id);

    let replies = await Promise.all(result.rows.map(async (reply_element, index) => {
        const merchant_detail_id = reply_element.merchant_detail_id;  //merchant who added this particular comment or element.
        const merchant_detail = await get_merchant_detail_by_id({merchant_detail_id});
        const tagged_merchant_id = reply_element?.tagged_merchant_id || null;  //merchant who got tagged in this particular comment or reply.
        if(tagged_merchant_id){
            tagged_merchant_detail = await get_tagged_merchant_detail_by_id(tagged_merchant_id);
        }
        let tagged_merchant_name = tagged_merchant_detail?.name || null;
        return {
            comment_id : reply_element.id,
            comment: reply_element.comment,
            merchant_name: merchant_detail.name,
            merchant_profile_img: merchant_detail.profile_pic_url,
            merchant_detail_id: merchant_detail.id,
            created_at: reply_element.createdAt,
            tagged_merchant_name: tagged_merchant_name
           }
      }));

    let obj = {
        replies: replies,
        count: result.count
    }

    return obj;

    }catch(err){
        error_log(err);
    }
}

module.exports = fetch_comment_replies_of_news_feed_service;




File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/rake/swagger/index.js
module.exports = {
    tags: {
        name: "rake",
      },
    paths: {
        "/rake_access": {
            post: {
                tags: ["rake"],
                summary: "saving the rake access logs",
                description: "saving the rake access logs",
                operationId: "post_rake_access",
                security: [{ Bearer: ["read"] }],
                parameters: [
                  {
                    in: "formData",
                    name: "master_state_id",
                    description: "master_state_id",
                    type: "number",
                    required: true
                  },
                  {
                    in: "formData",
                    name: "master_district_id",
                    description: "master_district_id",
                    type: "number",
                    required: true
                  }
                ],
                responses: {
                  400: {
                    description: "Invalid input",
                  },
                  200: {
                    description: "success",
                  }
                }
            }
        }
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/rake/index.js
const rake_history_controller = require("./controllers/history");
const router = require("express").Router();
const authorize = require("../../../middelware/authorized_routes");
const user_roles_enum = require("../../../entities/metadata/enums/user_roles");
const post_rake_access_logs_controller = require("./controllers/post_rake_access_logs_controller");

router.get("/history",authorize([user_roles_enum.Merchant]),rake_history_controller);
router.post("/rake_access",authorize([user_roles_enum.Merchant]),post_rake_access_logs_controller);

module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/rake/controllers/history.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const { fetch_rake_history } = require('../../../../entities_v2/rake/service/get_rake_history')
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const feature_usage_counter_service = require("../../../../common_services/features/feature_usage_counter_service");
const features_enum = require("../../../../enums/features/features_enum");
const post_rake_access_logs_service = require("../services/post_rake_access_logs_service");
const get_district_by_id = require("../../../../data_abstraction_layer/location/get_district_by_id");

module.exports = async (req, res) => {
    try {
        const state_id = +req.query.state_id;
        const district_id = +req.query.district_id;
        const page_no = +req.query.page_no || 1;
        const limit = +req.query.limit || 20;
        const merchant_detail_id = req.user.user_profile_id;

        if (!state_id || !district_id) {
            let error_message = "state_id and district_id are mandatory parameter";
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false, error_message, null));
        }
        let rake_history_data = await fetch_rake_history(state_id, district_id, page_no, limit, merchant_detail_id)
        // calling feature_usage_counter service
        feature_usage_counter_service({feature_id:features_enum.rake,merchant_detail_id})
        .catch(err => {
            error_log(err);
          });
        rake_logging(state_id, district_id, merchant_detail_id)
            .catch(err => {
                error_log(err);
            })
        return res.status(http_status_code_enum.ok).json(create_api_response(true, "success", {
            "rake_history": rake_history_data
        }))
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({
            status: false,
            message: err.message
        });
    }
}

const rake_logging = async (state_id, district_id, merchant_detail_id) => {
    try {
        const district = await get_district_by_id(state_id, district_id);
        if (district) {
            await post_rake_access_logs_service(district.master_state_id, district.master_district_id, merchant_detail_id);
        }
    }
    catch (err) {
        error_log(err);
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/rake/controllers/post_rake_access_logs_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const post_rake_access_logs_service = require("../services/post_rake_access_logs_service");

module.exports = async (req, res) => {
    try {
        const state_id = req.body.master_state_id;
        const district_id = req.body.master_district_id;
        const merchant_detail_id = req.user.user_profile_id;

        if (!state_id || !district_id) {
            let error_message = "state_id and district_id are mandatory parameter";
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false, error_message, null));
        }
        await post_rake_access_logs_service(state_id, district_id, merchant_detail_id);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, "success", {
        }));
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({
            status: false,
            message: err.message
        });
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/rake/services/post_rake_access_logs_service.js
const error_log = require("../../../../middelware/error_log");
const rake_access_logs_model = require("../../../../database/models_v2/rake/rake_access_logs");
const feature_usage_counter_service=require('../../../../common_services/features/feature_usage_counter_service');
const features_enum=require('../../../../enums/features/features_enum')
const post_rake_access_logs = async(state_id, district_id, merchant_detail_id) => {
    try{
        let rake_log = {
            is_active : 1,
            master_state_id : state_id,
            master_district_id : district_id,
            merchant_detail_id : merchant_detail_id
        }
        let rake_access_log = await rake_access_logs_model.create(rake_log);
        // calling feature_usage_counter service
        feature_usage_counter_service({feature_id:features_enum.rake,merchant_detail_id})
        .catch(err => {
            error_log(err);
          });
        return rake_access_log;
    }catch(err){
        error_log(err);
    }   
}

module.exports = post_rake_access_logs;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop/swagger/index.js
module.exports = {
  tags: {
    name: "crop",
  },
  paths: {
    "/": {
      get: {
        tags: ["crop"],
        summary: "get detail of all crops",
        description: "",
        operationId: "get_all_crops",
        security: [{ Bearer: ["read"] }],
        parameters: [],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          }
        }
      },
      post: {
        tags: ["crop"],
        summary: "create new crop",
        description: "",
        operationId: "create_crop",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "schema": {
              "type": "object",
              "required": ["name", "varietyData", "qcData", "samplingData", "docData"],
              "properties": {
                "name": {
                  "type": "string"
                },
                "varietyData": {
                  "type": "object",
                  "required": ["name", "qualityCheckGuideURL"],
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "qualityCheckGuideURL": {
                      "type": "string"
                    }
                  }
                },
                "qcData": {
                  "type": "array",
                  "items": {
                    "required": ["name", "value", "condition", "imageRequired"],
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      },
                      "condition": {
                        "type": "string"
                      },
                      "imageRequired": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                "samplingData": {
                  "type": "array",
                  "items": {
                    "required": ["weightFrom", "weightTo", "minimumImages", "sampleCount"],
                    "properties": {
                      "weightFrom": {
                        "type": "number"
                      },
                      "weightTo": {
                        "type": "number"
                      },
                      "minimumImages": {
                        "type": "number"
                      },
                      "sampleCount": {
                        "type": "number"
                      }
                    }
                  }
                },
                "docData": {
                  "type": "array",
                  "items": {
                    "required": ["name", "mendatory", "imageRequired"],
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "mendatory": {
                        "type": "boolean"
                      },
                      "imageRequired": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          }
        }
      }
    },
    "/qc_check_list":{
      get: {
        tags: ["crop"],
        summary: "get all qc",
        description: "",
        operationId: "get_all_qc",
        security: [{ Bearer: ["read"] }],
        parameters: [],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          }
        }
      },
    },
    "/doc_at_dispatch":{
      get: {
        tags: ["crop"],
        summary: "get all doc_at_dispatch",
        description: "",
        operationId: "get_all_doc_at_dispatch",
        security: [{ Bearer: ["read"] }],
        parameters: [],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          }
        }
      },
    },
    "/fetch_crop_list_ml":{
      get: {
        tags: ["crop"],
        summary: "get crops list from ml",
        description: "",
        operationId: "get_crops_list_from_ml",
        security: [{ Bearer: ["read"] }],
        parameters: [
        {
          in: "query",
          name: "page_no",
          description: "page_no",
          required: false,
          type: "number",
        },
        {
          in: "query",
          name: "limit",
          description: "limit",
          required: false,
          type: "number",
        },
        {
          in: "query",
          name: "search_param",
          description: "search_param",
          required: false,
          type: "string",
        }
      ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          }
        }
      },
    },
    "/fetch_crop_variety_ml":{
      get: {
        tags: ["crop"],
        summary: "get crops variety list from ml",
        description: "",
        operationId: "get_crops_variety_list_from_ml",
        security: [{ Bearer: ["read"] }],
        parameters: [
        {
          in: "query",
          name: "page_no",
          description: "page_no",
          required: false,
          type: "number",
        },
        {
          in: "query",
          name: "limit",
          description: "limit",
          required: false,
          type: "number",
        },
        {
          in: "query",
          name: "crop_id",
          description: "crop_id",
          required: true,
          type: "number",
        },
        {
          in: "query",
          name: "search_param",
          description: "search_param",
          required: false,
          type: "string",
        }
      ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          }
        }
      },
    }
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop/index.js
const router = require('express').Router();
const authorize = require('../../../middelware/authorized_routes');
const user_roles_enum = require('../../../enums/user_profile/user_role');

const create_crop_controller = require('./controllers/create_crop_controller');
const get_all_crops_controller = require('./controllers/get_all_crops_controller');
const get_all_qc_controller = require('./controllers/get_all_qc_controller');
const get_all_dispatch_doc_controller = require('./controllers/get_all_dispatch_doc_controller');
const fetch_crop_list_from_ml_controller = require('./controllers/fetch_crop_list_from_ml_controller');
const fetch_crop_variety_list_from_ml_controller = require('./controllers/fetch_crop_variety_list_from_ml_controller');

router.get('/', get_all_crops_controller);
router.post('/', create_crop_controller);
router.get('/qc_check_list', get_all_qc_controller);
router.get('/doc_at_dispatch', get_all_dispatch_doc_controller);
router.get('/fetch_crop_list_ml', authorize([user_roles_enum.Merchant, user_roles_enum.Guest_user_b2c_app]), fetch_crop_list_from_ml_controller);
router.get('/fetch_crop_variety_ml', authorize([user_roles_enum.Merchant, user_roles_enum.Guest_user_b2c_app]), fetch_crop_variety_list_from_ml_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop/_services/get_all_dispatch_doc_service.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const cropVarietiesDispatchDocumentModel = require("../../../../database/models_v2/procurement_order/procurement_dispatch_document");

const error_log = require("../../../../middelware/error_log");

module.exports = async () => {
  try {
    const dispatch_docs = await cropVarietiesDispatchDocumentModel.findAll({
      where: { is_active: 1 },
    });

    return {
      status: HTTP_status_codes.ok,
      data: {
        dispatchDocData: dispatch_docs.map((qc) => {
          return {
            id: qc.id,
            name: qc.name,
          };
        }),
      },
    };
  } catch (err) {
    error_log(err);
    return {
      status: HTTP_status_codes.internalServerError,
      data: {
        message: "Error while getting target price",
        error: err.message,
      },
    };
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop/_services/get_all_crops_service.js
const cropModel = require("../../../../database/models_v2/crop/crop_detail");
const cropVarietiesModel = require("../../../../database/models_v2/crop/crop_varieties_detail");
const cropVarietiesQcParamsMapsModel = require("../../../../database/models_v2/procurement_order/crop_variety_qc_param_maps");
const cropVarietiesQcParamsTypesModel = require("../../../../database/models_v2/procurement_order/qc_param_types");
const cropVarietiesSamplingConditionModel = require("../../../../database/models_v2/procurement_order/crop_variety_sampling_condition");
const cropVarietiesDispatchDocumentMapModel = require("../../../../database/models_v2/procurement_order/crop_variety_procurement_document_dispatch_map");
const cropVarietiesDispatchDocumentModel = require("../../../../database/models_v2/procurement_order/procurement_dispatch_document");

const cropQcConditionEnums = require("../../../../enums/crop/qc_condition");

const error_log = require("../../../../middelware/error_log");

const get_all_crops_service = async (cropId) => {
  try {
    const filter = {
      is_active: 1,
    };

    if (cropId) {
      filter.id = cropId;
    }

    const cropResult = await cropModel.findAll({
      where: filter,
      include: {
        model: cropVarietiesModel,
        where: {
          is_active: 1,
        },
        require: true,
        include: [
          {
            model: cropVarietiesQcParamsMapsModel,
            where: {
              is_active: 1,
            },
            require: true,
            include: {
              model: cropVarietiesQcParamsTypesModel,
              where: {
                is_active: 1,
              },
              require: true,
            },
          },
          {
            model: cropVarietiesSamplingConditionModel,
            where: {
              is_active: 1,
            },
            require: true,
          },
          {
            model: cropVarietiesDispatchDocumentMapModel,
            where: {
              is_active: 1,
            },
            require: true,
            include: {
              model: cropVarietiesDispatchDocumentModel,
              require: true,
              where: { is_active: 1 },
            },
          },
        ],
      },
    });

    const cropResultOldServiceFormat =
      createResponseAsOldServiceFormat(cropResult);

    return cropResultOldServiceFormat;
  } catch (err) {
    error_log(err);
    return { message: err.message };
  }
};

module.exports = {
  get_all_crops_service,
};

function createResponseAsOldServiceFormat(cropResult) {
  let cropResultOldServiceFormat = [];
  cropResult.forEach((crop) => {
    let cropOldServiceFormat = {
      _id: crop.id,
      name: crop.name,
      createdAt: crop.createdAt,
      updatedAt: crop.updatedAt,
      __v: 0,
      varieties: [],
      isActive: true,
    };

    crop.crop_varieties_details.forEach((variety) => {
      let varietyOldServiceFormat = {
        _id: variety.id,
        isActive: true,
        name: variety.name,
        qualityCheckGuideURL: variety.quality_check_guide_url,
        crop: crop.id,
        qcCheckListParameter: [],
        samplingCondition: [],
        documentAtDispatch: [],
        createdAt: variety.createdAt,
        updatedAt: variety.updatedAt,
      };

      variety.crop_variety_qc_param_maps.forEach((qc) => {
        let qcOldServiceFormat = {
          isActive: true,
          qcTypeId: qc.qc_param_type.id,
          _id: qc.id,
          name: qc.qc_param_type.name,
          value: qc.threshold_value,
          condition: getCropQcConditionValueFromEnum(
            cropQcConditionEnums,
            qc.condition
          ),
          imageRequired: qc.image_required ? true : false,
        };
        varietyOldServiceFormat.qcCheckListParameter.push(qcOldServiceFormat);
      });

      variety.crop_variety_sampling_conditions.forEach((sampling) => {
        let samplingOldServiceFormat = {
          isActive: true,
          weightFrom: sampling.weight_from,
          weightTo: sampling.weight_to,
          minimumImages: sampling.minimum_images,
          sampleCount: sampling.sampling_count,
          _id: sampling.id,
        };
        varietyOldServiceFormat.samplingCondition.push(
          samplingOldServiceFormat
        );
      });

      variety.crop_variety_procurement_dispatch_document_maps.forEach((doc) => {
        let docOldServiceFormat = {
          isActive: true,
          dispatchDocTypeId: doc.procurement_dispatch_document.id,
          name: doc.procurement_dispatch_document.name,
          mendatory: true,
          imageRequired: true,
          _id: doc.id,
        };
        varietyOldServiceFormat.documentAtDispatch.push(docOldServiceFormat);
      });
      cropOldServiceFormat.varieties.push(varietyOldServiceFormat);
    });
    cropResultOldServiceFormat.push(cropOldServiceFormat);
  });

  return cropResultOldServiceFormat;
}

function getCropQcConditionValueFromEnum(enums, condition) {
  for (let key in enums) {
    if (enums[key] === condition) {
      return key;
    }
  }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop/_services/get_all_qc_service.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");

const cropVarietiesQcParamsMapsModel = require("../../../../database/models_v2/procurement_order/crop_variety_qc_param_maps");
const cropVarietiesQcParamsTypesModel = require("../../../../database/models_v2/procurement_order/qc_param_types");

const error_log = require("../../../../middelware/error_log");

module.exports = async () => {
  try {
    const cropVarietiesQcParamsTypesModelData =
      await cropVarietiesQcParamsTypesModel.findAll({
        where: { is_active: 1 },
      });

    return {
      status: HTTP_status_codes.ok,
      data: {
        qcChecklistData: cropVarietiesQcParamsTypesModelData.map((qc) => {
          return {
            id: qc.id,
            name: qc.name,
          };
        }),
      },
    };
  } catch (err) {
    error_log(err);
    return {
      status: HTTP_status_codes.internalServerError,
      data: {
        message: "Error while getting target price",
        error: err.message,
      },
    };
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop/_services/create_crop_service.js
const crop_detail_model = require("../../../../database/models_v2/crop/crop_detail");

const cropModel = require("../../../../database/mongoose/market_linkage_db/crop.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");

const create_crop_service = async (crop_name, app_tile_url = null, app_cover_img_url = null) => {
    try {
        const crop_exist = await crop_detail_model.findOne({
            where: {
                is_active: 1,
                name: crop_name
            }
        })
        if (crop_exist) {
            throw new Error("crop already exist");
        }
        const crop_detail = await crop_detail_model.create({
            is_active: 1,
            name: crop_name,
            app_tile_url,
            app_cover_img_url
        });
        return crop_detail;
    } catch (err) {
        error_log(err);
        throw err;
    }
};

module.exports = {
    create_crop_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop/_services/add_all_crop_details_service.js
const error_log = require("../../../../middelware/error_log");
const { create_crop_service } = require("./create_crop_service");
const { create_variety_service } = require("../../variety/_services/create_variety_service");
const { create_qc_checklist_service } = require("../../variety/_services/create_qc_checklist_service");
const { create_sampling_service } = require("../../variety/_services/create_sampling_service");
const { create_dispatch_doc_service } = require("../../variety/_services/create_dispatch_doc_service");
module.exports = async (crop_name, crop_variety_data, crop_variety_qc_data, crop_variety_sampling_data, crop_doc_data, crop_detail_id) => {
    try {
        let crop_detail;
        if (crop_name) {
            crop_name = crop_name.toLowerCase().trim();
        }
        if (crop_variety_data && crop_variety_data.name) {
            crop_variety_data.name = crop_variety_data.name.toLowerCase().trim();
        }
        if (!crop_detail_id) {
            crop_detail = await create_crop_service(crop_name, null, null, null);
            crop_variety_data["crop_id"] = crop_detail.id;
        }
        if (!crop_variety_data["crop_id"])
            crop_variety_data["crop_id"] = crop_detail_id;

        const crop_variety = await create_variety_service(crop_variety_data);

        if (!crop_variety) {
            throw new Error("crop_variety missing");
        }

        const qc_checklist = await create_qc_checklist_service(crop_variety_qc_data, crop_variety.id);

        if (!qc_checklist)
            throw new Error("unable to create qc_checklist");

        const crop_variety_sampling = await create_sampling_service(crop_variety_sampling_data, crop_variety.id);

        if (!crop_variety_sampling)
            throw new Error("unable to create crop variety sampling conditions");

        const crop_variety_dispatch_doc = await create_dispatch_doc_service(crop_variety.id, crop_doc_data);

        if (!crop_variety_dispatch_doc)
            throw new Error("unable to create crop_variety_dispatch_doc");
        return crop_detail || crop_variety
    }
    catch (err) {
        error_log(err);
        throw err;
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop/controllers/create_crop_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
// const { delete_record_service } = require('../../../../common_services/delete_data_services/delete_record_service');
// const { create_dispatch_doc_service } = require('../../variety/services/create_dispatch_doc_service');
const { get_all_crops_service } = require('../_services/get_all_crops_service');

const add_all_crop_details_service = require('../_services/add_all_crop_details_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { name, varietyData: variety_data, qcData: qc_data, samplingData: sampling_data, docData: doc_data } = req.body;

        if (!name) {
            throw new ValidationError('crop name is Missing');
        }

        if (!variety_data?.name || !variety_data?.qualityCheckGuideURL) {
            throw new ValidationError('variety details missing');
        }

        if (!qc_data || !qc_data?.length) {
            throw new ValidationError('qc details missing');
        }

        if (!sampling_data) {
            throw new ValidationError('sampling details missing');
        }

        if (!doc_data) {
            throw new ValidationError('doc details missing');
        }

        qc_data.forEach(qc => {
            if (!qc.name || !qc.value ||
                !qc.condition || qc.imageRequired === undefined) {
                throw new ValidationError('qc details missing');
            }
        });

        sampling_data.forEach(sampling => {
            if (sampling.weightFrom === undefined || sampling.weightTo === undefined ||
                sampling.minimumImages === undefined || sampling.sampleCount === undefined) {
                throw new ValidationError('sampling details missing');
            }
        });

        doc_data.forEach(doc => {
            if (!doc.name || doc.mendatory === undefined ||
                doc.imageRequired === undefined) {
                throw new ValidationError('doc details missing');
            }
        });

        const response = await add_all_crop_details_service(name, variety_data, qc_data, sampling_data, doc_data);

        const allCropsResult = await get_all_crops_service(response.id);
        return res.status(http_status_code_enum.ok).json(allCropsResult);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({ message: err.message });
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop/controllers/fetch_crop_list_from_ml_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const fetch_crop_list_from_ml_service = require("../services/fetch_crop_list_from_ml_service");

module.exports = async(req, res) => {
    try{
        const page_no = +req.query?.page_no || 1;
        const limit = +req.query?.limit || 100;
        const search_param = req.query?.search_param || "";

        //fetching the list of crops existing in the ML database
        const crop_list = await fetch_crop_list_from_ml_service(page_no, limit, search_param);

        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'successfull', crop_list));
    }catch(err){
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop/controllers/get_all_qc_controller.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const get_all_qc_service = require("../_services/get_all_qc_service");

const error_log = require("../../../../middelware/error_log");

const get_all_qc_controller = async (req, res) => {
  try {
    const result = await get_all_qc_service();

    return res.status(result.status).json(result.data);
  } catch (err) {
    error_log(err);
    return res.status(HTTP_status_codes.badRequest).json({
      message: "unable to get target price",
      error: err.message,
    });
  }
};

module.exports = get_all_qc_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop/controllers/fetch_crop_variety_list_from_ml_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const fetch_crop_variety_list_from_ml_service = require('../services/fetch_crop_variety_list_from_ml_service');
const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try { // fetching the list of crops variety existing in the ML database
        const page_no = +req.query?.page_no || 1;
        const limit = +req.query?.limit || 100;
        const crop_id = +req.query.crop_id;
        const search_param = req.query?.search_param || '';

        if (!crop_id) {
            throw new ValidationError(error.crop_id_check);
        }
        const crop_variety_list = await fetch_crop_variety_list_from_ml_service(page_no, limit, crop_id, search_param);

        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'successfull', crop_variety_list));
    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop/controllers/get_all_dispatch_doc_controller.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const get_all_dispatch_doc_service = require("../_services/get_all_dispatch_doc_service");

const error_log = require("../../../../middelware/error_log");

const get_all_dispatch_doc_controller = async (req, res) => {
  try {
    const result = await get_all_dispatch_doc_service();

    return res.status(result.status).json(result.data);
  } catch (err) {
    error_log(err);
    return res.status(HTTP_status_codes.badRequest).json({
      message: "unable to get target price",
      error: err.message,
    });
  }
};

module.exports = get_all_dispatch_doc_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop/controllers/get_all_crops_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const { get_all_crops_service } = require("../_services/get_all_crops_service");

module.exports = async (req, res) => {
  try {
    let all_crops_data = await get_all_crops_service();
    res.status(http_status_code_enum.ok).json(all_crops_data);
  } catch (err) {
    error_log(err);
    res
      .status(http_status_code_enum.bad_request)
      .json({ message: err.message });
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop/services/get_all_dispatch_doc_service.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const dispatchDocTypeModel = require("../../../../database/mongoose/market_linkage_db/dispatchDocType.model");

module.exports = async () => {
  try {
    const dispatch_docs = await dispatchDocTypeModel.find();

    return { 
      status: HTTP_status_codes.ok, 
      data: {
        dispatchDocData: dispatch_docs.map((qc)=>{
          return {
            id: qc._id,
            name: qc.name
          }
        })
      }
    };
  } catch (err) {
    app_log_service({type:type.error,err});
    return {
      status: HTTP_status_codes.internalServerError,
      data: {
        message: "Error while getting target price",
        error: err.message,
      },
    };
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop/services/get_all_crops_service.js
const cropModel = require("../../../../database/mongoose/market_linkage_db/crop.model");
require("../../../../database/mongoose/market_linkage_db/cropVariety.model");
const error_log = require("../../../../middelware/error_log");

const get_all_crops_service = async (cropId) => {
  return new Promise(async (resolve, reject) => {
    try {
      const filter = {
        isActive: true,
      };
      if (cropId) {
        filter["_id"] = cropId;
      }
      const cropResult = await cropModel
        .find(filter)
        .populate("varieties", null, { isActive: true });
      cropResult.forEach((record) => {
        if (record.varieties) {
          let allVarieties = record.varieties;
          allVarieties.forEach((variety) => {
            if (variety.qcCheckListParameter) {
              let qcs = variety.qcCheckListParameter;
              let newQcs = [];
              qcs.forEach((qc) => {
                if (qc.isActive) {
                  newQcs.push(qc);
                }
              });
              variety.qcCheckListParameter = newQcs;
            }
            if (variety.samplingCondition) {
              let samplings = variety.samplingCondition;
              let newSamplings = [];
              samplings.forEach((sampling) => {
                if (sampling.isActive) {
                  newSamplings.push(sampling);
                }
              });
              variety.samplingCondition = newSamplings;
            }
            if (variety.documentAtDispatch) {
              let docs = variety.documentAtDispatch;
              let newDocs = [];
              docs.forEach((doc) => {
                if (doc.isActive) {
                  newDocs.push(doc);
                }
              });
              variety.documentAtDispatch = newDocs;
            }
          });
        }
      });
      return resolve(cropResult);
    } catch (err) {
      error_log(err);
      return resolve({ message: err.message });
    }
  });
};

module.exports = {
  get_all_crops_service,
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop/services/get_all_qc_service.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const qcTypeModel = require("../../../../database/mongoose/market_linkage_db/qcType.model");

module.exports = async () => {
  try {
    const qcs = await qcTypeModel.find();

    return { 
      status: HTTP_status_codes.ok, 
      data: {
        qcChecklistData: qcs.map((qc)=>{
          return {
            id: qc._id,
            name: qc.name
          }
        })
      }
    };
  } catch (err) {
    app_log_service({type:type.error,err});
    return {
      status: HTTP_status_codes.internalServerError,
      data: {
        message: "Error while getting target price",
        error: err.message,
      },
    };
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop/services/fetch_crop_variety_list_from_ml_service.js
const error_log = require('../../../../middelware/error_log');
const fetch_crop_variety_list_from_ml = require('../../../../data_abstraction_layer/crop/fetch_crop_variety_list_from_ml');
const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (page_no, limit, crop_id, search_param) => {
    try { // fetching crop variety list from ml with pagination
        const crop_variety_list = await fetch_crop_variety_list_from_ml(page_no, limit, crop_id, search_param);
        if (!crop_variety_list || !crop_variety_list?.data || !crop_variety_list?.data?.data ||
            !crop_variety_list?.data?.data?.crop_varieties
            // || crop_variety_list?.data?.data?.crop_varieties?.length<1
        ) { // checking if crop_varieties is empty or it has a length of 1 but the first element(object) is emtpy only (though this case occurs less but now, it's also managed)
            throw new ValidationError(error.no_crop_variety_found);
        }
        return crop_variety_list?.data?.data || null;
    } catch (err) {
        error_log(err);
        throw new ValidationError(err);
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop/services/create_crop_service.js
const cropModel = require("../../../../database/mongoose/market_linkage_db/crop.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");

const create_crop_service = async (newCropData) => {
    try {
        const { cropsData } = newCropData;

        const cropAddedData = await cropModel.create(cropsData);

        return { status: HTTP_status_codes.ok, data: cropAddedData };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

module.exports = {
    create_crop_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/crop/services/fetch_crop_list_from_ml_service.js
const error_log = require('../../../../middelware/error_log');
const fetch_crop_list_from_ml = require('../../../../data_abstraction_layer/crop/fetch_crop_list_from_ml');
const error = require('../../../../config/errors');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (page_no, limit, search_param) => {
    try { // fetching crop list from ml with pagination
        const crop_list = await fetch_crop_list_from_ml(page_no, limit, search_param);
        if (!crop_list || !crop_list?.data || !crop_list?.data?.data ||
            !crop_list?.data?.data?.crops
            // || crop_list?.data?.data?.crops?.length<1
        ) { // checking if crops is empty or it has a length of 1 but the first element(object) is emtpy only (though this case occurs less but now, it's also managed)
            throw new ValidationError(error.no_crop_list_found);
        }
        return crop_list?.data?.data || null;
    } catch (err) {
        error_log(err);
        throw new ValidationError(err);
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/master_sample/swagger/index.js
module.exports = {
    tags: {
        name: 'master_sample'
    },
    paths: {
        '/': {
            get: {
                tags: ['master_sample'],
                summary: 'get detail of all samples',
                description: '',
                operationId: 'get_master_sample',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'status',
                        description: '',
                        type: 'string'
                    },
                    {
                        in: 'query',
                        name: 'name',
                        description: '',
                        type: 'string'
                    },
                    {
                        in: 'query',
                        name: 'number',
                        description: '',
                        type: 'number'
                    },
                    {
                        in: 'query',
                        name: 'associated_pa',
                        description: '',
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            },
            post: {
                tags: ['master_sample'],
                summary: 'create new sample',
                description: '',
                operationId: 'create_master_sample',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'header',
                        name: 'geolocation',
                        description: '',
                        type: 'string'
                    },
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        schema: {
                            type: 'object',
                            required: [
                                'cropName',
                                'cropId',
                                'cropVariety',
                                'sampleWeight',
                                'totalAvailableQuantity',
                                'purchasePrice',
                                'qcReport',
                                'sampleImages',
                                'transportCostEst',
                                'retailerId',
                                'retailerMobileNumber',
                                'retailerName',
                                'retailerDistrictName',
                                'retailerStateName',
                                'retailerPincode',
                                'retailerGeoLocation',
                                'bagType',
                                'emptyBagWeight',
                                'loadedBagWeight',
                                'bagDeduction',
                                'isMandiTaxPaid',
                                'labourAndBagCost',
                                'lot',
                                'FOR',
                                'dispatch_by'
                            ],
                            properties: {
                                cropName: {
                                    type: 'string'
                                },
                                cropId: {
                                    type: 'number'
                                },
                                cropVariety: {
                                    type: 'object',
                                    required: ['_id', 'name'],
                                    properties: {
                                        _id: {
                                            type: 'number'
                                        },
                                        name: {
                                            type: 'string'
                                        }
                                    }
                                },
                                sampleWeight: {
                                    type: 'number'
                                },
                                totalAvailableQuantity: {
                                    type: 'number'
                                },
                                purchasePrice: {
                                    type: 'number'
                                },
                                transportCostEst: {
                                    type: 'number'
                                },
                                qcReport: {
                                    type: 'array',
                                    items: {
                                        properties: {
                                            name: {
                                                type: 'string'
                                            },
                                            value: {
                                                type: 'string'
                                            },
                                            qcReportId: {
                                                type: 'string'
                                            },
                                            image: {
                                                type: 'string'
                                            },
                                            thresholdCondition: {
                                                type: 'string'
                                            },
                                            thresholdValue: {
                                                type: 'string'
                                            }
                                        }
                                    }
                                },
                                sampleImages: {
                                    type: 'array',
                                    items: {
                                        type: 'string'
                                    }
                                },
                                lot: {
                                    type: 'array',
                                    items: {
                                        type: 'number'
                                    }
                                },
                                retailerId: {
                                    type: 'number'
                                },
                                retailerMobileNumber: {
                                    type: 'number'
                                },
                                retailerName: {
                                    type: 'string'
                                },
                                retailerDistrictName: {
                                    type: 'string'
                                },
                                retailerStateName: {
                                    type: 'string'
                                },
                                retailerPincode: {
                                    type: 'string'
                                },
                                mandiTax: {
                                    type: 'integer'
                                },
                                retailerCommision: {
                                    type: 'integer'
                                },
                                retailerGeoLocation: {
                                    type: 'object',
                                    required: ['lat', 'long', 'accuracy'],
                                    properties: {
                                        lat: {
                                            type: 'string'
                                        },
                                        long: {
                                            type: 'string'
                                        },
                                        accuracy: {
                                            type: 'number'
                                        }
                                    }
                                },
                                bagType: {
                                    type: 'number'
                                },
                                emptyBagWeight: {
                                    type: 'number'
                                },
                                loadedBagWeight: {
                                    type: 'number'
                                },
                                bagDeduction: {
                                    type: 'number'
                                },
                                isMandiTaxPaid: {
                                    type: 'boolean'
                                },
                                labourAndBagCost: {
                                    type: 'number'
                                },
                                FOR: {
                                    type: 'number'
                                },
                                dispatch_by: {
                                    type: 'number'
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/pa': {
            get: {
                tags: ['master_sample'],
                summary: 'get detail of all samples',
                description: '',
                operationId: 'get_master_sample',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'status',
                        description: '',
                        type: 'string'
                    },
                    {
                        in: 'query',
                        name: 'name',
                        description: '',
                        type: 'string'
                    },
                    {
                        in: 'query',
                        name: 'number',
                        description: '',
                        type: 'number'
                    },
                    {
                        in: 'query',
                        name: 'associated_pa',
                        description: '',
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/rpm': {
            get: {
                tags: ['master_sample'],
                summary: 'get samples by rpm',
                description: '',
                operationId: 'get_sample_rpm',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'name',
                        description: '',
                        type: 'string'
                    },
                    {
                        in: 'query',
                        name: 'number',
                        description: '',
                        type: 'number'
                    },
                    {
                        in: 'query',
                        name: 'status',
                        description: '',
                        type: 'number'
                    },
                    {
                        in: 'query',
                        name: 'associateId',
                        description: '',
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/rpm/dashboard_status': {
            get: {
                tags: ['master_sample'],
                summary: 'get samples dashboard status',
                description: '',
                operationId: 'get_dashboard_status',
                security: [{ Bearer: ['read'] }],
                parameters: [],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/{sample_id}/{lot_id}': {
            patch: {
                tags: ['master_sample'],
                summary: 'update master sample',
                description: '',
                operationId: 'update_master_sample',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'header',
                        name: 'geolocation',
                        description: '',
                        type: 'string'
                    },
                    {
                        in: 'path',
                        name: 'sample_id',
                        description: '',
                        required: true,
                        type: 'string'
                    },
                    {
                        in: 'path',
                        name: 'lot_id',
                        description: '',
                        required: true,
                        type: 'string'
                    },
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        schema: {
                            type: 'object',
                            required: ['dataToUpdate'],
                            properties: {
                                dataToUpdate: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        required: ['data', 'property'],
                                        properties: {
                                            property: {
                                                type: 'string'
                                            },
                                            data: {
                                                type: ['string', 'number', 'boolean', 'object']
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/pa/{sample_id}': {
            patch: {
                tags: ['master_sample'],
                summary: 'update master sample for pa',
                description: '',
                operationId: 'update_master_sample_pa',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'header',
                        name: 'geolocation',
                        description: '',
                        type: 'string'
                    },
                    {
                        in: 'path',
                        name: 'sample_id',
                        description: '',
                        required: true,
                        type: 'string'
                    },
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        schema: {
                            type: 'object',
                            required: ['dataToUpdate'],
                            properties: {
                                dataToUpdate: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        required: ['data', 'property'],
                                        properties: {
                                            property: {
                                                type: 'string'
                                            },
                                            data: {
                                                type: ['string', 'number', 'boolean', 'object']
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        }
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/master_sample/index.js
// const create_master_sample_controller = require('./controllers/create_master_sample_controller');
// const get_dashboard_status_controller = require('./controllers/get_dashboard_status_controller');
// const { get_sample_controller, get_sample_pa_controller } = require('./controllers/get_master_sample_controller');
const get_sample_rpm_controller = require('./controllers/get_sample_rpm_controller');
const { update_sample_controller, update_sample_pa_rpm_controller } = require('./controllers/update_master_sample_controller');

const router = require('express').Router();

/** @deprecated */
// router.get("/", get_sample_controller);
// router.get("/pa", get_sample_pa_controller);
// router.post("/", create_master_sample_controller);
// router.get("/rpm/dashboard_status", get_dashboard_status_controller);

router.patch('/pa/:sampleId', update_sample_pa_rpm_controller);
router.patch('/:sampleId/:lotId', update_sample_controller);
router.get('/rpm', get_sample_rpm_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/master_sample/services_/get_sample_rpm_service.js
const user_profile = require("../../../../database/models/user_profile");
const crop_detail = require("../../../../database/models_v2/crop/crop_detail");
const crop_varieties_detail = require("../../../../database/models_v2/crop/crop_varieties_detail");
const purchase_qc_report = require("../../../../database/models_v2/crop/purchase_qc_report");
const locations = require("../../../../database/models_v2/global/locations");
const master_merchant_detail = require("../../../../database/models_v2/merchant/master_merchant_detail");
const crop_variety_qc_param_maps = require("../../../../database/models_v2/procurement_order/crop_variety_qc_param_maps");
const purchase_crop_orders = require("../../../../database/models_v2/procurement_order/purchase_crop_orders");
const qc_param_types = require("../../../../database/models_v2/procurement_order/qc_param_types");
const procurement_order_bill_components = require("../../../../database/models_v2/procurement_payments/procurement_bill_components");
const procurement_order_bill_component_enum = require("../../../../database/models_v2/procurement_payments/procurement_order_bill_component_enums");
const procurement_lots = require("../../../../database/models_v2/procurement_sample/procurement_lots");
const procurment_crop_sample = require("../../../../database/models_v2/procurement_sample/procurment_crop_sample");
const purchase_crop_sample_images = require("../../../../database/models_v2/procurement_sample/purchase_sample_images");
const masterSampleModel = require("../../../../database/mongoose/market_linkage_db/masterSample.model");
const userModel = require("../../../../database/mongoose/market_linkage_db/user.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");
const get_all_juniors_service = require("../../users/_services/get_all_juniors_service");
const convertKgToGram = require("../../utilities/unitConversion/convertKgToGram");
const convertKgToTon = require("../../utilities/unitConversion/convertKgToTon");
const Op = require('sequelize').Op;

const get_sample_rpm_service = async (userId, name, number, status, associateId, category) => {
    try {
        const query = {
            is_active: 1,
            category: category
        };
        const user_query = {
            is_active: 1
        };
        const merchant_query = {
            is_active: 1
        };

        if (associateId) {
            const user = await user_profile.findOne({
                where: {
                    id: associateId,
                    is_active: 1
                }
            });
            if (!user) throw new Error('pa not found');
            user_query.mobile_number = user.mobile_number;
        }
        else {
            const juniorUsers = await get_all_juniors_service(userId);
            if (juniorUsers.status !== HTTP_status_codes.ok) {
                return juniorUsers;
            }
            const createdBy = juniorUsers.data.map(function (user) {
                return user.mobileNumber;
            });
            user_query.mobile_number = { [Op.in]: createdBy };
        }
        if (name) {
            merchant_query.name = name;
        }
        if (number) {
            merchant_query.mobile_number = number;
        }
        if (status) {
            query.status = status;
        }

        let sampleData = await procurment_crop_sample.findAll({
            where: query,
            include: [
                {
                    model: user_profile,
                    where: user_query,
                    required: true
                },
                {
                    model: master_merchant_detail,
                    where: merchant_query,
                    required: true
                },
                {
                    model: purchase_crop_sample_images,
                    where: {
                        is_active: true
                    },
                    required: false
                },
                {
                    model: locations,
                    where: {
                        is_active: true
                    },
                    required: false
                },
                {
                    model: crop_detail,
                    where: {
                        is_active: true
                    },
                    required: true
                },
                {
                    model: crop_varieties_detail,
                    where: {
                        is_active: true
                    },
                    required: true
                },
                {
                    model: purchase_qc_report,
                    where: {
                        is_active: true
                    },
                    include: [{
                        model: crop_variety_qc_param_maps,
                        where: {
                            is_active: true
                        },
                        required: false,
                        include: [
                            {
                                model: qc_param_types,
                                where: {
                                    is_active: true
                                },
                                required: false
                            }
                        ]
                    }],
                    required: false
                },
                {
                    model: procurement_order_bill_components,
                    include: [
                        {
                            model: procurement_order_bill_component_enum,
                            where: {
                                is_active: true
                            },
                            required: false
                        }
                    ],
                    where: {
                        is_active: true
                    },
                    required: false
                },
                {
                    model: procurement_lots,
                    where: {
                        is_active: 1
                    },
                    required: false
                },
                {
                    model: purchase_crop_orders,
                    where: {
                        is_active: true
                    },
                    required: false
                }
            ],
            order: [["updated_at", "DESC"]],
        });

        sampleData.forEach(sample => {
            const kgToTonResult = convertKgToTon({
                sampleWeight: sample.sample_weight
            });
            const kgTogramResult = convertKgToGram({
                emptyBagWeight: sample.empty_bag_weight
            })

            sample.sample_weight = kgToTonResult.sampleWeight;
            sample.empty_bag_weight = kgTogramResult.emptyBagWeight;
        });

        const response_data = sampleData.map((sample) => {
            return {
                retailerGeoLocation: sample.location ? {
                    accuracy: sample.location.accuracy,
                    lat: sample.location.latitude,
                    long: sample.location.longitude,
                } : {},
                isActive: sample.is_active,
                status: sample.status,
                sampleImages: sample.purchase_crop_sample_images.map((image) => image.image),
                _id: sample.id,
                retailerId: sample.master_merchant_detail?.id,
                retailerMobileNumber: sample.master_merchant_detail?.mobile_number,
                retailerName: sample.master_merchant_detail?.name,
                retailerDistrictName: sample.master_merchant_detail?.district_name,
                retailerStateName: sample.master_merchant_detail?.state_name,
                retailerPincode: sample.master_merchant_detail?.pincode,
                cropName: sample.crop_detail?.name,
                cropVariety: sample.crop_varieties_detail?.id,
                cropVarietyName: sample.crop_varieties_detail?.name,
                sampleWeight: sample.sample_weight,
                totalAvailableQuantity: sample.total_available_quantity,
                purchasePrice: sample.purchase_price,
                transportCostEst: sample.transport_cost_est,
                createdBy: sample.user_profile ? {
                    id: sample.user_profile.id,
                    name: sample.user_profile.name,
                    mobileNumber: sample.user_profile.mobile_number
                } : {},
                qcReport: sample.purchase_qc_reports ? sample.purchase_qc_reports.map((qc_report) => {
                    return {
                        name: qc_report?.crop_variety_qc_param_map?.qc_param_type?.name,
                        value: qc_report?.value,
                        qcReportId: qc_report?.crop_variety_qc_param_map_id,
                        image: qc_report?.image,
                        thresholdCondition: qc_report?.crop_variety_qc_param_map?.condition,
                        thresholdValue: qc_report?.crop_variety_qc_param_map?.threshold_value
                    }
                }) : [],
                lot: sample.procurement_lots?.map((lot) => {
                    const kgToTonResult = convertKgToTon({ lot: lot.weight });
                    return kgToTonResult.lot;
                }),
                cropId: sample.crop_detail?.id,
                bagType: sample.bag_type,
                emptyBagWeight: sample.empty_bag_weight,
                loadedBagWeight: sample.loaded_bag_weight,
                isMandiTaxPaid: sample.is_mandi_tax_paid,
                bagDeduction: sample.bag_deduction,
                mandiTax: sample.procurement_order_bill_components?.find(o => o.procurement_order_bill_component_enum.name === 'mandi_tax')?.amount,
                retailerCommision: sample.procurement_order_bill_components?.find(o => o.procurement_order_bill_component_enum.name === 'retailer_commision')?.amount,
                labourAndBagCost: sample.procurement_order_bill_components?.find(o => o.procurement_order_bill_component_enum.name === 'labour_and_bag_cost')?.amount,
                farmartId: sample.farmart_id,
                createdAt: sample.createdAt,
                updatedAt: sample.updatedAt,
                leadId: sample.purchase_crop_lead_id,
                procurableTon: sample.procurable_ton,
                retailerLockedPrice: sample.retailer_locked_price,
                zohoPoId: sample.zoho_po_id,
                poData: sample.purchase_crop_orders?.map((po) => {
                    return {
                        poId: po.id,
                        poNumber: po.farmart_id,
                        poStatus: po.status
                    }
                }),
                retailerEmail: sample.master_merchant_detail?.email,
                retailerBusinessName: sample.master_merchant_detail?.business_name,
                retailerFarmartId: sample.master_merchant_detail?.farmart_id,
                FOR: sample.f_o_r,
                dispatch_by: sample.dispatch_by,
                category: sample.category
            }
        });

        return { status: HTTP_status_codes.ok, data: response_data };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

module.exports = {
    get_sample_rpm_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/master_sample/services_/upate_sample_and_lot_details_for_panal_service.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");
const { create_purchase_order_service } = require("../../purchase_order/_services/create_purchase_order_service");
const procurment_crop_sample = require("../../../../database/models_v2/procurement_sample/procurment_crop_sample");
const procurement_lots = require("../../../../database/models_v2/procurement_sample/procurement_lots");
const procurement_order_bill_components_model = require("../../../../database/models_v2/procurement_payments/procurement_bill_components");
const purchase_crop_bill_component_enum = require("../../../../enums/market_linkage/enums/purchase_crop_bill_component_enum");
const { get_sample_service } = require("./get_master_sample_service");
const crop_detail_model = require("../../../../database/models_v2/crop/crop_detail");
const sampleStatus_enum=require('../../../../enums/market_linkage/enums/masterSampleEnum').sampleStatus
const Op=require('sequelize').Op
const { create_purchase_document } = require('../../../../utilities/po_pdf/generate_po_pdf');
const new_mail_service = require("../../../../utilities/mail_service/new_mail_service");

const update_sample_and_lot_details_for_panal=(params)=>{
    return new Promise(async (resolve,reject)=>{
        try{
            let _data_to_update={};
            params.dataToUpdate.map(a=>_data_to_update[a.property]=a.data);
            let po_id = null
            if(Object.keys(_data_to_update).length>0){
                // update lot and sample information with helper function
                await _helper_update_lot_detail(_data_to_update,+params.lotId);
                await _helper_updated_sample_detail(_data_to_update,+params.sampleId);
                if(_data_to_update.status===sampleStatus_enum.PURCHASE_ORDER_CREATED){
                    let lot_detail=await procurement_lots.findOne({
                        where : {
                            id:params.lotId,
                            is_active:true
                        }
                    });
                    let sample_data=await procurment_crop_sample.findOne({
                        where : {
                            id:params.sampleId,
                            is_active:true
                        },
                        include:[
                            {
                                model: crop_detail_model,
                                where: {
                                    is_active: true
                                },
                                required: false
                            }
                        ]
                    });
                    let result=await create_purchase_order_service(lot_detail,sample_data);
                    po_id = result.data._id
                    if(result.status===HTTP_status_codes.ok){
                        lot_detail.status=_data_to_update.status;
                        if(sample_data.status!=sampleStatus_enum.PURCHASE_ORDER_CREATED){
                            sample_data.status=sampleStatus_enum.APPROVED_BY_SH;
                            await sample_data.save();
                        }
                        await lot_detail.save();
                    }
                    else{
                        throw new Error(result.data.error);
                    }
                }
            }
            const sample_response_data = await get_sample_service({ status: "ALL", associated_pa: "ALL", sample_id: params.sampleId, lot_Id:params.lotId })
            // reusing the get sample data service
            // return { status: HTTP_status_codes.ok, data: sample_response_data.data }
            if(_data_to_update.status===sampleStatus_enum.PURCHASE_ORDER_CREATED){
                const doc = await create_purchase_document(po_id,_data_to_update)
                const cc = ['ops@farmart.co','finance@farmart.co']
                new_mail_service(doc.mailContent.data.body,doc.mailContent.data.subject,[doc.to],cc,"systems@farmart.co","",doc.po_doc_url,doc.filename,po_id)
            }
    

            return resolve({ status: HTTP_status_codes.ok, data: sample_response_data.data });
        }
        catch(ex){
            error_log(ex);
            return reject({message:ex.message})
        }
    });
    
}

const _helper_update_lot_detail=async (lot_info,lot_id)=>{
    try{
        let existing_lot_info=await procurement_lots.findOne({
            where : {
                id:lot_id,
                is_active:true,
                status:{
                    [Op.ne]:sampleStatus_enum.PURCHASE_ORDER_CREATED
                }
            }
        });
        if(existing_lot_info){
            let is_update=false;
            if(lot_info.retailerLockedPrice){
                existing_lot_info.retailer_locked_price=lot_info.retailerLockedPrice;
                is_update=true;
            }
            if(lot_info.procurableTon){
                existing_lot_info.procurable_ton=lot_info.procurableTon;
                is_update=true;
            }
            if(lot_info.transportCostEst){
                existing_lot_info.transport_cost_est=lot_info.transportCostEst;
                is_update=true;
            }
            if(lot_info.bagDeduction){
                existing_lot_info.bag_deduction=lot_info.bagDeduction;
                is_update=true;
            }
            if(lot_info.status && lot_info.status!=sampleStatus_enum.PURCHASE_ORDER_CREATED){
                existing_lot_info.status=lot_info.status;
                is_update=true;
            }
            if(lot_info.zohoPoId){
                existing_lot_info.zoho_po_id=lot_info.zohoPoId;
                is_update=true;
            }
            // need to update in bill components
            if(lot_info.labourAndBagCost){
                let bill_labour_and_bag_exist=await procurement_order_bill_components_model.findOne({
                    where : {
                        procurement_lot_id:lot_id,
                        is_active:true,
                        order_bill_component_id:purchase_crop_bill_component_enum.labour_and_bag_cost
                    }
                });
                if(bill_labour_and_bag_exist){
                    bill_labour_and_bag_exist.amount=lot_info.labourAndBagCost;
                    await bill_labour_and_bag_exist.save();
                }
                else{
                    let bill_labour_and_bag_add={
                        amount:lot_info.labourAndBagCost,
                        procurement_lot_id:lot_id,
                        is_active:true,
                        order_bill_component_id:purchase_crop_bill_component_enum.labour_and_bag_cost
                    }
                    await procurement_order_bill_components_model.build(bill_labour_and_bag_add).save();
                }
            }
            // need to update in bill components
            if(lot_info.retailerCommision){
                let retailer_commision_exist=await procurement_order_bill_components_model.findOne({
                    where : {
                        procurement_lot_id:lot_id,
                        is_active:true,
                        order_bill_component_id:purchase_crop_bill_component_enum.retailer_commision
                    }
                });
                if(retailer_commision_exist){
                    retailer_commision_exist.amount=lot_info.retailerCommision;
                    await retailer_commision_exist.save();
                }
                else{
                    let retailer_commision_add={
                        amount:lot_info.retailerCommision,
                        procurement_lot_id:lot_id,
                        is_active:true,
                        order_bill_component_id:purchase_crop_bill_component_enum.retailer_commision
                    }
                    await procurement_order_bill_components_model.build(retailer_commision_add).save();
                }
            }
            // need to update in bill components
            if(lot_info.mandiTax){
                let mandi_tax_exist=await procurement_order_bill_components_model.findOne({
                    where : {
                        procurement_lot_id:lot_id,
                        is_active:true,
                        order_bill_component_id:purchase_crop_bill_component_enum.mandi_tax
                    }
                });
                if(mandi_tax_exist){
                    mandi_tax_exist.amount=lot_info.mandiTax;
                    await mandi_tax_exist.save();
                }
                else{
                    let mandi_tax_add={
                        amount:lot_info.mandiTax,
                        procurement_lot_id:lot_id,
                        is_active:true,
                        order_bill_component_id:purchase_crop_bill_component_enum.mandi_tax
                    }
                    await procurement_order_bill_components_model.build(mandi_tax_add).save();
                }
            }
            if(is_update){
                await existing_lot_info.save();
            }
        }
        else{
            throw new Error('either lot not found or its purchase order already created ')
        }
        return;
    }
    catch(ex){
        console.log(ex);
        throw ex;
    }
}

const _helper_updated_sample_detail=async (lot_info,sample_id)=>{
    try{
        // console.log(lot_info);
        let existing_sample_info=await procurment_crop_sample.findOne({
            where : {
                id:sample_id,
                is_active:true,
                status:{
                    [Op.ne]:sampleStatus_enum.PURCHASE_ORDER_CREATED
                }
            }
        });
        if(existing_sample_info){
            
            let all_lots_of_sample=await procurement_lots.count({
                where : {
                    procurment_crop_sample_id:sample_id,
                    is_active:true
                }
            });
            let all_lots_of_sample_po_created=await procurement_lots.count({
                where : {
                    procurment_crop_sample_id:sample_id,
                    is_active:true,
                    status:sampleStatus_enum.PURCHASE_ORDER_CREATED
                }
            });
            if(all_lots_of_sample===all_lots_of_sample_po_created){
                existing_sample_info.status=lot_info.status;
                await existing_sample_info.save();
            }
        }
        else{
            throw new Error("either sample not found or its purchase order already created");
        }
    }
    catch(ex){
        console.log(ex);
        throw ex;
    }
}
module.exports = update_sample_and_lot_details_for_panal;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/master_sample/services_/get_master_sample_service.js
const user_profile = require("../../../../database/models/user_profile");
const crop_detail = require("../../../../database/models_v2/crop/crop_detail");
const crop_varieties_detail = require("../../../../database/models_v2/crop/crop_varieties_detail");
const purchase_qc_report = require("../../../../database/models_v2/crop/purchase_qc_report");
const locations = require("../../../../database/models_v2/global/locations");
const master_merchant_detail = require("../../../../database/models_v2/merchant/master_merchant_detail");
const purchase_crop_orders = require("../../../../database/models_v2/procurement_order/purchase_crop_orders");
const procurement_order_bill_components = require("../../../../database/models_v2/procurement_payments/procurement_bill_components");
const procurement_lots = require("../../../../database/models_v2/procurement_sample/procurement_lots");
const procurment_crop_sample = require("../../../../database/models_v2/procurement_sample/procurment_crop_sample");
const purchase_crop_sample_images = require("../../../../database/models_v2/procurement_sample/purchase_sample_images");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");
const convertKgToGram = require("../../utilities/unitConversion/convertKgToGram");
const convertKgToTon = require("../../utilities/unitConversion/convertKgToTon");
const procurement_order_bill_component_enums = require("../../../../database/models_v2/procurement_payments/procurement_order_bill_component_enums");
const purchase_crop_bill_component_enum = require("../../../../enums/market_linkage/enums/purchase_crop_bill_component_enum");
const crop_variety_qc_param_maps = require("../../../../database/models_v2/procurement_order/crop_variety_qc_param_maps");
const qc_param_types = require("../../../../database/models_v2/procurement_order/qc_param_types");

const get_sample_common = async (filters) => {
    const { status, associated_pa, name, number, sample_id, lot_Id, category } = filters;

    const query = {
        is_active: 1
    };
    
    if(category)
        query.category = category

    const user_query = {
        is_active: 1
    };
    const merchant_query = {
        is_active: 1
    };
    const lot_where_clause={
        is_active: 1
    };
    if(lot_Id){
        lot_where_clause.id=lot_Id;
    }
    if (associated_pa !== "ALL") {
        const created_by_data = await user_profile.findOne({
            where: {
                id: associated_pa || null,
                is_active: 1
            }
        });
        if (created_by_data) {
            user_query.id = created_by_data.id;
        }
    }

    if (status !== "ALL") {
        query.status = status;
    }

    if (sample_id) {
        query.id = sample_id
    }

    if (name) {
        merchant_query.name = name;
    }

    if (number) {
        merchant_query.mobile_number = number;
    }

    const sample_data = await procurment_crop_sample.findAll({
        where: query,
        include: [
            {
                model: purchase_crop_sample_images,
                where : {
                    is_active:true
                },
                required: false
            },
            {
                model: master_merchant_detail,
                where: merchant_query
            },
            {
                model: user_profile,
                where: user_query
            },
            {
                model: locations,
                required: false
            },
            {
                model: crop_detail,
                required: false
            },
            {
                model: crop_varieties_detail,
                required: false
            },
            {
                model: purchase_qc_report,
                where : {
                    is_active:true
                },
                include: [{
                    model: crop_variety_qc_param_maps,
                    where : {
                        is_active:true
                    },
                    include: [
                        {
                            model: qc_param_types
                        }
                    ]
                }],
                required: false
            },
            {
                model: procurement_order_bill_components,
                where : {
                    is_active:true
                },
                include: [
                    {
                        model: procurement_order_bill_component_enums
                    }
                ],
                required: false
            },
            {
                model: procurement_lots,
                where: lot_where_clause,
                include: [
                    {
                        model: purchase_crop_orders
                    },
                    {
                        model:procurement_order_bill_components,
                        required: false
                    }
                ],
                required: false
            },
            {
                model: purchase_crop_orders,
                required: false
            }
        ],
        order: [["updated_at", "DESC"]],
    });

    sample_data.forEach(sample => {
        const kgToTonResult = convertKgToTon({
            sampleWeight: sample.sampleWeight
        });
        const kgTogramResult = convertKgToGram({
            emptyBagWeight: sample.emptyBagWeight
        })

        sample.sampleWeight = kgToTonResult.sampleWeight;
        sample.emptyBagWeight = kgTogramResult.emptyBagWeight;
    });

    const sample_response_data = sample_data.map((sample) => {
        return {
            retailerGeoLocation: sample.location ? {
                accuracy: sample.location.accuracy,
                lat: sample.location.latitude,
                long: sample.location.longitude,
            } : {},
            isActive: sample.is_active,
            status: sample.status,
            sampleImages: sample.purchase_crop_sample_images.map((image) => image.image),
            _id: sample.id,
            retailerId: sample.master_merchant_detail?.id,
            retailerMobileNumber: sample.master_merchant_detail?.mobile_number,
            retailerName: sample.master_merchant_detail?.name,
            retailerDistrictName: sample.master_merchant_detail?.district_name,
            retailerStateName: sample.master_merchant_detail?.state_name,
            retailerPincode: sample.master_merchant_detail?.pincode,
            cropName: sample.crop_detail?.name,
            cropVariety: sample.crop_varieties_detail?.id,
            cropVarietyName: sample.crop_varieties_detail?.name,
            sampleWeight: sample.sample_weight,
            totalAvailableQuantity: sample.total_available_quantity,
            purchasePrice: sample.purchase_price,
            transportCostEst: sample.transport_cost_est,
            createdBy: sample.user_profile ? {
                id: sample.user_profile.id,
                name: sample.user_profile.name,
                mobileNumber: sample.user_profile.mobile_number
            } : {},
            qcReport: sample.purchase_qc_reports ? sample.purchase_qc_reports.map((qc_report) => {
                return {
                    name: qc_report?.crop_variety_qc_param_map?.qc_param_type?.name,
                    value: qc_report?.value,
                    qcReportId: qc_report?.crop_variety_qc_param_map_id,
                    image: qc_report?.image,
                    thresholdCondition: qc_report?.crop_variety_qc_param_map?.condition,
                    thresholdValue: qc_report?.crop_variety_qc_param_map?.threshold_value
                }
            }) : [],
            lot: sample.procurement_lots,
            cropId: sample.crop_detail?.id,
            bagType: sample.bag_type,
            emptyBagWeight: sample.empty_bag_weight,
            loadedBagWeight: sample.loaded_bag_weight,
            bagDeduction: sample.bag_deduction,
            isMandiTaxPaid: sample.is_mandi_tax_paid,
            mandiTax: sample.procurement_order_bill_components?.find(o => o.procurement_order_bill_component_enum.name === 'mandi_tax')?.amount,
            retailerCommision: sample.procurement_order_bill_components?.find(o => o.procurement_order_bill_component_enum.name === 'retailer_commision')?.amount,
            labourAndBagCost: sample.procurement_order_bill_components?.find(o => o.procurement_order_bill_component_enum.name === 'labour_and_bag_cost')?.amount,
            farmartId: sample.farmart_id,
            createdAt: sample.createdAt,
            updatedAt: sample.updatedAt,
            leadId: sample.purchase_crop_lead_id,
            procurableTon: sample.procurable_ton,
            retailerLockedPrice: sample.retailer_locked_price,
            zohoPoId: sample.zoho_po_id,
            retailerEmail: sample.master_merchant_detail?.email,
            retailerBusinessName: sample.master_merchant_detail?.business_name,
            retailerFarmartId: sample.master_merchant_detail?.farmart_id,
            FOR: sample.f_o_r,
            dispatch_by: sample.dispatch_by,
            category: sample.category
        }
    });
    return sample_response_data;
}

const get_sample_pa_service = async (filters) => {
    try {
        const sample_details = await get_sample_common(filters);
        const sample_response_data = sample_details.map((sample) => {
            let lots = sample.lot || [];
            delete sample.lot;
            return {
                ...sample,
                lot: lots.map((lot) => {
                    const kgToTonResult = convertKgToTon({ lot: lot.weight });
                    return kgToTonResult.lot;
                })
            }
        })
        return { status: HTTP_status_codes.ok, data: sample_response_data };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

const get_sample_service = async (filters) => {
    try {
        const sample_details = await get_sample_common(filters);
        const sample_response_data = [].concat.apply([], sample_details.map((sample) => {
            let lots = sample.lot || [];
            delete sample.lot;
            return lots.map((lot) => {
                const kgToTonResult = convertKgToTon({ lot: lot.weight });
                let final_mandi_tax=0;
                let final_commission=0;
                let final_labour_and_gunnybag_deduction=0;
                for (let index = 0; index < lot.procurement_order_bill_components.length; index++) {
                    const element = lot.procurement_order_bill_components[index];
                    if(element.order_bill_component_id===purchase_crop_bill_component_enum.mandi_tax){
                        final_mandi_tax=element.amount;
                    }
                    if(element.order_bill_component_id===purchase_crop_bill_component_enum.retailer_commision){
                        final_commission=element.amount;
                    }
                    if(element.order_bill_component_id===purchase_crop_bill_component_enum.labour_and_bag_cost){
                        final_labour_and_gunnybag_deduction=element.amount;
                    }
                }
                return {
                    ...sample,
                    lotId: lot.id,
                    totalAvailableQuantity: kgToTonResult.lot,
                    retailerLockedPrice: lot.retailer_locked_price || sample.retailerLockedPrice,
                    procurableTon: lot.procurable_ton || sample.procurableTon,
                    finalTransportCost: lot.transport_cost_est || sample.transportCostEst,
                    finalBagDeduction: lot.bag_deduction || sample.bagDeduction,
                    zohoPoId: lot.zoho_po_id,
                    status: lot.status,
                    poStatus: (lot.purchase_crop_orders) ? lot.purchase_crop_orders[0]?.status : null,
                    poId: (lot.purchase_crop_orders) ? lot.purchase_crop_orders[0]?.id : null,
                    poNumber: (lot.purchase_crop_orders) ? lot.purchase_crop_orders[0]?.farmart_id : null,
                    finalMandiTax:final_mandi_tax,
                    finalCommission:final_commission,
                    finalLabourAndGunnybagDeduction:final_labour_and_gunnybag_deduction
                }
            })
        }));
        return { status: HTTP_status_codes.ok, data: sample_response_data };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

module.exports = {
    get_sample_pa_service,
    get_sample_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/master_sample/services_/update_master_sample_service.js
const { pa_activity_log_service } = require("../../../../common_services/market_linkage/logging/pa_activity_log_service");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { sampleStatus } = require("../../../../enums/market_linkage/enums/masterSampleEnum");
const { userStatus } = require("../../../../enums/market_linkage/enums/procurementSources")
const error_log = require("../../../../middelware/error_log");
const { create_purchase_order_service } = require("../../purchase_order/_services/create_purchase_order_service");
const convertGramToKg = require("../../utilities/unitConversion/convertGramToKg");
const { actionPerformed } = require("../../../../enums/market_linkage/enums/paActivityEnum");
const procurment_crop_sample = require("../../../../database/models_v2/procurement_sample/procurment_crop_sample");
const purchase_qc_report = require("../../../../database/models_v2/crop/purchase_qc_report");
const procurement_lots = require("../../../../database/models_v2/procurement_sample/procurement_lots");
const procurement_order_bill_components = require("../../../../database/models_v2/procurement_payments/procurement_bill_components");
const procurement_order_bill_component_enums = require("../../../../database/models_v2/procurement_payments/procurement_order_bill_component_enums");
const master_merchant_detail = require("../../../../database/models_v2/merchant/master_merchant_detail");
const user_profile = require("../../../../database/models/user_profile");
const crop_detail = require("../../../../database/models_v2/crop/crop_detail");
const crop_varieties_detail = require("../../../../database/models_v2/crop/crop_varieties_detail");
const locations = require("../../../../database/models_v2/global/locations");
const purchase_crop_orders = require("../../../../database/models_v2/procurement_order/purchase_crop_orders");
const purchase_crop_sample_images = require("../../../../database/models_v2/procurement_sample/purchase_sample_images");
const crop_variety_qc_param_maps = require("../../../../database/models_v2/procurement_order/crop_variety_qc_param_maps");
const qc_param_types = require("../../../../database/models_v2/procurement_order/qc_param_types");
const { get_sample_pa_service, get_sample_service } = require("./get_master_sample_service");
const convertTonToKg = require("../../utilities/unitConversion/convertTonToKg");
const fetch_ml_notification_string = require("../../../../entities_v2/notification/services/fetch_ml_notification_string");
const { send_notification_for_ml } = require("../../../../notifier/firebase_admin_ml");
const ml_notification_event_enum = require("../../../../enums/notification/ml_notification_event_enum");
const language = require("../../../../enums/global/language");

const sample_properties = {
    status: "status",
    sampleImages: "purchase_crop_sample_images",
    purchasePrice: "purchase_price",
    transportCostEst: "transport_cost_est",
    emptyBagWeight: "empty_bag_weight",
    loadedBagWeight: "loaded_bag_weight",
    isMandiTaxPaid: "is_mandi_tax_paid",
    procurableTon: "procurable_ton",
    retailerLockedPrice: "retailer_locked_price",
    bagDeduction: "bag_deduction",
    zohoPoId: "zoho_po_id",
}

const lot_properties = {
    status: "status",
    transportCostEst: "transport_cost_est",
    procurableTon: "procurable_ton",
    retailerLockedPrice: "retailer_locked_price",
    bagDeduction: "bag_deduction",
    zohoPoId: "zoho_po_id",
}

const update_sample_common = async (params) => {
    const { dataToUpdate, sampleId, lotId, reqLocation, source, category } = params;
    let lot_data;
    if (lotId) {
        lot_data = await procurement_lots.findOne({
            where: {
                id: lotId,
                procurment_crop_sample_id: sampleId,
                is_active: 1
            }
        });
        if (!lot_data) {
            throw new Error("invalid lot id");
        }
    }
    const sample_data = await procurment_crop_sample.findOne({
        where: {
            id: sampleId,
            is_active: 1
        },
        include: [
            {
                model: master_merchant_detail,
                required: false
            },
            {
                model: purchase_crop_sample_images,
                required: false
            },
            {
                model: user_profile,
                required: false
            },
            {
                model: locations,
                required: false
            },
            {
                model: crop_detail,
                required: false
            },
            {
                model: crop_varieties_detail,
                required: false
            },
            {
                model: purchase_qc_report,
                where: {
                    is_active: true
                },
                include: [{
                    model: crop_variety_qc_param_maps,
                    include: [
                        {
                            model: qc_param_types,
                            where: {
                                is_active: true
                            }
                        }
                    ]
                }],
                required: false
            },
            {
                model: procurement_order_bill_components,
                include: [
                    {
                        model: procurement_order_bill_component_enums
                    }
                ],
                required: false
            },
            {
                model: procurement_lots,
                where: {
                    is_active: 1
                }
            },
            {
                model: purchase_crop_orders,
                required: false
            }
        ],
    });

    if (!sample_data) {
        throw new Error("Invalid sample id")
    }

    for (let data of dataToUpdate) {
        if (data.property === "emptyBagWeight") {
            const gramResult = convertGramToKg({
                emptyBagWeight: data.data
            });
            sample_data.empty_bag_weight = gramResult.emptyBagWeight;
        }
        else if (data.property === "qcReport") {
            await purchase_qc_report.update({ is_active: 0 }, {
                where: {
                    purchase_crop_sample_id: sampleId,
                    is_active: 1
                }
            });
            if (data.data.length > 0) {
                let qc_report_list = [];
                for (let index = 0; index < data.data.length; index++) {
                    const qc = data.data[index];
                    const qc_data = await crop_variety_qc_param_maps.findOne({
                        where: {
                            // name: qc.name || null,
                            crop_variety_id: sample_data.crop_variety_id || null,
                            is_active: 1
                        },
                        include: [
                            {
                                model: qc_param_types,
                                where: {
                                    name: qc.name || null,
                                    is_active: true
                                }
                            }
                        ]
                    })
                    let qc_report_obj = {
                        value: qc.value || null,
                        image: qc.image || null,
                        crop_variety_qc_param_map_id: qc_data?.id || null,
                        purchase_crop_sample_id: sampleId || null,
                        is_active: 1
                    }
                    qc_report_list.push(qc_report_obj);
                }
                if (qc_report_list.length > 0) {
                    await purchase_qc_report.bulkCreate(qc_report_list);
                }
            }

            // const qc_report_data = await (data.data).map(async (qc) => {
            //     const qc_data = await crop_variety_qc_param_maps.findOne({
            //         where: {
            //             name: qc.name || null,
            //             crop_variety_id: sample_data.crop_variety_id || null,
            //             is_active: 1
            //         }
            //     })
            //     return {
            //         value: qc.value || null,
            //         image: qc.image || null,
            //         crop_variety_qc_param_map_id: qc_data?.id || null,
            //         purchase_crop_sample_id: sampleId || null,
            //         is_active: 1
            //     }
            // })
            // await purchase_qc_report.bulkCreate(qc_report_data);
        }
        else if (data.property === "lot") {
            await procurement_lots.update({ is_active: 0 }, {
                where: {
                    procurment_crop_sample_id: sampleId || null,
                    is_active: 1
                }
            });
            const procurement_lots_data = (data.data).map((lot) => {
                const TonResult = convertTonToKg({ lot });
                return {
                    weight: TonResult.lot,
                    retailer_locked_price: sample_data.retailer_locked_price || null,
                    procurable_ton: sample_data.procurable_ton || null,
                    transport_cost_est: sample_data.transport_cost_est,
                    bag_deduction: sample_data.bag_deduction,
                    zoho_po_id: sample_data.zoho_po_id || null,
                    status: sample_data.status || null,
                    is_active: 1,
                    procurment_crop_sample_id: sampleId
                }
            });
            const added_lots = await procurement_lots.bulkCreate(procurement_lots_data);

            const sample_bill_components = sample_data.procurement_order_bill_components;

            for (const lot of added_lots) {
                const lot_bill_components = sample_bill_components.map((component) => {
                    return {
                        order_bill_component_id: component.order_bill_component_id || null,
                        order_bill_operation_id: component.order_bill_operation_id || null,
                        procurement_lot_id: lot.id || null,
                        amount: component.amount,
                        is_active: 1
                    }
                })
                await procurement_order_bill_components.bulkCreate(lot_bill_components);
            }
        }
        else if (data.property === "mandiTax") {
            const component_enums = await procurement_order_bill_component_enums.findOne({
                where: {
                    name: "mandi_tax",
                    is_active: 1
                }
            })
            if (source === "farmart_os") {
                await procurement_order_bill_components.update({
                    amount: data.data || null
                }, {
                    where: {
                        procurement_lot_id: lotId || null,
                        order_bill_component_id: component_enums?.id || null,
                        order_bill_operation_id: component_enums?.bill_operation_enum_id || null,
                        is_active: 1
                    }
                });
            }
            else {
                await procurement_order_bill_components.update({
                    amount: data.data || null
                }, {
                    where: {
                        procurement_crop_sample_id: sampleId || null,
                        order_bill_component_id: component_enums?.id || null,
                        order_bill_operation_id: component_enums?.bill_operation_enum_id || null,
                        is_active: 1
                    }
                });
            }
        }
        else if (data.property === "retailerCommision") {
            const component_enums = await procurement_order_bill_component_enums.findOne({
                where: {
                    name: "retailer_commision",
                    is_active: 1
                }
            })
            if (source === "farmart_os") {
                await procurement_order_bill_components.update({
                    amount: data.data || null
                }, {
                    where: {
                        procurement_lot_id: lotId || null,
                        order_bill_component_id: component_enums?.id || null,
                        order_bill_operation_id: component_enums?.bill_operation_enum_id || null,
                        is_active: 1
                    }
                });
            }
            else {
                await procurement_order_bill_components.update({
                    amount: data.data || null
                }, {
                    where: {
                        procurement_crop_sample_id: sampleId || null,
                        order_bill_component_id: component_enums?.id || null,
                        order_bill_operation_id: component_enums?.bill_operation_enum_id || null,
                        is_active: 1
                    }
                });
            }
        }
        else if (data.property === "labourAndBagCost") {
            const component_enums = await procurement_order_bill_component_enums.findOne({
                where: {
                    name: "labour_and_bag_cost",
                    is_active: 1
                }
            })
            if (source === "farmart_os") {
                await procurement_order_bill_components.update({
                    amount: data.data || null
                }, {
                    where: {
                        procurement_lot_id: lotId || null,
                        order_bill_component_id: component_enums?.id || null,
                        order_bill_operation_id: component_enums?.bill_operation_enum_id || null,
                        is_active: 1
                    }
                });
            }
            else {
                await procurement_order_bill_components.update({
                    amount: data.data || null
                }, {
                    where: {
                        procurement_crop_sample_id: sampleId || null,
                        order_bill_component_id: component_enums?.id || null,
                        order_bill_operation_id: component_enums?.bill_operation_enum_id || null,
                        is_active: 1
                    }
                });
            }
        }
        else if (data.property === "sampleImages") {
            await purchase_crop_sample_images.update({ is_active: false }, {
                where: {
                    purchase_crop_sample_id: sampleId,
                    is_active: true
                }
            });
            if (data.data.length > 0) {
                let sample_images_list = [];
                for (let index = 0; index < data.data.length; index++) {
                    const element = data.data[index];
                    let sample_img_obj = {
                        image: element || null,
                        status: 1,
                        purchase_crop_sample_id: sampleId || null,
                        is_active: 1
                    }
                    sample_images_list.push(sample_img_obj);
                }
                if (sample_images_list.length > 0) {
                    await purchase_crop_sample_images.bulkCreate(sample_images_list);
                }
            }
        }
        else if (!(data.property === "status" && data.data === sampleStatus.PURCHASE_ORDER_CREATED)) {
            if (sample_properties[data.property]) {
                if (lotId) {
                    lot_data[lot_properties[data.property]] = data.data;
                }
                else {
                    sample_data[sample_properties[data.property]] = data.data;
                    if (lot_properties[data.property]) {
                        const lots = await procurement_lots.findAll({
                            where: {
                                procurment_crop_sample_id: sample_data.id,
                                is_active: 1
                            }
                        })
                        lots.forEach(lot => {
                            lot[lot_properties[data.property]] = data.data
                            lot.save();
                        });
                    }
                }
            }
            if (data.property === "status") {
                await sent_notification_on_action(sample_data, data.data);
            }
        }
    };
    for (const data of dataToUpdate) {
        if (data.property === "status" && data.data === sampleStatus.PURCHASE_ORDER_CREATED && lotId) {
            const retailerStatus = await master_merchant_detail.findOne({
                where: {
                    id: sample_data.master_merchant_id,
                    status: userStatus.APPROVED
                }
            });
            if (!retailerStatus) {
                throw new Error("Retailer not approved");
            }
            const addedPO = await create_purchase_order_service(
                lot_data,
                sample_data
            );
            if (addedPO.status !== HTTP_status_codes.ok) {
                return addedPO
            }
            lot_data.status = data.data;
            sample_data.status = data.data;
        }
    }
    for (const data of dataToUpdate){
        if(data.property === 'FOR')
            sample_data.f_o_r = data.data
        if(data.property === 'dispatch_by')
            sample_data.dispatch_by = data.data
    }

    sample_data.category = category
    await sample_data.save();

    if (lotId) {
        await lot_data.save();
    }

    if (sample_data && reqLocation) {
        // pa activity logging
        pa_activity_log_service({
            paId: sample_data.created_by,
            actionLocation: reqLocation,
            actionTimestamp: new Date(Date.now()),
            actionPerformed: actionPerformed.SampleModification,
            retailerId: sample_data.master_merchant_id,
            sampleId: sample_data.id,
            category: category
        }).catch((err) => {
            error_log(err);
        })
    }
}

const update_sample_pa_rpm_service = async (params) => {
    try {
        await update_sample_common(params);
        const sample_response_data = await get_sample_pa_service({ status: "ALL", associated_pa: "ALL", sample_id: params.sampleId, category: params.category })
        return { status: HTTP_status_codes.ok, data: sample_response_data.data };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

const update_sample_service = async (params) => {
    try {
        await update_sample_common({ ...params, source: "farmart_os" });
        const sample_response_data = await get_sample_service({ status: "ALL", associated_pa: "ALL", sample_id: params.sampleId })
        return { status: HTTP_status_codes.ok, data: sample_response_data.data };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

const sent_notification_on_action = async (sample_data, status) => {
    const variables = {
        sample_farmart_id: sample_data.farmart_id,
        retailer_name: sample_data.master_merchant_detail?.name
    }
    let notification;
    if (status == sampleStatus.APPROVED_BY_RPM)
        notification = await fetch_ml_notification_string(ml_notification_event_enum.sample_approved_by_rpm, language.english, variables);
    else if (status == sampleStatus.DO_PRICE_NEGOTIATION)
        notification = await fetch_ml_notification_string(ml_notification_event_enum.sample_price_issue, language.english, variables);
    else if (status == sampleStatus.RETAKE_SAMPLE_IMAGES)
        notification = await fetch_ml_notification_string(ml_notification_event_enum.sample_retake_photo, language.english, variables);
    else if (status == sampleStatus.RETAKE_QC_REPORT)
        notification = await fetch_ml_notification_string(ml_notification_event_enum.sample_retake_qc_report, language.english, variables);
    if (notification) {
        send_notification_for_ml([sample_data.created_by], notification.title, notification.message, notification.image)
            .catch(err => {
                error_log(err);
            });
    }
}

module.exports = {
    update_sample_pa_rpm_service,
    update_sample_service
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/master_sample/services_/get_dashboard_status_service.js
const user_profile = require("../../../../database/models/user_profile");
const procurment_crop_sample = require("../../../../database/models_v2/procurement_sample/procurment_crop_sample");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");
const get_all_juniors_service = require("../../users/_services/get_all_juniors_service");
const Op = require('sequelize').Op;
const sequelize = require('sequelize')

const get_dashboard_sample_service = async (userId) => {
    try {
        const query = {};

        const juniorUsers = await get_all_juniors_service(userId);

        if (juniorUsers.status !== HTTP_status_codes.ok) {
            return juniorUsers;
        }

        const createdBy = juniorUsers.data.map((user) => user.mobileNumber);

        const getSampleData = await procurment_crop_sample.findAll({
            include: [
                {
                    model: user_profile, 
                    where: {
                        mobile_number: {[Op.in]:createdBy}
                    },
                    attributes:[]
                }
            ],
            group: ['status'],
            attributes: ['status', [sequelize.fn('COUNT', 'status'), 'count']],
            raw: true
        })

        const dashboardStates = {};

        /** @refactor
         *  set an object to get desired status
         *  instead of turnery operator
         *  use enums instead of hardcodded values
         */
        
        getSampleData.forEach((sampleData) => {
            dashboardStates[
                sampleData.status === 2
                    ? "approved"
                    : sampleData.status === 3
                        ? "pricenegotiate"
                        : sampleData.status === 4
                            ? "sampleimages"
                            : sampleData.status === 1
                                ? "pending"
                                : sampleData.status === 5
                                    ? "qc"
                                    : "rejected"
            ] = sampleData.count;
        });

        return { status: HTTP_status_codes.ok, data: dashboardStates };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

module.exports = {
    get_dashboard_sample_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/master_sample/services_/create_master_sample_service.js
const { pa_activity_log_service } = require("../../../../common_services/market_linkage/logging/pa_activity_log_service");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");
const convertGramToKg = require("../../utilities/unitConversion/convertGramToKg");
const convertKgToGram = require("../../utilities/unitConversion/convertKgToGram");
const convertKgToTon = require("../../utilities/unitConversion/convertKgToTon");
const convertTonToKg = require("../../utilities/unitConversion/convertTonToKg");
const { actionPerformed } = require("../../../../enums/market_linkage/enums/paActivityEnum");
const { generate_unique_id } = require("../../../../common_services/unique_id_generation/generate_unique_id");
const { categories } = require("../../../../enums/market_linkage/enums/categories");
const language_enum = require("../../../../entities_v2/metadata/enums/global/langauge");
const leads_model = require("../../../../database/mongoose/market_linkage_db/lead.model");
const purchase_crop_lead = require("../../../../database/models_v2/purchase_campaign/purchase_crop_lead");
const procurment_crop_sample = require("../../../../database/models_v2/procurement_sample/procurment_crop_sample");
const master_merchant_detail = require("../../../../database/models_v2/merchant/master_merchant_detail");
const crop_detail = require("../../../../database/models_v2/crop/crop_detail");
const crop_varieties_detail = require("../../../../database/models_v2/crop/crop_varieties_detail");
const user_profile = require("../../../../database/models/user_profile");
const locations = require("../../../../database/models_v2/global/locations");
const procurement_order_bill_component_enum = require("../../../../database/models_v2/procurement_payments/procurement_order_bill_component_enums");
const procurement_order_bill_components = require("../../../../database/models_v2/procurement_payments/procurement_bill_components");
const purchase_crop_sample_images = require("../../../../database/models_v2/procurement_sample/purchase_sample_images");
const procurement_lots = require("../../../../database/models_v2/procurement_sample/procurement_lots");
const { sampleStatus } = require("../../../../enums/market_linkage/enums/masterSampleEnum");
const crop_variety_qc_param_maps = require("../../../../database/models_v2/procurement_order/crop_variety_qc_param_maps");
const qc_param_types = require("../../../../database/models_v2/procurement_order/qc_param_types");
const purchase_qc_report = require("../../../../database/models_v2/crop/purchase_qc_report");
const { addContent } = require("pdfkit");
const create_price_polling_service = require("../../campaign/_services/create_price_polling_service");
const Op = require('sequelize').Op;

const add_procurement_lots = async (
    lot_distribution,
    transport_cost_est,
    bag_deduction,
    zoho_po_id,
    status,
    mandi_tax,
    retailer_commision,
    labour_and_bag_cost,
    sample_id
) => {
    const procurement_lots_data = lot_distribution.map((lot) => {
        const TonResult = convertTonToKg({ lot });
        return {
            weight: TonResult.lot,
            transport_cost_est,
            bag_deduction,
            zoho_po_id,
            status,
            is_active: 1,
            procurment_crop_sample_id: sample_id
        }
    });
    const added_lots = await procurement_lots.bulkCreate(procurement_lots_data);
    await Promise.all(added_lots.map(async (lot) => {
        const bill_components = {
            mandi_tax,
            retailer_commision,
            labour_and_bag_cost
        }
        const component_enums = await procurement_order_bill_component_enum.findAll({
            where: {
                name: { [Op.in]: Object.keys(bill_components) },
                is_active: 1
            }
        })
        await procurement_order_bill_components.bulkCreate(
            component_enums.filter((component) => bill_components[component.name] !== undefined).map((component) => {
                return {
                    order_bill_component_id: component.id || null,
                    order_bill_operation_id: component.bill_operation_enum_id || null,
                    procurement_lot_id: lot.id || null,
                    amount: bill_components[component.name],
                    is_active: 1
                }
            })
        );
        return bill_components;
    }))
    return added_lots;
}

const add_sample_images = async (sample_images, sample_id) => {
    const sample_images_data = sample_images.map((image) => {
        return {
            image: image || null,
            status:1,
            purchase_crop_sample_id: sample_id || null,
            is_active: 1
        }
    })
    await purchase_crop_sample_images.bulkCreate(sample_images_data);
    return sample_images
}

const add_qc_report = async (qc_reports, crop_variety_id, sample_id) => {
    const qc_report_data = await Promise.all(qc_reports.map(async (qc) => {
        const qc_type = await qc_param_types.findOne({
            where: {
                name: qc.name || null,
                is_active: 1
            }
        })
        const qc_data = await crop_variety_qc_param_maps.findOne({
            where: {
                qc_param_type_id: qc_type.id || null,
                crop_variety_id: crop_variety_id || null,
                is_active: 1
            }
        })
        return {
            value: qc.value || null,
            image: qc.image || null,
            crop_variety_qc_param_map_id: qc_data?.id || null,
            purchase_crop_sample_id: sample_id || null,
            is_active: 1
        }
    }));
    const added_purchase_qc_report = await purchase_qc_report.bulkCreate(qc_report_data);
    const qc_response = [];
    for (let qc of added_purchase_qc_report) {
        qc_response.push(await purchase_qc_report.findByPk(qc.id, {
            include: [{
                model: crop_variety_qc_param_maps,
                include: [
                    {
                        model: qc_param_types
                    }
                ]
            }]
        }))
    }
    return qc_response;
}

const add_bill_components = async (bill_components, sample_id) => {
    const component_enums = await procurement_order_bill_component_enum.findAll({
        where: {
            name: { [Op.in]: Object.keys(bill_components) },
            is_active: 1
        }
    })
    const added_bill_components = await procurement_order_bill_components.bulkCreate(
        component_enums.filter((component) => bill_components[component.name] !== undefined).map((component) => {
            return {
                order_bill_component_id: component.id || null,
                order_bill_operation_id: component.bill_operation_enum_id || null,
                procurement_crop_sample_id: sample_id || null,
                amount: bill_components[component.name],
                is_active: 1
            }
        })
    );
    return bill_components;
}

const create_master_sample_service = async (newSampleData) => {
    try {
        const { sampleData, reqLocation, sampleSource, lot } = newSampleData;

        const uniqueIdResult = await generate_unique_id({
            state: sampleData.retailerStateName,
            district: sampleData.retailerDistrictName,
            category: categories.MasterSample
        })

        if (uniqueIdResult.status === HTTP_status_codes.internalServerError) {
            return uniqueIdResult;
        }

        if (!sampleData.isMandiTaxPaid) {
            sampleData.mandiTax = 0;
        }

        if (sampleData.leadId) {
            const leads = await purchase_crop_lead.findOne({
                where: {
                    farmart_id: sampleData.leadId,
                    is_active: 1
                }
            });
            if (leads) {
                sampleData.leadId = leads._id;
            }
            else {
                sampleData.leadId = null;
            }
        }

        const TonResult = convertTonToKg({
            sampleWeight: sampleData.sampleWeight
        });
        const gramResult = convertGramToKg({
            emptyBagWeight: sampleData.emptyBagWeight
        });

        const master_merchant_data = await master_merchant_detail.findByPk(sampleData.retailerId);
        const crop_details = await crop_detail.findOne({
            where: {
                id: sampleData.cropId || null,
                is_active: 1
            }
        })
        const variety_details = await crop_varieties_detail.findOne({
            where: {
                id: sampleData.cropVariety || null,
                crop_id: crop_details?.id || null,
                is_active: 1
            }
        })
        const created_by_data = await user_profile.findOne({
            where: {
                id: sampleData.createdBy || null,
                is_active: 1
            }
        });

        const location_data = await locations.findOrCreate({
            where: {
                latitude: sampleData.retailerGeoLocation?.lat || null,
                longitude: sampleData.retailerGeoLocation?.long || null,
                accuracy: sampleData.retailerGeoLocation?.accuracy || null,
                is_active: 1
            }
        })

        if (!sampleData.leadId && sampleSource) {
            const lead_details = await create_price_polling_service(
                null,
                sampleData.purchasePrice,
                sampleData.totalAvailableQuantity,
                crop_details?.id,
                master_merchant_data?.merchant_detail_id,
                master_merchant_data?.id,
                language_enum.english,
                sampleSource,
                created_by_data?.id
            )
            sampleData.leadId = lead_details.id
        }

        let sampleAddedData = await procurment_crop_sample.build({
            farmart_id: uniqueIdResult.data || null,
            sample_weight: TonResult.sampleWeight,
            bag_type: sampleData.bagType || null,
            empty_bag_weight: gramResult.emptyBagWeight,
            loaded_bag_weight: sampleData.loadedBagWeight,
            purchase_price: sampleData.purchasePrice,
            total_available_quantity: sampleData.totalAvailableQuantity,
            transport_cost_est: sampleData.transportCostEst,
            bag_deduction: sampleData.bagDeduction,
            is_mandi_tax_paid: sampleData.isMandiTaxPaid,
            is_active: 1,
            merchant_detail_id: master_merchant_data?.merchant_detail_id || null,
            master_merchant_id: master_merchant_data?.id || null,
            crop_id: crop_details?.id || null,
            crop_variety_id: variety_details?.id || null,
            created_by: created_by_data?.id || null,
            purchase_crop_lead_id: sampleData.leadId || null,
            location_id: location_data[0]?.id || null,
            status: sampleStatus.CREATED,
            f_o_r: sampleData.FOR,
            dispatch_by: sampleData.dispatch_by,
            category: sampleData.category
        }).save();

        const added_bill_component = await add_bill_components({
            mandi_tax: sampleData.mandiTax,
            retailer_commision: sampleData.retailerCommision,
            labour_and_bag_cost: sampleData.labourAndBagCost
        }, sampleAddedData.id);

        const added_qc_report = await add_qc_report(sampleData.qcReport, variety_details?.id, sampleAddedData.id);
        const added_sample_images = await add_sample_images(sampleData.sampleImages, sampleAddedData.id);
        const added_lots = await add_procurement_lots(
            lot,
            sampleAddedData.transport_cost_est,
            sampleAddedData.bag_deduction,
            sampleAddedData.zoho_po_id,
            sampleAddedData.status,
            sampleData.mandiTax,
            sampleData.retailerCommision,
            sampleData.labourAndBagCost,
            sampleAddedData.id
        );
        if (reqLocation) {
            // pa activity logging
            pa_activity_log_service({
                paId: sampleAddedData.created_by,
                actionLocation: reqLocation,
                actionTimestamp: new Date(Date.now()),
                actionPerformed: actionPerformed.SampleAddition,
                retailerId: sampleAddedData.master_merchant_id,
                sampleId: sampleAddedData.id
            }).catch((err) => {
                error_log(err);
            });
        }

        const kgToTonResult = convertKgToTon({
            sampleWeight: sampleAddedData.sample_weight
        });
        const kgTogramResult = convertKgToGram({
            emptyBagWeight: sampleAddedData.empty_bag_weight
        });

        sampleAddedData.sample_weight = kgToTonResult.sampleWeight;
        sampleAddedData.empty_bag_weight = kgTogramResult.emptyBagWeight;

        const response_data = {
            retailerGeoLocation: location_data ? {
                accuracy: location_data[0].accuracy,
                lat: location_data[0].latitude,
                long: location_data[0].longitude,
            } : {},
            isActive: sampleAddedData.is_active,
            status: sampleAddedData.status,
            sampleImages: added_sample_images,
            _id: sampleAddedData.id,
            retailerId: master_merchant_data?.id,
            retailerMobileNumber: master_merchant_data?.mobile_number,
            retailerName: master_merchant_data?.name,
            retailerDistrictName: master_merchant_data?.district_name,
            retailerStateName: master_merchant_data?.state_name,
            retailerPincode: master_merchant_data?.pincode,
            cropName: crop_details?.name,
            cropVariety: variety_details?.id,
            cropVarietyName: variety_details?.name,
            sampleWeight: sampleAddedData.sample_weight,
            totalAvailableQuantity: sampleAddedData.total_available_quantity,
            purchasePrice: sampleAddedData.purchase_price,
            transportCostEst: sampleAddedData.transport_cost_est,
            createdBy: created_by_data ? {
                id: created_by_data.id,
                name: created_by_data.name,
                mobileNumber: created_by_data.mobile_number
            } : {},
            lot: added_lots.map((lot) => {
                const kgToTonResult = convertKgToTon({ lot: lot.weight });
                return kgToTonResult.lot;
            }),
            qcReport: added_qc_report ? added_qc_report.map((qc_report) => {
                return {
                    name: qc_report?.crop_variety_qc_param_map?.qc_param_type?.name,
                    value: qc_report?.value,
                    qcReportId: qc_report?.crop_variety_qc_param_map_id,
                    image: qc_report?.image,
                    thresholdCondition: qc_report?.crop_variety_qc_param_map?.condition,
                    thresholdValue: qc_report?.crop_variety_qc_param_map?.threshold_value
                }
            }) : [],
            cropId: crop_details?.id,
            bagType: sampleAddedData.bag_type,
            emptyBagWeight: sampleAddedData.empty_bag_weight,
            loadedBagWeight: sampleAddedData.loaded_bag_weight,
            bagDeduction: sampleAddedData.bag_deduction,
            isMandiTaxPaid: sampleAddedData.is_mandi_tax_paid,
            mandiTax: added_bill_component.mandi_tax,
            retailerCommision: added_bill_component.retailer_commision,
            labourAndBagCost: added_bill_component.labour_and_bag_cost,
            farmartId: sampleAddedData.farmart_id,
            FOR: sampleAddedData.f_o_r,
            dispatch_by: sampleAddedData.dispatch_by,
            createdAt: sampleAddedData.createdAt,
            updatedAt: sampleAddedData.updatedAt,
            category: sampleData.category
        }
        return { status: HTTP_status_codes.ok, data: response_data };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

module.exports = {
    create_master_sample_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/master_sample/controllers/update_master_sample_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const { update_sample_pa_rpm_service } = require('../services_/update_master_sample_service');
const user_role = require('../../../../enums/user_profile/user_role');
const merchant_category = require('../../../../enums/market_linkage/enums/v2/merchant_category');
const upate_sample_and_lot_details_for_panal_service = require('../services_/upate_sample_and_lot_details_for_panal_service')
const { ValidationError } = require('../../../../utilities/error/custom_error');

const update_sample_common = async (req, res) => {
    const { dataToUpdate = [] } = req.body;

    const { sampleId, lotId } = req.params;

    const { user_role_id: designation } = req.user || {};
    let reqLocation, category;

    switch (designation) {
    case user_role.PROCUREMENT_ASSOCIATE:
        category = merchant_category.PROCUREMENT
        break;
    case user_role.SALES_ASSOCIATE:
    case user_role.STATE_HEAD_SALES:
    case user_role.REGIONAL_MANAGER_SALES:
        category = merchant_category.SALES
        break;
    default:
        category = merchant_category.PROCUREMENT
        break;
    }

    if (designation === user_role.PROCUREMENT_ASSOCIATE) {
        if (!req.headers.geolocation) throw new ValidationError('geolocation header missing');
        reqLocation = JSON.parse(req.headers.geolocation);
    }

    if (!dataToUpdate || !sampleId) {
        return res.status(http_status_code_enum.bad_request).json({
            message: 'array or prop or data or Id missing',
            error: 'Missing params'
        });
    }

    return {
        dataToUpdate,
        sampleId,
        lotId,
        reqLocation,
        category
    }
}

const update_sample_pa_rpm_controller = async (req, res) => {
    try {
        const { dataToUpdate, sampleId, reqLocation, category } = await update_sample_common(req, res);

        const getSampleResult = await update_sample_pa_rpm_service({
            dataToUpdate,
            sampleId,
            reqLocation,
            category
        });

        return res.status(getSampleResult.status).json(getSampleResult.data);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({ message: err.message });
    }
}

const update_sample_controller = async (req, res) => {
    try {
        const { dataToUpdate, sampleId, lotId, reqLocation } = await update_sample_common(req, res);

        // const getSampleResult = await update_sample_service({
        //     dataToUpdate,
        //     sampleId,
        //     lotId,
        //     reqLocation
        // });
        const SampleResult = await upate_sample_and_lot_details_for_panal_service({
            dataToUpdate,
            sampleId,
            lotId,
            reqLocation
        });

        // return res.status(getSampleResult.status).json(getSampleResult.data);
        return res.status(SampleResult.status).json(SampleResult.data);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({ message: err.message });
    }
}

module.exports = {
    update_sample_pa_rpm_controller,
    update_sample_controller
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/master_sample/controllers/get_sample_rpm_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const { get_sample_rpm_service } = require("../services_/get_sample_rpm_service");
const user_role = require("../../../../enums/user_profile/user_role");
const merchant_category = require("../../../../enums/market_linkage/enums/v2/merchant_category");

module.exports = async (req, res) => {
    try {
        const { user_profile_id: user_id, user_role_id: designation } = req.user;

        let category;

        switch (designation) {
            case user_role.PROCUREMENT_ASSOCIATE:
                category = merchant_category.PROCUREMENT
                break;
            case user_role.SALES_ASSOCIATE:
            case user_role.STATE_HEAD_SALES:
            case user_role.REGIONAL_MANAGER_SALES:
                category = merchant_category.SALES
                break;
            default:
                category = merchant_category.PROCUREMENT
                break;
        }

        const { name, number, status, associateId } = req.query;

        const getSampleResult = await get_sample_rpm_service(
            user_id,
            name,
            number,
            status,
            associateId,
            category
        );

        return res.status(getSampleResult.status).json(getSampleResult.data);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({ message: err.message });
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/master_sample/controllers/create_master_sample_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const source_enum = require('../../../../entities_v2/metadata/enums/campaign/source_enum');
const { create_master_sample_service } = require('../services_/create_master_sample_service');
const user_role = require('../../../../enums/user_profile/user_role');
const { dispatchBy } = require('../../../../enums/market_linkage/enums/procurement_crop_sample');
const merchant_category = require('../../../../enums/market_linkage/enums/v2/merchant_category');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const {
            cropName,
            cropId,
            cropVariety,
            sampleWeight,
            totalAvailableQuantity,
            purchasePrice,
            transportCostEst,
            qcReport = [],
            sampleImages = [],
            retailerId,
            retailerMobileNumber,
            retailerName,
            retailerDistrictName,
            retailerStateName,
            retailerPincode,
            retailerGeoLocation,
            bagType,
            emptyBagWeight,
            loadedBagWeight,
            bagDeduction,
            isMandiTaxPaid,
            leadId,
            labourAndBagCost,
            lot = []
        } = req.body;
        const mandiTax = +req.body.mandiTax || 0;
        const retailerCommision = +req.body.retailerCommision || 0;
        const FOR = req.body.FOR || 0;
        const dispatch_by = req.body.dispatch_by || dispatchBy.PA;
        const { user_role_id: designation, user_profile_id } = req.user;
        let reqLocation, sampleSource, category;

        switch (designation) {
        case user_role.PROCUREMENT_ASSOCIATE:
            category = merchant_category.PROCUREMENT
            break;
        case user_role.SALES_ASSOCIATE:
        case user_role.STATE_HEAD_SALES:
        case user_role.REGIONAL_MANAGER_SALES:
            category = merchant_category.SALES
            break;
        default:
            category = merchant_category.PROCUREMENT
            break;
        }

        if (designation === user_role.PROCUREMENT_ASSOCIATE) {
            sampleSource = source_enum.pa;
            if (!req.headers.geolocation) throw new ValidationError('geolocation header missing'); ;
            reqLocation = JSON.parse(req.headers.geolocation);
        }

        if (!labourAndBagCost) {
            throw new ValidationError('labourAndBagCost is a mandatory param');
        }

        if (!cropName) {
            throw new ValidationError('cropName is Missing');
        }

        if (!retailerGeoLocation) {
            throw new ValidationError('Geo location missing');
        }

        if (
            !retailerId ||
            !retailerMobileNumber ||
            !retailerName ||
            !retailerDistrictName ||
            !retailerStateName ||
            !retailerPincode
        ) {
            throw new ValidationError('retailer details is Missing');
        }

        if (!cropId) {
            throw new ValidationError('crop id missing');
        }

        if (!cropVariety) {
            throw new ValidationError('cropVariety is Missing');
        }
        if (sampleWeight === undefined) {
            throw new ValidationError('sampleWeight is Missing');
        }
        if (totalAvailableQuantity === undefined) {
            throw new ValidationError('totalAvailableQuantity is Missing');
        }

        if (purchasePrice === undefined) {
            throw new ValidationError('purchasePrice is missing');
        }

        if (transportCostEst === undefined) {
            throw new ValidationError('transportCostEst is Missing');
        }

        if (!qcReport || typeof qcReport !== 'object' || !qcReport.length) {
            throw new ValidationError('qc report is Missing');
        }

        if (!bagType || emptyBagWeight === undefined || loadedBagWeight === undefined || bagDeduction === undefined) {
            throw new ValidationError('bag details is Missing');
        }

        if (isMandiTaxPaid === undefined) {
            throw new ValidationError('isMandiTaxPaid is Missing');
        }

        if (!lot) {
            throw new ValidationError('lot is missing')
        }

        if (
            !sampleImages ||
            typeof sampleImages !== 'object' ||
            !sampleImages.length
        ) {
            throw new ValidationError('sampleImages is Missing');
        }
        if (isMandiTaxPaid && mandiTax <= 0) {
            throw new ValidationError('mandiTax is Missing');
        }
        if (!retailerCommision) {
            throw new ValidationError('retailerCommision is Missing');
        }
        const sampleAddedResult = await create_master_sample_service({
            sampleData: {
                retailerId,
                retailerMobileNumber,
                retailerName,
                retailerDistrictName,
                retailerStateName,
                retailerPincode,
                cropName,
                cropVariety: cropVariety._id,
                cropVarietyName: cropVariety.name,
                sampleWeight,
                totalAvailableQuantity,
                purchasePrice,
                transportCostEst,
                createdBy: user_profile_id,
                qcReport,
                sampleImages,
                cropId,
                retailerGeoLocation,
                bagType,
                emptyBagWeight,
                loadedBagWeight,
                bagDeduction,
                isMandiTaxPaid,
                leadId,
                mandiTax,
                retailerCommision,
                labourAndBagCost,
                FOR,
                dispatch_by,
                category
            },
            reqLocation,
            sampleSource,
            lot
        });

        return res.status(sampleAddedResult.status).json(sampleAddedResult.data);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({ message: err.message });
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/master_sample/controllers/get_master_sample_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const { get_sample_pa_service, get_sample_service } = require('../services_/get_master_sample_service');
const user_role = require('../../../../enums/user_profile/user_role');
const merchant_category = require('../../../../enums/market_linkage/enums/v2/merchant_category');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const get_sample_common = async (req) => {
    const { status = 'ALL', name, number } = req.query;
    let associated_pa = req.query.associated_pa || 'ALL';

    const { user_profile_id: requestingUserId, user_role_id: designation } = req.user || {};

    let category;

    switch (designation) {
    case user_role.PROCUREMENT_ASSOCIATE:
        category = merchant_category.PROCUREMENT
        break;
    case user_role.SALES_ASSOCIATE:
    case user_role.STATE_HEAD_SALES:
    case user_role.REGIONAL_MANAGER_SALES:
        category = merchant_category.SALES
        break;
    default:
        category = merchant_category.PROCUREMENT
        break;
    }

    if (designation === user_role.PROCUREMENT_ASSOCIATE ||
        designation === user_role.SALES_ASSOCIATE ||
        designation === user_role.REGIONAL_MANAGER_SALES ||
        designation === user_role.STATE_HEAD_SALES) {
        associated_pa = requestingUserId;
    }

    if (!status) {
        throw new ValidationError('Status Missing');
    }
    return {
        status,
        associated_pa,
        name,
        number,
        category
    }
}

const get_sample_pa_controller = async (req, res) => {
    try {
        const { status, associated_pa, name, number, category } = await get_sample_common(req);
        const getSampleResult = await get_sample_pa_service({
            status,
            associated_pa,
            name,
            number,
            category
        });
        res.status(getSampleResult.status).json(getSampleResult.data);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({ message: err.message });
    }
}

const get_sample_controller = async (req, res) => {
    try {
        const { status, associated_pa, name, number, category } = await get_sample_common(req);
        const getSampleResult = await get_sample_service({
            status,
            associated_pa,
            name,
            number,
            category
        });
        res.status(getSampleResult.status).json(getSampleResult.data);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({ message: err.message });
    }
}

module.exports = {
    get_sample_controller,
    get_sample_pa_controller
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/master_sample/controllers/get_dashboard_status_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const { get_dashboard_sample_service } = require("../services_/get_dashboard_status_service");


module.exports = async (req, res) => {
    try {
        const { user_profile_id: user_id } = req.user;

        const getSampleResult = await get_dashboard_sample_service(user_id);

        return res.status(getSampleResult.status).json(getSampleResult.data);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({ message: err.message });
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/master_sample/services/get_sample_rpm_service.js
const masterSampleModel = require("../../../../database/mongoose/market_linkage_db/masterSample.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");
const  get_all_juniors_service  = require("../../users/services/get_all_juniors_service");
const convertKgToGram = require("../../utilities/unitConversion/convertKgToGram");
const convertKgToTon = require("../../utilities/unitConversion/convertKgToTon");

const get_sample_rpm_service = async (userId, name, number, status, associateId) => {
    try {
        const query = {};

        if (associateId) {
            query["createdBy.id"] = associateId;
        } 
        else {
            const juniorUsers = await get_all_juniors_service(userId);

            if (juniorUsers.status !== HTTP_status_codes.ok) {
                return juniorUsers;
            }

            const createdBy = juniorUsers.data.map(function (user) {
                return user.id;
            });

            query["createdBy.id"] = {
                $in: createdBy,
            };
        }

        if (name) {
            query.retailerName = name;
        }

        if (number) {
            query.retailerMobileNumber = number;
        }

        if (status) {
            query.status = status;
        }

        let getSampleData = await masterSampleModel.find(query);

        getSampleData.forEach(sample => {
            const kgToTonResult = convertKgToTon({
                sampleWeight: sample.sampleWeight
            });
            const kgTogramResult = convertKgToGram({
                emptyBagWeight: sample.emptyBagWeight
            })

            sample.sampleWeight = kgToTonResult.sampleWeight;
            sample.emptyBagWeight = kgTogramResult.emptyBagWeight;
        });

        return { status: HTTP_status_codes.ok, data: getSampleData };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

module.exports = {
    get_sample_rpm_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/master_sample/services/get_master_sample_service.js
const masterSampleModel = require("../../../../database/mongoose/market_linkage_db/masterSample.model");
const procurementSourcesModel = require("../../../../database/mongoose/market_linkage_db/procurementSources.model");
const purchaseOrderModel = require("../../../../database/mongoose/market_linkage_db/purchaseOrder.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");
const convertKgToGram = require("../../utilities/unitConversion/convertKgToGram");
const convertKgToTon = require("../../utilities/unitConversion/convertKgToTon");

const get_master_sample_service = async (filters) => {
    try {

        const { status, associated_pa, name, number } = filters;

        const query = {
            status,
            "createdBy.id": associated_pa,
        };

        if (status === "ALL") {
            delete query.status;
        }

        if (associated_pa === "ALL") {
            delete query["createdBy.id"];
        }

        if (name) {
            query.retailerName = name;
        }

        if (number) {
            query.retailerMobileNumber = number;
        }

        let getSampleData = await masterSampleModel.find(query).sort({ "updatedAt": -1 });

        let result = [];

        let retailerIds = [], poIds = [];

        for (const element of getSampleData) {
            retailerIds.push(element.retailerId);
            poIds.push(element.poId);
        }

        const procurementResult = await procurementSourcesModel.find({ '_id': { $in: retailerIds } })
            .sort({ "updatedAt": -1 });

        const poDetails = await purchaseOrderModel.find({ '_id': { $in: poIds } })
            .sort({ "updatedAt": -1 });

        /** @refactor
         * bad logic used here. need to be modified.
         */

        for (const sample of getSampleData) {
            for (const retailer of procurementResult) {
                if ((sample.retailerId).toString() === (retailer._id).toString()) {
                    let sampleRecord = { ...sample._doc };
                    sampleRecord.retailerEmail = retailer.email;
                    sampleRecord.retailerBusinessName = retailer.business_name;
                    sampleRecord.retailerFarmartId = retailer.farmartId;
                    result.push(sampleRecord);
                }
            }
        }

        result.forEach(sample => {
            for (const po of poDetails) {
                if (sample.poId && (sample.poId).toString() === (po._id).toString()) {
                    sample.poStatus = po.status;
                }
            }
        });

        result.forEach(sample => {
            const kgToTonResult = convertKgToTon({
                sampleWeight: sample.sampleWeight
            });
            const kgTogramResult = convertKgToGram({
                emptyBagWeight: sample.emptyBagWeight
            })

            sample.sampleWeight = kgToTonResult.sampleWeight;
            sample.emptyBagWeight = kgTogramResult.emptyBagWeight;
        });

        return { status: HTTP_status_codes.ok, data: result };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

module.exports = {
    get_master_sample_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/master_sample/services/update_master_sample_service.js
const { pa_activity_log_service } = require("../../../../common_services/market_linkage/logging/pa_activity_log_service");
const masterSampleModel = require("../../../../database/mongoose/market_linkage_db/masterSample.model");
const procurementSourcesModel = require("../../../../database/mongoose/market_linkage_db/procurementSources.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { sampleStatus } = require("../../../../enums/market_linkage/enums/masterSampleEnum");
const { userStatus } = require("../../../../enums/market_linkage/enums/procurementSources")
const error_log = require("../../../../middelware/error_log");
const { create_purchase_order_service } = require("../../purchase_order/services/create_purchase_order_service");
const convertGramToKg = require("../../utilities/unitConversion/convertGramToKg");
const convertKgToGram = require("../../utilities/unitConversion/convertKgToGram");
const convertKgToTon = require("../../utilities/unitConversion/convertKgToTon");
const convertTonToKg = require("../../utilities/unitConversion/convertTonToKg");
const {actionPerformed} = require("../../../../enums/market_linkage/enums/paActivityEnum")

const update_master_sample_service = async (params) => {
    try {
        const { dataToUpdate, sampleId, reqLocation } = params;

        const updateData = {};

        dataToUpdate.forEach(function (data) {
            if (data.property === "sampleWeight") {
                const TonResult = convertTonToKg({
                    sampleWeight: data.data
                });
                updateData[data.property] = TonResult.sampleWeight;
            }
            else if (data.property === "emptyBagWeight") {
                const gramResult = convertGramToKg({
                    emptyBagWeight: data.data
                });
                updateData[data.property] = gramResult.emptyBagWeight;
            }
            else if (!(data.property === "status" && data.data === sampleStatus.PURCHASE_ORDER_CREATED)) {
                updateData[data.property] = data.data;
            }
        });

        const UpdatedSample = await masterSampleModel.findByIdAndUpdate(sampleId, updateData, { new: true });

        if (!UpdatedSample) {
            return {
                status: HTTP_status_codes.badRequest,
                data: { message: "Invalid sample id" },
            };
        }

        let UpdatedStatus, poStatus;

        for (const data of dataToUpdate) {
            if (data.property === "status" && data.data === sampleStatus.PURCHASE_ORDER_CREATED) {
                const retailerStatus = await procurementSourcesModel.findOne({ _id: UpdatedSample.retailerId, status: userStatus.APPROVED });
                if (!retailerStatus) {
                    return {
                        status: HTTP_status_codes.badRequest,
                        data: { message: "Retailer not approved" },
                    };
                }
                const addedPO = await create_purchase_order_service(UpdatedSample, { new: true });
                if (addedPO.status !== HTTP_status_codes.ok) {
                    return addedPO
                }
                poStatus = addedPO.data.status;
                //Updating sample after PO creation is successful
                UpdatedStatus = await masterSampleModel.findByIdAndUpdate(sampleId,
                    {
                        status: data.data,
                        poNumber: addedPO.data.farmartId,
                        poId: addedPO.data.id
                    },
                    { new: true });
            }
        }

        const UpdatedResult = UpdatedStatus ? { ...UpdatedStatus._doc, poStatus } : UpdatedSample;

        if (UpdatedResult && reqLocation) {
            // pa activity logging
            pa_activity_log_service({
                paId: UpdatedResult.createdBy.id,
                actionLocation: reqLocation,
                actionTimestamp: new Date(Date.now()),
                actionPerformed: actionPerformed.SampleModification,
                retailerId: UpdatedResult.retailerId,
                sampleId: UpdatedResult._id
            }).catch((err) => {
                error_log(err);
            })

            const kgToTonResult = convertKgToTon({
                sampleWeight: UpdatedResult.sampleWeight
            });
            const kgTogramResult = convertKgToGram({
                emptyBagWeight: UpdatedResult.emptyBagWeight
            })

            UpdatedResult.sampleWeight = kgToTonResult.sampleWeight;
            UpdatedResult.emptyBagWeight = kgTogramResult.emptyBagWeight;
        }


        return { status: HTTP_status_codes.ok, data: UpdatedResult };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

module.exports = {
    update_master_sample_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/master_sample/services/get_dashboard_status_service.js
const masterSampleModel = require("../../../../database/mongoose/market_linkage_db/masterSample.model");
const procurementSourcesModel = require("../../../../database/mongoose/market_linkage_db/procurementSources.model");
const purchaseOrderModel = require("../../../../database/mongoose/market_linkage_db/purchaseOrder.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");
const  get_all_juniors_service  = require("../../users/services/get_all_juniors_service");
const convertKgToGram = require("../../utilities/unitConversion/convertKgToGram");
const convertKgToTon = require("../../utilities/unitConversion/convertKgToTon");

const get_dashboard_sample_service = async (userId) => {
    try {
        const query = {};

        const juniorUsers = await get_all_juniors_service(userId);

        if (juniorUsers.status !== HTTP_status_codes.ok) {
            return juniorUsers;
        }

        const createdBy = juniorUsers.data.map(function (user) {
            return user._id;
        });

        query["createdBy.id"] = {
            $in: createdBy,
        };

        const getSampleData = await masterSampleModel.aggregate([
            {
                $match: query,
            },
            {
                $group: {
                    _id: { status: "$status" },
                    count: { $sum: 1 },
                },
            },
        ]);

        const dashboardStates = {};

        /** @refactor
         *  set an object to get desired status
         *  instead of turnery operator
         *  use enums instead of hardcodded values
         */
        getSampleData.forEach(function (sampleData) {
            dashboardStates[
                sampleData._id.status === 2
                    ? "approved"
                    : sampleData._id.status === 3
                        ? "pricenegotiate"
                        : sampleData._id.status === 4
                            ? "sampleimages"
                            : sampleData._id.status === 1
                                ? "pending"
                                : sampleData._id.status === 5
                                    ? "qc"
                                    : "rejected"
            ] = sampleData.count;
        });

        return { status: HTTP_status_codes.ok, data: dashboardStates };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

module.exports = {
    get_dashboard_sample_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/master_sample/services/create_master_sample_service.js
const { pa_activity_log_service } = require("../../../../common_services/market_linkage/logging/pa_activity_log_service");
const masterSampleModel = require("../../../../database/mongoose/market_linkage_db/masterSample.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");
const convertGramToKg = require("../../utilities/unitConversion/convertGramToKg");
const convertKgToGram = require("../../utilities/unitConversion/convertKgToGram");
const convertKgToTon = require("../../utilities/unitConversion/convertKgToTon");
const convertTonToKg = require("../../utilities/unitConversion/convertTonToKg");
const { actionPerformed } = require("../../../../enums/market_linkage/enums/paActivityEnum");
const { generate_unique_id } = require("../../../../common_services/unique_id_generation/generate_unique_id");
const { categories } = require("../../../../enums/market_linkage/enums/categories");
const create_price_polling_service = require("../../../../entities_v2/campaign_services/create_price_polling_service");
const language_enum = require("../../../../entities_v2/metadata/enums/global/langauge");
const leads_model = require("../../../../database/mongoose/market_linkage_db/lead.model");

const create_master_sample_service = async (newSampleData) => {
    try {
        const { sampleData, reqLocation, sampleSource } = newSampleData;

        const uniqueIdResult = await generate_unique_id({
            state: sampleData.retailerStateName,
            district: sampleData.retailerDistrictName,
            category: categories.MasterSample
        })

        if (uniqueIdResult.status === HTTP_status_codes.internalServerError) {
            return uniqueIdResult;
        }

        sampleData.farmartId = uniqueIdResult.data;

        if (!sampleData.isMandiTaxPaid) {
            sampleData.mandiTax = 0;
        }

        if (sampleData.leadId) {
            const leads = await leads_model.findOne({
                farmart_id: sampleData.leadId
            });
            if (leads) {
                sampleData.leadId = leads._id;
            }
            else {
                sampleData.leadId = null;
            }
        }

        if (!sampleData.leadId && sampleSource) {
            const lead_details = await create_price_polling_service(
                null,
                sampleData.purchasePrice,
                sampleData.totalAvailableQuantity,
                sampleData.cropId,
                sampleData.retailerId,
                language_enum.english,
                sampleSource,
                sampleData.createdBy?.id
            )
            sampleData.leadId = lead_details.id
        }


        const TonResult = convertTonToKg({
            sampleWeight: sampleData.sampleWeight
        });
        const gramResult = convertGramToKg({
            emptyBagWeight: sampleData.emptyBagWeight
        })

        sampleData.sampleWeight = TonResult.sampleWeight;
        sampleData.emptyBagWeight = gramResult.emptyBagWeight;

        let sampleAddedData = await masterSampleModel.create(sampleData);

        if (reqLocation) {
            // pa activity logging
            pa_activity_log_service({
                paId: sampleAddedData.createdBy.id,
                actionLocation: reqLocation,
                actionTimestamp: new Date(Date.now()),
                actionPerformed: actionPerformed.SampleAddition,
                retailerId: sampleAddedData.retailerId,
                sampleId: sampleAddedData.id
            }).catch((err) => {
                error_log(err);
            })
        }

        const kgToTonResult = convertKgToTon({
            sampleWeight: sampleAddedData.sampleWeight
        });
        const kgTogramResult = convertKgToGram({
            emptyBagWeight: sampleAddedData.emptyBagWeight
        })

        sampleAddedData.sampleWeight = kgToTonResult.sampleWeight;
        sampleAddedData.emptyBagWeight = kgTogramResult.emptyBagWeight;

        return { status: HTTP_status_codes.ok, data: sampleAddedData };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

module.exports = {
    create_master_sample_service
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/quiz/index.js
const router = require("express").Router();
const authorize = require("../../../middelware/authorized_routes");
const user_roles_enum = require("../../../entities/metadata/enums/user_roles");
const get_recent_quiz_controller = require("./controllers/get_recent_quiz_controller");
const get_quiz_result_controller = require("./controllers/get_quiz_result_controller");
const get_quiz_question_form_controller = require("./controllers/get_quiz_question_form_controller");

router.get("/recent",authorize([user_roles_enum.Merchant]),get_recent_quiz_controller);
router.get("/result",authorize([user_roles_enum.Merchant]),get_quiz_result_controller);
router.get("/test",authorize([user_roles_enum.Merchant]),get_quiz_question_form_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/quiz/controllers/get_quiz_question_form_controller.js
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const get_quiz_question_form_service = require('../services/get_quiz_question_form_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const quiz_detail_id = req.query.quiz_detail_id;
        if (!quiz_detail_id) {
            throw new ValidationError('quiz_detail_id is a compulsory parameter');
        }
        const quiz_result = await get_quiz_question_form_service(quiz_detail_id)
        const quiz_result_response = create_api_response(true, 'success', quiz_result);
        return res.status(http_status_code_enum.ok).json(quiz_result_response);
    } catch (err) {
        return res.status(http_status_code_enum.bad_request).json({
            message: err.message
        });
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/quiz/controllers/get_recent_quiz_controller.js
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const get_recent_quiz_service = require("../services/get_recent_quiz_service");

module.exports = async (req, res) => {
  try {
    let merchant_detail_id = req.user.user_profile_id
    let recent_quiz = await get_recent_quiz_service(merchant_detail_id);
    let recent_quiz_response = create_api_response(true, "success", recent_quiz);
    return res.status(http_status_code_enum.ok).json(recent_quiz_response);
  } catch (err) {
    return res.status(http_status_code_enum.bad_request).json({
      message: err.message,
    });
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/quiz/controllers/get_quiz_result_controller.js
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const get_quiz_result_service = require('../services/get_quiz_result_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const quiz_detail_id = req.query.quiz_detail_id;
        const merchant_detail_id = req.user.user_profile_id
        if (!quiz_detail_id) {
            throw new ValidationError('quiz_detail_id is a compulsory parameter');
        }
        const quiz_result = await get_quiz_result_service(quiz_detail_id, merchant_detail_id)
        const quiz_result_response = create_api_response(true, 'success', quiz_result);
        return res.status(http_status_code_enum.ok).json(quiz_result_response);
    } catch (err) {
        return res.status(http_status_code_enum.bad_request).json({
            message: err.message
        });
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/quiz/services/get_quiz_question_form_service.js
const error_log = require('../../../../middelware/error_log');
const quiz_question_map_model = require('../../../../database/models_v2/quiz/quiz_question_map');
const quiz_detail_model = require('../../../../database/models_v2/quiz/quiz_detail');
const quiz_question_model = require('../../../../database/models_v2/quiz/quiz_question');
const quiz_options_model = require('../../../../database/models_v2/quiz/quiz_options');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const get_quiz_question_form_service = (quiz_detail_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            const quiz_detail = await quiz_detail_model.findOne({
                where: {
                    id: quiz_detail_id,
                    is_active: 1
                },
                attributes: ['live_from', 'live_till']
            });
            if (!quiz_detail) {
                throw new ValidationError('quiz not exists')
            }
            const quiz_questions = await quiz_question_map_model.findAll({
                where: {
                    quiz_detail_id,
                    is_active: 1
                },
                attributes: ['question_id'],
                include: [
                    {
                        model: quiz_question_model,
                        where: {
                            is_active: 1
                        },
                        attributes: [['content', 'question']],
                        include: [
                            {
                                model: quiz_options_model,
                                where: {
                                    is_active: 1
                                },
                                attributes: ['id', 'content']
                            }
                        ]
                    }
                ]
            });

            const questions = [];
            for (let i = 0; i < quiz_questions.length; i++) {
                const options = []; const option = quiz_questions[i].quiz_question.dataValues.quiz_options
                for (let i = 0; i < option.length; i++) {
                    const option_obj = {
                        option_id: option[i].id,
                        content: option[i].content
                    }
                    options.push(option_obj)
                }
                const questions_obj = {
                    question_id: quiz_questions[i].question_id,
                    content: quiz_questions[i].quiz_question.dataValues.question,
                    option: options

                };
                questions.push(questions_obj);
            }
            const quiz_question_form = {
                quiz_detail_id,
                live_from: quiz_detail.dataValues.live_from,
                live_till: quiz_detail.dataValues.live_till,
                questions
            };
            resolve(quiz_question_form);
        } catch (ex) {
            error_log(ex);
            reject({ message: ex.message });
        }
    });
};

module.exports = get_quiz_question_form_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/quiz/services/get_recent_quiz_service.js
const error_log = require('../../../../middelware/error_log');
const quiz_detail_model = require('../../../../database/models_v2/quiz/quiz_detail');
const quiz_merchant_submission_model = require('../../../../database/models_v2/quiz/quiz_merchant_submission');
const Op = require('sequelize').Op;
const { ValidationError } = require('../../../../utilities/error/custom_error');

const get_recent_quiz_service = (merchant_detail_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            const today = new Date(); let running; let participated;
            const quiz_detail = await quiz_detail_model.findOne({
                where: {
                    is_active: 1,
                    live_from: {
                        [Op.lte]: today
                    }
                },
                attributes: ['id', 'live_from', 'live_till', 'heading'],
                order: [['live_from', 'desc']]
            });
            if (!quiz_detail) {
                throw new ValidationError('quiz not available')
            }
            if (quiz_detail.dataValues.live_from < today && quiz_detail.dataValues.live_till > today) {
                running = true;
            } else {
                running = false
            }
            const quiz_submission = await quiz_merchant_submission_model.findOne({
                where: {
                    merchant_detail_id,
                    quiz_detail_id: quiz_detail.dataValues.id,
                    is_active: 1
                }
            });
            const total_participant = await quiz_merchant_submission_model.count({
                where: {
                    quiz_detail_id: quiz_detail.dataValues.id,
                    is_active: 1
                }
            });
            if (quiz_submission) {
                participated = true
            } else {
                participated = false
            }

            const recent_quiz = {
                quiz_detail_id: quiz_detail.dataValues.id,
                participated,
                running,
                live_from: quiz_detail.dataValues.live_from,
                live_till: quiz_detail.dataValues.live_till,
                heading: quiz_detail.dataValues.heading,
                total_participants: total_participant
            };
            resolve({ quiz: recent_quiz });
        } catch (ex) {
            error_log(ex);
            reject({ message: ex.message });
        }
    });
};

module.exports = get_recent_quiz_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/quiz/services/get_quiz_result_service.js
const error_log = require("../../../../middelware/error_log");
const quiz_question_map_model = require("../../../../database/models_v2/quiz/quiz_question_map");
const quiz_merchant_submission_model = require("../../../../database/models_v2/quiz/quiz_merchant_submission");
const quiz_merchant_response_model = require("../../../../database/models_v2/quiz/quiz_merchant_response");
const quiz_question_model = require("../../../../database/models_v2/quiz/quiz_question");
const quiz_options_model = require("../../../../database/models_v2/quiz/quiz_options");
const Op = require("sequelize").Op;
const get_quiz_result_service = (quiz_detail_id, merchant_detail_id) => {
  return new Promise(async (resolve, reject) => {
    try {
      const quiz_questions = await quiz_question_map_model.findAll({
        where: {
          quiz_detail_id: quiz_detail_id,
          is_active: 1,
        },
        attributes: ["question_id"],
        include: [
          {
            model: quiz_question_model,
            where: {
              is_active: 1,
            },
            attributes: [["content", "question"]],
            include: [
              {
                model: quiz_options_model,
                where: {
                  is_active: 1,
                  is_correct: 1,
                },
                attributes: ["content", "is_correct"],
              },
            ],
          },
        ],
      });
      let total_questions = quiz_questions.map((ques) => ques.question_id);

      const quiz_merchant_response =
        await quiz_merchant_response_model.findAll({
          where: {
            quiz_detail_id: quiz_detail_id,
            merchant_detail_id,
            is_active: 1,
          },
          attributes: ["quiz_option_id"],
          include: [
            {
              model: quiz_options_model,
              where: {
                is_active: 1,
              },
              attributes: ["content"],
            },
          ],
        });
      let questions = [];
      for (let i = 0; i < quiz_questions.length; i++) {
        let questions_obj = {
          question: quiz_questions[i].quiz_question.dataValues.question,
          correct_option: quiz_questions[i].quiz_question.dataValues.quiz_options[0].dataValues.content,
          merchant_selected_option : null
        };
        if (quiz_merchant_response.length > 0) {
          questions_obj.merchant_selected_option = quiz_merchant_response[i].quiz_option.dataValues.content;
        }
        questions.push(questions_obj);
      }

      const quiz_correct_answered =
        await quiz_merchant_submission_model.findOne({
          where: {
            quiz_detail_id: quiz_detail_id,
            merchant_detail_id,
            is_active: 1,
          },
          attributes: ["correct_questions_answered"],
        });
      let result_obj = {
        quiz_detail_id,
        total_questions: total_questions.length,
        correct_answered: quiz_correct_answered?.correct_questions_answered || 0,
        questions: questions,
      };
      resolve(result_obj);
    } catch (ex) {
      error_log(ex);
      reject({ message: ex.message });
    }
  });
};

module.exports = get_quiz_result_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/index.js
const router = require('express').Router();
const rake_routes = require('./rake');
const sms = require('./sms');
const campaign_routes = require('./campaign');
const distributer_routes = require('./distributer');
const gamification_routes = require('./gamification');
const farmer_routes = require('./farmer');
const whatsapp_routes = require('./whatsapp');
const location_routes = require('./location');
const swagger = require('./utilities/swagger-config');
const quiz = require('./quiz');
const news_feed = require('./news_feeds');
const purchase_order = require('./purchase_order');
const payment = require('./payment');
const crop = require('./crop');
const variety = require('./variety');
const sales = require('./sales');
const users = require('./users');
const procurement_sources = require('./procurement_sources');
const buyer = require('./buyer');
const so_target = require('./so_target');
const master_sample = require('./master_sample');
const multimedia = require('./multimedia');
const price_polling = require('./price_polling');
const mandi_taxation = require('./mandi_taxation');
const po_so_invoicing = require('./po_so_invoicing');
const po_unloading = require('./po_unloading');
const warehouse = require('./warehouse')
const auth = require('./auth');
const merchant = require('./merchant');
const metadata = require('./metadata');
const story = require('./story');
const po_remapping = require('./po_remapping');
const order_tracking = require('./order_tracking');
const crop_advisory = require('./crop_advisory');
const notification = require('./notification');
const zoho = require('./zoho');
const weather = require('./weather');
const home_screen = require('./home_screen');
const utm = require('./utm');
const app_banner = require('./app_banner');
const trade = require('./trade');
const sauda = require('./sauda');
const dispatch = require('./dispatch');
const app_version = require('./app_version');
const faq = require('./faq');

router.use('/rake', rake_routes);
router.use('/campaign', campaign_routes);
router.use('/distributer', distributer_routes);
router.use('/gamification', gamification_routes);
router.use('/farmer', farmer_routes);
router.use('/whatsapp', whatsapp_routes);
router.use('/location', location_routes);
router.use('/quiz', quiz);
router.use('/news_feed', news_feed);
router.use('/purchase_order', purchase_order);
router.use('/po_unloading', po_unloading);
router.use('/payment', payment);
router.use('/sales', sales);
router.use('/users', users);
router.use('/so_target', so_target);
router.use('/swagger', swagger);
router.use('/crop', crop);
router.use('/procurement_sources', procurement_sources);
router.use('/buyer', buyer);
router.use('/crop', variety); // variety routes also comes under crop
router.use('/master_sample', master_sample)
router.use('/multimedia', multimedia);
router.use('/price_polling', price_polling);
router.use('/mandi_taxation', mandi_taxation);
router.use('/po_so_invoicing', po_so_invoicing);
router.use('/auth', auth);
router.use('/message', require('./message'));
router.use('/metadata', metadata);
router.use('/warehouse', warehouse)
router.use('/story', story);
router.use('/po_remapping', po_remapping)
router.use('/merchant', merchant)
router.use('/order_tracking', order_tracking)
router.use('/crop_advisory', crop_advisory)
router.use('/po_remapping', po_remapping);
router.use('/merchant', merchant);
router.use('/notification', notification);
router.use('/zoho', zoho)
router.use('/weather', weather)
router.use('/home_screen', home_screen)
router.use('/sms', sms);
router.use('/utm', utm);
router.use('/app_banner', app_banner);
router.use('/trade', trade);
router.use('/sauda', sauda);
router.use('/dispatch', dispatch);
router.use('/app_version', app_version);
router.use('/faq', faq);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/message/swagger/index.js
module.exports = {
    tags: {
        name: "message",
    },
    paths: {
        "/panel/broadcast": {
            post: {
                tags: ["message"],
                summary: "broadcast for panel",
                description: "broadcast_sms_panel",
                operationId: "broadcast_sms_panel",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "formData",
                        name: "numbers",
                        description: "recipents without country code comma seperated",
                        required: true,
                        type: "string",
                    },
                    {
                        in: "formData",
                        name: "message",
                        description: "message string",
                        required: true,
                        type: "string",
                    },
                    {
                        in: "formData",
                        name: "template_id",
                        description: "required in case of operator for india",
                        required: false,
                        type: "string",
                    },
                    {
                        in: "formData",
                        name: "country_code",
                        description: "country_code",
                        required: true,
                        type: "string",
                    }
                ],
                responses: {
                    405: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    },
                },
            },
        },
        "/campaign_broadcast": {
            post: {
              tags: ["message"],
              summary: "campaign_broadcast",
              description: "",
              operationId: "campaign_broadcast",
              security: [{ Bearer: ["read"] }],
              parameters: [
                {
                  in: "body",
                  name: "body",
                  description: "date format for from and to 2023-01-26 00:00:00",
                  schema: {
                    type: "object",
                    required: [
                        "mobile_numbers","branch_url","crop_id","min_price","max_price","banner_img_url","weight_in_ton"
                    ],
                    properties: {
                      crop_id: {
                        type: "number",
                      },
                      branch_url: {
                        type: "string",
                      },
                      min_price_per_quintal: {
                        type: "number",
                      },
                      max_price_per_quintal: {
                        type: "number",
                      },
                      weight_in_ton: {
                        type: "number",
                      },
                      banner_img_url: {
                        type: "string",
                      },
                      campaign_start_date: {
                        type: "string",
                      },
                      mobile_numbers: {
                        type: "array",
                        items: {
                          type: "string",
                        },
                      },
                    },
                  },
                },
              ],
              responses: {
                405: {
                  description: "Invalid input",
                },
                200: {
                  description: "success",
                },
              },
            },
          },
    },
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/message/index.js
const router = require("express").Router();

const delivery_report_twilio_controller = require("./controllers/delivery_report_twilio");
const panel_broadcast_sms_controller = require("./controllers/panel_broadcast_sms_controller.js");
const authorize = require("../../../middelware/authorized_routes");
const user_role_enum = require("../../../enums/user_profile/user_role");
const campaign_broadcast_controller = require("./controllers/campaign_broadcast_controller.js");

router.post("/twilio_dlr", delivery_report_twilio_controller);
router.get("/twilio_dlr", delivery_report_twilio_controller);
router.post("/panel/broadcast", authorize([user_role_enum.digital_marketing, user_role_enum.market_linkage_system]), panel_broadcast_sms_controller);
router.post("/campaign_broadcast", authorize([user_role_enum.market_linkage_system]), campaign_broadcast_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/message/controllers/campaign_broadcast_controller.js
const error_log=require('../../../../middelware/error_log');
const create_api_response=require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const campaign_broadcast_service=require('../services/campaign_broadcast_service');

module.exports=async (req,res)=>{
    try{
        const mobile_numbers  =req.body.mobile_numbers,branch_url=req.body.branch_url,
        crop_id=+req.body.crop_id || 0,
        min_price=req.body.min_price_per_quintal,
        max_price=req.body.max_price_per_quintal,
        banner_img_url=req.body.banner_img_url,
        weight_in_ton=req.body.weight_in_ton,
        campaign_start_date=req.body.campaign_start_date;
        
        if(mobile_numbers.length==0 || crop_id==0 || !min_price || !max_price ||!banner_img_url || !campaign_start_date)
        {
            let message="missing required params"
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false,message));
        }
        let campaign_data =await campaign_broadcast_service(mobile_numbers,branch_url,crop_id,min_price,max_price,banner_img_url,weight_in_ton,campaign_start_date);
        let campaign_data_response=create_api_response(true,"successfull",campaign_data);
        return res.status(http_status_code_enum.ok).json(campaign_data_response);
    }catch(ex){
        error_log(ex);
       return res.status(http_status_code_enum.bad_request).json(create_api_response(false,ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/message/controllers/delivery_report_twilio.js
const error_log = require("../../../../middelware/error_log");
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");

module.exports = async (req, res) => {
    try {
        console.log(req.body);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'Success'));
    }
    catch (err) {
        error_log(err);
        return res.json(create_api_response(false, ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/message/controllers/panel_broadcast_sms_controller.js
const { get_data_from_settings } = require("../../../../entities/metadata/service/application_version_service");
const settings_enum = require("../../../../enums/global/settings_enum");
const country_code_enum = require("../../../../enums/global/country_code");
const http_status_code_enum = require("../../../../enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const store_sms_into_queue_service = require("../../../../entities_v2/sms/service/meta/store_sms_into_queue");
const BROADCAST_SMS_LIMIT = 10000;
const send_sms_direct = require("../../../../entities/sms/service/send_sms_direct");
const sender_ids = require("../../../../enums/message/sender_ids");

module.exports = async (req, res) => {
    try {
        let { message, numbers, template_id } = req.body;
        const country_code = +req.body.country_code || country_code_enum.india;
        if (!message || !numbers || !template_id) {
            const err_message = "message, numbers and template_id are mandatory fields";
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err_message));
        }

        let setting_customer_care = await get_data_from_settings(settings_enum.farmart_customer_care_phone_number);
        numbers = numbers.split(",");
        numbers = numbers.map(ele => +ele);
        numbers = numbers.filter(ele => ele);
        if (numbers.length > BROADCAST_SMS_LIMIT) {
            const err_message = "numbers length can not be more than 100";
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err_message));
        }
        if ((template_id == "1107168786224141691" || template_id == "1107169865584262480" || template_id == "1107169873553235229") && numbers?.length == 1) {
            await send_sms_direct(numbers[0] + "", message, template_id, undefined, undefined, +setting_customer_care, country_code, sender_ids.FMTSB)
        }
        else
            await store_sms_into_queue_service(message, numbers, new Date(), setting_customer_care, undefined, template_id, false, undefined, undefined, undefined, country_code);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, "scheduled, will be delivered shortly"));
    }
    catch (ex) {
        return res.status(http_status_code_enum.bad_request).json(create_api_response(true, ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/message/services/campaign_broadcast_service.js
const error_log = require("../../../../middelware/error_log");
const {
  get_merchant_ids,
} = require("../../../../data_abstraction_layer/merchant/merchant_details");
const notification_event_enum = require("../../../../enums/notification/notification_event_enum");
const {
  get_crop_vernacular_metadata,
} = require("../../../../data_abstraction_layer/crop/crop_vernacular_metadata");
const language_enum = require("../../../../enums/global/language");
const fetch_notification_string_service = require("../../../../entities_v2/notification/services/fetch_notification_string");
const firebase_admin = require("../../../../notifier/firebase_admin");
const {
  get_data_from_settings,
} = require("../../../../entities/metadata/service/application_version_service");
const settings_enum = require("../../../../enums/global/settings_enum");
const sms_template_enum = require("../../../../entities/metadata/enums/sms_template_enum");
const fetch_sms_template_by_type_id = require("../../../../entities_v2/sms/service/meta/fetch_sms_template_by_type_id");
const sms_generator_from_template = require("../../../../entities_v2/sms/service/meta/sms_generator_from_template");
const store_sms_into_queue_service = require("../../../../entities_v2/sms/service/meta/store_sms_into_queue");
const whatsapp_publish_alert = require("../../../../common_services/campaign/whatsapp_publish_alert");

module.exports = async (
  mobile_numbers,
  branch_url,
  crop_id,
  min_price,
  max_price,
  banner_img_url,
  weight_in_ton,
  campaign_start_date
) => {
  try {
    let country_codes = [91];
    // removing 91 from mobile numbers
    mobile_numbers = mobile_numbers.map((ele) => ele.substring(2));
    // get merchant_detail_ids
    let merchants = await get_merchant_ids({ mobile_numbers, country_codes });
    let merchant_ids = get_merchant_mobile_number_and_id(merchants);
    // get crop vernacular details
    let crop_details = await get_crop_vernacular_metadata({
      crop_id,
      language_id: language_enum.english,
    });
    // notification
    let crop_obj = {
      crop_id,
      name: crop_details?.rows[0]?.name,
      weight_in_ton,
      min_price,
      max_price,
    };
    await send_notification_for_campaign_broadcast(
      crop_obj,
      banner_img_url,
      merchant_ids
    );
    // date formatted dd/mm/yy
    let c_date = campaign_start_date.indexOf(" ");
    let formatted_date = campaign_start_date.substring(0, c_date);
    formatted_date = formatted_date.split("-");
    // let campaign_date =
    //   formatted_date[2] + "/" + formatted_date[1] + "/" + formatted_date[0];

    // mesage storing in queue to send
    // let variables = {
    //   crop_name: crop_obj.name,
    //   max_price: max_price,
    //   price: min_price + " - " + max_price + " rs/quintal",
    //   campaign_live_from: campaign_date,
    // };
    // await send_sms_for_campaign_broadcast(
    //   variables,
    //   mobile_numbers,
    //   country_codes[0],
    //   branch_url
    // );

    await whatsapp_publish_alert({ image_url: banner_img_url, branch_url, crop_name: crop_obj.name, min_price, max_price, mobile_numbers });

    return { audience_count: mobile_numbers.length };
  } catch (err) {
    error_log(err);
    return null;
  }
};
const get_merchant_mobile_number_and_id = (merchants) => {
  let merchant_detail_ids = [];
  for (let i = 0; i < merchants.rows.length; i++) {
    let id = merchants.rows[i].id;
    merchant_detail_ids.push(id);
  }
  return merchant_detail_ids;
};

const send_notification_for_campaign_broadcast = async (
  crop_obj,
  image,
  merchant_ids
) => {
  const campaign_broadcast_notification =
    await fetch_notification_string_service(
      notification_event_enum.campaign_broadcast,
      language_enum.hindi,
      {
        crop_name: crop_obj.name,
        weight_in_mt: crop_obj.weight_in_ton,
        min_price: crop_obj.min_price,
        max_price: crop_obj.max_price,
        price: crop_obj.min_price + "-" + crop_obj.max_price + " rs/quintal",
      }
    );
    let data={
      name: crop_obj.name,
          crop_id:crop_obj.crop_id+"",
          crop_img_url:image
    }
  firebase_admin
    .send_notification(
      merchant_ids,
      campaign_broadcast_notification.title,
      campaign_broadcast_notification.message,
      image, //img url
      {
        new_screen_name: "CAMPAIGN",
        new_tab_name: "MARKETING_TAB",
        payload:JSON.stringify({data})
      }
    )
    .catch((err) => {
      error_log(err);
    });
};
const send_sms_for_campaign_broadcast = async (
  variable,
  recipent,
  country_id,
  branch_url
) => {
  let sms_template = await fetch_sms_template_by_type_id(
    sms_template_enum.campaign_broadcast_sms,
    language_enum.hindi
  );
  let variables = [
    variable.crop_name,
    variable.price,
    branch_url,
    variable.campaign_live_from,
  ];
  let campaign_sms = await sms_generator_from_template(
    sms_template.template,
    variables
  );
  let setting_customer_care = await get_data_from_settings(
    settings_enum.farmart_customer_care_phone_number
  );
  await store_sms_into_queue_service(
    campaign_sms,
    recipent,
    new Date(),
    setting_customer_care,
    undefined,
    sms_template.dlt_template_id,
    false,
    undefined,
    undefined,
    undefined,
    country_id
  );
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/message/whatsapp/meta_services/generate_whatsapp_variable_body.js



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/message/whatsapp/send_msg_on_whatsapp.js
const error_log = require("../../../../middelware/error_log");
const whatsapp_template_model = require("../../../../database/models_v2/whatsapp/whatsapp_template");
const language_enum = require("../../../../enums/global/language");
const whatsapp_variable_model = require("../../../../database/mongoose/mongoose_models/whatsapp/whatsapp_variables");

module.exports = async (
  msg_type_id,
  language_id = language_enum.default,
  whatsapp_variable_values
) => {
  return new Promise(async (resolve, reject) => {
    try {
      const whatsapp_template = await whatsapp_template_model.findOne({
        where: {
          msg_type_id,
          language_id,
          is_active: 1,
        },
      });
      const dolphin_template_id =
        whatsapp_template?.dolphin_template_id || 263313569257792;
      const whatsapp_variables = await whatsapp_variable_model.findOne({
        msg_type_id,
        language_id,
        is_active: 1,
      });
      const whatsapp_header = [];
      whatsapp_variables.header_variables.forEach((variable) => {
        if (whatsapp_variable_values[variable.name]) {
          let whatsapp_header_value = {};
        }
      });
    } catch (err) {
      error_log(err);
    }
  });
};

const generate_whatsapp_variable_body = async (
  msg_type_id,
  language_id,
  whatsapp_variables
) => {};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/swagger/index.js
module.exports = {
    tags: {
        name: 'purchase_order'
    },
    paths: {
        '/': {
            get: {
                tags: ['purchase_order'],
                summary: 'get all purchase order',
                description: '',
                operationId: 'get_all_po',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'status',
                        description: '',
                        type: 'number'
                    },
                    {
                        in: 'query',
                        name: 'so_id',
                        description: '',
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/in-transit': {
            get: {
                tags: ['purchase_order'],
                summary: 'get all in transit purchase order',
                description: '',
                operationId: 'get_all_in_transit_po',
                security: [{ Bearer: ['read'] }],
                parameters: [],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/doc_approval/{po_id}': {
            get: {
                tags: ['purchase_order'],
                summary: 'get docs for approval',
                description: '',
                operationId: 'get_doc_for_approval',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'path',
                        name: 'po_id',
                        description: '',
                        required: true,
                        type: 'number'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            },
            patch: {
                tags: ['purchase_order'],
                summary: 'update docs status',
                description: '',
                operationId: 'update_doc_status',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'path',
                        name: 'po_id',
                        description: '',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        schema: {
                            type: 'object',
                            required: ['id', 'status', 'doc_url'],
                            properties: {
                                id: {
                                    type: 'number'
                                },
                                doc_url: {
                                    type: 'string'
                                },
                                status: {
                                    type: 'number'
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/{po_id}': {
            get: {
                tags: ['purchase_order'],
                summary: 'get full details of order',
                description: '',
                operationId: 'get_po_details',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'path',
                        name: 'po_id',
                        description: '',
                        required: true,
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            },
            patch: {
                tags: ['purchase_order'],
                summary: '',
                description: 'update purchase order',
                operationId: 'update_purchase_order',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'path',
                        name: 'po_id',
                        description: '',
                        required: true,
                        type: 'string'
                    },
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        schema: {
                            type: 'object',
                            required: ['dataToUpdate'],
                            properties: {
                                dataToUpdate: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        required: ['data', 'property'],
                                        properties: {
                                            property: {
                                                type: 'string'
                                            },
                                            data: {
                                                type: ['string', 'number', 'boolean', 'object']
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/recent': {
            get: {
                tags: ['purchase_order'],
                summary: 'get recent orders',
                description: '',
                operationId: 'get_recent_order',
                security: [{ Bearer: ['read'] }],
                parameters: [],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/document': {
            patch: {
                tags: ['purchase_order'],
                summary: 'patch purchase order',
                description: '',
                operationId: 'patch_purchase',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'lead_request_id',
                        description: '',
                        required: true,
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'status',
                        description: '',
                        required: true,
                        type: 'integer',
                        format: 'int32'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/history': {
            get: {
                tags: ['purchase_order'],
                summary: 'get order history',
                description: '',
                operationId: 'order_history',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'page_no',
                        description: '',
                        type: 'integer'
                    },
                    {
                        in: 'query',
                        name: 'limit',
                        description: '',
                        type: 'integer'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/status': {
            get: {
                tags: ['purchase_order'],
                summary: 'get order status',
                description: '',
                operationId: 'order_status',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'lead_request_id',
                        description: '',
                        required: true,
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/map': {
            post: {
                tags: ['purchase_order'],
                summary: 'map sales order with purchase order',
                description: '',
                operationId: 'map_sales_order',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        schema: {
                            type: 'object',
                            required: ['soId', 'poId'],
                            properties: {
                                soId: {
                                    type: 'string'
                                },
                                poId: {
                                    type: 'string'
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/transport_info': {
            post: {
                tags: ['purchase_order'],
                summary: 'add transport info in po',
                description: '',
                operationId: 'add_transport_info',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'header',
                        name: 'geolocation',
                        description: '',
                        type: 'string'
                    },
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        schema: {
                            type: 'object',
                            required: ['poId', 'transportInfo'],
                            properties: {
                                poId: {
                                    type: 'string'
                                },
                                transportInfo: {
                                    type: 'object',
                                    required: ['name', 'vehicleNumber', 'driverName', 'driverMobileNumber'],
                                    properties: {
                                        name: {
                                            type: 'string'
                                        },
                                        vehicleNumber: {
                                            type: 'string'
                                        },
                                        driverName: {
                                            type: 'string'
                                        },
                                        driverMobileNumber: {
                                            type: 'string'
                                        },
                                        images: {
                                            type: 'array',
                                            items: {
                                                required: ['type', 'url'],
                                                properties: {
                                                    type: {
                                                        type: 'number'
                                                    },
                                                    name: {
                                                        type: 'string'
                                                    },
                                                    url: {
                                                        type: 'string'
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/sample_image': {
            post: {
                tags: ['purchase_order'],
                summary: 'add sample image in po',
                description: '',
                operationId: 'add_sample_image',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        schema: {
                            type: 'object',
                            required: ['poId', 'sampleImage'],
                            properties: {
                                poId: {
                                    type: 'string'
                                },
                                sampleImage: {
                                    type: 'string'
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/qc_report': {
            post: {
                tags: ['purchase_order'],
                summary: 'add qc report in po',
                description: '',
                operationId: 'add_qc_report',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        schema: {
                            type: 'object',
                            required: ['poId', 'qcReport'],
                            properties: {
                                poId: {
                                    type: 'string'
                                },
                                qcReport: {
                                    type: 'array',
                                    items: {
                                        properties: {
                                            id: {
                                                type: 'string'
                                            },
                                            name: {
                                                type: 'string'
                                            },
                                            value: {
                                                type: 'string'
                                            },
                                            image: {
                                                type: 'string'
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/dispatch_info': {
            post: {
                tags: ['purchase_order'],
                summary: 'add dispatch info in po',
                description: '',
                operationId: 'add_dispatch_info',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'header',
                        name: 'geolocation',
                        description: '',
                        type: 'string'
                    },
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        schema: {
                            type: 'object',
                            required: ['poId', 'dispatchInfo'],
                            properties: {
                                poId: {
                                    type: 'string'
                                },
                                dispatchInfo: {
                                    type: 'object',
                                    required: ['grossWeight', 'numberOfBags', 'totalTransportCost', 'advanceTransportCost'],
                                    properties: {
                                        grossWeight: {
                                            type: 'number'
                                        },
                                        loadedTruckWeightSlip: {
                                            type: 'string'
                                        },
                                        numberOfBags: {
                                            type: 'number'
                                        },
                                        totalTransportCost: {
                                            type: 'number'
                                        },
                                        advanceTransportCost: {
                                            type: 'number'
                                        },
                                        transportBillImage: {
                                            type: 'string'
                                        },
                                        handoverDocs: {
                                            type: 'array',
                                            items: {
                                                required: ['id', 'name', 'image'],
                                                properties: {
                                                    id: {
                                                        type: 'string'
                                                    },
                                                    name: {
                                                        type: 'string'
                                                    },
                                                    image: {
                                                        type: 'string'
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/verify_driver': {
            post: {
                tags: ['purchase_order'],
                summary: 'verify driver',
                description: '',
                operationId: 'verify_driver',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        schema: {
                            type: 'object',
                            required: ['poId', 'mobileNumber', 'otp'],
                            properties: {
                                poId: {
                                    type: 'string'
                                },
                                mobileNumber: {
                                    type: 'string'
                                },
                                otp: {
                                    type: 'string'
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/sa/mark_delivered': {
            post: {
                tags: ['purchase_order'],
                summary: 'mark_delivered',
                description: '',
                operationId: 'mark_delivered',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'poId',
                        description: '',
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/sa/unloading': {
            post: {
                tags: ['purchase_order'],
                summary: 'unloading',
                description: '',
                operationId: 'unloading',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'poId',
                        description: '',
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'image',
                        description: '',
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'bridgeWeight',
                        description: '',
                        type: 'integer'
                    },
                    {
                        in: 'formData',
                        name: 'buyerWeight',
                        description: '',
                        type: 'integer'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/sa/deduction_report': {
            post: {
                tags: ['purchase_order'],
                summary: 'deduction_report',
                description: '',
                operationId: 'deduction_report',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'poId',
                        description: '',
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'image',
                        description: '',
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'comment',
                        description: '',
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/sa/buyer_qc': {
            post: {
                tags: ['purchase_order'],
                summary: 'buyer_qc',
                description: '',
                operationId: 'buyer_qc',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        required: true,
                        schema: {
                            properties: {
                                poId: {
                                    type: 'string'
                                },
                                qcList: {
                                    type: 'array',
                                    items: {
                                        properties: {
                                            id: {
                                                type: 'string'
                                            },
                                            name: {
                                                type: 'string'
                                            },
                                            target: {
                                                type: 'string'
                                            },
                                            actual: {
                                                type: 'string'
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/sa/weight_on_arrival': {
            post: {
                tags: ['purchase_order'],
                summary: 'weight_on_arrival',
                description: '',
                operationId: 'weight_on_arrival',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'poId',
                        description: '',
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'image',
                        description: '',
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'bridgeWeight',
                        description: '',
                        type: 'interger'
                    },
                    {
                        in: 'formData',
                        name: 'poWeight',
                        description: '',
                        type: 'interger'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/sa/vehicle_arrived': {
            post: {
                tags: ['purchase_order'],
                summary: 'vehicle_arrived',
                description: '',
                operationId: 'vehicle_arrived',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        required: true,
                        schema: {
                            properties: {
                                poId: {
                                    type: 'string'
                                },
                                images: {
                                    type: 'array',
                                    items: {
                                        properties: {},
                                        type: 'string'
                                    }
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/po_dispatch': {
            patch: {
                tags: ['purchase_order'],
                summary: '',
                description: 'update po_dispatch',
                operationId: 'update_po_dispatch',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        schema: {
                            type: 'object',
                            properties: {
                                poId: {
                                    type: 'string'
                                },
                                truckImage: {
                                    type: 'string'
                                },
                                pagGeolocation: {
                                    type: 'object',
                                    properties: {
                                        lat: {
                                            type: 'string'
                                        },
                                        long: {
                                            type: 'string'
                                        },
                                        accuracy: {
                                            type: 'integer'
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/get_truck_driver_otp': {
            post: {
                tags: ['purchase_order'],
                summary: 'get otp for truck drivers.',
                description: '',
                operationId: 'get_otp_truck_driver',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'mobile_number',
                        description: 'this is users mobile number',
                        required: true,
                        type: 'integer'
                    },
                    {
                        in: 'formData',
                        name: 'message_id',
                        description: '',
                        required: false,
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'send_over_medium',
                        description: '1-> text, 2-> whatsapp, 3-> all',
                        required: false,
                        type: 'integer'
                    }
                ],
                responses: {
                    405: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/weight_details': {
            post: {
                tags: ['purchase_order'],
                summary: 'add or edit weight details',
                description: '',
                operationId: 'add_and_edit_weight_details',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        schema: {
                            type: 'object',
                            required: ['po_id', 'gross_weight', 'net_weight', 'bag_deduction', 'number_of_bags'],
                            properties: {
                                po_id: {
                                    type: 'number'
                                },
                                gross_weight: {
                                    type: 'number'
                                },
                                net_weight: {
                                    type: 'number'
                                },
                                bag_deduction: {
                                    type: 'number'
                                },
                                number_of_bags: {
                                    type: 'number'
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            },
            get: {
                tags: ['purchase_order'],
                summary: 'fetch weight details',
                description: '',
                operationId: 'fetch_weight_details',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'po_id',
                        description: '',
                        type: 'number',
                        required: true
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/transport_details': {
            post: {
                tags: ['purchase_order'],
                summary: 'add or edit transport details',
                description: '',
                operationId: 'add_and_edit_transport_details',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        schema: {
                            type: 'object',
                            required: ['po_id', 'total_transport_cost', 'advance_transport_cost', 'docs'],
                            properties: {
                                po_id: {
                                    type: 'number'
                                },
                                total_transport_cost: {
                                    type: 'number'
                                },
                                advance_transport_cost: {
                                    type: 'number'
                                },
                                docs: {
                                    type: 'array',
                                    items: {
                                        required: ['image'],
                                        properties: {
                                            dispatch_doc_id: {
                                                type: 'number'
                                            },
                                            name: {
                                                type: 'string'
                                            },
                                            image: {
                                                type: 'string'
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            },
            get: {
                tags: ['purchase_order'],
                summary: 'fetch transport details',
                description: '',
                operationId: 'fetch_transport_details',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'po_id',
                        description: '',
                        type: 'number',
                        required: true
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/gst_and_mandi_details': {
            post: {
                tags: ['purchase_order'],
                summary: 'add or edit gst and mandi details',
                description: '',
                operationId: 'add_and_edit_gst_and_mandi_details',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        schema: {
                            type: 'object',
                            required: ['po_id', 'mandi_tax', 'primary_9r_image', 'first_9r_gate_pass'],
                            properties: {
                                po_id: {
                                    type: 'number'
                                },
                                cgst: {
                                    type: 'number'
                                },
                                sgst: {
                                    type: 'number'
                                },
                                igst: {
                                    type: 'number'
                                },
                                mandi_tax: {
                                    type: 'number'
                                },
                                primary_9r_image: {
                                    type: 'string'
                                },
                                first_9r_gate_pass: {
                                    type: 'string'
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            },
            get: {
                tags: ['purchase_order'],
                summary: 'fetch gst and mandi details',
                description: '',
                operationId: 'fetch_gst_and_mandi_details',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'po_id',
                        description: '',
                        type: 'number',
                        required: true
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/weight_and_payment_details': {
            get: {
                tags: ['purchase_order'],
                summary: 'fetch weight and payment details',
                description: '',
                operationId: 'fetch_weight_and_payment_details',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'po_id',
                        description: '',
                        type: 'number',
                        required: true
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/mark_ready_to_dispatch': {
            get: {
                tags: ['purchase_order'],
                summary: 'mark status to ready to dispatch',
                description: '',
                operationId: 'mark_status_ready_to_dispatch',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'po_id',
                        description: '',
                        type: 'number',
                        required: true
                    },
                    {
                        in: 'header',
                        name: 'geolocation',
                        description: '',
                        required: false,
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        }
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/index.js
const router = require('express').Router();
// const authorize = require('../../../middelware/authorized_routes');
// const user_roles_enum = require('../../../entities/metadata/enums/user_roles');
// const get_recent_order_controller = require('./controllers/get_recent_order_controller');
// const patch_purchase_controller = require('./controllers/patch_purchase_controller');
// const get_order_history_controller = require('./controllers/get_order_history_controller');
// const get_order_status_controller = require('./controllers/get_order_status_controller');
const get_po_details_controller = require('./controllers/get_po_details_controller');
const get_all_po_controller = require('./controllers/get_all_po_controller');
const map_sales_order_controller = require('./controllers/map_sales_order_controller');
// const update_purchase_order_controller = require("./controllers/update_purchase_order_controller");
const add_transport_info_controller = require('./controllers/add_transport_info_controller');
const add_sample_image_controller = require('./controllers/add_sample_image_controller');
const add_qc_report_controller = require('./controllers/add_qc_report_controller');
// const add_dispatch_info_controller = require("./controllers/add_dispatch_info_controller");
// const verify_driver_controller = require("./controllers/verify_driver_controller");
const mark_delivered_controller = require('./controllers/mark_delivered_controller');
const unloading_controller = require('./controllers/unloading_controller');
const deduction_report_controller = require('./controllers/deduction_report_controller');
const buyer_qc_controller = require('./controllers/buyer_qc_controller');
const weight_on_arrival_controller = require('./controllers/weight_on_arrival_controller');
const vehicle_arrived_controller = require('./controllers/vehicle_arrived_controller');
const po_dispatch_controller = require('./controllers/po_dispatch_controller');
const update_payment_info_controller = require('./controllers/update_payment_info_controller');
const validate_unloading = require('../../../middelware/validate_unloading');
const validate_deduction_report = require('../../../middelware/validate_deduction_report');
const validate_buyer_qc = require('../../../middelware/validate_buyer_qc');
const validate_weight_on_arrival = require('../../../middelware/validate_weight_on_arrival');
const validate_vehicle_arrived = require('../../../middelware/validate_vehicle_arrived');
const get_doc_for_approval_controller = require('./controllers/get_doc_for_approval_controller');
const update_doc_status_controller = require('./controllers/update_doc_status_controller');
const get_all_in_transit_po_controller = require('./controllers/get_all_in_transit_po_controller');
const get_truck_driver_otp_controller = require('./controllers/send_truck_driver_otp_controller');
const add_and_edit_weight_details_controller = require('./controllers/add_and_edit_weight_details_controller');
const fetch_weight_details_controller = require('./controllers/fetch_weight_details_controller');
const add_and_edit_transport_details_controller = require('./controllers/add_and_edit_transport_details_controller');
const fetch_transport_details_controller = require('./controllers/fetch_transport_details_controller');
const add_and_edit_gst_and_mandi_details_controller = require('./controllers/add_and_edit_gst_and_mandi_details_controller');
const fetch_gst_and_mandi_details_controller = require('./controllers/fetch_gst_and_mandi_details_controller');
const fetch_weight_and_payment_details_controller = require('./controllers/fetch_weight_and_payment_details_controller');
const mark_status_ready_to_dispatch_controller = require('./controllers/mark_status_ready_to_dispatch_controller');

router.post('/get_truck_driver_otp', get_truck_driver_otp_controller);
router.post('/weight_details', add_and_edit_weight_details_controller);
router.get('/weight_details', fetch_weight_details_controller);
router.post('/transport_details', add_and_edit_transport_details_controller);
router.get('/transport_details', fetch_transport_details_controller);
router.post('/gst_and_mandi_details', add_and_edit_gst_and_mandi_details_controller);
router.get('/gst_and_mandi_details', fetch_gst_and_mandi_details_controller);
router.get('/weight_and_payment_details', fetch_weight_and_payment_details_controller);
router.get('/mark_ready_to_dispatch', mark_status_ready_to_dispatch_controller);
/** @deprecated */
// router.get('/recent', authorize([user_roles_enum.Merchant]), get_recent_order_controller);
// router.patch('/document', authorize([user_roles_enum.Merchant]), patch_purchase_controller);
// router.get('/history', authorize([user_roles_enum.Merchant]), get_order_history_controller);
// router.get('/status', authorize([user_roles_enum.Merchant]), get_order_status_controller);
// router.post("/dispatch_info", add_dispatch_info_controller);
// router.post("/verify_driver", verify_driver_controller); /** @deprecated */
// router.patch("/:po_id", update_purchase_order_controller); /** @deprecated */

router.get('/', get_all_po_controller);
router.get('/in-transit', get_all_in_transit_po_controller);
router.post('/map', map_sales_order_controller);
router.post('/transport_info', add_transport_info_controller);
router.post('/sample_image', add_sample_image_controller);
router.post('/qc_report', add_qc_report_controller);
router.post('/sa/mark_delivered', mark_delivered_controller);
router.post('/sa/unloading', validate_unloading, unloading_controller);
router.post('/sa/deduction_report', validate_deduction_report, deduction_report_controller);
router.post('/sa/buyer_qc', validate_buyer_qc, buyer_qc_controller);
router.post('/sa/weight_on_arrival', validate_weight_on_arrival, weight_on_arrival_controller);
router.post('/sa/vehicle_arrived', validate_vehicle_arrived, vehicle_arrived_controller);
router.patch('/po_dispatch', po_dispatch_controller);
router.get('/:po_id', get_po_details_controller);
router.post('/update_payment_info', update_payment_info_controller);
router.get('/doc_approval/:po_id', get_doc_for_approval_controller);
router.patch('/doc_approval/:po_id', update_doc_status_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/_services/fetch_order_delivery_document_service.js
const error_log = require("../../../../middelware/error_log");
const order_delivery_document_model = require("../../../../database/models_v2/procurement_order_deliveries/order_delivery_documents");
const order_delivery_document_type_enum_model = require("../../../../database/models_v2/procurement_order_deliveries/order_delivery_document_type_enums");
const procurement_dispatch_document_model = require("../../../../database/models_v2/procurement_order/procurement_dispatch_document");

module.exports = async (procurement_order_delivery_id) => {
    const documents = [];
    try {
        const order_delivery_documents = await order_delivery_document_model.findAll({
            where: {
                is_active: 1,
                order_delivery_id: procurement_order_delivery_id,
            },
            include: [
                {
                    model: order_delivery_document_type_enum_model,
                    where: {
                        is_active: 1
                    }
                },
                {
                    model: procurement_dispatch_document_model,
                    where: {
                        is_active: 1
                    }
                }
            ]
        });

        for (let index = 0; index < order_delivery_documents.length; index++) {
            const order_delivery_document = order_delivery_documents[index];
            const document = {
                id: order_delivery_document.id,
                docUrl: order_delivery_document.doc_url
            }
            if (order_delivery_document.order_transport_doc_type_id) {
                document.name = order_delivery_document.order_delivery_document_type_enum.name;
            }
            else if (order_delivery_document.order_delivery_document_type_id) {
                document.name = order_delivery_document.procurement_dispatch_document.name;
            }
            documents.push(document);
        }
        return documents;
    }
    catch (err) {
        error_log(err);
        return documents;
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/_services/fetch_weight_details_service.js
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const error_log = require('../../../../middelware/error_log');

const fetch_weight_details_service = ({ po_id }) => {
    return new Promise(async (resolve, reject) => {
        try {
            const order_dispatch_info = await order_delivery_detail_model.findOne({
                where: {
                    purchase_crop_order_id: po_id,
                    is_active: true
                },
                include: [
                    {
                        model: purchase_crop_orders_model,
                        where: {
                            is_active: true
                        },
                        required: true
                    }
                ]
            });
            const response = generate_response(order_dispatch_info);
            return resolve(response);
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    });
};

const generate_response = (order_dispatch_info) => {
    try {
        const response = {
            gross_weight: null,
            net_weight: null,
            bag_deduction: null,
            number_of_bags: null
        }
        if (order_dispatch_info) {
            response.gross_weight = order_dispatch_info.gross_weight;
            response.net_weight = order_dispatch_info.net_weight;
            response.bag_deduction = order_dispatch_info.purchase_crop_order.bag_deduction_value;
            response.number_of_bags = order_dispatch_info.number_of_bags;
        }
        return response;
    }
    catch (err) {
        throw new Error(err.message);
    }
}

module.exports = {
    fetch_weight_details_service,
    generate_response
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/_services/fetch_transport_details_service.js
const Op = require('sequelize').Op;
const procurement_dispatch_document_model = require('../../../../database/models_v2/procurement_order/procurement_dispatch_document');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const order_delivery_documents_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_documents');
const { doc_type } = require('../../../../enums/purchase_order/purchase_order_document_enum');
const error_log = require('../../../../middelware/error_log');

const fetch_transport_details_service = ({ po_id }) => {
    return new Promise(async (resolve, reject) => {
        try {
            const order_dispatch_info = await order_delivery_detail_model.findOne({
                where: {
                    purchase_crop_order_id: po_id,
                    is_active: true
                },
                include: [
                    {
                        model: order_delivery_documents_model,
                        where: {
                            is_active: true,
                            [Op.or]: [
                                {
                                    name: {
                                        [Op.in]: [doc_type.loadedTruckWeightSlip, doc_type.transportBillImage]
                                    }
                                },
                                {
                                    order_delivery_document_type_id: {
                                        [Op.not]: null
                                    }
                                }
                            ]
                        },
                        include: [
                            {
                                model: procurement_dispatch_document_model,
                                where: {
                                    is_active: true
                                },
                                required: false
                            }
                        ],
                        required: false
                    }
                ]
            });
            const response = generate_response(order_dispatch_info);
            return resolve(response);
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    });
};

const generate_response = (order_dispatch_info) => {
    try {
        const response = {
            total_transport_cost: null,
            advance_transport_cost: null,
            transport_bill: "",
            weight_slip: "",
            docs: []
        }
        if (order_dispatch_info) {
            response.total_transport_cost = order_dispatch_info.total_transport_cost;
            response.advance_transport_cost = order_dispatch_info.advance_transport_cost;
            const documents = order_dispatch_info.order_delivery_documents;
            for (let index = 0; index < documents.length; index++) {
                const doc = documents[index];
                if (doc.name === doc_type.loadedTruckWeightSlip) {
                    response.weight_slip = doc.doc_url;
                }
                else if (doc.name === doc_type.transportBillImage) {
                    response.transport_bill = doc.doc_url;
                }
                else {
                    response.docs.push({
                        id: doc.id,
                        dispatch_doc_id: doc.order_delivery_document_type_id ?? null,
                        name: doc.name ?? doc.procurement_dispatch_document?.name ?? null,
                        image: doc.doc_url ?? null
                    })
                }
            }
        }
        return response;
    }
    catch (err) {
        throw new Error(err.message);
    }
}

module.exports = {
    fetch_transport_details_service,
    generate_response
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/_services/add_and_edit_weight_details_service.js
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const { POStatus } = require('../../../../enums/market_linkage/enums/po');
const error_log = require('../../../../middelware/error_log');
const { generate_response } = require('./fetch_weight_details_service');

const add_and_edit_weight_details_service = ({
    po_id,
    gross_weight,
    net_weight,
    bag_deduction,
    number_of_bags
}) => {
    return new Promise(async (resolve, reject) => {
        try {
            const purchase_order = await purchase_crop_orders_model.findOne({
                where: {
                    id: po_id,
                    is_active: true
                },
                include: [
                    {
                        model: order_delivery_detail_model,
                        where: {
                            is_active: true
                        },
                        required: false
                    }
                ]
            });
            if (!purchase_order)
                throw new Error(`No po found with id: ${po_id}`);
            if (purchase_order.status !== POStatus.LOADING_FINISHED)
                throw new Error("purchase order is already ready to dispatch")

            let order_dispatch_info = purchase_order.order_delivery_detail;
            if (!order_dispatch_info) {
                order_dispatch_info = order_delivery_detail_model.build({
                    purchase_crop_order_id: purchase_order.id,
                    is_active: true
                });
            }
            order_dispatch_info.gross_weight = gross_weight;
            order_dispatch_info.net_weight = net_weight;
            order_dispatch_info.number_of_bags = number_of_bags;
            purchase_order.bag_deduction_value = bag_deduction;

            await Promise.all([
                order_dispatch_info.save(),
                purchase_order.save()
            ])
            order_dispatch_info.purchase_crop_order = purchase_order;
            const response = generate_response(order_dispatch_info);
            return resolve(response);
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    });
};

module.exports = {
    add_and_edit_weight_details_service
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/_services/add_and_edit_transport_details_service.js
const Op = require('sequelize').Op;
const procurement_dispatch_document_model = require('../../../../database/models_v2/procurement_order/procurement_dispatch_document');
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const order_delivery_documents_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_documents');
const revision_before_payments_model = require('../../../../database/models_v2/procurement_payments/revision_before_payment');
const { POStatus } = require('../../../../enums/market_linkage/enums/po');
const { payment_for } = require('../../../../enums/purchase_order/procurement_payment_enum');
const { doc_type } = require('../../../../enums/purchase_order/purchase_order_document_enum');
const error_log = require('../../../../middelware/error_log');
const { fetch_transport_details_service } = require('./fetch_transport_details_service');

const add_and_edit_transport_details_service = ({
    po_id,
    total_transport_cost,
    advance_transport_cost,
    docs
}) => {
    return new Promise(async (resolve, reject) => {
        try {
            const purchase_order = await purchase_crop_orders_model.findOne({
                where: {
                    id: po_id,
                    is_active: true
                },
                include: [
                    {
                        model: order_delivery_detail_model,
                        where: {
                            is_active: true
                        },
                        required: false,
                    }
                ]
            });
            if (!purchase_order)
                throw new Error(`No po found with id: ${po_id}`);
            if (purchase_order.status !== POStatus.LOADING_FINISHED)
                throw new Error("purchase order is already ready to dispatch")

            let order_dispatch_info = purchase_order.order_delivery_detail;
            if (!order_dispatch_info) {
                order_dispatch_info = order_delivery_detail_model.build({
                    purchase_crop_order_id: purchase_order.id,
                    is_active: true
                });
            }
            order_dispatch_info.advance_transport_cost = advance_transport_cost;
            order_dispatch_info.total_transport_cost = total_transport_cost;

            await Promise.all([
                order_dispatch_info.save(),
                add_documents(docs, order_dispatch_info),
                add_transport_revision_payment({
                    amount: advance_transport_cost,
                    percentage: parseInt((advance_transport_cost * 100) / total_transport_cost),
                    purchase_crop_order_id: po_id,
                    order_delivery_id: order_dispatch_info.id
                })
            ])
            const response = await fetch_transport_details_service({ po_id });
            return resolve(response);
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    });
};

const add_documents = async (docs, order_dispatch_info) => {
    try {
        const documents = [];
        const order_delivery_documents = await order_delivery_documents_model.findAll({
            where: {
                is_active: true,
                order_delivery_id: order_dispatch_info.id,
                [Op.or]: [
                    {
                        name: {
                            [Op.in]: [doc_type.loadedTruckWeightSlip, doc_type.transportBillImage]
                        }
                    },
                    {
                        order_delivery_document_type_id: {
                            [Op.not]: null
                        }
                    }
                ]
            },
            include: [
                {
                    model: procurement_dispatch_document_model,
                    where: {
                        is_active: true
                    },
                    required: false
                }
            ]
        })

        for (let index = 0; index < docs.length; index++) {
            const doc = docs[index];
            //docs with name
            if (doc.name) {
                let existing_doc = order_delivery_documents.find(d => d.name === doc.name);
                if (existing_doc && existing_doc.doc_url !== doc.image) {
                    existing_doc.doc_url = doc.image;
                    await existing_doc.save();
                }
                else if (!existing_doc) {
                    documents.push({
                        order_delivery_id: order_dispatch_info.id,
                        name: doc.name,
                        doc_url: doc.image,
                        is_active: true
                    })
                }
            }
            //docs with order_delivery_document_type_id
            if (doc.dispatch_doc_id) {
                let existing_doc = order_delivery_documents.find((d) => d.order_delivery_document_type_id === doc.dispatch_doc_id);
                if (existing_doc && existing_doc.doc_url !== doc.image) {
                    existing_doc.doc_url = doc.image;
                    await existing_doc.save();
                }
                else if (!existing_doc) {
                    documents.push({
                        order_delivery_id: order_dispatch_info.id,
                        order_delivery_document_type_id: doc.dispatch_doc_id,
                        doc_url: doc.image,
                        is_active: true
                    })
                }
            }
        }
        await order_delivery_documents_model.bulkCreate(documents);
    }
    catch (err) {
        throw new Error(err.message);
    }
}

const add_transport_revision_payment = async ({
    amount,
    percentage,
    purchase_crop_order_id,
    order_delivery_id
}) => {
    try {
        const transport_payment = await revision_before_payments_model.findOne({
            where: {
                is_active: true,
                payment_for: payment_for.ORDER_DELIVERY,
                purchase_crop_order_id,
                order_delivery_id
            }
        })
        if (transport_payment) {
            if (!transport_payment.approved_by_rpm && !transport_payment.approved_by_state_head) {
                transport_payment.percentage = percentage;
                transport_payment.amount = amount;
                await transport_payment.save();
            }
        }
        else {
            await revision_before_payments_model.build({
                payment_for: payment_for.ORDER_DELIVERY,
                percentage,
                amount,
                approved_by_rpm: false,
                approved_by_state_head: false,
                is_active: true,
                purchase_crop_order_id,
                order_delivery_id
            }).save()
        }
    }
    catch (err) {
        throw new Error(err.message);
    }
}

module.exports = {
    add_and_edit_transport_details_service,
    add_documents,
    add_transport_revision_payment
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/_services/update_po_payment_info/create_by_pa.js
const revision_before_payment_model = require("../../../../../database/models_v2/procurement_payments/revision_before_payment");
const { payment_for: PaymentFor } = require("../../../../../enums/purchase_order/procurement_payment_enum");
const { createRevision } = require("./utils");

/**
 * Creates a new record for transport advance cost.
 * @param {number} poId purchase_crop_order's ``id``
 * @param {number} deliveryDetailId purchase_crop_order.order_delivery_detail ``id``
 * @param {{
 *     transport: {
 *         percentage: number,
 *         amount: number,
 *         deduction: number, // can be zero.
 *     }
 * }} paymentInfo
 * 
 * @return {Promise<revision_before_payment_model>}
 */
const create_by_pa = async (poId, deliveryDetailId, paymentInfo) => {
    let paymentRevision = await createRevision(
        paymentInfo.transport.amount,
        paymentInfo.transport.percentage,
        poId,
        deliveryDetailId,
        PaymentFor.ORDER_DELIVERY,
        false,
        false
    ).save();
    return paymentRevision;
}

module.exports = create_by_pa;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/_services/update_po_payment_info/index.js
const HTTP_status_codes = require("../../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../../middelware/error_log");
const { getPoFullInfo } = require("../../services/get_po_details_service");
const purchase_crop_orders_model = require("../../../../../database/models_v2/procurement_order/purchase_crop_orders");
const order_delivery_detail_model = require("../../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail");
const revision_before_payment_model = require("../../../../../database/models_v2/procurement_payments/revision_before_payment");
const procurement_payments_model = require("../../../../../database/models_v2/procurement_payments/procurement_payments");
const { payment_for: PaymentForType } = require("../../../../../enums/purchase_order/procurement_payment_enum");
const update_by_rpm = require("./update_by_rpm");
const update_by_state_head = require("./update_by_state_head");
const create_payment = require("./create_payment");
const { get_doc_for_approval_service } = require("../../services/get_doc_for_approval_service");

/**
 * This service is responsible for updating the payment info for the given PO.
 * ``PA``, ``RPM``, ``STATE_HEAD`` can update this info.
 * 
 * If PA updates, create new record for revision_before_payment and mark ``approved_by_rpm`` and ``approved_by_state_head`` as ``false``.
 * 
 * If RPM updates, create new record and mark previous as inactive & set ``approved_by_rpm`` as ``true``.
 * 
 * If STATE_HEAD updates, create new record and mark previous as inactive & set ``approved_by_state_head`` as ``true``.
 * After approval from STATE_HEAD create a new record for ``procurement_payments``.
 * @param {{
 *      poId: number,
 *      paymentInfo: {
 *          retailer: {
 *              percentage: number,
 *              amount: number,
 *              deduction: number, // can be zero.
 *          } | undefined,
 *          transport: {
 *              amount: number,
 *              deduction: number, // can be zero.
 *          } | undefined
 *      }
 * }} params
 * @param {"RPM" | "STATE_P_HEAD"} userType possible values are RPM or STATE_P_HEAD
 * @returns {Promise<{status: number, data: any}>}
 */
const update_po_payment_info = async (params, userType) => {
    try {
        const purchaseOrder = await purchase_crop_orders_model.findOne({
            where: { id: params.poId, is_active: 1 },
            include: [
                {
                    // this will be single object.
                    model: order_delivery_detail_model,
                    required: true,
                    where: { is_active: 1 }
                },
                {
                    // this will be array of objects.
                    model: revision_before_payment_model,
                    required: false,
                    where: { is_active: 1 }
                }
            ]
        });

        if (!purchaseOrder)
            throw new Error(`No PO found with id: ${params.poId}`);

        const doc_approval_status = await get_doc_for_approval_service(params.poId);
        if (doc_approval_status.pending_docs !== 0 || doc_approval_status.rejected_docs != 0) {
            throw new Error('Please approve all documents before payment.')
        }
        const orderDeliveryDetail = purchaseOrder.order_delivery_detail;
        const revisionPayments = purchaseOrder.revision_before_payments || [];
        const totalTransportCost = orderDeliveryDetail.total_transport_cost;

        const retailerRevisedPayment = revisionPayments.find(rp => {
            return (rp.is_active === 1 && rp.payment_for === PaymentForType.PO);
        });
        const transportRevisedPayment = revisionPayments.find(rp => {
            return (rp.is_active === 1 && rp.payment_for === PaymentForType.ORDER_DELIVERY);
        });

        let paymentServiceResult;

        if (userType === "RPM")
            paymentServiceResult = await update_by_rpm(
                params.paymentInfo,
                totalTransportCost,
                transportRevisedPayment,
                retailerRevisedPayment
            );
        if (userType === "STATE_P_HEAD") {
            //check if payment already added
            let retailer_payment_added=await procurement_payments_model.findOne({
                where : {
                    is_active:true,
                    payment_for:PaymentForType.PO,
                    purchase_crop_order_id:params.poId,
                    order_delivery_id:orderDeliveryDetail.id,
                    installment_number:1,
                    is_additional_payment: false
                }
            });
            let transport_payment_added=await procurement_payments_model.findOne({
                where : {
                    is_active:true,
                    payment_for:PaymentForType.ORDER_DELIVERY,
                    purchase_crop_order_id:params.poId,
                    order_delivery_id:orderDeliveryDetail.id,
                    installment_number:1,
                    is_additional_payment: false
                }
            });
            if(!retailer_payment_added && !transport_payment_added){
                paymentServiceResult = await update_by_state_head(
                    params.poId,
                    orderDeliveryDetail.id,
                    transportRevisedPayment,
                    retailerRevisedPayment,
                    totalTransportCost,
                    params.paymentInfo
                );
                // create payment records in case of state head.
                await Promise.all([
                    // retailer
                    create_payment({
                        poId: params.poId,
                        orderDeliveryId: orderDeliveryDetail.id,
                        buyerOrderId: purchaseOrder.buyer_order_id,
                        amount: params.paymentInfo.retailer.amount,
                        installment: 1,
                        paymentFor: PaymentForType.PO
                    }),
                    // transport
                    create_payment({
                        poId: params.poId,
                        orderDeliveryId: orderDeliveryDetail.id,
                        buyerOrderId: purchaseOrder.buyer_order_id,
                        amount: params.paymentInfo.transport.amount,
                        installment: 1,
                        paymentFor: PaymentForType.ORDER_DELIVERY
                    })
                ]);
            }
            else{
                throw new Error('Payment already added.')
            }
        }

        return {
            status: 200,
            data: paymentServiceResult
        };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

module.exports = update_po_payment_info;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/_services/update_po_payment_info/update_by_rpm.js
const revision_before_payment_model = require("../../../../../database/models_v2/procurement_payments/revision_before_payment");
const { payment_for: PaymentFor } = require("../../../../../enums/purchase_order/procurement_payment_enum");
const { createRevision, isDataChanged } = require("./utils");

/**
 * If transport advance cost given deactivate previus record & and create a new one as marked ``true``
 * for field ``approved_by_rpm``.
 * Creates a new record for retailer payment info and mark ``approved_by_rpm`` ``true`` as well.
 * 
 * @param {{
 *     retailer: {
 *         percentage: number,
 *         amount: number,
 *         deduction: number, // can be zero.
 *     },
 *     transport: {
 *         amount: number,
 *         deduction: number, // can be zero.
 *     } | undefined
 * }} paymentInfo
 * @param {number} totalTransportCost
 * @param {revision_before_payment_model} revisedTransportPayment
 * 
 * @return {Promise<any[]>}
 */
const update_by_rpm = async (paymentInfo, totalTransportCost, revisedTransportPayment, revisedRetailerPayment) => {
    if (!revisedTransportPayment)
        throw new Error(`transport revised payment can't be null or undefined.`);
    if (!paymentInfo || !paymentInfo.retailer)
        throw new Error("retailer payment info is required.");

    const poId = revisedTransportPayment.purchase_crop_order_id;
    const deliveryId = revisedTransportPayment.order_delivery_id;
    const retailerPayment = paymentInfo.retailer;
    const transportPayment = paymentInfo.transport;
    let paymentRevisions = [];

    if (transportPayment) {
        const changed = isDataChanged(revisedTransportPayment, transportPayment)
        if (changed) {
            // mark current transport revision record as inactive.
            revisedTransportPayment.is_active = 0;
            // create new record for transport.
            const transportPerc = (transportPayment.amount * 100) / totalTransportCost;
            paymentRevisions.push(createRevision(
                transportPayment.amount,
                parseInt(transportPerc),
                poId,
                deliveryId,
                PaymentFor.ORDER_DELIVERY,
                true,
                false
            ));
        } else {
            // there is no new update for transport advance cost.
            // set current record's field approved_by_rpm to true.
            revisedTransportPayment.approved_by_rpm = true;
        }
        paymentRevisions.push(revisedTransportPayment);
    }
    if (revisedRetailerPayment && retailerPayment) {
        const changed = isDataChanged(revisedRetailerPayment, retailerPayment)
        if (changed) {
            // mark current retailer revision record as inactive.
            revisedRetailerPayment.is_active = 0;
            // create new record for retailer.
            paymentRevisions.push(createRevision(
                retailerPayment.amount,
                retailerPayment.percentage,
                poId,
                deliveryId,
                PaymentFor.PO,
                true,
                false
            ));
        } else {
            // there is no new update for retailer payment.
            // set current record's field approved_by_rpm to true.
            revisedRetailerPayment.approved_by_rpm = true;
        }
        paymentRevisions.push(revisedRetailerPayment);
    }
    else {
        paymentRevisions.push(createRevision(
            retailerPayment.amount,
            retailerPayment.percentage,
            poId,
            deliveryId,
            PaymentFor.PO,
            true,
            false
        ));
    }

    paymentRevisions = await Promise.all(paymentRevisions.map(pr => pr.save()));
    return {
        partOnePaymentRetailer: retailerPayment.amount,
        partOnePercRetailer: retailerPayment.percentage,
        partOnePaymentTransporter: transportPayment.amount,
        partOnePercTransporter: parseInt((transportPayment.amount * 100) / totalTransportCost),
        isPartOneApprovedByRpm: true,
        isPartOneApprovedByStateHead: false
    };
}

module.exports = update_by_rpm;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/_services/update_po_payment_info/create_payment.js
const purchase_crop_orders_model = require("../../../../../database/models_v2/procurement_order/purchase_crop_orders");
const procurement_payments_model = require("../../../../../database/models_v2/procurement_payments/procurement_payments");
const { payment_for, status : payment_status } = require("../../../../../enums/purchase_order/procurement_payment_enum");
const Op = require('sequelize').Op;

/**
 * This will create a final payment record in the database.
 * @param {{
 *      poId: number,
 *      buyerOrderId: number,
 *      orderDeliveryId: number,
 *      amount: number,
 *      installment: number,
 *      paymentFor: number,
 * }} paymentData
 * @return {Promise<procurement_payments_model>}
 */

const create_payment = async (paymentData) => {
    try {
        const payment = {
            payment_for: paymentData.paymentFor,
            amount: paymentData.amount,
            status: payment_status.PENDING,
            installment_number: paymentData.installment,
            is_tds_applicable: false,
            tds_percent: null,
            tds_amount: null,
            is_gst_applicable: false,
            gst_percent: null,
            gst_amount: null,
            revised_payment: paymentData.amount,
            is_active: true,
            purchase_crop_order_id: paymentData.poId,
            buyer_order_id: paymentData.buyerOrderId,
            order_delivery_id: paymentData.orderDeliveryId,
            account_detail_id: paymentData.accountDetailId || null,
            is_additional_payment: false
        }
        if (payment.payment_for === payment_for.PO) {
            const part_1_payment = await procurement_payments_model.findOne({
                where: {
                    is_active: true,
                    purchase_crop_order_id: paymentData.poId,
                    payment_for: paymentData.paymentFor,
                    is_additional_payment: false
                }
            })
            if (part_1_payment) {
                payment.is_gst_applicable = part_1_payment.is_gst_applicable;
                payment.gst_percent = part_1_payment.gst_percent;
                payment.is_tds_applicable = part_1_payment.is_tds_applicable;
                payment.tds_percent = part_1_payment.tds_percent;
                payment.tds_amount = (parseFloat(payment.amount) * (part_1_payment.tds_percent / 100));
                payment.revised_payment = parseFloat(payment.amount) - payment.tds_amount;
            }

        }
        const paymentRecord = await procurement_payments_model.create(payment);
        return paymentRecord;
    }
    catch (err) {
        throw new Error(err.message);
    }
}

module.exports = create_payment;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/_services/update_po_payment_info/utils.js
const revision_before_payment_model = require("../../../../../database/models_v2/procurement_payments/revision_before_payment");

const createRevision = (amount, percentage, poId, deliveryId, paymentFor, approvedRpm, approvedSTH) => {
    return revision_before_payment_model.build({
        is_active: 1,
        amount: amount,
        percentage: percentage,
        approved_by_rpm: approvedRpm,
        approved_by_state_head: approvedSTH,
        purchase_crop_order_id: poId,
        order_delivery_id: deliveryId,
        payment_for: paymentFor
    });
}

const isDataChanged = (revisedPayment, newPayment) => {
    const currentAmount = revisedPayment.amount;
    const currentPercentage = revisedPayment.percentage;
    const newAmount = newPayment.amount;
    const newPercentage = newPayment.percentage;
    return (
        currentAmount !== newAmount
        ||
        currentPercentage !== newPercentage
    );
}

module.exports = {
    createRevision,
    isDataChanged
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/_services/update_po_payment_info/update_by_state_head.js
const revision_before_payment_model = require("../../../../../database/models_v2/procurement_payments/revision_before_payment");
const { payment_for: PaymentFor } = require("../../../../../enums/purchase_order/procurement_payment_enum");
const { createRevision, isDataChanged } = require("./utils");

/**
 * State head can update existing payment revision record or can create new record
 * without waiting for rpm approval.
 * Once approved by State Head, PA & RPM can't update that.
 * 
 * @param {number} poId
 * @param {number} deliveryDetailId
 * @param {revision_before_payment_model} revisedTransportPayment
 * @param {revision_before_payment_model=} revisedRetailerPayment
 * @param {number} totalTransportCost
 * @param {{
 *     retailer: {
 *         percentage: number,
 *         amount: number,
 *         deduction: number, // can be zero.
 *     },
 *     transport: {
 *         amount: number,
 *         deduction: number, // can be zero.
 *     }
 * }} paymentInfo
 * 
 * @return {Promise<any[]>}
 */
const update_by_state_head = async (poId, deliveryDetailId,
    revisedTransportPayment, revisedRetailerPayment, totalTransportCost, paymentInfo) => {

    if (!revisedTransportPayment)
        throw new Error("revised transport payment can't be null or undefined.");
    if (!paymentInfo || !paymentInfo.retailer || !paymentInfo.transport)
        throw new Error("Please provide payment info.");

    const retailerPayment = paymentInfo.retailer;
    const transportPayment = paymentInfo.transport;
    let paymentRevision = [];

    if (!revisedRetailerPayment) {
        revisedRetailerPayment = await createRevision(
            retailerPayment.amount,
            retailerPayment.percentage,
            poId,
            deliveryDetailId,
            PaymentFor.PO).save();
    }
    // check for retailer
    let changed = isDataChanged(revisedRetailerPayment, retailerPayment);
    if (changed) {
        // create new record
        const revision = createRevision(
            retailerPayment.amount,
            retailerPayment.percentage,
            poId,
            deliveryDetailId,
            PaymentFor.PO,
            true,
            true);
        paymentRevision.push(revision);
        // deactivate current revision.
        revisedRetailerPayment.is_active = 0;
    } else {
        // mark current revision as accepted
        revisedRetailerPayment.approved_by_rpm = true;
        revisedRetailerPayment.approved_by_state_head = true;
    }
    paymentRevision.push(revisedRetailerPayment);

    // check for transport
    changed = isDataChanged(revisedTransportPayment, transportPayment);
    if (changed) {
        // create new record
        const transportPerc = (transportPayment.amount * 100) / totalTransportCost;
        const revision = createRevision(
            transportPayment.amount,
            parseInt(transportPerc),
            poId,
            deliveryDetailId,
            PaymentFor.ORDER_DELIVERY,
            true,
            true);
        paymentRevision.push(revision);
        // deactivate current revision.
        revisedTransportPayment.is_active = 0;
    } else {
        // mark current revision as accepted
        revisedTransportPayment.approved_by_rpm = true;
        revisedTransportPayment.approved_by_state_head = true;
    }

    paymentRevision.push(revisedTransportPayment);
    paymentRevision = await Promise.all(paymentRevision.map(pr => pr.save()));
    return {
        partOnePaymentRetailer: retailerPayment.amount,
        partOnePercRetailer: retailerPayment.percentage,
        partOnePaymentTransporter: transportPayment.amount,
        partOnePercTransporter: parseInt((transportPayment.amount * 100) / totalTransportCost),
        isPartOneApprovedByRpm: true,
        isPartOneApprovedByStateHead: true
    };
}

module.exports = update_by_state_head;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/_services/fetch_weight_and_payment_details_service.js
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const procurement_order_bill_components_model = require('../../../../database/models_v2/procurement_payments/procurement_bill_components');
const procurment_crop_sample_model = require('../../../../database/models_v2/procurement_sample/procurment_crop_sample');
const purchase_crop_bill_component_enum = require('../../../../enums/market_linkage/enums/purchase_crop_bill_component_enum');
const error_log = require('../../../../middelware/error_log');
const round_off_to_two_decimal = require('../../utilities/round_off/round_off_to_two_decimal');

const fetch_weight_and_payment_details_service = ({ po_id }) => {
    return new Promise(async (resolve, reject) => {
        try {
            const purchase_order = await purchase_crop_orders_model.findOne({
                where: {
                    is_active: true,
                    id: po_id
                },
                include: [
                    {
                        model: procurment_crop_sample_model,
                        where: {
                            is_active: true
                        },
                        required: true
                    },
                    {
                        model: order_delivery_detail_model,
                        where: {
                            is_active: true
                        },
                        required: false
                    }
                ]
            })
            if (!purchase_order) {
                throw new Error("invalid po id");
            }
            const response = await generate_response(purchase_order);
            return resolve(response);
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    });
};

const generate_response = async (purchase_order) => {
    try {
        const response = {};
        response.weight_details = get_weight_details(purchase_order);
        response.retailer_payment_details = await get_retailer_payment_details(purchase_order);
        response.transport_payment_details = get_transport_payment_details(purchase_order);
        return response;
    }
    catch (err) {
        throw new Error(err.message);
    }
}

const get_weight_details = (purchase_order) => {
    try {
        const response = {
            gross_weight: purchase_order.order_delivery_detail?.gross_weight ?? null,
            net_weight: purchase_order.order_delivery_detail?.net_weight ?? null,
            bag_deduction: purchase_order.bag_deduction_value ?? null,
            number_of_bags: purchase_order.order_delivery_detail?.number_of_bags ?? null
        }
        return response;
    }
    catch (err) {
        throw new Error(err.message);
    }
}

const get_retailer_payment_details = async (purchase_order) => {
    try {
        const response = {
            commodity_cost: null,
            retailer_commision: null,
            labour_and_bag_cost: null,
            mandi_tax: null,
            transport_cost: null,
            sub_total_amount: null,
            igst: null,
            cgst: null,
            sgst: null,
            invoiced_value: null
        }
        if (purchase_order.order_delivery_detail?.net_weight) {
            const bill_components = await procurement_order_bill_components_model.findAll({
                where: {
                    is_active: true,
                    procurement_lot_id: purchase_order.procurement_lot_id ?? null
                }
            })
            response.commodity_cost = round_off_to_two_decimal((purchase_order.price || 0)
                * (purchase_order.order_delivery_detail.net_weight / 100));
            response.retailer_commision = round_off_to_two_decimal((bill_components.find(bc => bc.order_bill_component_id === purchase_crop_bill_component_enum.retailer_commision)?.amount || 0)
                * (purchase_order.order_delivery_detail.net_weight / 100));
            response.labour_and_bag_cost = round_off_to_two_decimal((bill_components.find(bc => bc.order_bill_component_id === purchase_crop_bill_component_enum.labour_and_bag_cost)?.amount || 0)
                * (purchase_order.order_delivery_detail.net_weight / 100));
            response.mandi_tax = purchase_order.mandi_tax_value ?? 0;
            response.transport_cost = purchase_order.procurment_crop_sample.f_o_r ? (purchase_order.order_delivery_detail.total_transport_cost ?? 0) : 0;
            response.sub_total_amount = round_off_to_two_decimal(response.commodity_cost
                + response.retailer_commision
                + response.labour_and_bag_cost
                + response.mandi_tax
                + response.transport_cost);
            response.igst = round_off_to_two_decimal(response.sub_total_amount * (purchase_order.igst_percentage / 100));
            response.cgst = round_off_to_two_decimal(response.sub_total_amount * (purchase_order.cgst_percentage / 100));
            response.sgst = round_off_to_two_decimal(response.sub_total_amount * (purchase_order.sgst_percentage / 100));
            response.invoiced_value = round_off_to_two_decimal(response.igst + response.cgst + response.sgst + response.sub_total_amount);
        }
        return response;
    }
    catch (err) {
        throw new Error(err.message);
    }
}

const get_transport_payment_details = (purchase_order) => {
    try {
        const response = {
            transport_cost: (!purchase_order.procurment_crop_sample.f_o_r) ? (purchase_order.order_delivery_detail?.total_transport_cost ?? 0) : 0
        }
        return response;
    }
    catch (err) {
        throw new Error(err.message);
    }
}

module.exports = {
    fetch_weight_and_payment_details_service
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/_services/mark_status_ready_to_dispatch_service.js
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const order_delivery_logs_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_logs');
const { POStatus } = require('../../../../enums/market_linkage/enums/po');
const order_delivery_stage_enum = require('../../../../enums/purchase_order/order_delivery_stage_enum');
const error_log = require('../../../../middelware/error_log');
const put_request = require('../../../../utilities/external_API_calls/put_request');
const { fetch_po_details_by_id_service } = require('../../../v2/campaign/services/fetch_po_details_by_id_service');
const ENV = require("../../../../config/global_config").env;
const global_config = require("../../../../config/global_config");
const env_enum = require("../../../../enums/env/env_enum");
const { pa_activity_log_service } = require('../../../../common_services/market_linkage/logging/pa_activity_log_service');
const { actionPerformed } = require('../../../../enums/market_linkage/enums/paActivityEnum');
const calculate_total_payment = require('../../../../data_abstraction_layer/purchase_order/calculate_total_payment');
const create_order_delivery_log = require('../../../../data_abstraction_layer/purchase_order/create_order_delivery_log');
const { update_so_remaining_qty } = require('../../../../common_services/market_linkage/update_so_remaining_qty');
const RETAILER_STAGE_URL = require("../../../../constants/global").RETAILER_STAGE_URL;
const RETAILER_PROD_URL = require("../../../../constants/global").RETAILER_PROD_URL;
const API_HEADERS = {
    'Content-Type': 'application/json',
    Authorization: `Bearer ${ENV == global_config.market_linkage_system_token}`,
};

const mark_status_ready_to_dispatch_service = ({ po_id, req_location }) => {
    return new Promise(async (resolve, reject) => {
        try {
            const purchase_order = await purchase_crop_orders_model.findOne({
                where: {
                    id: po_id,
                    is_active: true
                },
                include: [
                    {
                        model: order_delivery_detail_model,
                        where: {
                            is_active: true
                        },
                        required: true
                    }
                ]
            });
            if (!purchase_order)
                throw new Error(`No po found with id: ${po_id}`);
            if (purchase_order.status !== POStatus.LOADING_FINISHED)
                throw new Error("purchase order is already ready to dispatch")

            // mark status
            purchase_order.status = POStatus.READY_TO_DISPATCH;
            purchase_order.status_remark = "PO has been ready for dispatch.";
            purchase_order.total_payment = await calculate_total_payment(purchase_order);

            // create log
            await Promise.all([
                purchase_order.save(),
                create_order_delivery_log({
                    order_delivery_stage_id: order_delivery_stage_enum.ready_to_dispatch,
                    order_detail_id: purchase_order.order_delivery_detail.id
                })
            ])

            //send po update to retailer app
            fetch_po_details_by_id_service(purchase_order.id)
                .then((API_BODY) => {
                    const API_URL = (ENV == env_enum.production ? RETAILER_PROD_URL : RETAILER_STAGE_URL) + 'v1/order_tracking/purchase_order';
                    put_request(API_URL, API_BODY, API_HEADERS)
                        .catch(err => {
                            error_log(err);
                        });
                })
                .catch(err => {
                    error_log(err);
                });

            // track PA activity
            if (req_location) {
                pa_activity_log_service({
                    paId: purchase_order.user_profile_id,
                    actionLocation: req_location,
                    actionTimestamp: new Date(Date.now()),
                    actionPerformed: actionPerformed.DispatchDocsSubmission,
                    retailerId: purchase_order.master_merchant_id,
                    sampleId: purchase_order.purchase_sample_id,
                    poId: purchase_order.id
                }).catch((err) => {
                    error_log(err);
                })
            }
            
            if(purchase_order.dataValues.buyer_order_id)
                await update_so_remaining_qty(purchase_order.dataValues.buyer_order_id)

            return resolve({});
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    });
};

module.exports = {
    mark_status_ready_to_dispatch_service
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/_services/fetch_gst_and_mandi_details_service.js
const Op = require('sequelize').Op;
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const order_delivery_documents_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_documents');
const { doc_type } = require('../../../../enums/purchase_order/purchase_order_document_enum');
const error_log = require('../../../../middelware/error_log');

const fetch_gst_and_mandi_details_service = ({ po_id }) => {
    return new Promise(async (resolve, reject) => {
        try {
            const order_dispatch_info = await order_delivery_detail_model.findOne({
                where: {
                    purchase_crop_order_id: po_id,
                    is_active: true
                },
                include: [
                    {
                        model: order_delivery_documents_model,
                        where: {
                            is_active: true,
                            name: {
                                [Op.in]: [doc_type.first9rGatePass, doc_type.primary9rImage]
                            }
                        },
                        required: false
                    },
                    {
                        model: purchase_crop_orders_model,
                        where: {
                            is_active: true
                        },
                        required: true
                    }
                ]
            });
            const response = generate_response(order_dispatch_info);
            return resolve(response);
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    });
};

const generate_response = (order_dispatch_info) => {
    try {
        const response = {
            cgst: null,
            sgst: null,
            igst: null,
            mandi_tax: null,
            primary_9r_image: "",
            first_9r_gate_pass: ""
        }
        if (order_dispatch_info) {
            const documents = order_dispatch_info.order_delivery_documents;
            response.cgst = order_dispatch_info.purchase_crop_order.cgst_percentage;
            response.sgst = order_dispatch_info.purchase_crop_order.sgst_percentage;
            response.igst = order_dispatch_info.purchase_crop_order.igst_percentage;
            response.mandi_tax = order_dispatch_info.purchase_crop_order.mandi_tax_value;
            response.first_9r_gate_pass = documents.find((doc) => doc.name === doc_type.first9rGatePass)?.doc_url ?? "";
            response.primary_9r_image = documents.find((doc) => doc.name === doc_type.primary9rImage)?.doc_url ?? "";
        }
        return response;
    }
    catch (err) {
        throw new Error(err.message);
    }
}

module.exports = {
    fetch_gst_and_mandi_details_service,
    generate_response
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/_services/add_and_edit_gst_and_mandi_details_service.js
const Op = require('sequelize').Op;
const crop_variety_gst_detail = require('../../../../database/models_v2/crop/crop_variety_gst_detail');
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const order_delivery_documents_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_documents');
const procurment_crop_sample_model = require('../../../../database/models_v2/procurement_sample/procurment_crop_sample');
const { POStatus } = require('../../../../enums/market_linkage/enums/po');
const { doc_type } = require('../../../../enums/purchase_order/purchase_order_document_enum');
const error_log = require('../../../../middelware/error_log');
const add_mandi_tax_service = require('../../mandi_taxation/services/add_mandi_tax_service');
const { generate_response } = require('./fetch_gst_and_mandi_details_service');

const add_and_edit_gst_and_mandi_details_service = ({
    po_id,
    cgst,
    sgst,
    igst,
    mandi_tax,
    primary_9r_image,
    first_9r_gate_pass
}) => {
    return new Promise(async (resolve, reject) => {
        try {
            const purchase_order = await purchase_crop_orders_model.findOne({
                where: {
                    id: po_id,
                    is_active: true
                },
                include: [
                    {
                        model: procurment_crop_sample_model,
                        where: {
                            is_active: true
                        },
                        required: true
                    },
                    {
                        model: order_delivery_detail_model,
                        where: {
                            is_active: true
                        },
                        required: false
                    }
                ]
            });
            if (!purchase_order)
                throw new Error(`No po found with id: ${po_id}`);
            if (purchase_order.status !== POStatus.LOADING_FINISHED)
                throw new Error("purchase order is already ready to dispatch")
            const validation_response = await gst_validation({ purchase_order, crop_variety_id: purchase_order.crop_variety_id, cgst, sgst, igst });
            if (!validation_response.is_gst_valid) {
                throw new Error(validation_response.message);
            }

            purchase_order.mandi_tax_value = mandi_tax;
            purchase_order.cgst_percentage = cgst;
            purchase_order.sgst_percentage = sgst;
            purchase_order.igst_percentage = igst;
            let order_dispatch_info = purchase_order.order_delivery_detail;
            if (!order_dispatch_info) {
                order_dispatch_info = order_delivery_detail_model.build({
                    purchase_crop_order_id: purchase_order.id,
                    is_active: true
                });
            }
            await Promise.all([
                await purchase_order.save(),
                await add_documents(primary_9r_image, first_9r_gate_pass, order_dispatch_info),
                await add_mandi_tax_service(purchase_order.id, primary_9r_image, first_9r_gate_pass, purchase_order.buyer_order_id ?? null)
            ])

            order_dispatch_info.purchase_crop_order = purchase_order;
            const response = generate_response(order_dispatch_info);
            return resolve(response);
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    });
};

const gst_validation = async ({ purchase_order, crop_variety_id, cgst, sgst, igst }) => {
    try {
        let response = {
            is_gst_valid: true,
            message: ""
        }
        const gst_details = await crop_variety_gst_detail.findOne({
            where: {
                is_active: true,
                crop_variety_id
            }
        })
        if (!purchase_order.procurment_crop_sample.is_gst_receipt_opted) {
            if (cgst || sgst || igst) {
                response.is_gst_valid = false;
                response.message = "gst is not opted by retailer";
            }
        }
        else {
            if (!gst_details) {
                if (cgst || sgst || igst) {
                    response.is_gst_valid = false;
                    response.message = "gst is not applicable for this crop variety";
                }
            }
            else {
                if (!gst_details.is_gst_applicable) {
                    if (cgst || sgst || igst) {
                        response.is_gst_valid = false;
                        response.message = "gst is not applicable for this crop variety";
                    }
                }
                else {
                    if (!cgst && !sgst && !igst && (gst_details.intra_state_tax_rate || gst_details.inter_state_tax_rate)) {
                        response.is_gst_valid = false;
                        response.message = "all gst cannot be zero";
                    }
                    if (cgst && igst) {
                        response.is_gst_valid = false;
                        response.message = "cgst and igst cannot be applicable together";
                    }
                    if (sgst && igst) {
                        response.is_gst_valid = false;
                        response.message = "sgst and igst cannot be applicable together";
                    }
                    if ((cgst + sgst) && (cgst + sgst) != gst_details.intra_state_tax_rate) {
                        response.is_gst_valid = false;
                        response.message = "sum of cgst and sgst must be equal to intra state tax rate";
                    }
                    if (igst && igst != gst_details.inter_state_tax_rate) {
                        response.is_gst_valid = false;
                        response.message = "igst must be equal to inter state tax rate";
                    }
                }
            }
        }
        return response;
    }
    catch (err) {
        throw new Error(err.message);
    }
}

const add_documents = async (primary_9r_image, first_9r_gate_pass, order_dispatch_info) => {
    try {
        const documents = [];
        const order_delivery_documents = await order_delivery_documents_model.findAll({
            where: {
                is_active: true,
                order_delivery_id: order_dispatch_info.id,
                name: {
                    [Op.in]: [doc_type.first9rGatePass, doc_type.primary9rImage]
                }
            }
        })
        // primary 9r image
        let mandi_tax_doc = order_delivery_documents.find(doc => doc.name === doc_type.primary9rImage);
        if (mandi_tax_doc && mandi_tax_doc.doc_url !== primary_9r_image) {
            mandi_tax_doc.doc_url = primary_9r_image;
            await mandi_tax_doc.save();
        }
        else if (!mandi_tax_doc) {
            documents.push({
                order_delivery_id: order_dispatch_info.id,
                name: doc_type.primary9rImage,
                doc_url: primary_9r_image,
                is_active: true
            })
        }
        //first 9r gate pass
        let gate_pass_doc = order_delivery_documents.find(doc => doc.name === doc_type.first9rGatePass);
        if (gate_pass_doc && gate_pass_doc.doc_url !== first_9r_gate_pass) {
            gate_pass_doc.doc_url = first_9r_gate_pass;
            await gate_pass_doc.save();
        }
        else if (!gate_pass_doc) {
            documents.push({
                order_delivery_id: order_dispatch_info.id,
                name: doc_type.first9rGatePass,
                doc_url: first_9r_gate_pass,
                is_active: true
            })
        }
        const added_docs = await order_delivery_documents_model.bulkCreate(documents);
        order_dispatch_info.order_delivery_documents = added_docs.concat(order_delivery_documents);
    }
    catch (err) {
        throw new Error(err.message);
    }
}

module.exports = {
    add_and_edit_gst_and_mandi_details_service,
    add_documents
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/_services/create_purchase_order_service.js
const { generate_unique_id } = require("../../../../common_services/unique_id_generation/generate_unique_id");
const purchaseOrderModel = require("../../../../database/mongoose/market_linkage_db/purchaseOrder.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { categories } = require("../../../../enums/market_linkage/enums/categories");
const error_log = require("../../../../middelware/error_log");
const { create_payment_service } = require("../../payment/services/create_payment_service");
const { add_purchase_document } = require("../../campaign/services/purchase_order_document_create_service");
const purchase_crop_orders = require("../../../../database/models_v2/procurement_order/purchase_crop_orders");
const master_merchant_detail_model = require("../../../../database/models_v2/merchant/master_merchant_detail");
const { POStatus } = require("../../../../enums/market_linkage/enums/po");
const { userStatus } = require("../../../../enums/market_linkage/enums/procurementSources");
const { getPoFullInfo } = require("../services/get_po_details_service");
const fetch_ml_notification_string = require("../../../../entities_v2/notification/services/fetch_ml_notification_string");
const { send_notification_for_ml } = require("../../../../notifier/firebase_admin_ml");
const ml_notification_event_enum = require("../../../../enums/notification/ml_notification_event_enum");
const language = require("../../../../enums/global/language");
const sequelize = require("../../../../database/db_connection_initializer");

const create_purchase_order_service = async (lot_data, sample_data) => {
    try {
        let state_name = sample_data.state_name;
        let district_name = sample_data.district_name;
        let master_merchant_detail_exist;
        if (!state_name || !district_name) {
            master_merchant_detail_exist = await master_merchant_detail_model.findOne({
                where: {
                    id: sample_data.master_merchant_id,
                    is_active: true,
                    status: userStatus.APPROVED
                }
            })
        }
        if (master_merchant_detail_exist) {
            state_name = master_merchant_detail_exist.state_name;
            district_name = master_merchant_detail_exist.district_name;
        }
        else {
            throw new Error('Retailer not approved');
        }
        const uniqueIdResult = await generate_unique_id({
            state: state_name,
            district: district_name,
            category: categories.PurchaseOrder
        });
        if (uniqueIdResult.status === HTTP_status_codes.internalServerError) {
            return uniqueIdResult;
        }
        let addedPO = null;
        let new_po = true;
        await sequelize.transaction(async (t) => {
            [addedPO, new_po] = await purchase_crop_orders.findOrCreate({
                where: {
                    is_active: 1,
                    procurement_lot_id: lot_data.id
                },
                defaults: {
                    farmart_id: uniqueIdResult.data || null,
                    zoho_po_id: lot_data.zoho_po_id || null,
                    status: POStatus.PO_CREATED,
                    quantity: lot_data.procurable_ton,
                    price: lot_data.retailer_locked_price,
                    is_active: 1,
                    master_merchant_id: sample_data.master_merchant_id || null,
                    merchant_detail_id: sample_data.merchant_detail_id || null,
                    user_profile_id: sample_data.created_by || null,
                    purchase_sample_id: sample_data.id || null,
                    procurement_lot_id: lot_data.id || null,
                    crop_id: sample_data.crop_id || null,
                    crop_variety_id: sample_data.crop_variety_id || null,
                },
                transaction: t
            })
        });
        if (!new_po)
            throw new Error("PO already created with this lot");

        // push notification for po created
        const variables = {
            po_farmart_id: addedPO.farmart_id,
            sample_farmart_id: sample_data.farmart_id,
            crop_name: sample_data.crop_detail?.name,
        }
        const notification = await fetch_ml_notification_string(ml_notification_event_enum.po_created, language.english, variables);
        if (notification) {
            send_notification_for_ml([sample_data.created_by], notification.title, notification.message, notification.image)
                .catch(err => {
                    error_log(err);
                });
        }

        // add_purchase_document(addedPO._id)
        //     .catch(err => {
        //         error_log(err);
        // });

        const po_response = await getPoFullInfo(addedPO.id)

        return { status: HTTP_status_codes.ok, data: po_response.data };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

module.exports = {
    create_purchase_order_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/_services/po_dispatched_service.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const { POStatus } = require("../../../../enums/market_linkage/enums/po");
const appLogService = require("../../../../common_services/market_linkage/logging/app_log_service");
const { actionPerformed } = require("../../../../enums/market_linkage/enums/paActivityEnum");
const { getPoFullInfo } = require("../services/get_po_details_service");
const purchase_crop_orders_model = require("../../../../database/models_v2/procurement_order/purchase_crop_orders");
const order_delivery_detail_model = require("../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail");
const order_delivery_stage_enums_model = require("../../../../database/models_v2/procurement_order_deliveries/order_delivery_stage_enums");
const order_delivery_logs_model = require("../../../../database/models_v2/procurement_order_deliveries/order_delivery_logs");
const { pa_activity_log_service } = require("../../../../common_services/market_linkage/logging/pa_activity_log_service");
const error_log = require("../../../../middelware/error_log");
const merchant_verification_docs = require("../../../../database/models_v2/merchant/merchant_verification_docs");

/**
 * This service will update the PO details with the given info
 * and also will mark the PO status as ``DISPATCHED``.
 * @param {{
 *      poId: number,
 *      truckImage: string
 * }} params An object containing ``poId``, ``truckImage`` and Pa's ``location`` info.
 * @return {Promise<{status: number, data: any}>}
 */
const po_dispatched_service = async (params) => {
    try {
        const [purchaseOrder, orderDispatchedStage] = await Promise.all([
            purchase_crop_orders_model.findOne({
                where: { id: params.poId, is_active: 1 },
                include: {
                    model: order_delivery_detail_model,
                    required: true,
                    where: { is_active: 1 }
                }
            }),
            order_delivery_stage_enums_model.findOne({
                where: {
                    name: "dispatched",
                    is_active: 1
                }
            })
        ]);
        if (!purchaseOrder || !orderDispatchedStage)
            throw new Error(`No active PO or order delivery stage found with id: ${params.poId}`);

        const merchant_docs = await merchant_verification_docs.findAll({
            where: {
                master_merchant_id : purchaseOrder.dataValues.master_merchant_id,
                is_active: 1
            },
            attributes: ['front_image']
        })

        let isDocMissing = false

        merchant_docs.forEach(doc => {
            if(doc && doc.dataValues && !doc.dataValues.front_image)
                isDocMissing = true
        })

        if(isDocMissing)
            return {
                        status: HTTP_status_codes.badRequest,
                        data: {
                            message: "Merchant doc missing",
                            error: ''
                        }
                    }

        purchaseOrder.status = POStatus.DISPATCHED;
        purchaseOrder.status_remark = "PO has been dispatched successfully.";
        purchaseOrder.truck_image = params.truckImage;

        await Promise.all([
            purchaseOrder.save(),
            order_delivery_logs_model.create({
                order_delivery_stage_id: orderDispatchedStage.id,
                log_time: new Date(),
                order_detail_id: purchaseOrder.order_delivery_detail.id,
                is_active: 1
            })
        ]);

        const poFullInfo = await getPoFullInfo(purchaseOrder.id);

        if (poFullInfo.status === HTTP_status_codes.ok && params.reqLocation) {
            // pa activity logging
            pa_activity_log_service({
                paId: poFullInfo.data.paInfo.id,
                actionLocation: params.reqLocation,
                actionTimestamp: new Date(Date.now()),
                actionPerformed: actionPerformed.PoDispatch,
                retailerId: poFullInfo.data.retailerInfo.id,
                sampleId: poFullInfo.data.sampleInfo.id,
                poId: poFullInfo.data._id
            }).catch((err) => {
                error_log(err);
            })
        }

        return poFullInfo;
    } catch (err) {
        appLogService({ type: type.error, err });
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
}

module.exports = po_dispatched_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/update_purchase_order_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const { update_purchase_order_service } = require("../services/update_purchase_order_service");


module.exports = async (req, res) => {
    try {
        const { dataToUpdate = [] } = req.body;

        const { po_id } = req.params;

        if (!dataToUpdate || !po_id) {
            return res.status(http_status_code_enum.bad_request).json({
                message: "array or prop or data or Id missing",
                error: "Missing params",
            });
        }

        const getUpdateResult = await update_purchase_order_service({
            dataToUpdate,
            po_id,
        });

        res.status(getUpdateResult.status).json(getUpdateResult.data);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({ message: err.message });
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/fetch_gst_and_mandi_details_controller.js
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const { fetch_gst_and_mandi_details_service } = require('../_services/fetch_gst_and_mandi_details_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { po_id } = req.query;
        if (!po_id) { throw new ValidationError('invalid po_id'); }
        const gst_and_mandi_details = await fetch_gst_and_mandi_details_service({ po_id });
        const response = create_api_response(true, 'success', gst_and_mandi_details);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/patch_purchase_controller.js
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
// const update_purchase_order_status_service = require('../services/update_purchase_order_status_service');
// const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        // const lead_request_id = req.body.lead_request_id
        // const merchant_detail_id = req.user.user_profile_id;
        // const status = +req.body.status || 0;
        // if (!lead_request_id || !status) {
        //   throw new ValidationError("lead_request_id and status are mandatory params");
        // }
        // let updated_purchase_order = await update_purchase_order_status_service(merchant_detail_id, lead_request_id, status);
        const updated_purchase_order = null;
        const response = create_api_response(true, 'deprecated', updated_purchase_order);
        return res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/get_recent_order_controller.js
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const get_recent_order_service = require("../services/get_recent_order_service");
const language_enum = require("../../../../enums/global/language");

const { read_string, key_gen_redis } = require("../../../../database/redis/helper_redis_methods");
const redis_key_entities = require("../../../../database/redis/redis_key_entities");
const get_merchant_occupation=require('../../../../data_abstraction_layer/merchant/get_merchant_occupation');
const merchant_occupation_type_enum=require('../../../../enums/merchant/merchant_occupation_type_enum');

module.exports = async (req, res) => {
  try {
    const merchant_detail_id = req.user.user_profile_id;
    const language_id = +req.headers.language || language_enum.default;
    // const api_allowed_redis_key = await key_gen_redis(redis_key_entities.ORDER_TRACKING_API, "RECENT");
    // const api_allowed = await read_string(api_allowed_redis_key);

    // const merchant_occupation=await get_merchant_occupation(merchant_detail_id);
    // if (merchant_occupation.occupation_id!=merchant_occupation_type_enum.Farmer && !api_allowed || api_allowed === "ENABLED") {
    //   let recent_order = await get_recent_order_service(merchant_detail_id, language_id);
    //   let recent_order_response = create_api_response(true, "success", recent_order);
    //   return res.status(http_status_code_enum.ok).json(recent_order_response);
    // }
    // else {
      let recent_order = null;
      let recent_order_response = create_api_response(true, "depricated", { recent_order });
      return res.status(http_status_code_enum.ok).json(recent_order_response);
    // }
  } catch (err) {
    return res.status(http_status_code_enum.bad_request).json({
      message: err.message,
    });
  }
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/get_all_po_controller.js
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const get_all_po_service = require("../services/get_all_po_service");

module.exports = async (req, res) => {
    try {
        const { status, so_id } = req.query;

        const {
            user_role_id: designation,
            user_profile_id,
        } = req.user || {};
        
        if (!user_profile_id || !designation) {
            return res
                .status(http_status_code_enum.unauthorised)
                .json({ message: "unauthrised", error: "user details missing" });
        }

        let result = await get_all_po_service({
            designation,
            status,
            user_profile_id,
            soId: so_id
        });

        return res.status(result.status).json(result.data);

        // if (designation === designations.PROCUREMENT_ASSOCIATE) {
        //     result = await get_all_po_service({ status, so_id, paId: userId });
        // }

        // else if (designation === designations.SALES_ASSOCIATE) {
        //     result = await get_mapped_po_service({ status, saId: userId });
        // }

        // else {
        //     result = await get_all_po_service({ status, so_id });
        // }
    } catch (err) {
        return res.status(http_status_code_enum.bad_request).json({
            message: err.message,
        });
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/fetch_weight_and_payment_details_controller.js
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const { fetch_weight_and_payment_details_service } = require('../_services/fetch_weight_and_payment_details_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { po_id } = req.query;
        if (!po_id) { throw new ValidationError('invalid po_id'); }
        const weight_and_payment_details = await fetch_weight_and_payment_details_service({ po_id });
        const response = create_api_response(true, 'success', weight_and_payment_details);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/update_doc_status_controller.js
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const user_role = require('../../../../enums/user_profile/user_role');
const { update_doc_status_service } = require('../services/update_doc_status_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { po_id } = req.params;
        const { user } = req;
        if (!user) throw new ValidationError('No user found.');
        if (!po_id) throw new ValidationError('po id as url parameter is required.');

        const designation = user.user_role_id;
        const acceptedRoles = [
            user_role.REGIONAL_PROCUREMENT_MANAGER,
            user_role.STATE_HEAD_PROCUREMENT,
            user_role.PROCUREMENT_ASSOCIATE
        ];

        if (!acceptedRoles.includes(designation)) { throw new ValidationError('Only PA, RPM & State Heads are allowed to approve documents.'); }

        if (!user) throw new ValidationError('No user found.');
        if (!po_id) throw new ValidationError('po id as url parameter is required.');

        const { id, status, doc_url } = req.body;
        const result = await update_doc_status_service(po_id, id, status, doc_url, designation);
        const response = create_api_response(true, 'success', result);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        return res.status(http_status_code_enum.bad_request).json({
            message: err.message
        });
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/add_and_edit_transport_details_controller.js
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const joi = require('joi');
const { add_and_edit_transport_details_service } = require('../_services/add_and_edit_transport_details_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const validation_result = transport_detail_schema.validate(req.body);
        if (validation_result.error) throw new ValidationError(validation_result.error.message);
        const {
            po_id,
            total_transport_cost,
            advance_transport_cost,
            docs
        } = validation_result.value;
        const transport_details = await add_and_edit_transport_details_service({
            po_id,
            total_transport_cost,
            advance_transport_cost,
            docs
        })
        const response = create_api_response(true, 'success', transport_details);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}

const transport_detail_schema = joi.object({
    po_id: joi.number().required(),
    total_transport_cost: joi.number().required(),
    advance_transport_cost: joi.number().required().max(joi.ref('total_transport_cost')).messages({
        'number.max': 'Advance transport cost should be less than or equal to total transport cost'
    }),
    docs: joi.array().items(
        joi.object({
            dispatch_doc_id: joi.number(),
            name: joi.string().allow(''),
            image: joi.string().required()
        })
    ).required()
});



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/unloading_controller.js
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const appLogService = require('../../../../common_services/market_linkage/logging/app_log_service');
const { type } = require('../../../../enums/market_linkage/enums/appLogEnum');
const unloading_service = require('../services/unloading_service');
const user_role = require('../../../../enums/user_profile/user_role');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * @param {import("express").Request} req
 * @param {import("express").Response} res
 */
const controller = async (req, res) => {
    try {
        const user = req.user.ml_user;
        if (!user || user?.designation !== user_role.SALES_ASSOCIATE) {
            throw new ValidationError(
                'You must be a sales associate in order to update unloading data.'
            );
        }
        const result = await unloading_service(req.body);
        return res.status(result.status).json(result.data);
    } catch (err) {
        appLogService({ type: type.error, err });
        return res.status(HTTP_status_codes.badRequest).json({
            message: 'something went wrong',
            error: err.message
        });
    }
};

module.exports = controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/get_order_history_controller.js
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const get_order_history_service = require("../services/get_order_history_mongo");
const language_enum = require("../../../../enums/global/language")

const { read_string, key_gen_redis } = require("../../../../database/redis/helper_redis_methods");
const redis_key_entities = require("../../../../database/redis/redis_key_entities");
const get_merchant_occupation=require('../../../../data_abstraction_layer/merchant/get_merchant_occupation');
const merchant_occupation_type_enum=require('../../../../enums/merchant/merchant_occupation_type_enum');

module.exports = async (req, res) => {
  try {
    // respective service to be called
    let page_no = +req.query.page_no || 1;
    let limit = +req.query.limit || 20;
    let merchant_detail_id = req.user.user_profile_id;
    const language_id = +req.headers.language || language_enum.default;

    // const api_allowed_redis_key = await key_gen_redis(redis_key_entities.ORDER_TRACKING_API, "HISTORY");
    // const api_allowed = await read_string(api_allowed_redis_key);

    // const merchant_occupation=await get_merchant_occupation(merchant_detail_id);
    // if (merchant_occupation.occupation_id!=merchant_occupation_type_enum.Farmer && (!api_allowed || api_allowed === "ENABLED")) {
    //   let order_history = await get_order_history_service(merchant_detail_id, language_id, page_no, limit);
    //   let order_history_response = create_api_response(true, "success", order_history);
    //   return res.status(http_status_code_enum.ok).json(order_history_response);
    // }
    // else {
      let order_history = {
        rows: [],
        count: 0
      };
      let order_history_response = create_api_response(true, "depricated", order_history);
      return res.status(http_status_code_enum.ok).json(order_history_response);
    // }
  } catch (err) {
    return res.status(http_status_code_enum.bad_request).json({
      message: err.message,
    });
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/fetch_transport_details_controller.js
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const { fetch_transport_details_service } = require('../_services/fetch_transport_details_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { po_id } = req.query;
        if (!po_id) { throw new ValidationError('invalid po_id'); }
        const transport_details = await fetch_transport_details_service({ po_id })
        const response = create_api_response(true, 'success', transport_details);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/send_truck_driver_otp_controller.js
const error_log = require('../../../../middelware/error_log');
const { send_otp_via_text } = require('../services/send_truck_driver_otp_service');
// const send_otp_via_whatsapp = require("../../../entities_v2/auth/service/otp/send_otp_via_whatsapp");
const otp_send_medium_enum = require('../../../../entities_v2/metadata/enums/auth/otp_send_medium_enum');
const { generate_otp } = require('../../../../entities/auth/service/auth_service');
// const language_enum = require('../../../../entities_v2/metadata/enums/global/langauge');
const country_code_enum = require('../../../../enums/global/country_code');
// const DEFAULT_MESSAGE_ID = "u6o+RJnCqoX";
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const driver_code_alert_service = require('../../../../common_services/message/driver_code_alert');
const BLACK_LISTED = [9825031150];
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const country_code = country_code_enum.india;
        const mobile_number = +req.body.mobile_number;
        if (BLACK_LISTED.indexOf(mobile_number) >= 0) {
            const err_message = 'Mobile number black listed';
            return res.status(http_status_code_enum.bad_request)
                .json(create_api_response(false, err_message, null));
        }
        const send_over_medium = req.body.send_over_medium ?? otp_send_medium_enum.all;
        // const language_id = +req.headers.language || language_enum.hindi;
        // have to call is_mobile_number function
        if (typeof mobile_number !== 'number' || mobile_number < 1000000000) {
            throw new ValidationError('Invalid mobile_number');
        }
        // let message_id = DEFAULT_MESSAGE_ID;
        /** check user exist and activated else add merchant and generate secret */
        if (mobile_number) {
            const otp_expire_time_in_ms = 900000
            const { otp } = await generate_otp(mobile_number, country_code, otp_expire_time_in_ms);
            driver_code_alert_service(mobile_number, otp)
                .catch(err => {
                    error_log(err);
                });
            if (mobile_number !== 9896111054) {
                if (send_over_medium === otp_send_medium_enum.whatsapp) {
                    // send_otp_via_whatsapp(mobile_number, otp, "", country_code)
                    //     .catch(err => {
                    //         error_log(err);
                    //     });
                } else if (send_over_medium === otp_send_medium_enum.all) {
                    // send_otp_via_whatsapp(mobile_number, otp, "", country_code)
                    //     .catch(err => {
                    //         error_log(err);
                    //     });
                    send_otp_via_text(mobile_number, '', otp, '', country_code)
                        .catch(err => {
                            error_log(err);
                        });
                } else {
                    send_otp_via_text(mobile_number, '', otp, '', country_code)
                        .catch(err => {
                            error_log(err);
                        });
                }
            }
            res.json({
                status: true,
                message: 'OTP send to ' + mobile_number
            })
        } else {
            res.json({
                status: false,
                message: 'send mobile number',
                error_code: error_code.EMPTY_MOBILE
            })
        }
    } catch (ex) {
        /** logging */
        error_log(ex);
        res.json({
            status: false,
            message: ex.message,
            error_code: error_code.EX_MESSAGE
        })
    }
}

const error_code = {
    EMPTY_MOBILE: 111,
    EX_MESSAGE: 112
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/add_dispatch_info_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const { add_dispatch_info_service } = require('../services/add_dispatch_info_service');
const user_role = require('../../../../enums/user_profile/user_role');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { poId, dispatchInfo } = req.body;

        const { designation } = req.user.ml_user || {};
        let reqLocation;

        if (designation === user_role.PROCUREMENT_ASSOCIATE) {
            if (!req.headers.geolocation) throw new ValidationError('geolocation header missing'); ;
            reqLocation = JSON.parse(req.headers.geolocation);
        }

        if (!poId) throw new ValidationError('po id as url parameter is required.');

        if (!dispatchInfo) throw new ValidationError('dispatch info missing');

        const result = await add_dispatch_info_service({ poId, dispatchInfo, reqLocation });
        return res.status(result.status).json(result.data);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({ message: err.message });
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/mark_delivered_controller.js
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const app_log_service = require('../../../../common_services/market_linkage/logging/app_log_service');
const { type } = require('../../../../enums/market_linkage/enums/appLogEnum');
const mark_delivered_service = require('../services/mark_delivered_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * @param {import("express").Request} req
 * @param {import("express").Response} res
 */
const mark_delivered_controller = async (req, res) => {
    try {
        // const user = req.user.ml_user;
        // if (!user || user?.designation !== designations.SALES_ASSOCIATE) {
        //   throw new ValidationError(
        //     "You must be a sales associate in order to mark this order as delivered."
        //   );
        // }
        const poId = req.query.poId;
        if (!poId) throw new ValidationError('poId as query parameter is required.');
        const result = await mark_delivered_service(poId);
        return res.status(result.status).json(result.data);
    } catch (err) {
        app_log_service({ type: type.error, err });
        return res.status(HTTP_status_codes.badRequest).json({
            message: 'something went wrong',
            error: err.message
        });
    }
};

module.exports = mark_delivered_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/get_all_in_transit_po_controller.js
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const get_all_in_transit_po_service = require("../services/get_all_in_transit_po_service");

module.exports = async (req, res) => {
    try {
        const {
            user_profile_id,
        } = req.user || {};
        
        if (!user_profile_id) {
            return res
                .status(http_status_code_enum.unauthorised)
                .json({ message: "unauthrised", error: "user details missing" });
        }

        let result = await get_all_in_transit_po_service(user_profile_id);

        return res.status(result.status).json(result.data);
    } catch (err) {
        return res.status(http_status_code_enum.bad_request).json({
            message: err.message,
        });
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/get_doc_for_approval_controller.js
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
// const user_role = require('../../../../enums/user_profile/user_role');
const { get_doc_for_approval_service } = require('../services/get_doc_for_approval_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { po_id } = req.params;
        if (!po_id) throw new ValidationError('po id as url parameter is required.');
        const result = await get_doc_for_approval_service(po_id);
        const response = create_api_response(true, 'success', result);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        return res.status(http_status_code_enum.bad_request).json({
            message: err.message
        });
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/buyer_qc_controller.js
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const app_log_service = require('../../../../common_services/market_linkage/logging/app_log_service');
const { type } = require('../../../../enums/market_linkage/enums/appLogEnum');
const buyer_qc_service = require('../services/buyer_qc_service');
const user_role = require('../../../../enums/user_profile/user_role');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * @param {import("express").Request} req
 * @param {import("express").Response} res
 */
const buyer_qc_controller = async (req, res) => {
    try {
        const user = req.user.ml_user;
        if (!user || user?.designation !== user_role.SALES_ASSOCIATE) {
            throw new ValidationError(
                'You must be a sales associate in order to do buyer side QC.'
            );
        }
        const result = await buyer_qc_service(req.body);
        return res.status(result.status).json(result.data);
    } catch (err) {
        app_log_service({ type: type.error, err });
        return res.status(HTTP_status_codes.badRequest).json({
            message: 'something went wrong',
            error: err.message
        });
    }
};

module.exports = buyer_qc_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/vehicle_arrived_controller.js
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const app_log_service = require('../../../../common_services/market_linkage/logging/app_log_service');
const { type } = require('../../../../enums/market_linkage/enums/appLogEnum');
const vehicle_arrived_service = require('../services/vehicle_arrived_service');
const user_role = require('../../../../enums/user_profile/user_role');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * @param {import("express").Request} req
 * @param {import("express").Response} res
 */
const vehicle_arrived_controller = async (req, res) => {
    try {
        const user = req.user.ml_user;
        if (!user || user.designation !== user_role.SALES_ASSOCIATE) {
            throw new ValidationError(
                'You must be a sales associate in order to update vehicle arrival status.'
            );
        }
        const result = await vehicle_arrived_service(req.body);
        return res.status(result.status).json(result.data);
    } catch (err) {
        app_log_service({ type: type.error, err });
        return res.status(HTTP_status_codes.badRequest).json({
            message: err.message,
            error: err.message
        });
    }
};

module.exports = vehicle_arrived_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/update_payment_info_controller.js
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const update_po_payment_info_service = require('../../../v2/purchase_order/services/update_po_payment_info');
const user_role = require('../../../../enums/user_profile/user_role');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * @param {import("express").Request} req
 * @param {import("express").Response} res
 */
const update_payment_info_controller = async (req, res) => {
    try {
        const user = req.user;
        if (!user) { throw new ValidationError('No user found.'); }

        const designation = user.user_role_id;
        const acceptedRoles = [
            user_role.REGIONAL_PROCUREMENT_MANAGER,
            user_role.STATE_HEAD_PROCUREMENT
        ];

        if (!acceptedRoles.includes(designation)) { throw new ValidationError('Only PA, RPM & State Heads are allowed to update payment info.'); }

        const { poId, paymentInfo } = req.body;

        if (!poId) { throw new ValidationError('poId field is missing.'); }
        if (!paymentInfo || (!paymentInfo.retailer && !paymentInfo.transport)) { throw new ValidationError('paymentInfo field is missing.'); }

        let userType = 'RPM';
        if (designation === user_role.STATE_HEAD_PROCUREMENT) { userType = 'STATE_P_HEAD'; }

        const paymentInfoResult = await update_po_payment_info_service({ poId, paymentInfo },
            userType);

        res.status(paymentInfoResult.status).json(paymentInfoResult.data);
    } catch (err) {
        return res.status(http_status_code_enum.bad_request).json({
            message: err.message
        });
    }
}

module.exports = update_payment_info_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/fetch_weight_details_controller.js
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const { fetch_weight_details_service } = require('../_services/fetch_weight_details_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { po_id } = req.query;
        if (!po_id) { throw new ValidationError('invalid po_id'); }
        const weight_details = await fetch_weight_details_service({ po_id })
        const response = create_api_response(true, 'success', weight_details);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/map_sales_order_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const { map_sales_order_service } = require("../services/map_sales_order_service");


module.exports = async (req, res) => {
    try {
        const { soId, poId } = req.body;

        if (!soId || !poId)
            return res
                .status(http_status_code_enum.bad_request)
                .json({ message: "poId & soId is required." });

        const mappedSO = await map_sales_order_service({ soId, poId })

        res.status(mappedSO.status).json(mappedSO.data.data);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({ message: err.message });
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/mark_status_ready_to_dispatch_controller.js
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const { mark_status_ready_to_dispatch_service } = require('../_services/mark_status_ready_to_dispatch_service');
const user_role = require('../../../../enums/user_profile/user_role');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { po_id } = req.query;
        if (!po_id) { throw new ValidationError('invalid po_id'); }

        const { user_role_id } = req.user || {};
        let req_location;
        if (user_role_id === user_role.PROCUREMENT_ASSOCIATE) {
            if (!req.headers.geolocation) throw new ValidationError('geolocation header missing'); ;
            req_location = JSON.parse(req.headers.geolocation);
        }

        const status_marked = await mark_status_ready_to_dispatch_service({ po_id, req_location })
        const response = create_api_response(true, 'success', status_marked);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/add_sample_image_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const { add_sample_image_service } = require("../services/add_sampe_image_service");

module.exports = async (req, res) => {
    try {
        const { poId, sampleImage } = req.body;

        if (!poId || !sampleImage)
            return res
                .status(http_status_code_enum.bad_request)
                .json({ message: "poId & sampleImage are required." })

        const result = await add_sample_image_service({ poId, sampleImage });
        return res.status(result.status).json(result.data);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({ message: err.message });
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/add_and_edit_gst_and_mandi_details_controller.js
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const joi = require('joi');
const { add_and_edit_gst_and_mandi_details_service } = require('../_services/add_and_edit_gst_and_mandi_details_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const validation_result = gst_mandi_detail_schema.validate(req.body);
        if (validation_result.error) throw new ValidationError(validation_result.error.message);
        const {
            po_id,
            cgst,
            sgst,
            igst,
            mandi_tax,
            primary_9r_image,
            first_9r_gate_pass
        } = validation_result.value;
        const gst_mandi_details = await add_and_edit_gst_and_mandi_details_service({
            po_id,
            cgst,
            sgst,
            igst,
            mandi_tax,
            primary_9r_image,
            first_9r_gate_pass
        })
        const response = create_api_response(true, 'success', gst_mandi_details);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}

const gst_mandi_detail_schema = joi.object({
    po_id: joi.number().required(),
    cgst: joi.number(),
    sgst: joi.number(),
    igst: joi.number(),
    mandi_tax: joi.number().required(),
    primary_9r_image: joi.string().required(),
    first_9r_gate_pass: joi.string().required()
});



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/add_and_edit_weight_details_controller.js
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const joi = require('joi');
const { add_and_edit_weight_details_service } = require('../_services/add_and_edit_weight_details_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const validation_result = weight_detail_schema.validate(req.body);
        if (validation_result.error) throw new ValidationError(validation_result.error.message);
        const {
            po_id,
            gross_weight,
            net_weight,
            bag_deduction,
            number_of_bags
        } = validation_result.value;
        const weight_details = await add_and_edit_weight_details_service({
            po_id,
            gross_weight,
            net_weight,
            bag_deduction,
            number_of_bags
        })
        const response = create_api_response(true, 'success', weight_details);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}

const weight_detail_schema = joi.object({
    net_weight: joi.number().required(),
    po_id: joi.number().required(),
    gross_weight: joi.number().required(),
    bag_deduction: joi.number().required(),
    number_of_bags: joi.number().required()
});



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/add_transport_info_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const { add_transport_info_service } = require('../services/add_transport_info_service');
const user_role = require('../../../../enums/user_profile/user_role');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { poId, transportInfo } = req.body;

        const { designation } = req.user.ml_user || {};
        let reqLocation;

        if (designation === user_role.PROCUREMENT_ASSOCIATE) {
            if (!req.headers.geolocation) throw new ValidationError('geolocation header missing'); ;
            reqLocation = JSON.parse(req.headers.geolocation);
        }

        if (!poId) throw new ValidationError('po id as url parameter is required.');

        if (!transportInfo) throw new ValidationError('transport info missing');

        const result = await add_transport_info_service({ poId, transportInfo, reqLocation });
        return res.status(result.status).json(result.data);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({ message: err.message });
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/get_order_status_controller.js
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
// const { get_order_status_service } = require('../services/get_order_status_service');
// const language_enum = require('../../../../enums/global/language');
// const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        // const lead_request_id = req.query.lead_request_id;
        // const language_id = +req.headers.language || language_enum.default;
        // if (!lead_request_id) {
        //   throw new ValidationError("lead_request_id is a mandatory param");
        // }
        // let order_status = await get_order_status_service(lead_request_id, language_id, true);
        const order_status = null;
        const order_status_response = create_api_response(true, 'depricated', order_status);
        return res.status(http_status_code_enum.ok).json(order_status_response);
    } catch (err) {
        return res.status(http_status_code_enum.bad_request).json({
            message: err.message
        });
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/get_po_details_controller.js
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const { getPoFullInfo } = require('../services/get_po_details_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { po_id } = req.params;
        if (!po_id) throw new ValidationError('po id as url parameter is required.');
        // await getPoFullInfo(po_id);
        const result = await getPoFullInfo(po_id);// await get_po_details_service(po_id);
        return res.status(result.status).json(result.data);
    } catch (err) {
        return res.status(http_status_code_enum.bad_request).json({
            message: err.message
        });
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/po_dispatch_controller.js
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const { type } = require('../../../../enums/market_linkage/enums/appLogEnum');
const app_log_service = require('../../../../common_services/market_linkage/logging/app_log_service');
const po_dispatched_service = require('../_services/po_dispatched_service');
const user_role = require('../../../../enums/user_profile/user_role');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * @param {import("express").Request} req
 * @param {import("express").Response} res
 */
const po_dispatch_controller = async (req, res) => {
    try {
        const { poId, truckImage } = req.body;

        const { designation } = req.user.ml_user || {};
        let reqLocation;

        if (designation === user_role.PROCUREMENT_ASSOCIATE) {
            if (!req.headers.geolocation) throw new ValidationError('geolocation header missing'); ;
            reqLocation = JSON.parse(req.headers.geolocation);
        }

        if (!poId) throw new ValidationError('po id is required.');

        if (!truckImage) throw new ValidationError('truckImage is required');

        const result = await po_dispatched_service({ poId, truckImage, reqLocation });
        return res.status(result.status).json(result.data);
    } catch (err) {
        app_log_service({ type: type.error, err });
        return res.status(HTTP_status_codes.badRequest).json({
            message: 'something went wrong',
            error: err.message
        });
    }
};

module.exports = po_dispatch_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/add_qc_report_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const { add_qc_report_service } = require('../services/add_qc_report_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { poId, qcReport } = req.body;

        if (!poId) throw new ValidationError('po id as url parameter is required.');

        if (!qcReport) throw new ValidationError('qc report missing');

        const result = await add_qc_report_service({ poId, qcReport });
        return res.status(result.status).json(result.data);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({ message: err.message });
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/verify_driver_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const verify_driver_service = require("../services/verify_driver_service");

module.exports = async (req, res) => {
    try {
        let { poId, mobileNumber, otp, countryCode } = req.body;
        if(!countryCode){
            countryCode=91;
        }
        // mobileNumber=+(countryCode+mobileNumber);
        if (!poId || !mobileNumber || !otp) {
            return res.status(http_status_code_enum.bad_request).json({ message: "Parameters missing" });
        }

        const submitOtpResult = await verify_driver_service({ poId, mobileNumber, otp, countryCode });

        return res.status(submitOtpResult.status).json(submitOtpResult.data);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({ message: err.message });
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/weight_on_arrival_controller.js
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const app_log_service = require('../../../../common_services/market_linkage/logging/app_log_service');
const { type } = require('../../../../enums/market_linkage/enums/appLogEnum');
const weight_on_arrival_service = require('../services/weight_on_arrival_service');
const user_role = require('../../../../enums/user_profile/user_role');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * @param {import("express").Request} req
 * @param {import("express").Response} res
 */
const weight_on_arrival_controller = async (req, res) => {
    try {
        const user = req.user.ml_user;
        if (!user || user?.designation !== user_role.SALES_ASSOCIATE) {
            throw new ValidationError(
                'You must be a sales associate in order to update weight on arrival data.'
            );
        }
        const result = await weight_on_arrival_service(req.body);
        return res.status(result.status).json(result.data);
    } catch (err) {
        app_log_service({ type: type.error, err });
        return res.status(HTTP_status_codes.badRequest).json({
            message: 'something went wrong',
            error: err.message
        });
    }
};

module.exports = weight_on_arrival_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/controllers/deduction_report_controller.js
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const appLogService = require('../../../../common_services/market_linkage/logging/app_log_service');
const { type } = require('../../../../enums/market_linkage/enums/appLogEnum');
const deduction_report_service = require('../services/deduction_report_service');
const user_role = require('../../../../enums/user_profile/user_role');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * @param {import("express").Request} req
 * @param {import("express").Response} res
 */
const deduction_report_controller = async (req, res) => {
    try {
        const user = req.user.ml_user;
        if (!user || user?.designation !== user_role.SALES_ASSOCIATE) {
            throw new ValidationError(
                'You must be a sales associate in order to submit deduction report.'
            );
        }
        const result = await deduction_report_service(req.body);
        return res.status(result.status).json(result.data);
    } catch (err) {
        appLogService({ type: type.error, err });
        return res.status(HTTP_status_codes.badRequest).json({
            message: 'something went wrong',
            error: err.message
        });
    }
};

module.exports = deduction_report_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/send_truck_driver_otp_service.js
const error_log = require("../../../../middelware/error_log");
const { get_data_from_settings } = require("../../../../entities/metadata/service/application_version_service");
const send_sms_direct = require("../../../../entities/sms/service/send_sms_direct");
const settings_enum = require("../../../../entities/metadata/enums/settings_enum");
const otp_mode_enum = require("../../../../entities_v2/metadata/enums/auth/otp_mode_enum");
const { key_gen_redis, write_string } = require("../../../../database/redis/helper_redis_methods");
const redis_key_entities_enum = require("../../../../database/redis/redis_key_entities");
const sms_type_enum = require("../../../../entities_v2/metadata/enums/sms/sms_type_enum");
const fetch_sms_template_by_type_id = require("../../../../entities_v2/sms/service/meta/fetch_sms_template_by_type_id");
const sms_generator_from_template_service = require("../../../../entities_v2/sms/service/meta/sms_generator_from_template");
const language_enum = require("../../../../entities_v2/metadata/enums/global/langauge");
const country_code_enum = require("../../../../enums/global/country_code");

const DEFAULT_MESSAGE_ID = "u6o+RJnCqoX";

/**
 * 
 * @param {number} mobile_number 
 * @param {string} message_id 
 * @param {string} otp 
 * @param {number} language_id 
 * @returns {object} with message property containing otp_message
 */
const send_otp_via_text = (mobile_number, message_id = DEFAULT_MESSAGE_ID, otp, language_id = language_enum.hindi, country_code = country_code_enum.india) => {
    return new Promise(async (resolve, reject) => {
        try {
            let otp_message;
            const otp_mode = await get_data_from_settings(settings_enum.otp_mode);
            if (+otp_mode === otp_mode_enum.testing_mode) {
                const otp_key = await key_gen_redis(redis_key_entities_enum.OTP, mobile_number);
                await write_string(otp_key, otp, 10 * 60);
            }
            else {
                const otp_template = await fetch_truck_driver_otp_sms(sms_type_enum.otp, language_id);
                const values = [otp, message_id];
                otp_message = await sms_generator_from_template_service(otp_template.template, values);
                    /** send otp to mobile number */
                let setting_customer_care = await get_data_from_settings(settings_enum.farmart_customer_care_phone_number);
                let send_from = await get_data_from_settings(settings_enum.send_sms_from);
                let text_type = 'Unicode_text'
                //console.log("otp",otp_message)
                await send_sms_direct(mobile_number + "", otp_message, otp_template.dlt_template_id, text_type, +send_from, +setting_customer_care, country_code);
            }
            return resolve({ message: otp_message });
        }
        catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    })
}

const fetch_truck_driver_otp_sms = (sms_type_id,language_id)=>{
    return new Promise(async(resolve,reject)=>{
        try{
            
            let otp_template = {
                template: 'Dear Transporter\n\nYour Verificate code ${var}, please share this with farmart employee for driver verification.\nValid for 15 minutes.',
                dlt_template_id: "0"
            }

            otp_template = fetch_sms_template_by_type_id(sms_type_id, language_id);

            resolve(otp_template)

        }
        catch(err){
            error_log(err);
            reject(err);
        }
    });
}

module.exports = {
    send_otp_via_text
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/mark_delivered_service.js
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const { POStatus } = require('../../../../enums/market_linkage/enums/po');
const app_log_service = require('../../../../common_services/market_linkage/logging/app_log_service');
const { type } = require('../../../../enums/market_linkage/enums/appLogEnum');
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const order_delivery_logs_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_logs');
const order_delivery_stage_enums_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_stage_enums');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 *
 * @param {string} poId
 */
const markPOAsDeliveredService = async (poId) => {
    try {
        const queryObj = {
            where: { id: poId, is_active: 1 },
            include: { model: order_delivery_detail_model, required: true, where: { is_active: 1 } }
        };

        let [purchaseOrder, deliveryStage] = await Promise.all([
            purchase_crop_orders_model.findOne(queryObj),
            order_delivery_stage_enums_model.findOne({ where: { name: 'delivered', is_active: 1 } })
        ]);
        if (!purchaseOrder) { throw new ValidationError(`Unable to mark delivered, no PO found with id: ${poId}`); }

        // create order log for delivery stage.
        let orderDeliveryLog = order_delivery_logs_model.build({
            order_detail_id: purchaseOrder.order_delivery_detail.id,
            order_delivery_stage_id: deliveryStage.id,
            log_time: new Date(),
            is_active: 1
        });
        // mark respected PO delivered as well.
        purchaseOrder.status = POStatus.DELIVERED;
        purchaseOrder.status_remark = 'PO has been delivered';

        [purchaseOrder, orderDeliveryLog] = await Promise.all([
            purchaseOrder.save(),
            orderDeliveryLog.save()
        ]);

        return {
            status: HTTP_status_codes.ok,
            data: {
                status: purchaseOrder.status,
                statusRemark: purchaseOrder.status_remark,
                deliveredAt: orderDeliveryLog.log_time
            }
        };

    } catch (err) {
        app_log_service({ type: type.error, err });
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: 'error while marking order as delivered.',
                error: err.message
            }
        };
    }
}

module.exports = markPOAsDeliveredService;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/unloading_service.js
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const POModel = require('../../../../database/mongoose/market_linkage_db/purchaseOrder.model');
const { POStatus } = require('../../../../enums/market_linkage/enums/po');
const appLogService = require('../../../../common_services/market_linkage/logging/app_log_service');
const { type } = require('../../../../enums/market_linkage/enums/appLogEnum');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * @param {{image:string, bridgeWeight:number, buyerWeight:number}} payload
 */
const service = async (payload) => {
    try {
        let po = await POModel.findById(payload.poId);

        if (!po) throw new ValidationError(`no PO found with id: ${payload.poId}`);

        po.unloadingInfo = {
            image: payload.image,
            bridgeWeight: payload.bridgeWeight,
            buyerWeight: payload.buyerWeight,
            submittedAt: new Date()
        };
        po.status = POStatus.UNLOADING;
        po.statusRemark = 'Unloading has been started.';

        po = await po.save();

        return {
            status: HTTP_status_codes.ok,
            data: {
                unloadingInfo: po.unloadingInfo,
                status: po.status,
                statusRemark: po.statusRemark
            }
        };
    } catch (err) {
        appLogService({ type: type.error, err });
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: 'error while adding unloading data.',
                error: err.message
            }
        };
    }
};

module.exports = service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/get_po_details_service.js
const buyer_order_delivery_info = require('../../../../database/models_v2/buyer_order/buyer_order_delivery_info');
const cropVarietyModel = require('../../../../database/mongoose/market_linkage_db/cropVariety.model');
const masterSampleModel = require('../../../../database/mongoose/market_linkage_db/masterSample.model');
const paymentModel = require('../../../../database/mongoose/market_linkage_db/payment.model');
const purchaseOrderModel = require('../../../../database/mongoose/market_linkage_db/purchaseOrder.model');
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const error_log = require('../../../../middelware/error_log');
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const procurment_crop_sample_model = require('../../../../database/models_v2/procurement_sample/procurment_crop_sample');
const purchase_crop_sample_images_model = require('../../../../database/models_v2/procurement_sample/purchase_sample_images');
const crop_detail_model = require('../../../../database/models_v2/crop/crop_detail');
const crop_varieties_detail_model = require('../../../../database/models_v2/crop/crop_varieties_detail');
const crop_variety_procurement_document_dispatch_map_model = require('../../../../database/models_v2/procurement_order/crop_variety_procurement_document_dispatch_map');
const buyer_order_detail_model = require('../../../../database/models_v2/buyer_order/buyer_order_detail');
const procurement_payments_model = require('../../../../database/models_v2/procurement_payments/procurement_payments');
const procurement_bill_components_model = require('../../../../database/models_v2/procurement_payments/procurement_bill_components');
const procurement_bill_components_enum_model = require('../../../../database/models_v2/procurement_payments/procurement_order_bill_component_enums');
const account_details_model = require('../../../../database/models_v2/transactions/account_details');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const order_delivery_documents_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_documents');
const order_delivery_document_type_enums_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_document_type_enums');
const order_delivery_logs_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_logs');
const purchase_qc_report_model = require('../../../../database/models_v2/crop/purchase_qc_report');
const user_profile_model = require('../../../../database/models/user_profile');
// const crop_variety_qc_params_model = require("../../../../database/models_v2/crop/crop_variety_qc_params");
const crop_variety_qc_param_maps_model = require('../../../../database/models_v2/procurement_order/crop_variety_qc_param_maps');
const procurement_dispatch_document_model = require('../../../../database/models_v2/procurement_order/procurement_dispatch_document');
const master_merchant_detail_model = require('../../../../database/models_v2/merchant/master_merchant_detail');
const qc_param_types_model = require('../../../../database/models_v2/procurement_order/qc_param_types');
const { doc_type } = require('../../../../enums/purchase_order/purchase_order_document_enum');
// const master_merchant_detail = require('../../../../database/models_v2/merchant/master_merchant_detail');
// const user_profile = require('../../../../database/models/user_profile');
const revision_before_payments = require('../../../../database/models_v2/procurement_payments/revision_before_payment');
const procurement_lots = require('../../../../database/models_v2/procurement_sample/procurement_lots');
const { payment_for } = require('../../../../enums/purchase_order/procurement_payment_enum');
const round_off_to_two_decimal = require('../../utilities/round_off/round_off_to_two_decimal');
const payment_deductions_for_transport = require('../../../../database/models_v2/procurement_payments/payment_deduction_for_transport');
const payment_deductions_for_retailer = require('../../../../database/models_v2/procurement_payments/payment_deduction_for_retailer');
const purchase_order_pdfs_model = require('../../../../database/models_v2/purchase_order_pdfs');
const { pdfStatus, ACCPETED_BY_RETAILER } = require('../../../../enums/market_linkage/enums/po_pdf');
const merchant_verification_docs = require('../../../../database/models_v2/merchant/merchant_verification_docs');
const merchant_doc_status = require('../../../../enums/merchant/mechant_doc_status');
const crop_variety_gst_detail_model = require('../../../../database/models_v2/crop/crop_variety_gst_detail');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * returns the document name based on its type.
 * @param {number} docTypeId document type id - (refer to enum)
 * @return {string} document name
 */
// const getDocumentName = (docTypeId) => {
//     switch (docTypeId) {
//     case 10:
//         return 'Dispatch Document';
//     default:
//         return 'Unknown';
//     }
// }

/**
 * @param {number} ammountPerQntl
 * @param {any[]} billComponent
 * @param {Object} dispatchInfo
 * @returns
 */
const getPaymentInfo = (ammountPerQntl, billComponent, dispatchInfo, mandi_tax_value) => {
    const infos = [];
    if (!dispatchInfo) { return infos; }

    const mandiTaxObj = billComponent.find(bc => {
        const bcEnum = bc.procurement_order_bill_component_enum;
        return (bcEnum && (bcEnum.name === 'mandi_tax'))
    });
    const commissionObj = billComponent.find(bc => {
        const bcEnum = bc.procurement_order_bill_component_enum;
        return (bcEnum && (bcEnum.name === 'retailer_commision'))
    });
    const labourBagObj = billComponent.find(bc => {
        const bcEnum = bc.procurement_order_bill_component_enum;
        return (bcEnum && (bcEnum.name === 'labour_and_bag_cost'))
    });

    infos.push({
        name: 'Commodity Value',
        qtlPrice: ammountPerQntl,
        toBePaid: round_off_to_two_decimal((ammountPerQntl || 0) * (dispatchInfo.net_weight / 100))

    });
    if (mandiTaxObj) {
        infos.push({
            name: 'Mandi Tax to Retailer',
            qtlPrice: mandiTaxObj.amount,
            toBePaid: mandi_tax_value ?? round_off_to_two_decimal((mandiTaxObj.amount) * (dispatchInfo.net_weight / 100))

        });
    }
    if (commissionObj) {
        infos.push({
            name: 'Commission Amount',
            qtlPrice: commissionObj.amount,
            toBePaid: round_off_to_two_decimal((commissionObj.amount) * (dispatchInfo.net_weight / 100))

        });
    }
    if (labourBagObj) {
        infos.push({
            name: 'Labour + Gunny Bag Cost',
            qtlPrice: labourBagObj.amount,
            toBePaid: round_off_to_two_decimal((labourBagObj.amount) * (dispatchInfo.net_weight / 100))

        });
    }
    return infos;
}

/**
 * @param {any[]} procurementPayments
 */
const getRetailerTransportPaymentInfo = (procurementPayments, revisionPayments) => {
    const partOneRevisionRetailer = revisionPayments.find(pp => {
        return (pp.payment_for === payment_for.PO && pp.approved_by_state_head);
    });
    const partOneRetailer = procurementPayments.find(pp => {
        return (pp.payment_for === payment_for.PO && pp.installment_number === 1);
    });
    const partTwoRetailer = procurementPayments.find(pp => {
        return (pp.payment_for === payment_for.PO && pp.installment_number === 2);
    });

    const partOneTransport = procurementPayments.find(pp => {
        return (pp.payment_for === payment_for.ORDER_DELIVERY && pp.installment_number === 1);
    });
    const partTwoTransport = procurementPayments.find(pp => {
        return (pp.payment_for === payment_for.ORDER_DELIVERY && pp.installment_number === 2);
    });

    // !! this operator converts undefind or null values to false else true.
    return {
        partOneOfRetailer: !!(partOneRetailer?.utr_number),
        partTwoOfRetailer: !!(partTwoRetailer?.utr_number),
        partOneOfTransport: !!(partOneTransport?.utr_number),
        partTwoOfTransport: !!(partTwoTransport?.utr_number),
        retailer: {
            partOne: {
                amount: partOneRetailer ? partOneRetailer.revised_payment : 0,
                percentage: partOneRevisionRetailer?.percentage || 0,
                utr: partOneRetailer ? partOneRetailer.utr_number : null,
                date: partOneRetailer ? partOneRetailer.paid_at : null
            },
            partTwo: {
                amount: partTwoRetailer ? partTwoRetailer.revised_payment : 0,
                utr: partTwoRetailer ? partTwoRetailer.utr_number : null,
                date: partTwoRetailer ? partTwoRetailer.paid_at : null
            }
        },
        transport: {
            partOne: {
                amount: partOneTransport ? partOneTransport.revised_payment : 0,
                utr: partOneTransport ? partOneTransport.utr_number : null,
                date: partOneTransport ? partOneTransport.paid_at : null
            },
            partTwo: {
                amount: partTwoTransport ? partTwoTransport.revised_payment : 0,
                utr: partTwoTransport ? partTwoTransport.utr_number : null,
                date: partTwoTransport ? partTwoTransport.paid_at : null
            }
        }
    };
}

const getRetailerTransportRevisionPayment = (revisionPayments) => {
    const partOneRetailer = revisionPayments.find(pp => {
        return (pp.payment_for === payment_for.PO && pp.is_active === 1);
    });
    const partOneTransport = revisionPayments.find(pp => {
        return (pp.payment_for === payment_for.ORDER_DELIVERY && pp.is_active === 1);
    });

    return {
        partOneOfRetailer: false,
        partTwoOfRetailer: false,
        partOneOfTransport: false,
        partTwoOfTransport: false,
        retailer: {
            partOne: {
                amount: partOneRetailer?.amount || 0,
                percentage: partOneRetailer?.percentage || 0,
                utr: partOneRetailer?.utr_number || null,
                date: partOneRetailer?.createdAt || null
            }
        },
        transport: {
            partOne: {
                amount: partOneTransport?.amount || 0,
                utr: partOneTransport?.utr_number || null,
                date: partOneTransport?.createdAt || null
            }
        }
    };
}

const getDispatchInfo = (poDeliveryInfo, loadedTruckWeightSlip, transportBillImage, primary9rImage, first9rGatePass, poHandoverDocs, purchaseOrder) => {
    if (!poDeliveryInfo) return null;
    const response_dispatch = {
        grossWeight: poDeliveryInfo.gross_weight,
        netWeight: poDeliveryInfo.net_weight,
        mandiTax: purchaseOrder.mandi_tax_value,
        bagDeduction: purchaseOrder.bag_deduction_value,
        loadedTruckWeightSlip,
        numberOfBags: poDeliveryInfo.number_of_bags,
        totalTransportCost: poDeliveryInfo.total_transport_cost,
        advanceTransportCost: poDeliveryInfo.advance_transport_cost,
        transportBillImage,
        handoverDocs: poHandoverDocs
    };
    if (primary9rImage) {
        response_dispatch.primary9rImage = primary9rImage;
    }
    if (first9rGatePass) {
        response_dispatch.first9rGatePass = first9rGatePass
    }
    return response_dispatch;
}

const transformResponse = (purchaseOrder) => {
    const sampleInfo = purchaseOrder.procurement_lot.procurment_crop_sample;
    const cropDetail = purchaseOrder.crop_detail;
    const varietyDetail = purchaseOrder.crop_varieties_detail;
    const sampleImages = sampleInfo.purchase_crop_sample_images;
    const poSamples = purchaseOrder.purchase_crop_sample_images;
    const merchantDetails = purchaseOrder.master_merchant_detail;
    const poCreatedBy = purchaseOrder.user_profile;
    // these fields can be null.
    const po_pdf = purchaseOrder.logs?.[0];
    const transport_payment_deduction = purchaseOrder.transport_payment_deduction;
    const retailer_payment_deduction = purchaseOrder.retailer_payment_deduction;
    const qcReports = purchaseOrder.purchase_qc_reports?.length ? purchaseOrder.purchase_qc_reports : sampleInfo.purchase_qc_reports;
    const poDeliveryInfo = purchaseOrder.order_delivery_detail;
    const payments = purchaseOrder.procurement_payments;
    const salesOrder = purchaseOrder.buyer_order_detail;
    const poBillComponent = purchaseOrder.procurement_lot.procurement_order_bill_components;
    const orderDeliveryDetails = (salesOrder && salesOrder.delivery_info) ? salesOrder.delivery_info : null;
    let orderDeliveryLogs = [];
    let orderDeliveryDocs = [];
    let handoverDeliveryDocs = [];
    let transportBillImage, loadedTruckWeightSlip, primary9rImage, first9rGatePass;
    let isPartOneApprovedByRpm = false; let isPartOneApprovedByStateHead = false;
    let revisionPayments = [];
    if (poDeliveryInfo) {
        if (poDeliveryInfo.order_delivery_logs) { orderDeliveryLogs = poDeliveryInfo.order_delivery_logs; }
        if (poDeliveryInfo.order_delivery_documents) {
            orderDeliveryDocs = (poDeliveryInfo.order_delivery_documents).filter((doc) => doc.order_transport_doc_type_id);
            transportBillImage = (poDeliveryInfo.order_delivery_documents).find(doc => doc.name === doc_type.transportBillImage)?.doc_url;
            loadedTruckWeightSlip = (poDeliveryInfo.order_delivery_documents).find(doc => doc.name === doc_type.loadedTruckWeightSlip)?.doc_url;
            primary9rImage = (poDeliveryInfo.order_delivery_documents).find(doc => doc.name === doc_type.primary9rImage)?.doc_url;
            first9rGatePass = (poDeliveryInfo.order_delivery_documents).find(doc => doc.name === doc_type.first9rGatePass)?.doc_url;
            handoverDeliveryDocs = (poDeliveryInfo.order_delivery_documents).filter((doc) => doc.order_delivery_document_type_id);
        }
        if (poDeliveryInfo.revision_before_payments.length) {
            revisionPayments = poDeliveryInfo.revision_before_payments;
            const count_rpm_approval = poDeliveryInfo.revision_before_payments.filter((revision) => !revision.approved_by_rpm);
            if (!count_rpm_approval.length) { isPartOneApprovedByRpm = true; }
            const count_sh_approval = poDeliveryInfo.revision_before_payments.filter((revision) => !revision.approved_by_state_head);
            if (!count_sh_approval.length) { isPartOneApprovedByStateHead = true; }
        }
    }

    const dispatchDocMaps = (handoverDeliveryDocs?.length) ? handoverDeliveryDocs : varietyDetail.crop_variety_procurement_dispatch_document_maps;
    const poHandoverDocs = dispatchDocMaps.map(dd => {
        const dispatchDoc = dd.procurement_dispatch_document;
        const response = {
            id: dispatchDoc.id,
            name: dispatchDoc.name
        }
        if (dd.doc_url) {
            response.image = dd.doc_url
        } else {
            response.imageReq = dd.image_required
        }
        return response;
    });
    const driverVerifiedAt = orderDeliveryLogs.find(log => log.order_delivery_stage_id === 1);
    const vehicleArrivedAt = orderDeliveryLogs.find(log => log.order_delivery_stage_id === 2);
    const loadingStartedAt = orderDeliveryLogs.find(log => log.order_delivery_stage_id === 3);
    const loadingFinishedAt = orderDeliveryLogs.find(log => log.order_delivery_stage_id === 4);
    const readyToDispatchAt = orderDeliveryLogs.find(log => log.order_delivery_stage_id === 5);
    const deliveredAt = orderDeliveryLogs.find(log => log.order_delivery_stage_id === 6);
    const dispatchedAt = orderDeliveryLogs.find(log => log.order_delivery_stage_id === 7);
    const cancelledAt = orderDeliveryLogs.find(log => log.order_delivery_stage_id === 8);

    const isPartTwoApprovedByRpm = (retailer_payment_deduction &&
        retailer_payment_deduction.approved_by_rpm &&
        transport_payment_deduction &&
        transport_payment_deduction.approved_by_rpm) || false;

    const isPartTwoApprovedByStateHead = (retailer_payment_deduction &&
        retailer_payment_deduction.approved_by_state_head &&
        transport_payment_deduction &&
        transport_payment_deduction.approved_by_state_head) || false;

    const isRetailerPart2ApprovedByStateHead = (retailer_payment_deduction &&
        retailer_payment_deduction.approved_by_state_head) || false;

    const isTransportPart2ApprovedByStateHead = (transport_payment_deduction &&
        transport_payment_deduction.approved_by_state_head) || false;

    const isPartTwoDoneByPa = !!((retailer_payment_deduction && transport_payment_deduction));

    return {
        _id: purchaseOrder.id,
        areAllDocumentsSubmittedByRetailer: purchaseOrder.areAllDocumentsSubmittedByRetailer,
        areAllRetailerDocumentsApproved: purchaseOrder.areAllRetailerDocumentsApproved,
        createdAt: purchaseOrder.createdAt,
        updatedAt: purchaseOrder.createdAt,
        farmartId: purchaseOrder.farmart_id,
        sampleId: sampleInfo.id,
        status: purchaseOrder.status,
        statusRemark: purchaseOrder.status_remark,
        driverVerified: purchaseOrder.driver_verified,
        quantityInTon: purchaseOrder.quantity,
        amountPerQuintal: purchaseOrder.price,
        zohoPoId: purchaseOrder.zoho_po_id,
        salesOrderId: salesOrder ? salesOrder.id : null,
        driverVerifiedAt: driverVerifiedAt ? driverVerifiedAt.log_time : null,
        vehicleArrivedAt: vehicleArrivedAt ? vehicleArrivedAt.log_time : null,
        loadingStartedAt: loadingStartedAt ? loadingStartedAt.log_time : null,
        loadingFinishedAt: loadingFinishedAt ? loadingFinishedAt.log_time : null,
        readyToDispatchAt: readyToDispatchAt ? readyToDispatchAt.log_time : null,
        deliveredAt: deliveredAt ? deliveredAt.log_time : null,
        dispatchedAt: dispatchedAt ? dispatchedAt.log_time : null,
        cancelledAt: cancelledAt ? cancelledAt.log_time : null,
        sampleLength: sampleImages ? sampleImages.length : 0,
        samples: poSamples ? poSamples.map(ps => ps.image) : [],
        transportInfo: poDeliveryInfo
            ? {
                name: poDeliveryInfo.transport_name,
                vehicleNumber: poDeliveryInfo.vehicle_number,
                driverName: poDeliveryInfo.driver_name,
                driverMobileNumber: poDeliveryInfo.driver_mobile_number,
                images: orderDeliveryDocs.map(odd => {
                    const docType = odd.order_delivery_document_type_enum
                    return {
                        id: odd.id,
                        name: docType.name,
                        url: odd.doc_url
                    };
                })
            }
            : null,
        sampleInfo: {
            id: sampleInfo.id,
            farmartId: sampleInfo.farmart_id,
            createdAt: sampleInfo.createdAt,
            retailerOfferPrice: sampleInfo.purchase_price,
            availableLot: sampleInfo.total_available_quantity,
            transportCost: purchaseOrder.procurement_lot.transport_cost_est, // sampleInfo.transport_cost_est,
            isMandiTaxPaid: sampleInfo.is_mandi_tax_paid,
            images: sampleImages ? sampleImages.map(s => s.image) : []
        },
        deliveryInfo: orderDeliveryDetails
            ? {
                address: orderDeliveryDetails.address,
                state: orderDeliveryDetails.state_name,
                district: orderDeliveryDetails.district_name,
                pincode: orderDeliveryDetails.pincode,
                buyerName: salesOrder.buyer_name
            }
            : null,
        paymentInfoStatus: isPartOneApprovedByStateHead ? getRetailerTransportPaymentInfo(payments, revisionPayments) : getRetailerTransportRevisionPayment(revisionPayments),
        retailerPaymentInfo: getPaymentInfo(purchaseOrder.price,
            poBillComponent,
            poDeliveryInfo,
            purchaseOrder.mandi_tax_value),
        dispatchInfo: getDispatchInfo(poDeliveryInfo, loadedTruckWeightSlip, transportBillImage, primary9rImage, first9rGatePass, poHandoverDocs, purchaseOrder),
        qcList: qcReports.map(qcr => {
            const qc_map = qcr.crop_variety_qc_param_map;
            const qc_map_type = qc_map ? qc_map.qc_param_type : null;
            return {
                id: qc_map.id,
                name: qc_map_type ? qc_map_type.name : null,
                image: qcr.image,
                value: qcr.value
            };
        }),
        cropInfo: {
            cropName: cropDetail.name,
            cropId: cropDetail.id,
            cropVariety: varietyDetail.id,
            cropVarietyName: varietyDetail.name,
            interStateTaxRate: varietyDetail.crop_variety_gst_detail?.inter_state_tax_rate || 0,
            intraStateTaxRate: varietyDetail.crop_variety_gst_detail?.intra_state_tax_rate || 0,
            isGstReceiptOpted: sampleInfo.is_gst_receipt_opted
        },
        retailerInfo: {
            id: merchantDetails.id,
            name: merchantDetails.name,
            mobileNumber: merchantDetails.mobile_number,
            district: merchantDetails.district_name,
            state: merchantDetails.state_name
        },
        paInfo: {
            id: poCreatedBy.id,
            name: poCreatedBy.name,
            mobileNumber: poCreatedBy.mobile_number
        },
        isPartOneApprovedByRpm,
        isPartOneApprovedByStateHead,
        isPartTwoApprovedByRpm,
        isPartTwoApprovedByStateHead,
        isPartTwoDoneByPa,
        isRetailerPart2ApprovedByStateHead,
        isTransportPart2ApprovedByStateHead,
        retailerActionStatus: po_pdf ? po_pdf.is_accepted_by_retailer : ACCPETED_BY_RETAILER.ACCEPTED,
        poDocUrl: po_pdf ? po_pdf.po_doc_url : null
        // these info are temporary
        // vehicleArrivalInfo: {
        //     images: [],
        //     submittedAt: "2022-06-10T07:42:50.800Z"
        // },
        // weightOnArrivalInfo: {
        //     image: "",
        //     bridgeWeight: 0,
        //     poWeight: 0,
        //     submittedAt: "2022-06-10T07:43:06.073Z"
        // },
        // qcByBuyer: {
        //     qcList: [],
        //     submittedAt: "2022-06-10T07:43:30.629Z"
        // },
        // unloadingInfo: {
        //     image: "",
        //     bridgeWeight: 0,
        //     buyerWeight: 0,
        //     submittedAt: "2022-06-10T07:43:41.730Z"
        // },
        // deductionReport: {
        //     image: "",
        //     comment: "5000",
        //     submittedAt: "2022-06-10T07:43:52.706Z"
        // }
    };
};

/**
 * This service will return every detail related to the given PO.
 * @param {number} poId
 * @returns {Promise<{status: number, data: any}>}
 */
const getPoFullInfo = async (poId) => {
    try {
        // query everything related to the given PO.
        const purchaseOrder = await purchase_crop_orders_model.findOne({
            where: { id: poId, is_active: 1 },
            include: [
                {
                    model: purchase_order_pdfs_model,
                    as: 'logs',
                    where: {
                        is_active: true,
                        pdf_status: pdfStatus.ACTIVE
                    },
                    required: false
                },
                {
                    model: crop_detail_model,
                    required: true,
                    where: { is_active: 1 }
                },
                {
                    model: master_merchant_detail_model,
                    required: true,
                    where: { is_active: 1 }
                },
                {
                    model: user_profile_model,
                    required: true,
                    where: { is_active: 1 }
                }
            ]
        });
        if (!purchaseOrder) {
            throw new ValidationError(`No PO found with id: ${poId}`);
        } else {

            const merchant_docs = await merchant_verification_docs.findAll({
                where: {
                    master_merchant_id: purchaseOrder.dataValues.master_merchant_id,
                    is_active: 1
                },
                attributes: ['front_image', 'status']
            })

            const [po_sample_images, po_qc_report, order_delivery, payment_detail, lot_detail, buyer_order, crop_variety, crop_variety_gst] = await Promise.all([
                purchase_crop_sample_images_model.findAll({
                    where: {
                        is_active: 1,
                        purchase_crop_order_id: purchaseOrder.id
                    }
                }),
                purchase_qc_report_model.findAll({
                    where: {
                        is_active: 1,
                        purchase_crop_order_id: purchaseOrder.id
                    },
                    include: {
                        model: crop_variety_qc_param_maps_model,
                        required: true,
                        where: { is_active: 1 },
                        include: {
                            model: qc_param_types_model,
                            required: true,
                            where: { is_active: 1 }
                        }
                    }
                }),
                order_delivery_detail_model.findOne({
                    where: {
                        is_active: 1,
                        purchase_crop_order_id: purchaseOrder.id
                    },
                    include: [
                        {
                            model: revision_before_payments,
                            required: false,
                            where: { is_active: 1 }
                        },
                        {
                            model: order_delivery_logs_model,
                            required: false,
                            where: { is_active: 1 }
                        }
                    ]
                }),
                procurement_payments_model.findAll({
                    where: {
                        is_active: 1,
                        purchase_crop_order_id: purchaseOrder.id,
                        is_additional_payment: false
                    },
                    include: {
                        model: account_details_model,
                        required: false,
                        where: { is_active: 1 }
                    }
                }),
                procurement_lots.findOne({
                    where: {
                        is_active: 1,
                        id: purchaseOrder.procurement_lot_id
                    },
                    include: [
                        {
                            model: procurment_crop_sample_model,
                            required: true,
                            where: { is_active: 1 }
                        },
                        {
                            model: procurement_bill_components_model,
                            required: false,
                            where: { is_active: 1 },
                            include: {
                                model: procurement_bill_components_enum_model,
                                required: true,
                                where: { is_active: 1 }
                            }
                        }
                    ]
                }),
                buyer_order_detail_model.findOne({
                    where: {
                        is_active: 1,
                        id: purchaseOrder.buyer_order_id
                    },
                    include: {
                        model: buyer_order_delivery_info,
                        required: true,
                        as: 'delivery_info',
                        where: { is_active: 1 }
                    }
                }),
                crop_varieties_detail_model.findOne({
                    where: {
                        id: purchaseOrder.crop_variety_id,
                        is_active: 1
                    },
                    include: {
                        model: crop_variety_procurement_document_dispatch_map_model,
                        where: { is_active: 1 },
                        required: false,
                        include: {
                            model: procurement_dispatch_document_model,
                            required: true,
                            where: { is_active: 1 }
                        }
                    }
                }),
                crop_variety_gst_detail_model.findOne({
                    where: {
                        crop_variety_id: purchaseOrder.crop_variety_id,
                        is_active: true
                    }
                })
            ])
            const [po_documents, sample_images, sample_qc_report, retailer_payment_deduction, transport_payment_deduction] = await Promise.all([
                order_delivery_documents_model.findAll({
                    where: {
                        is_active: 1,
                        order_delivery_id: order_delivery?.id || null
                    },
                    include: [
                        {
                            model: order_delivery_document_type_enums_model,
                            required: false,
                            where: { is_active: 1 }
                        },
                        {
                            model: procurement_dispatch_document_model,
                            required: false,
                            where: { is_active: 1 }
                        }
                    ]
                }),
                purchase_crop_sample_images_model.findAll({
                    where: {
                        is_active: 1,
                        purchase_crop_sample_id: lot_detail?.procurment_crop_sample_id || null
                    }
                }),
                purchase_qc_report_model.findAll({
                    where: {
                        is_active: 1,
                        purchase_crop_sample_id: lot_detail?.procurment_crop_sample_id || null
                    },
                    include: {
                        model: crop_variety_qc_param_maps_model,
                        required: true,
                        where: { is_active: 1 },
                        include: {
                            model: qc_param_types_model,
                            required: true,
                            where: { is_active: 1 }
                        }
                    }
                }),
                payment_deductions_for_retailer.findOne({
                    where: {
                        is_active: true,
                        purchase_crop_order_id: purchaseOrder.id
                    }
                }),
                payment_deductions_for_transport.findOne({
                    where: {
                        is_active: true,
                        purchase_crop_order_id: purchaseOrder.id
                    }
                })
            ])
            if (po_qc_report) {
                purchaseOrder.purchase_qc_reports = po_qc_report;
            }
            if (po_sample_images) {
                purchaseOrder.purchase_crop_sample_images = po_sample_images;
            }
            if (order_delivery) {
                purchaseOrder.order_delivery_detail = order_delivery;
                if (po_documents) {
                    purchaseOrder.order_delivery_detail.order_delivery_documents = po_documents;
                }
            }
            if (payment_detail) {
                purchaseOrder.procurement_payments = payment_detail;
            }
            if (lot_detail) {
                purchaseOrder.procurement_lot = lot_detail;
                if (sample_images) {
                    purchaseOrder.procurement_lot.procurment_crop_sample.purchase_crop_sample_images = sample_images;
                }
                if (sample_qc_report) {
                    purchaseOrder.procurement_lot.procurment_crop_sample.purchase_qc_reports = sample_qc_report;
                }
            }
            if (buyer_order) {
                purchaseOrder.buyer_order_detail = buyer_order;
            }
            if (crop_variety) {
                purchaseOrder.crop_varieties_detail = crop_variety;
                if (crop_variety_gst) {
                    purchaseOrder.crop_varieties_detail.crop_variety_gst_detail = crop_variety_gst;
                }
            }
            if (retailer_payment_deduction) {
                purchaseOrder.retailer_payment_deduction = retailer_payment_deduction;
            }
            if (transport_payment_deduction) {
                purchaseOrder.transport_payment_deduction = transport_payment_deduction;
            }

            let areAllDocumentsSubmittedByRetailer = true
            let areAllRetailerDocumentsApproved = true

            merchant_docs.forEach(doc => {
                if (doc && doc.dataValues && !doc.dataValues.front_image) {
                    areAllDocumentsSubmittedByRetailer = false
                    areAllRetailerDocumentsApproved = false
                } else if (doc && doc.dataValues && doc.dataValues.front_image && doc.dataValues.status === merchant_doc_status.PENDING) { areAllRetailerDocumentsApproved = false }
            })

            purchaseOrder.areAllDocumentsSubmittedByRetailer = areAllDocumentsSubmittedByRetailer
            purchaseOrder.areAllRetailerDocumentsApproved = areAllRetailerDocumentsApproved
        }

        return {
            status: HTTP_status_codes.ok,
            data: transformResponse(purchaseOrder)
        };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: 'Something bad happened',
                error: err.message
            }
        };
    }
};

const get_po_details_service = async (po_id) => {
    try {
        const po = await purchaseOrderModel.findById(po_id);
        if (!po) {
            return {
                status: HTTP_status_codes.badRequest,
                data: {
                    message: 'invalid po_id'
                }
            }
        }

        const [sample, cropVariety, salesOrder, paymentInfo] = await Promise.all([
            masterSampleModel.findById(po.sampleId),
            cropVarietyModel.findById(po.cropInfo.cropVariety),
            buyer_order_detail_model.findByPk(po.soId, {
                include: [
                    {
                        model: buyer_order_delivery_info,
                        as: 'delivery_info'
                    }
                ]
            }),
            paymentModel.findOne({ poId: po_id })
        ]);

        const poFullInfo = {
            ...po._doc,
            sampleInfo: {
                id: sample._id,
                farmartId: sample.farmartId,
                createdAt: sample.createdAt,
                retailerOfferPrice: sample.purchasePrice,
                availableLot: sample.totalAvailableQuantity,
                transportCost: sample.transportCostEst,
                images: sample.sampleImages
            },
            sampleLength: sample.sampleImages.length,
            qcList: po.qcList.length
                ? po.qcList
                : (sample.qcReport).map((qc) => {
                    return {
                        id: qc.qcReportId,
                        name: qc.name,
                        value: qc.value,
                        image: qc.image
                    }
                }),
            dispatchInfo: po.dispatchInfo || {
                handoverDocs: (cropVariety.documentAtDispatch).filter((doc) => {
                    return doc.isActive
                }).map((doc) => {
                    return {
                        id: doc._id,
                        name: doc.name
                    }
                })
            },
            deliveryInfo: {
                address: salesOrder?.delivery_info?.address,
                state: salesOrder?.delivery_info?.state_name,
                district: salesOrder?.delivery_info?.district_name,
                pincode: salesOrder?.delivery_info?.pincode,
                buyerName: salesOrder?.buyer_name
            },
            zohopo_id: po.zohopo_id || null,
            paymentInfoStatus: generate_payment_obj(paymentInfo),
            retailerPaymentInfo: get_retailer_payment_info(po, sample),
            salesOrderId: po.soId || po.salesOrderId
        }

        return { status: HTTP_status_codes.ok, data: poFullInfo };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: 'Something bad happened',
                error: err.message
            }
        };
    }
};

function generate_payment_obj (pay) {
    const paymentInfoStatus = {
        partOneOfRetailer: false,
        partTwoOfRetailer: false,
        partOneOfTransport: false,
        partTwoOfTransport: false,
        retailer: {
            partOne: {
                amount: 0,
                utr: null,
                date: null
            },
            partTwo: {
                amount: 0,
                utr: null,
                date: null
            }
        },
        transport: {
            partOne: {
                amount: 0,
                utr: null,
                date: null
            },
            partTwo: {
                amount: 0,
                utr: null,
                date: null
            }
        }
    }
    try {
        paymentInfoStatus.partOneOfRetailer = (pay != null) ? (pay.partOne) ? (pay.partOne.retailer) ? !!(pay.partOne.retailer.utr) : false : false : false;
        paymentInfoStatus.partTwoOfRetailer = (pay != null) ? (pay.partTwo) ? (pay.partTwo.retailer) ? !!(pay.partTwo.retailer.utr) : false : false : false;
        paymentInfoStatus.partOneOfTransport = (pay != null) ? (pay.partOne) ? (pay.partOne.transport) ? !!(pay.partOne.transport.utr) : false : false : false;
        paymentInfoStatus.partTwoOfTransport = (pay != null) ? (pay.partTwo) ? (pay.partTwo.transport) ? !!(pay.partTwo.transport.utr) : false : false : false;
        if (paymentInfoStatus.partOneOfRetailer) {
            paymentInfoStatus.retailer.partOne.amount = pay.partOne.retailer.payableAmount;
            paymentInfoStatus.retailer.partOne.date = pay.partOne.retailer.paidAt;
            paymentInfoStatus.retailer.partOne.utr = pay.partOne.retailer.utr;
        }
        if (paymentInfoStatus.partOneOfTransport) {
            paymentInfoStatus.transport.partOne.amount = pay.partOne.transport.payableAmount;
            paymentInfoStatus.transport.partOne.date = pay.partOne.transport.paidAt;
            paymentInfoStatus.transport.partOne.utr = pay.partOne.transport.utr;
        }
        if (paymentInfoStatus.partTwoOfRetailer) {
            paymentInfoStatus.retailer.partTwo.amount = pay.partTwo.retailer.payableAmount;
            paymentInfoStatus.retailer.partTwo.date = pay.partTwo.retailer.paidAt;
            paymentInfoStatus.retailer.partTwo.utr = pay.partTwo.retailer.utr;
        }
        if (paymentInfoStatus.partTwoOfTransport) {
            paymentInfoStatus.transport.partTwo.amount = pay.partTwo.transport.payableAmount;
            paymentInfoStatus.transport.partTwo.date = pay.partTwo.transport.paidAt;
            paymentInfoStatus.transport.partTwo.utr = pay.partTwo.transport.utr;
        }

    } catch (err) {
        error_log(err)
    }
    return paymentInfoStatus;
}

const get_retailer_payment_info = (po, sample) => {
    const infos = [];
    if (!po.dispatchInfo) { return infos; }
    infos.push({
        name: 'Commodity Value',
        qtlPrice: po.amountPerQuintal,
        toBePaid: round_off_to_two_decimal((po.amountPerQuintal || 0) * (po.dispatchInfo.netWeight / 100))

    });
    infos.push({
        name: 'Mandi Tax to Retailer',
        qtlPrice: sample.mandiTax,
        toBePaid: round_off_to_two_decimal((sample.mandiTax || 0) * (po.dispatchInfo.netWeight / 100))

    });
    infos.push({
        name: 'Commission Amount',
        qtlPrice: sample.retailerCommision,
        toBePaid: round_off_to_two_decimal((sample.retailerCommision || 0) * (po.dispatchInfo.netWeight / 100))

    });
    infos.push({
        name: 'Labour + Gunny Bag Cost',
        qtlPrice: sample.labourAndBagCost,
        toBePaid: round_off_to_two_decimal((sample.labourAndBagCost || 0) * (po.dispatchInfo.netWeight / 100))

    });
    return infos;
}

module.exports = {
    get_po_details_service,
    generate_payment_obj,
    get_retailer_payment_info,
    getPoFullInfo,
    getPaymentInfo
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/get_doc_for_approval_service.js
const procurement_dispatch_document = require('../../../../database/models_v2/procurement_order/procurement_dispatch_document');
const order_delivery_detail = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const order_delivery_documents = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_documents');
const order_delivery_document_type_enums = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_document_type_enums');
const error_log = require('../../../../middelware/error_log');
const identify_file_type_from_url_service=require('../../../../common_services/url_to_file_type/identify_file_type_from_url')

const get_doc_for_approval_service = (po_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            const docs = await order_delivery_documents.findAll({
                where:{
                    is_active: 1
                },
                include: [
                    {
                        model: order_delivery_detail,
                        required: true,
                        where: {
                            purchase_crop_order_id: po_id,
                            is_active: 1
                        }
                    },
                    {
                        model: procurement_dispatch_document,
                        required: false,
                        where: {
                            is_active: 1
                        }
                    },
                    {
                        model: order_delivery_document_type_enums,
                        required: false,
                        where: {
                            is_active: 1
                        }
                    }
                ]
            })

            const approved_docs = docs.filter((doc) => doc.status === 1 || doc.status === 4).length;
            const rejected_docs = docs.filter((doc) => doc.status === 0 || doc.status === 3).length;
            const pending_docs = docs.filter((doc) => doc.status === 2).length;
            const docs_data=[];
            for (let index = 0; index < docs.length; index++) {
                let doc = docs[index];
                let doc_file_type=await identify_file_type_from_url_service(doc.doc_url);
                let doc_obj={
                    id: doc.id,
                    name: doc.procurement_dispatch_document ?
                        doc.procurement_dispatch_document.name : doc.order_delivery_document_type_enum ?
                            doc.order_delivery_document_type_enum.name : doc.name || null,
                    doc_url: doc.doc_url,
                    doc_file_type,
                    status: doc.status
                }
                docs_data.push(doc_obj);
            }
            // const docs_data = docs.map((doc) => {
            //     return {
            //         id: doc.id,
            //         name: doc.procurement_dispatch_document ?
            //             doc.procurement_dispatch_document.name : doc.order_delivery_document_type_enum ?
            //                 doc.order_delivery_document_type_enum.name : doc.name || null,
            //         doc_url: doc.doc_url,
            //         status: doc.status
            //     }
            // })
            resolve({ approved_docs, rejected_docs, pending_docs, docs_data })
        }
        catch (ex) {
            error_log(ex);
            reject({ message: ex.message });
        }
    })
}


module.exports = {
    get_doc_for_approval_service
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/get_order_history_service.js
const purchase_crop_lead_model = require("../../../../database/models_v2/purchase_campaign/purchase_crop_lead");
const crop_detail_model = require("../../../../database/models_v2/crop/crop_detail");
const crop_vernacular_metadata_model = require("../../../../database/models_v2/crop/crop_vernacular_metadata");
const user_profile_model = require("../../../../database/models/user_profile");
const error_log = require("../../../../middelware/error_log");
const { get_order_status_service } = require("./get_order_status_service");
const purchase_order_status_enum = require("../../../../enums/purchase_order/purchase_order_status_enum");
const language_enum = require("../../../../enums/global/language");

const get_order_history_service = (
  merchant_detail_id,
  language_id = language_enum.default,
  page_no,
  limit
) => {
  return new Promise(async (resolve, reject) => {
    try {
      let offset = (page_no - 1) * limit;
      let order_histories = await purchase_crop_lead_model.findAndCountAll({
        where: {
          merchant_detail_id,
          is_active: 1,
        },
        limit: limit,
        offset: offset,
      });
      for (let i = 0; i < order_histories.rows.length; i++) {
        let crop_id = order_histories.rows[i].crop_id;
        let pa_id = order_histories.rows[i].assigned_pa;
        let crop_detail = await crop_detail_model.findOne({
          where: {
            is_active: 1,
            id: crop_id
          },
          attributes: ['id', 'app_tile_url'],
          include: [{
            model: crop_vernacular_metadata_model,
            where: {
              is_active: 1,
              language_id
            },
            attributes: ["name"],
          },
          ]
        })
        let pa_exists = await user_profile_model.findOne({
          where: {
            is_active: 1,
            id: pa_id
          },
          attributes: ['name', 'mobile_number']
        });

        order_histories.rows[i].crop_detail = {
          name: crop_detail.crop_vernacular_metadata[0].name,
          app_tile_url: crop_detail.app_tile_url,
        }
        if (pa_exists) {
          order_histories.rows[i].user_profile = {
            name: pa_exists.name,
            mobile_number: pa_exists.mobile_number,
          }
        }
        else {
          order_histories.rows[i].user_profile = null
        }
      }
      let order_history = await format_order_history(
        order_histories,
        language_id
      );
      resolve({ count: order_histories.count, rows: order_history });
    } catch (ex) {
      error_log(ex);
      reject({ message: ex.message });
    }
  });
};

const format_order_history = async (order_histories, language_id) => {
  try {
    let order_history = [];
    for (let i = 0; i < order_histories.rows.length; i++) {
      let order_obj = order_histories.rows[i];
      let { order_status } = await get_order_status_service(
        order_obj.id,
        language_id
      );
      let next_stage =
        order_status.order_stages[order_status.order_stages.length - 1];
      for (let index = 0; index < order_status.order_stages.length; index++) {
        let order_stage = order_status.order_stages[index];
        next_stage = order_stage;
        if (order_stage.status === purchase_order_status_enum.pending) {
          break;
        }
      }
      let order_history_obj = {
        lead_request_id: order_obj.id,
        farmart_lead_request_id: `FM000${order_obj.id}`,
        lead_request_created_at: order_obj.dataValues.created_at,
        crop: {
          crop_name: order_obj.crop_detail.name,
          crop_pic_url: order_obj.crop_detail.app_tile_url,
        },
        price_per_quintal: order_obj.price_per_kg * 1000,
        weight_in_ton: order_obj.quantity_in_kg / 1000,
        next_stage,
      };
      if (!order_obj.user_profile) {
        order_history_obj.pa = null;
      } else {
        order_history_obj.pa = {
          name: order_obj.user_profile.name,
          mobile_number: order_obj.user_profile.mobile_number,
        };
      }
      order_history.push(order_history_obj);
    }
    return order_history;
  } catch (err) {
    error_log(err);
    throw err;
  }
};
module.exports = get_order_history_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/get_order_status_service.js
const get_order_detail_service = require("./get_order_detail_mongo");
const error_log = require("../../../../middelware/error_log");
const { get_purchase_order_metadata_service } = require("./get_order_stage_format");
const purchase_order_stage_enums = require("../../../../enums/purchase_order/purchase_order_stage_ids");
const purchase_order_status_enum = require("../../../../enums/purchase_order/purchase_order_status_enum");
const purchase_order_sub_stage_id_enums = require("../../../../enums/purchase_order/purchase_order_sub_stage_ids")
const language_enum = require("../../../../enums/global/language")

const get_order_status_service = async (lead_request_id, language_id = language_enum.default, sub_stages_needed = false) => {
  return new Promise(async (resolve, reject) => {
    try {
      const order_details = await get_order_detail_service(lead_request_id);
      const purchase_order_stage_metadata = await get_purchase_order_metadata_service();
      const purchase_order_stages = [];
      let no_of_stages = purchase_order_stage_metadata.length;
      for (let index = 0; index < no_of_stages; index++) {
        let stage = {}
        stage.id = purchase_order_stage_metadata[index].stage_id;
        switch (purchase_order_stage_metadata[index].stage_id) {
          case purchase_order_stage_enums.lead:
            stage.status = purchase_order_status_enum.completed;
            if (order_details.lead_status === purchase_order_status_enum.cancelled)
              stage.status = order_details.lead_status;
            add_cancel_label_and_sub_stages(stage, index, purchase_order_stage_metadata);
            stage.name = purchase_order_stage_metadata[index].stage_label[language_id];
            break;
          case purchase_order_stage_enums.sample:
            stage.status = order_details.sample_status;
            add_cancel_label_and_sub_stages(stage, index, purchase_order_stage_metadata);
            stage.name = purchase_order_stage_metadata[index].stage_label[language_id];
            break;
          case purchase_order_stage_enums.po:
            stage.status = order_details.purchase_crop_order_status;
            add_cancel_label_and_sub_stages(stage, index, purchase_order_stage_metadata);
            stage.name = purchase_order_stage_metadata[index].stage_label[language_id];
            break;
          case purchase_order_stage_enums.dispatched:
            stage.status = order_details.dispatch_status;
            add_cancel_label_and_sub_stages(stage, index, purchase_order_stage_metadata);
            stage.name = purchase_order_stage_metadata[index].stage_label[language_id];
            break;
          case purchase_order_stage_enums.payment:
            stage.status = order_details?.payments?.length > 0 ? purchase_order_status_enum.completed : purchase_order_status_enum.pending;
            add_cancel_label_and_sub_stages(stage, index, purchase_order_stage_metadata);
            if (!order_details.purchase_crop_total_payment)
              stage.name = purchase_order_stage_metadata[index].stage_label[language_id].split(":")[0];
            else {
              let variables = [order_details.purchase_crop_total_payment]
              stage.name = generate_string_from_template(purchase_order_stage_metadata[index].stage_label[language_id], variables);
            }
            break;
        }
        stage.sub_stages = [];
        if (sub_stages_needed)
          stage.sub_stages = generate_sub_stages(purchase_order_stage_metadata[index].sub_stages, order_details, language_id);
        purchase_order_stages.push(stage);
      }
      let order_status = {
        lead_request_id: lead_request_id,
        farmart_lead_request_id: order_details.farmart_lead_request_id,
        purchase_crop_order_id: order_details.purchase_crop_order_id,
        purchase_crop_order_created_at: order_details.purchase_crop_order_created_at,
        order_stages: purchase_order_stages
      };
      resolve({ "order_status": order_status });
    } catch (ex) {
      error_log(ex);
      reject({ message: ex.message });
    }
  });
};

const add_cancel_label_and_sub_stages = (stage, index, purchase_order_stage_metadata) => {
  try {
    if (stage.status === purchase_order_status_enum.cancelled) {
      purchase_order_stage_metadata[index].stage_label = purchase_order_stage_metadata[index].cancel_stage_label;
      purchase_order_stage_metadata[index].sub_stages = purchase_order_stage_metadata[index].cancel_sub_stages;
      return purchase_order_stage_metadata;
    }
  }
  catch (err) {
    error_log(err);
    return purchase_order_stage_metadata;
  }
}

const generate_string_from_template = (template, variables) => {
  try {
    let variable_string = "$var";
    let tokens = template.split(" ");
    if (template.indexOf(variable_string) == -1) {
      return template;
    }
    for (let token_i = 0, variable_i = 0; token_i < tokens.length, variable_i < variables.length; token_i++) {
      if (tokens[token_i] === variable_string) {
        tokens[token_i] = variables[variable_i] + '';
        variable_i++;
      }
    }
    return tokens.join(" ");
  }
  catch (err) {
    error_log(err);
    return template;
  }
}

const generate_sub_stages = (sub_stages_metadata, order_details, language_id) => {
  try {
    let sub_stages = [];
    for (let index = 0; index < sub_stages_metadata.length; index++) {
      let variables = [];
      switch (sub_stages_metadata[index].sub_stage_id) {
        case purchase_order_sub_stage_id_enums.lead_creation_date:
          variables.push(new Date().toLocaleDateString());
          break;
        case purchase_order_sub_stage_id_enums.pa_mapped_sample:
          if (order_details.assigned_pa?.name) {
            variables.push(order_details.assigned_pa.name);
          }
          else continue;
          break;
        case purchase_order_sub_stage_id_enums.po_document:
          if (order_details.purchase_crop_order_document) {
            variables.push(order_details.purchase_crop_order_document)
          }
          else continue;
          break;
        case purchase_order_sub_stage_id_enums.dispatch_document:
          if (order_details.dispatch_document_url) {
            variables.push(order_details.dispatch_document_url)
          }
          else continue;
          break;
        case purchase_order_sub_stage_id_enums.payment_part_one:
          if (order_details.payments?.[0]?.amount) {
            variables.push(order_details.payments[0].amount)
          }
          else continue;
          break;
        case purchase_order_sub_stage_id_enums.payment_part_one_utr:
          if (order_details.payments?.[0]?.utr_number) {
            variables.push(order_details.payments[0].utr_number)
            variables.push(new Date(order_details.payments[0].createdAt).toDateString())
            variables.push(new Date(order_details.payments[0].createdAt).toLocaleTimeString())
          }
          else continue;
          break;
        case purchase_order_sub_stage_id_enums.payment_part_two:
          if (order_details.payments?.[1]?.amount) {
            variables.push(order_details.payments[1].amount)
            variables.push(order_details.payments[1].total_deductions)
          }
          else continue;
          break;
        case purchase_order_sub_stage_id_enums.payment_part_two_utr:
          if (order_details.payments?.[1]?.utr_number) {
            variables.push(order_details.payments[1].utr_number)
            variables.push(new Date(order_details.payments[1].createdAt).toDateString())
            variables.push(new Date(order_details.payments[1].createdAt).toLocaleTimeString())
          }
          else continue;
          break;
      }
      let sub_stage_string = variables.length ? generate_string_from_template(sub_stages_metadata[index].sub_stage_label[language_id], variables) : ""
      sub_stages.push({
        id: sub_stages_metadata[index].sub_stage_id,
        value: sub_stage_string,
        type: sub_stages_metadata[index].type
      });
    }
    return sub_stages;
  }
  catch (err) {
    error_log(err);
    return [];
  }
}

module.exports = {
  get_order_status_service,
  generate_string_from_template,
  generate_sub_stages,
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/get_all_po_service.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");
const master_merchant_detail_model = require("../../../../database/models_v2/merchant/master_merchant_detail");
const user_profile_model = require("../../../../database/models/user_profile");
const crop_detail_model = require("../../../../database/models_v2/crop/crop_detail");
const crop_varieties_detail_model = require("../../../../database/models_v2/crop/crop_varieties_detail");
const buyer_order_detail_model = require("../../../../database/models_v2/buyer_order/buyer_order_detail");
const buyer_order_quality_check_model = require("../../../../database/models_v2/buyer_order/buyer_order_quality_check");
const purchase_crop_orders_model = require("../../../../database/models_v2/procurement_order/purchase_crop_orders");
const qc_param_types_model = require("../../../../database/models_v2/procurement_order/qc_param_types");
const user_role = require("../../../../enums/user_profile/user_role");
const get_all_juniors_service = require("../../users/_services/get_all_juniors_service");
const Op = require('sequelize').Op;
const {ACCPETED_BY_RETAILER, pdfStatus} = require('../../../../enums/market_linkage/enums/po_pdf');
const purchase_order_pdfs_model = require("../../../../database/models_v2/purchase_order_pdfs");

/**
 * @param {any[]} purchaseOrders 
 * @returns {any[]}
 */
const transformResponse = (purchaseOrders) => purchaseOrders.map(po => {
    const retailerInfo = po.master_merchant_detail;
    const paInfo = po.user_profile;
    const cropInfo = po.crop_detail;
    const cropVarietyInfo = po.crop_varieties_detail;
    const buyerOrderInfo = po.buyer_order_detail;
    const po_pdf = po.logs?.[0];
    const result = {
        _id: po.id,
        farmartId: po.farmart_id,
        createdAt: po.createdAt,
        updatedAt: po.updatedAt,
        status: po.status,
        statusRemark: po.status_remark,
        quantityInTon: po.quantity,
        cropName: cropInfo.name,
        cropVarietyName: cropVarietyInfo.name,
        retailerInfo: {
            id: retailerInfo.id,
            name: retailerInfo.name,
            mobileNumber: retailerInfo.mobile_number,
            state: retailerInfo.state_name,
            district: retailerInfo.district_name
        },
        zohoPoId: po.zoho_po_id,
        paName: paInfo?.name,
        // default values in case this po is not mapped with any so.
        buyerName: null,
        soId: null,
        salesOrderId: null,
        buyerRequiredQc: null,
        retailerActionStatus: ACCPETED_BY_RETAILER.ACCEPTED
    };
    if (buyerOrderInfo) {
        result.buyerName = buyerOrderInfo.buyer_name;
        result.salesOrderId = buyerOrderInfo.farmart_id;
        result.soId = buyerOrderInfo.id;
        if (Array.isArray(buyerOrderInfo.quality_checks))
            result.buyerRequiredQc = buyerOrderInfo.quality_checks.map(qc => {
                const qcType = qc.qc_param_type;
                return {
                    id: qc.id,
                    name: qcType ? qcType.name : "Unknown",
                    requiredValue: qc.required_value
                };
            })
    }
    if(po_pdf)
        result.retailerActionStatus = po_pdf.is_accepted_by_retailer;

    return result;
});

/**
 * Get all the POs based on the given filter option.
 * @param {{
 *      designation: number,
 *      status: number | undefined,
 *      soId: string | undefined,
 *      user_profile_id: string | undefined
 * }} filterOption 
 * @returns {Promise<{status: number, data: any}>}
 */
const get_all_po_service = async (filterOption) => {
    try {
        //console.info(filterOption);
        const queryOption = {
            where: { is_active: 1 },
            include: [
                {
                    model: purchase_order_pdfs_model,
                    as: 'logs',
                    where: {
                        is_active: true,
                        pdf_status: pdfStatus.ACTIVE
                    },
                    required: false
                },
                {
                    model: master_merchant_detail_model,
                    required: true,
                    where: { is_active: 1 },
                },
                { model: crop_detail_model, required: true, where: { is_active: 1 }, },
                { model: crop_varieties_detail_model, required: true, where: { is_active: 1 }, },
                {
                    model: buyer_order_detail_model,
                    where: { is_active: 1, placed_by: filterOption.user_profile_id },
                    include: {
                        model: buyer_order_quality_check_model,
                        as: "quality_checks",
                        where: { is_active: 1 },
                        include: {
                            model: qc_param_types_model,
                            required: true,
                            where: { is_active: 1 }
                        }
                    },
                    required: false //filterOption.designation === user_role.SALES_ASSOCIATE
                },
                { model: user_profile_model },
            ],
            order: [
                ['updatedAt', 'DESC'],
            ],
        };

        if (filterOption.status) {
            queryOption.where.status = filterOption.status;
        }
        if (filterOption.soId) {
            queryOption.where.buyer_order_id = filterOption.soId;
        }
        if (filterOption.user_profile_id) {
            if (filterOption.designation === user_role.PROCUREMENT_ASSOCIATE 
                || filterOption.designation === user_role.SALES_ASSOCIATE
                || filterOption.designation === user_role.REGIONAL_MANAGER_SALES
                || filterOption.designation === user_role.STATE_HEAD_SALES)
                queryOption.where.user_profile_id = filterOption.user_profile_id;
            else if (filterOption.designation === user_role.REGIONAL_PROCUREMENT_MANAGER) {
                const all_juniors = await get_all_juniors_service(filterOption.user_profile_id);
                if(all_juniors.status !== HTTP_status_codes.ok)
                    return all_juniors;
                const all_pa = (all_juniors.data).map((junior) => junior._id);
                queryOption.where.user_profile_id = { [Op.in]: all_pa };
            }
        }

        const purchaseOrders = await purchase_crop_orders_model.findAll(queryOption);
        const transformedResponse = transformResponse(purchaseOrders);

        return {
            status: HTTP_status_codes.ok,
            data: transformedResponse
        };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
}

module.exports = get_all_po_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/order_details/get_crop_purchase_order_details.js
const error_log = require("../../../../../middelware/error_log");
const purchase_crop_order_model = require("../../../../../database/models_v2/procurement_order/purchase_crop_orders");
const purchase_order_status_enum = require("../../../../../enums/purchase_order/purchase_order_status_enum");

module.exports = async (procurement_sample_id) => {
    try {
        const purchase_crop_order = await purchase_crop_order_model.findOne({
            where: {
                purchase_sample_id: procurement_sample_id,
                is_active: 1
            }
        });
        if (purchase_crop_order) {
            return {
                purchase_crop_order_id: purchase_crop_order.id,
                purchase_crop_order_created_at: purchase_crop_order.createdAt,
                purchase_crop_order_document: purchase_crop_order.purchase_order_document_url,
                purchase_crop_order_status: purchase_crop_order.status,
                purchase_crop_total_payment: purchase_crop_order.total_payment
            }
        }
        else {
            return {
                purchase_crop_order_id: null,
                purchase_crop_order_created_at: null,
                purchase_crop_order_document: null,
                purchase_crop_order_status: purchase_order_status_enum.pending,
                purchase_crop_total_payment: null
            }
        }
    }
    catch (err) {
        error_log(err);
        throw err;
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/order_details/get_procurement_lead_details_service.js
const error_log = require("../../../../../middelware/error_log");
const purchase_crop_lead_model = require("../../../../../database/models_v2/purchase_campaign/purchase_crop_lead");
const purchase_crop_status_enum = require("../../../../../enums/purchase_order/purchase_order_status_enum");
const user_profile_model = require("../../../../../database/models/user_profile");

const get_lead_details = async (lead_request_id) => {
    try {
        const purchase_crop_lead = await purchase_crop_lead_model.findOne({
            where: {
                is_active: 1,
                id: lead_request_id
            },
            include: [
                {
                    model: user_profile_model,
                    where: {
                        is_active: 1
                    }
                }
            ]
        });
        if (purchase_crop_lead) {
            return {
                lead_request_id: purchase_crop_lead?.id,
                lead_created_at: purchase_crop_lead?.createdAt,
                lead_status: +purchase_crop_lead?.status,
                assigned_pa: {
                    name: purchase_crop_lead?.user_profile?.name,
                    mobile_number: purchase_crop_lead?.user_profile?.mobile_number,
                    pa_id: purchase_crop_lead?.user_profile?.id
                }
            }
        }
        return {
            lead_request_id,
            lead_created_at: null,
            lead_status: purchase_crop_status_enum.pending,
            pa_assigned: null
        }
    }
    catch (err) {
        error_log(err);
        throw err;
    }
}

module.exports = get_lead_details;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/order_details/get_procurement_order_dispatch_document.js
const error_log = require("../../../../../middelware/error_log");
const order_delivery_detail_model = require("../../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail");
const order_delivery_documents_model = require("../../../../../database/models_v2/procurement_order_deliveries/order_delivery_documents");

module.exports = async (purchase_crop_order_id, document_type) => {
    try {
        const order_delivery_detail = await order_delivery_detail_model.findOne({
            where: {
                purchase_crop_order_id,
                is_active: 1
            },
            include: [{
                model: order_delivery_documents_model,
                where: {
                    is_active: 1,
                    order_delivery_document_type_id: document_type
                }
            }]
        });
        if (order_delivery_detail?.order_delivery_documents?.[0]) {
            return order_delivery_detail.order_delivery_documents[0].doc_url;
        }
        else {
            return null;
        }
    }
    catch (err) {
        error_log(err);
        throw err;
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/order_details/get_procurement_order_payments.js
const error_log = require("../../../../../middelware/error_log");
const procurement_payment_model = require("../../../../../database/models_v2/procurement_payments/procurement_payments");
const bill_component_model = require("../../../../../database/models_v2/procurement_payments/procurement_bill_components");
const bill_operation_enum = require("../../../../../enums/purchase_order/bill_operation_enum");

module.exports = async (purchase_crop_order_id, order_delivery_id) => {
    try {
        const payment_query = {
            is_active: 1,
            is_additional_payment: false
        }
        if (purchase_crop_order_id) {
            payment_query.purchase_crop_order_id = purchase_crop_order_id;
        }
        else if (order_delivery_id) {
            payment_query.order_delivery_id = order_delivery_id;
        }
        const payments = await procurement_payment_model.findAll({
            where: payment_query,
            order: ["installment_number"],
            attributes: [["id", "payment_id"], "installment_number", "utr_number", "amount", "created_at"]
        });
        const deductions = await bill_component_model.findAll({
            where: {
                ...payment_query,
                order_bill_operation_id: bill_operation_enum.deduction
            }
        });
        let total_deductions = 0;
        deductions.forEach(ele => {
            total_deductions += ele.amount
        });

        return payments.map(ele => {
            ele.deductions = ele.installment_number == 2 ? total_deductions : 0;
            return ele;
        });
    }
    catch (err) {
        error_log(err);
        throw err;
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/order_details/get_procurement_sample_detail_service.js
const error_log = require("../../../../../middelware/error_log");
const purchase_crop_sample_model = require("../../../../../database/models_v2/procurement_sample/procurment_crop_sample");
const purchase_crop_status_enum = require("../../../../../enums/purchase_order/purchase_order_status_enum");

const get_sample_detail = async (lead_request_id) => {
    try {
        const procurment_crop_sample = await purchase_crop_sample_model.findOne({
            where: {
                purchase_crop_lead_id: lead_request_id,
                is_active: 1
            }
        })
        if (procurment_crop_sample) {
            return {
                procurement_sample_id: procurment_crop_sample?.id,
                sample_created_at: procurment_crop_sample?.createdAt,
                sample_status: procurment_crop_sample.status
            }
        }
        return {
            procurement_sample_id: null,
            sample_created_at: null,
            sample_status: purchase_crop_status_enum.pending,
        }
    }
    catch (err) {
        error_log(err);
    }
}

module.exports = { get_sample_detail };


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/get_order_stage_format.js
const error_log = require("../../../../middelware/error_log");
const read_mongo_documents = require("../../../../database/mongoose/read_document");
const purchase_order_metadata_model = require("../../../../database/mongoose/mongoose_models/order_management/purchase_order_metadata");
const { write_string, read_string, key_gen_redis } = require("../../../../database/redis/helper_redis_methods");
const redis_key_entities_enum = require("../../../../database/redis/redis_key_entities");
const redis_key_type_enum = require("../../../../database/redis/redis_key_type");

const get_purchase_order_metadata_service = async () => {
    try {
        const redis_key = await key_gen_redis(redis_key_entities_enum.PURCHASE_ORDER_METADATA, redis_key_type_enum.data);
        let purchase_order_metadata = await read_string(redis_key);
        if (!purchase_order_metadata) {
            purchase_order_metadata = await read_mongo_documents(purchase_order_metadata_model,{},"",0,"stage_id"); 
            let day = 60 * 60 * 24;
            await write_string(redis_key, JSON.stringify(purchase_order_metadata), day);
        }
        else {
            purchase_order_metadata = JSON.parse(purchase_order_metadata);
        }
        return purchase_order_metadata;
    }
    catch (err) {
        error_log(err);
        throw err;
    }
}

module.exports = { get_purchase_order_metadata_service };


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/add_qc_report_service.js
// const purchaseOrderModel = require('../../../../database/mongoose/market_linkage_db/purchaseOrder.model');
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const { POStatus } = require('../../../../enums/market_linkage/enums/po');
const error_log = require('../../../../middelware/error_log');
const { getPoFullInfo } = require('./get_po_details_service');
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const order_delivery_logs_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_logs');
const order_delivery_stage_enums_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_stage_enums');
const purchase_qc_report_model = require('../../../../database/models_v2/crop/purchase_qc_report');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * Adds the qc report for final loading & marks the PO as LOADING_FINISHED.
 * @param {{
 *      poId: number,
 *      qcReport: {
 *          id: number,
 *          name: string,
 *          image: string,
 *          value
 *         }[]
 * }} params
 * @returns {Promise<{status: number, data: any}>}
 */
const add_qc_report_service = async (params) => {
    try {
        const queryObj = {
            where: { id: params.poId, is_active: 1 },
            include: {
                model: order_delivery_detail_model,
                required: true,
                where: { is_active: 1 }
            }
        };
        let [purchaseOrder, deliveryStage] = await Promise.all([
            purchase_crop_orders_model.findOne(queryObj),
            order_delivery_stage_enums_model.findOne({ where: { name: 'loading_finished', is_active: 1 } })
        ]);
        if (!purchaseOrder) { throw new ValidationError(`Unable to mark delivered, no PO found with id: ${params.poId}`); }

        // create order log for delivery stage.
        let orderDeliveryLog = order_delivery_logs_model.build({
            order_detail_id: purchaseOrder.order_delivery_detail.id,
            order_delivery_stage_id: deliveryStage.id,
            log_time: new Date(),
            is_active: 1
        });
        // mark respected PO delivered as well.
        purchaseOrder.status = POStatus.LOADING_FINISHED;
        purchaseOrder.status_remark = 'loading has been finished.';

        const qcReports = params.qcReport.map(qc => ({
            value: qc.value,
            image: qc.image,
            purchase_crop_order_id: purchaseOrder.id,
            crop_variety_qc_param_map_id: qc.id,
            is_active: 1
        }));

        let qcReportsResult = [];

        // eslint-disable-next-line no-unused-vars
        [purchaseOrder, orderDeliveryLog, qcReportsResult] = await Promise.all([
            purchaseOrder.save(),
            orderDeliveryLog.save(),
            purchase_qc_report_model.bulkCreate(qcReports)
        ]);

        return await getPoFullInfo(purchaseOrder.id);
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: 'Something bad happened',
                error: err.message
            }
        };
    }
}

// const add_qc_report_service = async (params) => {
//   try {
//     const { qcReport, poId } = params;

//     const updatedPO = await purchaseOrderModel.findByIdAndUpdate(poId,
//       {
//         qcList: qcReport
//       }, { new: true })

//     if (!updatedPO) {
//       return {
//         status: HTTP_status_codes.badRequest,
//         data: {
//           message: "invalid poId"
//         },
//       }
//     }

//     updatedPO.status = POStatus.LOADING_FINISHED;
//     updatedPO.loadingFinishedAt = new Date();
//     await updatedPO.save();

//     const getPOFullInfo = await get_po_details_service(updatedPO.id);

//     return { status: getPOFullInfo.status, data: getPOFullInfo.data };
//   } catch (err) {
//     error_log(err);
//     return {
//       status: HTTP_status_codes.internalServerError,
//       data: {
//         message: "Something bad happened",
//         error: err.message,
//       },
//     };
//   }
// };

module.exports = {
    add_qc_report_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/buyer_qc_service.js
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const appLogService = require('../../../../common_services/market_linkage/logging/app_log_service');
const { type } = require('../../../../enums/market_linkage/enums/appLogEnum');
const POModel = require('../../../../database/mongoose/market_linkage_db/purchaseOrder.model');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 *
 * @param {{poId: string, qcList: {id:string, name:string, target:string, actual:string}[]}} payload
 * @returns
 */
const service = async (payload) => {
    try {
        let po = await POModel.findById(payload.poId);

        if (!po) throw new ValidationError(`no PO found with id: ${payload.poId}`);

        po.qcByBuyer = {
            qcList: payload.qcList.map((qc) => ({
                id: qc.id,
                name: qc.name,
                target: qc.target,
                actual: qc.actual
            })),
            submittedAt: new Date()
        };

        po = await po.save();

        return {
            status: HTTP_status_codes.ok,
            data: {
                qcByBuyer: po.qcByBuyer,
                status: po.status
            }
        };
    } catch (err) {
        appLogService({ type: type.error, err });
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: 'error while adding buyer side QC.',
                error: err.message
            }
        };
    }
};

module.exports = service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/get_order_history_mongo.js
const purchase_crop_lead_model = require("../../../../database/mongoose/market_linkage_db/lead.model");
const error_log = require("../../../../middelware/error_log");
const { get_order_status_service } = require("./get_order_status_service");
const purchase_order_status_enum = require("../../../../enums/purchase_order/purchase_order_status_enum");
const language_enum = require("../../../../enums/global/language");
const get_merchant_mobile_number = require("../../../../entities_v2/merchant/services/get_merchant_mobile_number");
const read_mongo_document = require("../../../../database/mongoose/read_document");
const fetch_campaign_crop_service = require("../../../../entities_v2/campaign/fetch_campaign_crops_service");
const user_mongo_model = require("../../../../database/mongoose/market_linkage_db/user.model");
const purchase_order_stage_enums = require("../../../../enums/purchase_order/purchase_order_stage_ids");

const get_order_history_service = (
    merchant_detail_id,
    language_id = language_enum.default,
    page_no,
    limit
) => {
    return new Promise(async (resolve, reject) => {
        try {
            const merchant_mobile_number = await get_merchant_mobile_number(merchant_detail_id);
            let offset = (page_no - 1) * limit;
            let order_histories = {
                rows: await read_mongo_document(purchase_crop_lead_model, {
                    "merchant.mobile_number": merchant_mobile_number,
                    is_active: 1
                }, limit, offset, "createdAt", -1),
                count: await purchase_crop_lead_model.countDocuments({
                    "merchant.mobile_number": merchant_mobile_number,
                    is_active: 1
                })
            }

            for (let i = 0; i < order_histories.rows.length; i++) {
                let crop_id = order_histories.rows[i].crop_id;
                let pa_id = order_histories.rows[i].pa_mapped;
                const crop_detail = await fetch_campaign_crop_service(language_id, crop_id);
                const pa_exists = await user_mongo_model.findById(pa_id);
                order_histories.rows[i].crop_detail = {
                    name: crop_detail.name,
                    app_tile_url: crop_detail.crop_img_url,
                }
                if (pa_exists) {
                    order_histories.rows[i].user_profile = {
                        name: pa_exists.name,
                        mobile_number: pa_exists.mobileNumber,
                    }
                }
                else {
                    order_histories.rows[i].user_profile = null
                }
            }
            let order_history = await format_order_history(
                order_histories,
                language_id
            );
            resolve({ count: order_histories.count, rows: order_history });
        } catch (ex) {
            error_log(ex);
            reject({ message: ex.message });
        }
    });
};

const format_order_history = async (order_histories, language_id) => {
    try {
        let order_history = [];
        for (let i = 0; i < order_histories.rows.length; i++) {
            let order_obj = order_histories.rows[i];
            let { order_status } = await get_order_status_service(
                order_obj.id,
                language_id
            );
            let next_stage =
                order_status.order_stages[order_status.order_stages.length - 1];
            for (let index = 0; index < order_status.order_stages.length; index++) {
                let order_stage = order_status.order_stages[index];
                next_stage = order_stage;
                if ([purchase_order_status_enum.cancelled, purchase_order_status_enum.pending].includes(order_stage.status)) {
                    break;
                }
            }
            let order_history_obj = {
                farmart_lead_request_id: order_obj.farmart_id || `FM${order_obj.id}`,
                lead_request_id: order_obj.id,
                lead_request_created_at: order_obj.createdAt,
                crop: {
                    crop_name: order_obj.crop_detail.name,
                    crop_pic_url: order_obj.crop_detail.app_tile_url,
                },
                price_per_quintal: order_obj.price_per_kg * 100,
                weight_in_ton: order_obj.quantity_in_kg / 1000,
                next_stage,
            };
            if (!order_obj.user_profile) {
                order_history_obj.pa = null;
            } else {
                order_history_obj.pa = {
                    name: order_obj.user_profile.name,
                    mobile_number: order_obj.user_profile.mobile_number,
                };
            }
            order_history.push(order_history_obj);
        }
        return order_history;
    } catch (err) {
        error_log(err);
        throw err;
    }
};
module.exports = get_order_history_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/weight_on_arrival_service.js
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const app_log_service = require('../../../../common_services/market_linkage/logging/app_log_service');
const { type } = require('../../../../enums/market_linkage/enums/appLogEnum');
const POModel = require('../../../../database/mongoose/market_linkage_db/purchaseOrder.model');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 *
 * @param {{poId:string, image:string, bridgeWeight:number, poWeight:number}} payload
 * @returns
 */
const weight_on_arrival_service = async (payload) => {
    try {
        let po = await POModel.findById(payload.poId);

        if (!po) throw new ValidationError(`no PO found with id: ${payload.poId}`);

        po.weightOnArrivalInfo = {
            image: payload.image,
            bridgeWeight: payload.bridgeWeight,
            poWeight: payload.poWeight,
            submittedAt: new Date()
        };

        po = await po.save();

        return {
            status: HTTP_status_codes.ok,
            data: {
                weightOnArrivalInfo: po.weightOnArrivalInfo,
                status: po.status
            }
        };
    } catch (err) {
        app_log_service({ type: type.error, err });
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: 'error while adding weight on vehicle arrival.',
                error: err.message
            }
        };
    }
};

module.exports = weight_on_arrival_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/add_sampe_image_service.js
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const { POStatus } = require('../../../../enums/market_linkage/enums/po');
const error_log = require('../../../../middelware/error_log');
const { getPoFullInfo } = require('./get_po_details_service');
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const purchase_sample_images_model = require('../../../../database/models_v2/procurement_sample/purchase_sample_images');
const order_delivery_logs_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_logs');
const order_delivery_stage_enums_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_stage_enums');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * This service is responsible for adding the sample images to the PO.
 * @param {{
 *      poId: number,
 *      sampleImage: string[]
 * }} params
 * @returns {Promise<{status: number, data: any}>}
 */
const add_sample_image_service = async (params) => {
    try {
        const [purchaseOrder, loadingStartedStage] = await Promise.all([
            purchase_crop_orders_model.findOne({
                where: { id: params.poId, is_active: 1 },
                include: {
                    model: order_delivery_detail_model,
                    required: true,
                    where: { is_active: 1 }
                }
            }),
            order_delivery_stage_enums_model.findOne({
                where: { name: 'loading_started', is_active: 1 }
            })
        ]);
        if (!purchaseOrder || !loadingStartedStage) { throw new ValidationError(`No po found with id: ${params.poId}`); }

        purchaseOrder.status = POStatus.LOADING_STARTED;
        purchaseOrder.status_remark = 'loading has been started.';

        const poSampleImage = purchase_sample_images_model.build({
            image: params.sampleImage,
            purchase_crop_order_id: purchaseOrder.id,
            is_active: 1
        });
        const orderDeliveryLog = order_delivery_logs_model.build({
            order_delivery_stage_id: loadingStartedStage.id,
            order_detail_id: purchaseOrder.order_delivery_detail.id,
            log_time: new Date(),
            is_active: 1
        });

        await Promise.all([
            purchaseOrder.save(),
            poSampleImage.save(),
            orderDeliveryLog.save()
        ]);

        const poFullInfo = await getPoFullInfo(purchaseOrder.id);
        return poFullInfo;
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: 'Something bad happened',
                error: err.message
            }
        };
    }
}

// const add_sample_image_service = async (params) => {
//     try {
//         const { sampleImage, poId } = params;

//         const updatedPO = await purchaseOrderModel.findByIdAndUpdate(poId,
//             {
//                 $push: {
//                     samples: sampleImage
//                 }
//             }, { new: true })

//         if (!updatedPO) {
//             return {
//                 status: HTTP_status_codes.badRequest,
//                 data: {
//                     message: "invalid poId"
//                 },
//             }
//         }

//         updatedPO.status = POStatus.LOADING_STARTED;
//         if (!updatedPO.loadingStartedAt) {
//             updatedPO.loadingStartedAt = new Date();
//         }
//         await updatedPO.save();

//         const getPOFullInfo = await get_po_details_service(updatedPO.id);

//         return { status: getPOFullInfo.status, data: getPOFullInfo.data };
//     } catch (err) {
//         error_log(err);
//         return {
//             status: HTTP_status_codes.internalServerError,
//             data: {
//                 message: "Something bad happened",
//                 error: err.message,
//             },
//         };
//     }
// };

module.exports = {
    add_sample_image_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/get_order_details_service.js
const error_log = require('../../../../middelware/error_log');
const get_procurement_lead_details_service = require("./order_details/get_procurement_lead_details_service");
const purchase_order_status_enum = require("../../../../enums/purchase_order/purchase_order_status_enum");
const { get_sample_detail } = require("./order_details/get_procurement_sample_detail_service");
const get_crop_puchase_order_detail_service = require("./order_details/get_crop_purchase_order_details");
const get_dispatch_document = require("./order_details/get_procurement_order_dispatch_document");
const get_procurement_order_payment_service = require("./order_details/get_procurement_order_payments");
const dispatch_document_enum = require("../../../../enums/purchase_order/procurement_dispatch_document_types")

module.exports = async (lead_request_id) => {
    try {
        const lead_details = await get_procurement_lead_details_service(lead_request_id);
        let order_details = {
            lead_request_id: lead_details.lead_request_id,
            lead_created_at: lead_details.lead_created_at,
            lead_status: lead_details.lead_status,
            assigned_pa: lead_details.assigned_pa,
            procurement_sample_id: null,
            sample_created_at: null,
            sample_status: purchase_order_status_enum.pending,
            purchase_crop_order_id: null,
            purchase_crop_order_created_at: null,
            purchase_crop_order_document: null,
            purchase_crop_order_status: purchase_order_status_enum.pending,
            purchase_crop_total_payment: null,
            dispatch_document_url: null,
            dispatch_status: purchase_order_status_enum.pending,
            payments: []
        };
        if (lead_details.lead_status === purchase_order_status_enum.completed) {
            const sample_details = await get_sample_detail(lead_request_id);
            if (sample_details.procurement_sample_id) {
                order_details = { ...order_details, ...sample_details };
                const purchase_crop_order_details = await get_crop_puchase_order_detail_service(order_details.procurement_sample_id);
                if (purchase_crop_order_details.purchase_crop_order_id) {
                    order_details = { ...order_details, ...purchase_crop_order_details };
                    if (order_details.purchase_crop_order_status === purchase_order_status_enum.completed) {
                        const dispatch_document_url = await get_dispatch_document(order_details.purchase_crop_order_id, dispatch_document_enum.dispatch_document_merchant);
                        order_details.dispatch_document_url = dispatch_document_url;
                        order_details.dispatch_status = order_details.dispatch_document_url ? purchase_order_status_enum.completed : purchase_order_status_enum.pending;
                        if (order_details.dispatch_status === purchase_order_status_enum.completed)
                            order_details.payments = await get_procurement_order_payment_service(order_details.purchase_crop_order_id);
                    }

                }
            }
        }
        return order_details;
    }
    catch (err) {
        error_log(err);
        throw err;
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/add_transport_info_service.js
const { pa_activity_log_service } = require('../../../../common_services/market_linkage/logging/pa_activity_log_service');
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const { actionPerformed } = require('../../../../enums/market_linkage/enums/paActivityEnum');
const { POStatus } = require('../../../../enums/market_linkage/enums/po');
const error_log = require('../../../../middelware/error_log');
const { getPoFullInfo } = require('./get_po_details_service');
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
// const order_delivery_documents_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_documents');
const order_delivery_logs_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_logs');
const procurment_crop_sample_model = require('../../../../database/models_v2/procurement_sample/procurment_crop_sample');
const { dispatchBy } = require('../../../../enums/market_linkage/enums/procurement_crop_sample');
const order_delivery_stage_enum = require('../../../../enums/purchase_order/order_delivery_stage_enum');
const add_po_transport_documents = require('../../../../data_abstraction_layer/purchase_order/add_po_transport_documents');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * Adds the transport info for PO & also marks the PO's status as VEHICLE_ARRIVED.
 * @param {{
 *      poId: number,
 *      transportInfo: {
 *          name: string,
 *          vehicleNumber: string,
 *          driverName: string,
 *          driverMobileNumber: string,
 *          images: {
 *              type: number,
 *              name: string,
 *              url: string,
 *          }[]
 *      },
 *      reqLocation: {
 *          lat: string,
 *          long: string,
 *          accuracy: string,
 *      } | undefined,
 * }} params
 * @returns {Promise<{status: number, data: any}>}
 */
const add_transport_info_service = async (params) => {
    try {
        const purchaseOrder = await purchase_crop_orders_model.findOne({
            where: { id: params.poId, is_active: 1 },
            include: {
                model: order_delivery_detail_model,
                required: false,
                where: { is_active: 1 }
            }
        });
        if (!purchaseOrder) { throw new ValidationError(`No PO found with id: ${params.poId}`); }

        const sample_details = await procurment_crop_sample_model.findOne({
            where: {
                is_active: true,
                id: purchaseOrder.purchase_sample_id
            }
        });
        let order_delivery_stage_id;
        if (sample_details.dispatch_by === dispatchBy.RETAILER) {
            purchaseOrder.status = POStatus.LOADING_FINISHED;
            purchaseOrder.status_remark = 'loading has been finished.';
            order_delivery_stage_id = order_delivery_stage_enum.ready_to_dispatch;
        } else {
            purchaseOrder.status = POStatus.VEHICLE_ARRIVED;
            purchaseOrder.status_remark = 'Vehicle has been arrived at loading location.';
            order_delivery_stage_id = order_delivery_stage_enum.vehicle_arrived;
        }

        let orderDeliveryDetail = purchaseOrder.order_delivery_detail;
        // check if order_delivery_detail already exists or not, if not create a new one.
        if (!orderDeliveryDetail) {
            orderDeliveryDetail = order_delivery_detail_model.build({
                purchase_crop_order_id: purchaseOrder.id,
                is_active: 1
            });
        }

        orderDeliveryDetail.transport_name = params.transportInfo.name;
        orderDeliveryDetail.vehicle_number = params.transportInfo.vehicleNumber;
        orderDeliveryDetail.driver_name = params.transportInfo.driverName;
        orderDeliveryDetail.driver_mobile_number = params.transportInfo.driverMobileNumber;
        orderDeliveryDetail = await orderDeliveryDetail.save();

        await Promise.all([
            purchaseOrder.save(),
            add_po_transport_documents(orderDeliveryDetail.id, params.transportInfo.images),
            order_delivery_logs_model.create({
                order_delivery_stage_id,
                order_detail_id: orderDeliveryDetail.id,
                log_time: new Date(),
                is_active: 1
            })
        ]);

        const poFullInfo = await getPoFullInfo(purchaseOrder.id);

        if (poFullInfo.status === HTTP_status_codes.ok && params.reqLocation) {
            // pa activity logging
            pa_activity_log_service({
                paId: poFullInfo.data.paInfo.id,
                actionLocation: params.reqLocation,
                actionTimestamp: new Date(Date.now()),
                actionPerformed: actionPerformed.TransporterOnboarding,
                retailerId: poFullInfo.data.retailerInfo.id,
                sampleId: poFullInfo.data.sampleInfo.id,
                poId: poFullInfo.data._id
            }).catch((err) => {
                error_log(err);
            })
        }
        return poFullInfo;
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: 'Something bad happened',
                error: err.message
            }
        };
    }
}

// const add_transport_info_service = async (params) => {
//     try {
//         const { transportInfo, poId, reqLocation } = params;

//         const po = await purchaseOrderModel.findById(poId);

//         if (!po) {
//             return {
//                 status: HTTP_status_codes.badRequest,
//                 data: {
//                     message: "invalid poId"
//                 },
//             }
//         }

//         if (!po.driverVerified) {
//             return {
//                 status: HTTP_status_codes.badRequest,
//                 data: {
//                     message: "driver number not verified"
//                 }
//             }
//         }

//         (transportInfo.images).forEach(image => {
//             image.name = Object.keys(TransportImageType).find(key => TransportImageType[key] === image.type);
//         });

//         const updatedPO = await purchaseOrderModel.findByIdAndUpdate(poId, { transportInfo }, { new: true })

//         updatedPO.status = POStatus.VEHICLE_ARRIVED;
//         updatedPO.vehicleArrivedAt = new Date();
//         await updatedPO.save();

//         const getPOFullInfo = await get_po_details_service(updatedPO.id);

//         if (getPOFullInfo.status === HTTP_status_codes.ok && reqLocation) {
//             // pa activity logging
//             pa_activity_log_service({
//                 paId: getPOFullInfo.data.paInfo.id,
//                 actionLocation: reqLocation,
//                 actionTimestamp: getPOFullInfo.data.vehicleArrivedAt,
//                 actionPerformed: actionPerformed.TransporterOnboarding,
//                 retailerId: getPOFullInfo.data.retailerInfo.id,
//                 sampleId: getPOFullInfo.data.sampleInfo.id,
//                 poId: getPOFullInfo.data._id
//             }).catch((err) => {
//                 error_log(err);
//             })
//         }

//         return { status: getPOFullInfo.status, data: getPOFullInfo.data };
//     } catch (err) {
//         error_log(err);
//         return {
//             status: HTTP_status_codes.internalServerError,
//             data: {
//                 message: "Something bad happened",
//                 error: err.message,
//             },
//         };
//     }
// };

module.exports = {
    add_transport_info_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/update_purchase_order_service.js
const masterSampleModel = require("../../../../database/mongoose/market_linkage_db/masterSample.model");
const purchaseOrderModel = require("../../../../database/mongoose/market_linkage_db/purchaseOrder.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");
const { update_payment_service } = require("../../payment/services/update_payment_service");
const round_off_to_two_decimal = require("../../utilities/round_off/round_off_to_two_decimal");
const { get_po_details_service } = require("./get_po_details_service");

const update_purchase_order_service = async (params) => {
    try {
        const { dataToUpdate, po_id } = params;

        const updateData = {};

        dataToUpdate.forEach(function (data) {
            updateData[data.property] = data.data;
        });

        const updatedPO = await purchaseOrderModel.findByIdAndUpdate(po_id, updateData, { new: true })

        if (!updatedPO) {
            return {
                status: HTTP_status_codes.badRequest,
                data: {
                    message: "invalid po_id"
                },
            }
        }

        const sampleData = await masterSampleModel.findById(updatedPO.sampleId);

        if (!sampleData) {
            return {
                status: HTTP_status_codes.badRequest,
                data: {
                    message: "invalid sampleId of po"
                },
            }
        }

        const updatedPayment = await update_payment_service(
            updatedPO._id,
            {
                totalAmountTransport: updatedPO.dispatchInfo?.totalTransportCost,
                deductionAmountRetailer: updatedPO.poPaymentInfo?.retailerDeduction,
                deductionAmountTransport: updatedPO.transportPaymentInfo?.transportDeduction,
                totalAmountRetailer: round_off_to_two_decimal(updatedPO.amountPerQuintal * (updatedPO.dispatchInfo?.netWeight / 100))
                    + round_off_to_two_decimal(sampleData.mandiTax * (updatedPO.dispatchInfo?.netWeight / 100))
                    + round_off_to_two_decimal(sampleData.miscellaneousDeduction * (updatedPO.dispatchInfo?.netWeight / 100)),
                "partOne.retailer.payableAmount": updatedPO.poPaymentInfo?.partOnePayment,
                "partOne.transport.payableAmount": updatedPO.dispatchInfo?.advanceTransportCost,
                "partTwo.retailer.payableAmount": updatedPO.poPaymentInfo?.remainingPayment,
                "partTwo.transport.payableAmount": updatedPO.transportPaymentInfo?.pendingPayment,
            })

        if (updatedPayment.status !== HTTP_status_codes.ok) {
            return updatedPayment
        }
        const getPOFullInfo = await get_po_details_service(updatedPO.id);
        return { status: getPOFullInfo.status, data: getPOFullInfo.data };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

module.exports = {
    update_purchase_order_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/vehicle_arrived_service.js
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const app_log_service = require('../../../../common_services/market_linkage/logging/app_log_service');
const { type } = require('../../../../enums/market_linkage/enums/appLogEnum');
const { POStatus } = require('../../../../enums/market_linkage/enums/po');
const POModel = require('../../../../database/mongoose/market_linkage_db/purchaseOrder.model');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 *
 * @param {{poId:string,images:string[]}} payload
 */
const vehicle_arrived_service = async (payload) => {
    try {
        let po = await POModel.findById(payload.poId);

        if (!po) throw new ValidationError(`no PO found with id: ${payload.poId}`);

        po.vehicleArrivalInfo = {
            images: payload.images,
            submittedAt: new Date()
        };
        po.status = POStatus.ARRIVED_AT_BUYER;
        po.statusRemark = 'vehicle arrived at buyer side.';

        po = await po.save();

        return {
            status: HTTP_status_codes.ok,
            data: {
                vehicleArrivalInfo: po.vehicleArrivalInfo,
                status: po.status,
                statusRemark: po.statusRemark,
                vehicleArrivedAt: po.vehicleArrivedAt
            }
        };
    } catch (err) {
        app_log_service({ type: type.error, err });
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: 'error while adding vehicle arrival data.',
                error: err.message
            }
        };
    }
};

module.exports = vehicle_arrived_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/verify_driver_service.js
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const error_log = require('../../../../middelware/error_log');
const auth_service = require('../../../../entities/auth/service/auth_service');
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * @param {{
 *      poId: number,
 *      mobileNumber: string,
 *      otp: number
 * }} params
 * @returns {Promise<{status: number, data: any}>}
 */
const verifyDriverService = async (params) => {
    try {
        const purchaseOrder = await purchase_crop_orders_model.findOne({
            where: { id: params.poId, is_active: 1 }
        });

        if (!purchaseOrder) { throw new ValidationError(`Unable to verify driver dettails, no PO associated with id: ${params.poId}`); }

        const isValidOtp = await auth_service.validate_otp(params.mobileNumber, params.otp, params.countryCode);

        if (!isValidOtp) { throw new ValidationError('Invalid OTP.'); }

        purchaseOrder.driver_verified = true;
        await purchaseOrder.save();

        return {
            status: HTTP_status_codes.ok,
            data: true
        };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: 'Something bad happened',
                error: err.message
            }
        };
    }
}

// const verify_driver_service = async (params) => {
//     try {
//         const { poId, mobileNumber, otp } = params;

//         const getPO = await purchaseOrderModel.findById(poId);

//         if (!getPO) {
//             return {
//                 status: HTTP_status_codes.badRequest,
//                 data: {
//                     message: "Invalid po id"
//                 }
//             }
//         }
//         const valid = await auth_service.validate_otp(mobileNumber, otp);
//         if (valid) {
//             getPO.driverVerified = true;
//             getPO.driverVerifiedAt = new Date();
//             await getPO.save();
//             return {
//                 status: HTTP_status_codes.ok,
//                 data: true,
//             };
//         }

//         return {
//             status: HTTP_status_codes.badRequest,
//             data: { message: "Invalid Otp" },
//         };

//     } catch (err) {
//         error_log(err);
//         return {
//             status: HTTP_status_codes.internalServerError,
//             data: {
//                 message: "Something bad happened",
//                 error: err.message,
//             },
//         };
//     }
// };

module.exports = verifyDriverService



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/map_sales_order_service.js
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const { orderStatus } = require('../../../../enums/market_linkage/enums/buyerEnum');
const error_log = require('../../../../middelware/error_log');
const { getPoFullInfo } = require('./get_po_details_service');
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const buyer_order_detail_model = require('../../../../database/models_v2/buyer_order/buyer_order_detail');
const crop_detail_model = require('../../../../database/models_v2/crop/crop_detail');
const crop_varieties_detail_model = require('../../../../database/models_v2/crop/crop_varieties_detail');
const master_merchant_detail_model = require('../../../../database/models_v2/merchant/master_merchant_detail');
const buyer_order_quality_check_model = require('../../../../database/models_v2/buyer_order/buyer_order_quality_check');
const po_so_invoice_model = require('../../../../database/models_v2/po_so_invoicing/po_so_invoice');
// const mandi_taxation_model = require('../../../../database/models_v2/mandi_taxation/mandi_taxation');
const add_mandi_tax_service = require('../../mandi_taxation/services/add_mandi_tax_service');
const { get_po_quantity_for_mapping } = require('../../../v2/sales_order/services/fetch_so_for_mapping_service');
const { update_so_remaining_qty } = require('../../../../common_services/market_linkage/update_so_remaining_qty');
const { Op } = require('sequelize');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * This service will map the given PO and SO.
 * @param {{
 *      poId: number,
 *      soId: number
 * }} mapingOption
 * @returns {Promise<{status: number, data: any}>}
 */
const map_sales_order_service = async (mapingOption) => {
    try {
        const purchaseOrderQuery = {
            where: { id: mapingOption.poId, is_active: 1, buyer_order_id: { [Op.is]: null } },
            include: [
                { model: master_merchant_detail_model, required: true, where: { is_active: 1 } },
                { model: crop_detail_model, required: true, where: { is_active: 1 } },
                { model: crop_varieties_detail_model, required: true, where: { is_active: 1 } }
            ]
        };
        const salesOrderQuery = {
            where: { id: mapingOption.soId, is_active: 1 },
            include: {
                model: buyer_order_quality_check_model,
                as: 'quality_checks',
                required: true,
                where: { is_active: 1 }
            }
        };

        const [purchaseOrder, salesOrder] = await Promise.all([
            purchase_crop_orders_model.findOne(purchaseOrderQuery),
            buyer_order_detail_model.findOne(salesOrderQuery)
        ]);

        if (!purchaseOrder) { throw new ValidationError(`Unable to map, no PO found with the given id: ${mapingOption.poId}`); }
        if (!salesOrder) { throw new ValidationError(`Unable to map, no SO found with the given id: ${mapingOption.soId}`); }
        // check if sales order is approved or not before maping it.
        // if not approved reject the request.
        if (salesOrder.status !== orderStatus.APPROVED_BY_CFO) { throw new ValidationError('Unable to map, given SO is not approved yet.'); }
        // check if PO quantity is exceeding the required SO quantity.
        // if yes then reject the request.
        const po_qty = await get_po_quantity_for_mapping(purchaseOrder.quantity);
        if (po_qty > salesOrder.remaining_quantity) { throw new ValidationError(`PO quantity is exceeding the remaining quantity of SO (${purchaseOrder.quantity} > ${salesOrder.remaining_quantity}).`); }

        // create a link between PO & SO
        purchaseOrder.buyer_order_id = salesOrder.id;
        salesOrder.remaining_quantity = salesOrder.remaining_quantity - purchaseOrder.quantity;
        await salesOrder.save();
        await purchaseOrder.save();

        const poFullInfo = await getPoFullInfo(purchaseOrder.id);
        await add_po_so_invoicing(mapingOption.poId, mapingOption.soId);
        await add_mandi_tax_service(mapingOption.poId, null, null, mapingOption.soId);
        await update_so_remaining_qty(mapingOption.soId)
        return {
            status: HTTP_status_codes.ok,
            data: poFullInfo
        };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: 'Something bad happened',
                error: err.message
            }
        };
    }
}

const add_po_so_invoicing = async (po_id, so_id) => {
    try {
        const po_so_invoice_map_exist = await po_so_invoice_model.findOne({
            where: {
                is_active: true,
                buyer_order_detail_id: so_id,
                purchase_crop_order_id: po_id
            }
        });
        if (po_so_invoice_map_exist) {
            return false;
        } else {
            // check for map count
            const po_so_invoice_map_count = await po_so_invoice_model.count({
                where: {
                    is_active: true,
                    buyer_order_detail_id: so_id
                }
            });
            await po_so_invoice_model.findOrCreate({
                where: {
                    buyer_order_detail_id: so_id,
                    purchase_crop_order_id: po_id,
                    is_active: true
                },
                defaults: {
                    status: 0,
                    po_so_map_no: po_so_invoice_map_count + 1
                }
            });
            return true;
        }
    } catch (ex) {
        error_log(ex);
        return false;
    }
}

// const map_sales_order_service = async (params) => {
//     try {
//         const [po, so] = await Promise.all([
//             purchaseOrderModel.findOne({
//                 _id: params.poId,
//                 salesOrderId: undefined
//             }),
//             buyer_order_detail.findByPk(params.soId),
//         ]);
//         if (!po) {
//             return {
//                 status: HTTP_status_codes.badRequest,
//                 data: {
//                     message: `PO not found with id: ${params.poId} and status as PO_CREATED.`,
//                 },
//             };
//         }
//         if (!so) {
//             return {
//                 status: HTTP_status_codes.badRequest,
//                 data: {
//                     message: `SO not found with id: ${params.soId}`,
//                 },
//             };
//         }

//         // SO must be approved
//         if (so.status !== orderStatus.APPROVED_BY_CFO) {
//             return {
//                 status: HTTP_status_codes.badRequest,
//                 data: {
//                     message: "SO not approved",
//                 },
//             };
//         }

//         // PO quantity must be less than or equal to SO quantity.
//         if (po.quantityInTon <= so.remaining_quantity) {
//             // map PO with So
//             po.soId = so.id;
//             po.buyerName = so.buyer_name;
//             so.remaining_quantity = so.remaining_quantity - po.quantityInTon;

//             const updatedPOSO = await Promise.all([po.save(), so.save()]);

//             const updatedPayment = await update_payment_service(
//                 updatedPOSO[0]._id,
//                 { soId: updatedPOSO[1]._id }
//             );

//             if (updatedPayment.status !== HTTP_status_codes.ok) {
//                 return updatedPayment
//             }

//             const getPOFullInfo = await get_po_details_service(updatedPOSO[0].id);
//             return { status: getPOFullInfo.status, data: getPOFullInfo.data };
//         }
//         return {
//             status: HTTP_status_codes.badRequest,
//             data: {
//                 message: "PO quantity can't be greater than sales order quantity.",
//             },
//         };
//     } catch (err) {
//         error_log(err);
//         return {
//             status: HTTP_status_codes.internalServerError,
//             data: {
//                 message: "Something bad happened",
//                 error: err.message,
//             },
//         };
//     }
// };

module.exports = {
    map_sales_order_service,
    add_po_so_invoicing
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/get_all_in_transit_po_service.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");
const master_merchant_detail_model = require("../../../../database/models_v2/merchant/master_merchant_detail");
//const user_profile_model = require("../../../../database/models/user_profile");
const crop_detail_model = require("../../../../database/models_v2/crop/crop_detail");
const crop_varieties_detail_model = require("../../../../database/models_v2/crop/crop_varieties_detail");
const buyer_order_detail_model = require("../../../../database/models_v2/buyer_order/buyer_order_detail");
const buyer_order_quality_check_model = require("../../../../database/models_v2/buyer_order/buyer_order_quality_check");
const purchase_crop_orders_model = require("../../../../database/models_v2/procurement_order/purchase_crop_orders");
const qc_param_types_model = require("../../../../database/models_v2/procurement_order/qc_param_types");
const po_pending_inhand_detail_model = require("../../../../database/models_v2/po_unloading/po_pending_inhand_detail");
const Op = require('sequelize').Op;

const get_all_in_transit_po_service = async (user_profile_id) => {
    try {
        const buyer_order_list = await buyer_order_detail_model.findAll({
            where: {
                is_active: true,
                placed_by: user_profile_id
            },
            include: {
                model: buyer_order_quality_check_model,
                as: "quality_checks",
                where: {
                    is_active: true
                },
                include: {
                    model: qc_param_types_model,
                    required: false,
                    where: {
                        is_active: true
                    }
                },
                required: true
            }
        });
        const so_ids = buyer_order_list.map((so) => so.id);

        const [purchase_order_list, rejected_po_list] = await Promise.all([
            purchase_crop_orders_model.findAll({
                where: {
                    is_active: true,
                    buyer_order_id: { [Op.in]: so_ids }
                }
            }),
            po_pending_inhand_detail_model.findAll({
                where: {
                    is_active: true,
                    buyer_order_detail_id: { [Op.in]: so_ids }
                }
            })
        ])
        const rejected_po_ids = rejected_po_list.map((po) => po.purchase_crop_order_id);
        const po_ids = purchase_order_list.map((po) => po.id);

        const purchaseOrders = await purchase_crop_orders_model.findAll({
            where: {
                is_active: true,
                id: { [Op.in]: rejected_po_ids.concat(po_ids) }
            },
            include: [
                {
                    model: master_merchant_detail_model,
                    required: true,
                    where: {
                        is_active: true
                    },
                },
                {
                    model: crop_detail_model,
                    required: true,
                    where: {
                        is_active: true
                    }
                },
                {
                    model: crop_varieties_detail_model,
                    required: true,
                    where: {
                        is_active: true
                    }
                }
            ],
            order: [
                ['updatedAt', 'DESC'],
            ]
        });

        const transformedResponse = transformResponse(purchaseOrders, buyer_order_list, rejected_po_list);

        return {
            status: HTTP_status_codes.ok,
            data: transformedResponse
        };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
}

const transformResponse = (purchaseOrders, buyer_order_list, rejected_po_list) => {
    let result = [];
    for (let index = 0; index < purchaseOrders.length; index++) {
        let po = purchaseOrders[index];
        const retailerInfo = po.master_merchant_detail;
        const cropInfo = po.crop_detail;
        const cropVarietyInfo = po.crop_varieties_detail;
        const buyerOrderInfo = buyer_order_list.find((so) => so.id === po.buyer_order_id);
        const rejected_po = rejected_po_list.filter((po_inhand) => po_inhand.purchase_crop_order_id === po.id);
        let po_details = {
            _id: po.id,
            poPendingInhandId: null,
            farmartId: po.farmart_id,
            createdAt: po.createdAt,
            updatedAt: po.updatedAt,
            status: po.status,
            poPendingInhandStatus: null,
            statusRemark: po.status_remark,
            quantityInTon: po.quantity,
            cropName: cropInfo.name,
            cropVarietyName: cropVarietyInfo.name,
            retailerInfo: {
                id: retailerInfo.id,
                name: retailerInfo.name,
                mobileNumber: retailerInfo.mobile_number,
                state: retailerInfo.state_name,
                district: retailerInfo.district_name
            },
            zohoPoId: po.zoho_po_id,
            buyerName: buyerOrderInfo?.buyer_name ?? null,
            soId: buyerOrderInfo?.id ?? null,
            salesOrderId: buyerOrderInfo?.farmart_id ?? null,
            buyerRequiredQc: buyerOrderInfo?.quality_checks?.map(qc => {
                const qcType = qc.qc_param_type;
                return {
                    id: qc.id,
                    name: qcType ? qcType.name : "Unknown",
                    requiredValue: qc.required_value
                };
            }) ?? null
        }
        if (rejected_po.length) {
            result = result.concat(rejected_po.map((po_inhand) => {
                const buyer_order_info = buyer_order_list.find((so) => so.id === po_inhand.buyer_order_detail_id);
                return {
                    ...po_details,
                    poPendingInhandId: po_inhand.id,
                    poPendingInhandStatus: po_inhand.status,
                    statusRemark: '',
                    quantityInTon: po_inhand.weight_kg,
                    buyerName: buyer_order_info.buyer_name,
                    soId: buyer_order_info.id,
                    salesOrderId: buyer_order_info.farmart_id,
                    buyerRequiredQc: buyer_order_info.quality_checks.map(qc => {
                        const qcType = qc.qc_param_type;
                        return {
                            id: qc.id,
                            name: qcType ? qcType.name : "Unknown",
                            requiredValue: qc.required_value
                        };
                    })
                }
            }))
        }
        result.push(po_details);
    }
    return result;
}

module.exports = get_all_in_transit_po_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/update_purchase_order_status_service.js
const error_log = require('../../../../middelware/error_log');
const master_sample_model = require('../../../../database/mongoose/market_linkage_db/masterSample.model');
const purchase_crop_orders_model = require('../../../../database/mongoose/market_linkage_db/purchaseOrder.model');
const purchase_order_status_enum = require('../../../../enums/purchase_order/purchase_order_status_enum');
const purchase_order_document_status_enum = require('../../../../enums/purchase_order/purchase_order_document_status')
// const purchase_order_mongo_status_enum = require('../../../../enums/market_linkage/enums/po').POStatus;
const { ValidationError } = require('../../../../utilities/error/custom_error');

const get_order_history_service = (merchant_detail_id, lead_request_id, status) => {
    return new Promise(async (resolve, reject) => {
        try {
            const procurement_crop_sample = await master_sample_model.findOne({
                leadId: lead_request_id,
                isActive: true
            }).select({ poId: true });

            if (!procurement_crop_sample || !procurement_crop_sample?.poId) {
                throw new ValidationError('puchase order not generated')
            }
            const purchase_crop_orders = await purchase_crop_orders_model.findById(procurement_crop_sample?.poId);
            if (!purchase_crop_orders || !purchase_crop_orders?.purchase_order_doc_link) {
                throw new ValidationError('puchase order document not generated')
            }
            if (purchase_crop_orders.purchase_order_accepted !== purchase_order_status_enum.pending) {
                throw new ValidationError('already responded')
            }
            if (status === purchase_order_document_status_enum.accepted) {
                purchase_crop_orders.purchase_order_accepted = purchase_order_status_enum.completed;
            } else if (status === purchase_order_document_status_enum.rejected) {
                purchase_crop_orders.purchase_order_accepted = purchase_order_status_enum.cancelled;
            }
            await purchase_crop_orders.save();
            return resolve({ message: 'updated status' });
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    });
};

module.exports = get_order_history_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/get_recent_order_service.js
const error_log = require("../../../../middelware/error_log");
const purchase_crop_leads_model = require("../../../../database/mongoose/market_linkage_db/lead.model");
const { get_order_status_service } = require("./get_order_status_service");
const read_mongoose_document = require("../../../../database/mongoose/read_document");
const get_merchant_mobile_number_service = require("../../../../entities_v2/merchant/services/get_merchant_mobile_number");

const get_recent_order_service = (merchant_detail_id, language_id) => {
  return new Promise(async (resolve, reject) => {
    try {
      const merchant_mobile_number = await get_merchant_mobile_number_service(merchant_detail_id);
      const purchase_crop_lead = await read_mongoose_document(purchase_crop_leads_model, {
        "merchant.mobile_number": merchant_mobile_number,
        is_active: 1
      }, 1, 0, "createdAt", -1);
      let recent_order = null;
      if (purchase_crop_lead.length > 0) {
        const purchase_crop_lead_id = purchase_crop_lead[0].id;
        const farmart_id = purchase_crop_lead[0].farmart_id;
        const stages = await get_order_status_service(
          purchase_crop_lead_id,
          language_id
        );
        recent_order = {
          farmart_lead_request_id: farmart_id || `FM${purchase_crop_lead_id}`,
          lead_request_id: purchase_crop_lead_id,
          stages: stages,
        };
      }
      return resolve({ recent_order });
    } catch (ex) {
      error_log(ex);
      return reject({ message: ex.message });
    }
  });
};

module.exports = get_recent_order_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/deduction_report_service.js
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const appLogService = require('../../../../common_services/market_linkage/logging/app_log_service');
const { type } = require('../../../../enums/market_linkage/enums/appLogEnum');
const POModel = require('../../../../database/mongoose/market_linkage_db/purchaseOrder.model');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 *
 * @param {{poId:string, image:string, comment: string}} payload
 */
const service = async (payload) => {
    try {
        let po = await POModel.findById(payload.poId);

        if (!po) throw new ValidationError(`no PO found with id: ${payload.poId}`);

        po.deductionReport = {
            image: payload.image,
            comment: payload.comment,
            submittedAt: new Date()
        };

        po = await po.save();

        return {
            status: HTTP_status_codes.ok,
            data: {
                deductionReport: po.deductionReport,
                status: po.status
            }
        };
    } catch (err) {
        appLogService({ type: type.error, err });
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: 'error while adding deduction report.',
                error: err.message
            }
        };
    }
};

module.exports = service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/mongo_order_details/get_procurement_lead_details_service.js
const error_log = require("../../../../../middelware/error_log");
const purchase_crop_lead_model = require("../../../../../database/mongoose/market_linkage_db/lead.model");
const purchase_crop_status_enum = require("../../../../../enums/purchase_order/purchase_order_status_enum");
const user_profile_model = require("../../../../../database/mongoose/market_linkage_db/user.model");
const master_sample_model = require('../../../../../database/mongoose/market_linkage_db/masterSample.model');
const purchase_crop_order_model = require("../../../../../database/mongoose/market_linkage_db/purchaseOrder.model")
const procurement_payment_model = require("../../../../../database/mongoose/market_linkage_db/payment.model");
const purchase_crop_sample_status_enum = require("../../../../../enums/market_linkage/enums/masterSampleEnum").sampleStatus;
const purchase_order_status_enum = require("../../../../../enums/market_linkage/enums/po").POStatus;
const mongoose = require("mongoose");

const get_lead_details = async (lead_request_id) => {
    try {
        let purchase_crop_lead = await purchase_crop_lead_model.findOne({
            _id: lead_request_id,
            is_active: 1
        }).select({ "createdAt": 1, "status": 1, "_id": 1, "pa_mapped": 1, "farmart_id": 1 });
        purchase_crop_lead = purchase_crop_lead.toObject();
        const pa_mapped = await user_profile_model.findById(purchase_crop_lead.pa_mapped)
        if (purchase_crop_lead) {
            return {
                farmart_lead_request_id: purchase_crop_lead.farmart_id || `FM${lead_request_id}`,
                lead_request_id: purchase_crop_lead?._id,
                lead_created_at: purchase_crop_lead?.createdAt,
                lead_status: +purchase_crop_lead?.status,
                assigned_pa: {
                    name: pa_mapped?.name,
                    mobile_number: pa_mapped?.mobileNumber,
                    pa_id: purchase_crop_lead?.pa_mapped
                }
            }
        }
        return {
            farmart_lead_request_id: `FM${lead_request_id}`,
            lead_request_id,
            lead_created_at: null,
            lead_status: purchase_crop_status_enum.pending,
            pa_assigned: null
        }
    }
    catch (err) {
        error_log(err);
        throw err;
    }
}

const get_sample_detail = async (lead_request_id) => {
    try {
        const procurment_crop_sample = await master_sample_model.findOne({
            leadId: mongoose.Types.ObjectId(lead_request_id),
            isActive: 1
        })
        if (procurment_crop_sample) {
            let sample_status = purchase_crop_status_enum.completed;
            if ([purchase_crop_sample_status_enum.REJECTED_BY_RPM, purchase_crop_sample_status_enum.REJECTED_BY_SALES, purchase_crop_sample_status_enum.REJECTED_PRICE_CENTRAL, purchase_crop_sample_status_enum.REJECTED_QUALITY_CENTRAL].indexOf(procurment_crop_sample.status) != -1) {
                sample_status = purchase_crop_status_enum.cancelled;
            }
            return {
                procurement_sample_id: procurment_crop_sample?._id,
                sample_created_at: procurment_crop_sample?.createdAt,
                sample_status: sample_status,
                purchase_crop_order_id: procurment_crop_sample.poId || null
            }
        }
        return {
            procurement_sample_id: null,
            sample_created_at: null,
            sample_status: purchase_crop_status_enum.pending,
            purchase_crop_order_id: null
        }
    }
    catch (err) {
        error_log(err);
        return {
            procurement_sample_id: null,
            sample_created_at: null,
            sample_status: purchase_crop_status_enum.pending,
            purchase_crop_order_id: null
        }
    }
}

const get_crop_puchase_order_detail_service = async (purchase_crop_order_id) => {
    try {
        const purchase_order = await purchase_crop_order_model.findOne({
            _id: purchase_crop_order_id,
        }).select({ "_id": true, "purchase_order_doc_link": true, "purchase_order_accepted": true, "status": true, "dispatch_document_link": true });
        if (purchase_order) {
            let status = purchase_crop_status_enum.pending;
            if (purchase_order.status === purchase_order_status_enum.CANCELLED || purchase_order.purchase_order_accepted === purchase_crop_status_enum.cancelled) {
                status = purchase_crop_status_enum.cancelled;
            }
            else if (purchase_order.purchase_order_accepted === purchase_crop_status_enum.completed) {
                status = purchase_crop_status_enum.completed;
            }
            return {
                purchase_crop_order_id: purchase_order._id,
                purchase_crop_order_created_at: purchase_order.createdAt,
                purchase_crop_order_document: purchase_order.purchase_order_doc_link || null,
                purchase_crop_order_status: status,
                dispatch_document_url: purchase_order?.dispatch_document_link || null
            }
        }
        else {
            return {
                purchase_crop_order_id: null,
                purchase_crop_order_created_at: null,
                purchase_crop_order_document: null,
                purchase_crop_order_status: purchase_crop_status_enum.pending,
                dispatch_document_url: null
            }
        }
    }
    catch (err) {
        error_log(err);
        return {
            purchase_crop_order_id: null,
            purchase_crop_order_created_at: null,
            purchase_crop_order_document: null,
            purchase_crop_order_status: purchase_order_status_enum.pending,
        }
    }
}

const get_procurement_order_payment_service = async (purchase_crop_order_id) => {
    try {
        const payment = await procurement_payment_model.findOne({
            poId: purchase_crop_order_id
        }).select({ "_id": true, "deductionAmountRetailer": true, "totalAmountRetailer": true, "partOne": true, "partTwo": true, "createdAt": true });

        if (payment) {
            let payments = []
            if (payment?.partOne?.retailer?.payableAmount) {
                payments.push({
                    payment_id: null,
                    utr_number: null,
                    installment_number: 1,
                    amount: payment?.partOne?.retailer?.payableAmount || 0,
                    created_at: payment.createdAt,
                    total_deductions: 0
                });
            }
            if (payment?.partTwo?.retailer?.payableAmount) {
                payments.push({
                    payment_id: null,
                    utr_number: null,
                    installment_number: 1,
                    amount: payment?.partTwo?.retailer?.payableAmount || 0,
                    created_at: payment.createdAt,
                    total_deductions: payment?.deductionAmountRetailer || 0
                })
            }
            return {
                total_payment: payment?.totalAmountRetailer || 0,
                payments
            }
        }
        return {
            total_payment: payment?.totalAmountRetailer || 0,
            payments: []
        }
    }
    catch (err) {
        error_log(err);
        throw err;
    }
}


module.exports = { get_lead_details, get_sample_detail, get_crop_puchase_order_detail_service, get_procurement_order_payment_service };


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/create_purchase_order_service.js
const { generate_unique_id } = require("../../../../common_services/unique_id_generation/generate_unique_id");
const purchaseOrderModel = require("../../../../database/mongoose/market_linkage_db/purchaseOrder.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { categories } = require("../../../../enums/market_linkage/enums/categories");
const error_log = require("../../../../middelware/error_log");
const { create_payment_service } = require("../../payment/services/create_payment_service");
const { add_purchase_document } = require("../../campaign/services/purchase_order_document_create_service");

const create_purchase_order_service = async (newPOData) => {
    try {
        const uniqueIdResult = await generate_unique_id({
            state: newPOData.retailerStateName,
            district: newPOData.retailerDistrictName,
            category: categories.PurchaseOrder
        });
        if (uniqueIdResult.status === HTTP_status_codes.internalServerError) {
            return uniqueIdResult;
        }

        const addedPO = await purchaseOrderModel.create({
            sampleId: newPOData._id,
            farmartId: uniqueIdResult.data,
            zohoPoId: newPOData.zohoPoId,
            cropInfo: {
                cropId: newPOData.cropId,
                cropName: newPOData.cropName,
                cropVarietyName: newPOData.cropVarietyName,
                cropVariety: newPOData.cropVariety,
            },
            paInfo: {
                id: newPOData.createdBy.id,
                name: newPOData.createdBy.name,
                mobileNumber: newPOData.createdBy.mobileNumber,
            },
            retailerInfo: {
                id: newPOData.retailerId,
                name: newPOData.retailerName,
                mobileNumber: newPOData.retailerMobileNumber,
                state: newPOData.retailerStateName,
                district: newPOData.retailerDistrictName,
            },
            quantityInTon: newPOData.procurableTon,
            amountPerQuintal: newPOData.retailerLockedPrice
        })
        add_purchase_document(addedPO._id)
            .catch(err => {
                error_log(err);
            });
        const addedPayment = await create_payment_service({
            poNumber: addedPO.farmartId,
            poId: addedPO._id,
            retailerId: addedPO.retailerInfo.id,
        });

        if (addedPayment.status !== HTTP_status_codes.ok) {
            return addedPayment
        }

        return { status: HTTP_status_codes.ok, data: addedPO };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

module.exports = {
    create_purchase_order_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/update_doc_status_service.js
const Op = require('sequelize').Op;
const procurement_dispatch_document = require('../../../../database/models_v2/procurement_order/procurement_dispatch_document');
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const order_delivery_detail = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const order_delivery_documents = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_documents');
const order_delivery_document_type_enums = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_document_type_enums');
const revision_before_payments = require('../../../../database/models_v2/procurement_payments/revision_before_payment');
const fetch_ml_notification_string = require('../../../../entities_v2/notification/services/fetch_ml_notification_string');
const language = require('../../../../enums/global/language');
const ml_notification_event_enum = require('../../../../enums/notification/ml_notification_event_enum');
const { payment_for } = require('../../../../enums/purchase_order/procurement_payment_enum');
const { doc_status, doc_type } = require('../../../../enums/purchase_order/purchase_order_document_enum');
const user_role = require('../../../../enums/user_profile/user_role');
const error_log = require('../../../../middelware/error_log');
const { send_notification_for_ml } = require('../../../../notifier/firebase_admin_ml');
const add_mandi_tax_service = require('../../mandi_taxation/services/add_mandi_tax_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const update_doc_status_service = (po_id, id = null, status = null, doc_url = null, designation) => {
    return new Promise(async (resolve, reject) => {
        try {
            let [docs, purchase_order] = await Promise.all([
                order_delivery_documents.findAll({
                    where: {
                        is_active: 1
                    },
                    include: [
                        {
                            model: order_delivery_detail,
                            required: true,
                            where: {
                                purchase_crop_order_id: po_id,
                                is_active: 1
                            }
                        },
                        {
                            model: procurement_dispatch_document,
                            required: false,
                            where: {
                                is_active: 1
                            }
                        },
                        {
                            model: order_delivery_document_type_enums,
                            required: false,
                            where: {
                                is_active: 1
                            }
                        }
                    ]
                }),
                purchase_crop_orders_model.findOne({
                    where: {
                        is_active: true,
                        id: po_id
                    }
                })
            ])
            if (!purchase_order) {
                throw new ValidationError('invalid po id');
            }
            let doc = docs.find(element => element.id === id);
            if (!doc) {
                throw new ValidationError('invalid doc id');
            }
            doc.is_active = 0;

            if (doc.name === doc_type.primary9rImage) {
                await add_mandi_tax_service(po_id, doc_url, null, purchase_order.buyer_order_id ?? null)
            } else if (doc.name === doc_type.first9rGatePass) {
                await add_mandi_tax_service(po_id, null, doc_url, purchase_order.buyer_order_id ?? null)
            }

            const doc_data = {
                name: doc.name,
                status: doc.status,
                doc_url: doc.doc_url,
                doc_back_url: doc.doc_back_url,
                is_active: 1,
                order_delivery_id: doc.order_delivery_id,
                order_delivery_document_type_id: doc.order_delivery_document_type_id,
                order_transport_doc_type_id: doc.order_transport_doc_type_id
            }
            if (status >= 0 && status !== doc_data.status) {
                if (status === doc_status.REJECTED_BY_STATE_HEAD) {
                    await revision_before_payments.update(
                        {
                            approved_by_rpm: 0,
                            approved_by_state_head: 0
                        },
                        {
                            where: {
                                order_delivery_id: doc.order_delivery_id,
                                is_active: 1,
                                payment_for: { [Op.in]: [payment_for.ORDER_DELIVERY, payment_for.PO] }
                            }
                        }
                    )
                }
                doc_data.status = status;
                const push_notification_variables = {
                    po_farmart_id: purchase_order.farmart_id,
                    document_name: 'PO'
                }
                if (status === doc_status.REJECTED_BY_RPM && designation === user_role.REGIONAL_PROCUREMENT_MANAGER) {
                    // push notification for doc rejected by rpm
                    const notification = await fetch_ml_notification_string(ml_notification_event_enum.po_document_rejected_by_rpm, language.english, push_notification_variables);
                    if (notification) {
                        send_notification_for_ml([purchase_order.user_profile_id], notification.title, notification.message, notification.image)
                            .catch(err => {
                                error_log(err);
                            });
                    }
                } else if (status === doc_status.REJECTED_BY_STATE_HEAD && designation === user_role.STATE_HEAD_PROCUREMENT) {
                    // push notification for doc rejected by state head
                    const notification = await fetch_ml_notification_string(ml_notification_event_enum.po_document_rejected_by_state_head, language.english, push_notification_variables);
                    if (notification) {
                        send_notification_for_ml([purchase_order.user_profile_id], notification.title, notification.message, notification.image)
                            .catch(err => {
                                error_log(err);
                            });
                    }
                }
            }
            if (doc_url && doc_url.trim() !== (doc_data.doc_url).trim()) {
                if (designation === user_role.PROCUREMENT_ASSOCIATE && status === undefined) {
                    doc_data.status = doc_status.PENDING;
                }
                if (designation === user_role.REGIONAL_PROCUREMENT_MANAGER && status === undefined) {
                    doc_data.status = doc_status.APPROVED_BY_RPM;
                }
                if (designation === user_role.STATE_HEAD_PROCUREMENT && status === undefined) {
                    doc_data.status = doc_status.APPROVED_BY_STATE_HEAD;
                }
                doc_data.doc_url = doc_url
            }
            doc = await doc.save();
            const new_doc = await order_delivery_documents.build(doc_data).save();
            docs = docs.filter(o => o.id !== doc.id);
            docs.push(new_doc);

            const approved_docs = docs.filter((doc) => doc.status === 1 || doc.status === 4).length;
            const rejected_docs = docs.filter((doc) => doc.status === 0 || doc.status === 3).length;
            const pending_docs = docs.filter((doc) => doc.status === 2).length;

            const response_data = {
                id: new_doc.id,
                name: doc.procurement_dispatch_document
                    ? doc.procurement_dispatch_document.name
                    : doc.order_delivery_document_type_enum
                        ? doc.order_delivery_document_type_enum.name
                        : new_doc.name || null,
                doc_url: new_doc.doc_url,
                status: new_doc.status,
                approved_docs,
                rejected_docs,
                pending_docs
            }
            resolve(response_data)
        } catch (ex) {
            error_log(ex);
            reject({ message: ex.message });
        }
    })
}

module.exports = {
    update_doc_status_service
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/get_mapped_po_service.js
const buyerOrderModel = require("../../../../database/mongoose/market_linkage_db/buyerOrder.model");
const purchaseOrderModel = require("../../../../database/mongoose/market_linkage_db/purchaseOrder.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");

const get_mapped_po_service = async (params) => {
    try {
        const SOList = await buyerOrderModel.find({ "placedBy.id": params.saId }).sort({ "updatedAt": -1 });
        if (Array.isArray(SOList) && SOList.length > 0) {
            const query = {};
            if (params.status) {
                query.status = params.status;
            }
            const POList = await purchaseOrderModel.find({
                salesOrderId: {
                    $in: SOList.map((so) => so._id),
                },
                ...query,
            });
            const basicPoInfoList = POList.map((po) => {
                let buyerRequiredQc = [];
                const so = SOList.find((so) => so.id === po.salesOrderId.toString());
                if (so) buyerRequiredQc = so.qualityChecks;
                return {
                    _id: po._id,
                    farmartId: po.farmartId,
                    createdAt: po.createdAt,
                    updatedAt: po.updatedAt,
                    status: po.status,
                    statusRemark: po.statusRemark,
                    buyerName: po.buyerName,
                    salesOrderId: po.salesOrderId || po.soId,
                    quantityInTon: po.quantityInTon,
                    cropName: po.cropInfo.cropName,
                    cropVarietyName: po.cropInfo.cropVarietyName,
                    retailerInfo: po.retailerInfo,
                    zohoPoId: po.zohoPoId || null,
                    buyerRequiredQc,
                };
            });
            return {
                status: HTTP_status_codes.ok,
                data: basicPoInfoList,
            };
        }
        // if no sales order found just return empty purchase order.
        return {
            status: HTTP_status_codes.ok,
            data: [],
        };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};


module.exports = {
    get_mapped_po_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/get_po_full_info_service.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const purchaseOrderModel = require("../../../../database/mongoose/market_linkage_db/purchaseOrder.model");
const masterSampleModel = require("../../../../database/mongoose/market_linkage_db/masterSample.model");
const cropVarietyModel = require("../../../../database/mongoose/market_linkage_db/cropVariety.model");
const appLogService = require("../../../../common_services/market_linkage/logging/app_log_service");
const paymentInfoModel = require("../../../../database/mongoose/market_linkage_db/payment.model")
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const buyer_order_detail = require("../../../../database/models_v2/buyer_order/buyer_order_detail");
const buyer_order_delivery_info = require("../../../../database/models_v2/buyer_order/buyer_order_delivery_info");
const round_off_to_two_decimal = require("../../utilities/round_off/round_off_to_two_decimal");

const getRetailerPaymentInfo = (po, sample) => {
  const infos = [];
  if (!po.dispatchInfo)
    return infos;
  // add commodity payment info
  infos.push({
    name: 'Commodity',
    qtlPrice: po.amountPerQuintal,
    toBePaid: round_off_to_two_decimal(po.amountPerQuintal * (po.dispatchInfo.netWeight / 100))
      
  });
  // check if mandi tax already paid or not
  // if not paid then add mandi tax amount also
  if (!sample.isMandiTaxPaid) {
    infos.push({
      name: 'Mandi Tax',
      qtlPrice: sample.mandiTax,
      toBePaid: round_off_to_two_decimal(sample.mandiTax * (po.dispatchInfo.netWeight / 100))
        
    });
  }
  // add miscellaneous payment info
  infos.push({
    name: 'Miscellaneous (Commission, Bag, etc.)',
    qtlPrice: sample.miscellaneousDeduction,
    toBePaid: round_off_to_two_decimal(sample.miscellaneousDeduction * (po.dispatchInfo.netWeight / 100))
      
  });
  return infos;
}

/**
 * @param {string} poId
 * @returns {Promise<{status:number, data:any}>}
 */

/**
 * @deprecated duplicate method please use ``get_po_details_service`` instead of this.
 * @param {number | string} poId 
 * @returns 
 */
const getPOFullInfoService = async (poId) => {
  try {
    const po = await purchaseOrderModel.findById(poId);
    if (!po) {
      return {
        status: HTTP_status_codes.badRequest,
        data: {
          message: "invalid poId"
        },
      }
    }

    const [sample, cropVariety, salesOrder, paymentInfo] = await Promise.all([
      masterSampleModel.findById(po.sampleId),
      cropVarietyModel.findById(po.cropInfo.cropVariety),
      buyer_order_detail.findByPk(po.soId, {
        include: [
          {
            model: buyer_order_delivery_info,
            as: "delivery_info"
          }
        ]
      }),
      paymentInfoModel.findOne({ poId: poId })
    ]);



    const poFullInfo = {
      ...po._doc,
      sampleInfo: {
        id: sample._id,
        farmartId: sample.farmartId,
        createdAt: sample.createdAt,
        retailerOfferPrice: sample.purchasePrice,
        availableLot: sample.totalAvailableQuantity,
        transportCost: sample.transportCostEst,
        images: sample.sampleImages,
      },
      sampleLength: sample.sampleImages.length,
      qcList: po.qcList.length ? po.qcList : (sample.qcReport).map((qc) => {
        return {
          id: qc.qcReportId,
          name: qc.name,
          value: qc.value,
          image: qc.image
        }
      }),
      dispatchInfo: po.dispatchInfo || {
        handoverDocs: (cropVariety.documentAtDispatch).filter((doc) => {
          return doc.isActive
        }).map((doc) => {
          return {
            id: doc._id,
            name: doc.name
          }
        })
      },
      deliveryInfo: {
        address: salesOrder?.delivery_info?.address,
        state: salesOrder?.delivery_info?.state_name,
        district: salesOrder?.delivery_info?.district_name,
        pincode: salesOrder?.delivery_info?.pincode,
        buyerName: salesOrder?.buyer_name,
      },
      zohoPoId: po.zohoPoId || null,
      paymentInfoStatus: generatePaymentObj(paymentInfo),
      retailerPaymentInfo: getRetailerPaymentInfo(po, sample)
    }

    return {
      status: HTTP_status_codes.ok,
      data: poFullInfo
    };
  } catch (err) {
    appLogService({ type: type.error, err });
    return {
      status: HTTP_status_codes.internalServerError,
      data: {
        message: "Error while loading po list.",
        error: err.message,
      },
    };
  }
};

function generatePaymentObj(pay) {
  let paymentInfoStatus = {
    partOneOfRetailer: false,
    partTwoOfRetailer: false,
    partOneOfTransport: false,
    partTwoOfTransport: false,
    retailer: {
      partOne: {
        amount: 0,
        utr: null,
        date: null
      },
      partTwo: {
        amount: 0,
        utr: null,
        date: null
      }
    },
    transport: {
      partOne: {
        amount: 0,
        utr: null,
        date: null
      },
      partTwo: {
        amount: 0,
        utr: null,
        date: null
      }
    }
  }
  try {
    paymentInfoStatus.partOneOfRetailer = (pay != null) ? (pay.partOne) ? (pay.partOne.retailer) ? (pay.partOne.retailer.utr) ? true : false : false : false : false;
    paymentInfoStatus.partTwoOfRetailer = (pay != null) ? (pay.partTwo) ? (pay.partTwo.retailer) ? (pay.partTwo.retailer.utr) ? true : false : false : false : false;
    paymentInfoStatus.partOneOfTransport = (pay != null) ? (pay.partOne) ? (pay.partOne.transport) ? (pay.partOne.transport.utr) ? true : false : false : false : false;
    paymentInfoStatus.partTwoOfTransport = (pay != null) ? (pay.partTwo) ? (pay.partTwo.transport) ? (pay.partTwo.transport.utr) ? true : false : false : false : false;
    if (paymentInfoStatus.partOneOfRetailer) {
      paymentInfoStatus.retailer.partOne.amount = pay.partOne.retailer.payableAmount;
      paymentInfoStatus.retailer.partOne.date = pay.partOne.retailer.paidAt;
      paymentInfoStatus.retailer.partOne.utr = pay.partOne.retailer.utr;
    }
    if (paymentInfoStatus.partOneOfTransport) {
      paymentInfoStatus.transport.partOne.amount = pay.partOne.transport.payableAmount;
      paymentInfoStatus.transport.partOne.date = pay.partOne.transport.paidAt;
      paymentInfoStatus.transport.partOne.utr = pay.partOne.transport.utr;
    }
    if (paymentInfoStatus.partTwoOfRetailer) {
      paymentInfoStatus.retailer.partTwo.amount = pay.partTwo.retailer.payableAmount;
      paymentInfoStatus.retailer.partTwo.date = pay.partTwo.retailer.paidAt;
      paymentInfoStatus.retailer.partTwo.utr = pay.partTwo.retailer.utr;
    }
    if (paymentInfoStatus.partTwoOfTransport) {
      paymentInfoStatus.transport.partTwo.amount = pay.partTwo.transport.payableAmount;
      paymentInfoStatus.transport.partTwo.date = pay.partTwo.transport.paidAt;
      paymentInfoStatus.transport.partTwo.utr = pay.partTwo.transport.utr;
    }

  }
  catch (ex) {
    // console.log(ex);
    appLogService({ type: type.error, ex });
  }
  return paymentInfoStatus;
}

module.exports = getPOFullInfoService;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/get_order_detail_mongo.js
const error_log = require('../../../../middelware/error_log');
const {
    get_lead_details,
    get_sample_detail,
    get_crop_puchase_order_detail_service,
    get_procurement_order_payment_service
} = require("./mongo_order_details/get_procurement_lead_details_service");
const purchase_order_status_enum = require("../../../../enums/purchase_order/purchase_order_status_enum");

module.exports = async (lead_request_id) => {
    try {
        const lead_details = await get_lead_details(lead_request_id);
        let order_details = {
            lead_request_id: lead_details.lead_request_id,
            lead_created_at: lead_details.lead_created_at,
            lead_status: lead_details.lead_status,
            assigned_pa: lead_details.assigned_pa,
            procurement_sample_id: null,
            sample_created_at: null,
            sample_status: purchase_order_status_enum.pending,
            purchase_crop_order_id: null,
            purchase_crop_order_created_at: null,
            purchase_crop_order_document: null,
            purchase_crop_order_status: purchase_order_status_enum.pending,
            purchase_crop_total_payment: null,
            dispatch_document_url: null,
            dispatch_status: purchase_order_status_enum.pending,
            payments: [],
            farmart_lead_request_id: lead_details.farmart_lead_request_id,
        };
        if (lead_details.lead_status === purchase_order_status_enum.completed) {
            const sample_details = await get_sample_detail(lead_request_id);
            order_details = { ...order_details, ...sample_details };
            if (order_details.sample_status === purchase_order_status_enum.completed) {
                const purchase_crop_order_details = await get_crop_puchase_order_detail_service(order_details.purchase_crop_order_id);
                order_details = { ...order_details, ...purchase_crop_order_details };
                if (order_details.purchase_crop_order_status === purchase_order_status_enum.completed) {
                    order_details.dispatch_status = order_details.dispatch_document_url ? purchase_order_status_enum.completed : purchase_order_status_enum.pending;
                    if (order_details.dispatch_status === purchase_order_status_enum.completed) {
                        const payment_details = await get_procurement_order_payment_service(order_details.purchase_crop_order_id);
                        order_details.payments = payment_details.payments;
                        order_details.purchase_crop_total_payment = payment_details.total_payment;
                    }
                }
                else {
                    order_details.dispatch_document_url = "";
                }
            }
        }
        return order_details;
    }
    catch (err) {
        error_log(err);
        throw err;
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/add_dispatch_info_service.js
// const { Op } = require('sequelize');
const { pa_activity_log_service } = require('../../../../common_services/market_linkage/logging/pa_activity_log_service');
// const masterSampleModel = require("../../../../database/mongoose/market_linkage_db/masterSample.model");
// const purchaseOrderModel = require("../../../../database/mongoose/market_linkage_db/purchaseOrder.model");
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const { actionPerformed } = require('../../../../enums/market_linkage/enums/paActivityEnum');
const { POStatus } = require('../../../../enums/market_linkage/enums/po');
const error_log = require('../../../../middelware/error_log');
const { getPoFullInfo } = require('./get_po_details_service');
// const create_dispatch_document_service = require("../../campaign/services/dispatch_document_create_service").add_dispatch_document;
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const procurement_lots_model = require('../../../../database/models_v2/procurement_sample/procurement_lots');
const procurement_dispatch_document_model = require('../../../../database/models_v2/procurement_order/procurement_dispatch_document');
// const order_delivery_detail_model = require("../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail");
const order_delivery_documents_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_documents');
const order_delivery_logs_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_logs');
const order_delivery_stage_enum_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_stage_enums');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const create_payment_revision = require('../_services/update_po_payment_info/create_by_pa');
const { doc_type } = require('../../../../enums/purchase_order/purchase_order_document_enum');
const procurment_crop_sample_model = require('../../../../database/models_v2/procurement_sample/procurment_crop_sample');
const round_off_to_two_decimal = require('../../utilities/round_off/round_off_to_two_decimal');
const add_mandi_tax_service = require('../../mandi_taxation/services/add_mandi_tax_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * This service will add the dispatch info for the given PO &
 * will update the status as READY_TO_DISPATCH.
 * @param {{
 *      poId: number,
 *      reqLocation: {
 *          lat: string,
 *          long: string,
 *          accuracy: string,
 *      } | undefined,
 *      dispatchInfo: {
 *          grossWeight: number,
 *          netWeight: number,
 *          loadedTruckWeightSlip: string,
 *          numberOfBags: number,
 *          totalTransportCost: number,
 *          advanceTransportCost: number,
 *          transportBillImage: string,
 *          handoverDocs: {
 *              id: number,
 *              name: string,
 *              image: string,
 *          }[],
 *      }
 * }} params
 * @returns {Promise<{status: number, data: any}>}
 */
const add_dispatch_info_service = async (params) => {
    try {
        const [purchaseOrder, readyToDispatchStage] = await Promise.all([
            purchase_crop_orders_model.findOne({
                where: { id: params.poId, is_active: 1 },
                include: [
                    {
                        model: order_delivery_detail_model,
                        required: false,
                        where: { is_active: 1 }
                    },
                    {
                        model: procurment_crop_sample_model,
                        required: true,
                        where: { is_active: 1 }
                    },
                    {
                        model: procurement_lots_model,
                        required: true,
                        where: { is_active: 1 }
                    }
                ]
            }),
            order_delivery_stage_enum_model.findOne({ where: { name: 'ready_to_dispatch', is_active: 1 } })
        ]);
        if (!purchaseOrder || !readyToDispatchStage) { throw new ValidationError(`No po found with id: ${params.poId}`); }

        purchaseOrder.status = POStatus.READY_TO_DISPATCH;
        purchaseOrder.status_remark = 'PO has been ready for dispatch.';
        // create order delivery detail
        let orderDispatchInfo = purchaseOrder.order_delivery_detail;
        if (!orderDispatchInfo) {
            orderDispatchInfo = order_delivery_detail_model.build({
                purchase_crop_order_id: purchaseOrder.id,
                is_active: 1
            });
        }
        const bagDeductionValue = round_off_to_two_decimal(params.dispatchInfo.grossWeight * (purchaseOrder.procurement_lot.bag_deduction / 100))
        orderDispatchInfo.gross_weight = params.dispatchInfo.grossWeight;
        orderDispatchInfo.net_weight = round_off_to_two_decimal(params.dispatchInfo.grossWeight - bagDeductionValue)
        orderDispatchInfo.number_of_bags = params.dispatchInfo.numberOfBags;
        orderDispatchInfo.advance_transport_cost = params.dispatchInfo.advanceTransportCost;
        orderDispatchInfo.total_transport_cost = params.dispatchInfo.totalTransportCost;
        // query the docs enum based on the given handover doc names.
        let procurementDispatchDocsEnums = [];
        [orderDispatchInfo, procurementDispatchDocsEnums] = await Promise.all([
            orderDispatchInfo.save(),
            procurement_dispatch_document_model.findAll({
                where: {
                    id: params.dispatchInfo.handoverDocs.map(hd => hd.id),
                    is_active: 1
                }
            })
        ]);

        let dispatchDocs = params.dispatchInfo.handoverDocs.map(hd => {
            const docEnum = procurementDispatchDocsEnums.find(docEnum => docEnum.name === hd.name);
            return {
                doc_url: hd.image,
                order_delivery_id: orderDispatchInfo.id,
                order_delivery_document_type_id: docEnum.id,
                is_active: 1
            };
        });

        dispatchDocs = dispatchDocs.concat(Object.entries(doc_type).filter((doc) => params.dispatchInfo[doc[0]]).map((doc) => {
            return {
                name: doc[1],
                doc_url: params.dispatchInfo[doc[0]],
                order_delivery_id: orderDispatchInfo.id,
                is_active: 1
            }
        }));

        // save PO activity log and dispatch documents.
        await Promise.all([
            order_delivery_logs_model.create({
                order_delivery_stage_id: readyToDispatchStage.id,
                order_detail_id: orderDispatchInfo.id,
                log_time: new Date(),
                is_active: 1
            }),
            order_delivery_documents_model.bulkCreate(dispatchDocs)
        ]);

        const poFullInfo = await getPoFullInfo(purchaseOrder.id);

        await add_mandi_tax_service(purchaseOrder.id, poFullInfo.data?.dispatchInfo?.primary9rImage, poFullInfo.data?.dispatchInfo?.first9rGatePass, purchaseOrder.buyer_order_id ?? null);

        const commodity_value = poFullInfo.data?.retailerPaymentInfo?.find(payment_info => payment_info.name === 'Commodity Value')?.toBePaid || 0;
        const mandi_tax_value = poFullInfo.data?.retailerPaymentInfo?.find(payment_info => payment_info.name === 'Mandi Tax to Retailer')?.toBePaid || 0;
        const commission_value = poFullInfo.data?.retailerPaymentInfo?.find(payment_info => payment_info.name === 'Commission Amount')?.toBePaid || 0;
        const labour_and_bag_value = poFullInfo.data?.retailerPaymentInfo?.find(payment_info => payment_info.name === 'Labour + Gunny Bag Cost')?.toBePaid || 0;
        purchaseOrder.total_payment = commodity_value + mandi_tax_value + commission_value + labour_and_bag_value;
        await purchaseOrder.save();

        // track PA activity if everything is ok.
        if (poFullInfo.status === HTTP_status_codes.ok && params.reqLocation) {
            // pa activity logging
            pa_activity_log_service({
                paId: poFullInfo.data.paInfo.id,
                actionLocation: params.reqLocation,
                actionTimestamp: new Date(Date.now()),
                actionPerformed: actionPerformed.DispatchDocsSubmission,
                retailerId: poFullInfo.data.retailerInfo.id,
                sampleId: poFullInfo.data.sampleInfo.id,
                poId: poFullInfo.data._id
            }).catch((err) => {
                error_log(err);
            })
        }

        const transportPerc = (params.dispatchInfo.advanceTransportCost * 100) / params.dispatchInfo.totalTransportCost;
        await create_payment_revision(
            purchaseOrder.id,
            orderDispatchInfo.id,
            {
                transport: {
                    amount: params.dispatchInfo.advanceTransportCost,
                    percentage: parseInt(transportPerc)
                }
            }
        );

        return poFullInfo;
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: 'Something bad happened',
                error: err.message
            }
        };
    }
}

// const add_dispatch_info_service = async (params) => {
//     try {
//         const { dispatchInfo, poId, reqLocation } = params;

//         const updatedPO = await purchaseOrderModel.findByIdAndUpdate(poId, { dispatchInfo }, { new: true })

//         if (!updatedPO) {
//             return {
//                 status: HTTP_status_codes.badRequest,
//                 data: {
//                     message: "invalid poId"
//                 },
//             }
//         }

//         const sampleData = await masterSampleModel.findById(updatedPO.sampleId);

//         const bagDeductionValue = (((updatedPO.dispatchInfo.grossWeight) / 100) * (sampleData.bagDeduction)).toFixed(2);

//         updatedPO.dispatchInfo.netWeight = updatedPO.dispatchInfo.grossWeight - bagDeductionValue;
//         updatedPO.status = POStatus.READY_TO_DISPATCH;

//         updatedPO.readyToDispatchAt = new Date();
//         await updatedPO.save();
//         create_dispatch_document_service(poId);
//         const getPOFullInfo = await get_po_details_service(updatedPO.id);

//         if (getPOFullInfo.status === HTTP_status_codes.ok && reqLocation) {
//             // pa activity logging
//             pa_activity_log_service({
//                 paId: getPOFullInfo.data.paInfo.id,
//                 actionLocation: reqLocation,
//                 actionTimestamp: getPOFullInfo.data.readyToDispatchAt,
//                 actionPerformed: actionPerformed.DispatchDocsSubmission,
//                 retailerId: getPOFullInfo.data.retailerInfo.id,
//                 sampleId: getPOFullInfo.data.sampleInfo.id,
//                 poId: getPOFullInfo.data._id
//             }).catch((err) => {
//                 error_log(err);
//             })
//         }

//         return { status: getPOFullInfo.status, data: getPOFullInfo.data };
//     } catch (err) {
//         error_log(err);
//         return {
//             status: HTTP_status_codes.internalServerError,
//             data: {
//                 message: "Something bad happened",
//                 error: err.message,
//             },
//         };
//     }
// };

module.exports = {
    add_dispatch_info_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/purchase_order/services/po_dispatched_service.js
const purchaseOrderModel = require("../../../../database/mongoose/market_linkage_db/purchaseOrder.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const { POStatus } = require("../../../../enums/market_linkage/enums/po");
const appLogService = require("../../../../common_services/market_linkage/logging/app_log_service");
const { actionPerformed } = require("../../../../enums/market_linkage/enums/paActivityEnum");
const getPOFullInfoService = require("./get_po_full_info_service");
const { pa_activity_log_service } = require("../../../../common_services/market_linkage/logging/pa_activity_log_service");
const error_log = require("../../../../middelware/error_log");

module.exports = async (params) => {
  try {
    const { poId, truckImage, pagGeolocation } = params;

    const updatedPO = await purchaseOrderModel.findByIdAndUpdate(poId, { truckImage }, { new: true })

    if (!updatedPO) {
      return {
        status: HTTP_status_codes.badRequest,
        data: {
          message: "invalid poId"
        },
      }
    }
    updatedPO.status = POStatus.DISPATCHED;
    await updatedPO.save();

    const getPOFullInfo = await getPOFullInfoService(updatedPO.id);

    if (getPOFullInfo.status === HTTP_status_codes.ok && pagGeolocation) {
      // pa activity logging
      pa_activity_log_service({
        paId: getPOFullInfo.data.paInfo.id,
        actionLocation: pagGeolocation,
        actionTimestamp: new Date(Date.now()),
        actionPerformed: actionPerformed.PoDispatch,
        retailerId: getPOFullInfo.data.retailerInfo.id,
        sampleId: getPOFullInfo.data.sampleInfo.id,
        poId: getPOFullInfo.data._id
      }).catch((err) => {
        error_log(err);
      })
    }

    return { status: getPOFullInfo.status, data: getPOFullInfo.data };
  } catch (err) {
    appLogService({ type: type.error, err });
    return {
      status: HTTP_status_codes.internalServerError,
      data: {
        message: "Something bad happened",
        error: err.message,
      },
    };
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_unloading/swagger/index.js
module.exports = {
    tags: {
        name: "po_unloading",
    },
    paths: {
        "/": {
            get: {
                tags: ["po_unloading"],
                summary: "get po unloading details",
                description: "",
                operationId: "get_unloading_details",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "query",
                        name: "po_id",
                        description: "",
                        required: true,
                        type: "number"
                    },
                    {
                        in: "query",
                        name: "so_id",
                        description: "",
                        required: true,
                        type: "number"
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                },
                deprecated: true
            }
        },
        "/vehicle_arrival": {
            post: {
                tags: ["po_unloading"],
                summary: "submit arrived vehical info",
                description: "",
                operationId: "vehical_arrived",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "body",
                        name: "body",
                        description: "",
                        required: true,
                        schema: {
                            required: ["arrived_at"],
                            properties: {
                                po_id: {
                                    type: "number"
                                },
                                po_pending_inhand_id: {
                                    type: "number"
                                },
                                arrived_at: {
                                    type: "string"
                                },
                                images: {
                                    type: "array",
                                    items: {
                                        type: "string"
                                    }
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        },
        "/details": {
            post: {
                tags: ["po_unloading"],
                summary: "submit unloading details",
                description: "",
                operationId: "submit_unloading_details",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "body",
                        name: "body",
                        description: "",
                        required: true,
                        schema: {
                            required: [
                                "so_id",
                                "quantity_info",
                                "quality_info",
                                "unloading_doc_info"
                            ],
                            properties: {
                                po_id: {
                                    type: "number"
                                },
                                po_pending_inhand_id: {
                                    type: "number"
                                },
                                so_id: {
                                    type: "number"
                                },
                                quantity_info: {
                                    type: "array",
                                    items: {
                                        type: "object",
                                    }
                                },
                                quality_info: {
                                    type: "array",
                                    items: {
                                        type: "object",
                                    }
                                },
                                destination_info: {
                                    type: "object",
                                },
                                unloading_doc_info: {
                                    type: "object",
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        }, 
        "/deduction_info": {
            post: {
                tags: ["po_unloading"],
                summary: "submit deduction info",
                description: "",
                operationId: "submit_deduction_info",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "body",
                        name: "body",
                        description: "",
                        required: true,
                        schema: {
                            required: [
                                "so_id",
                                "deduction_amount",
                                "deduction_remarks"
                            ],
                            properties: {
                                po_id: {
                                    type: "number"
                                },
                                po_pending_inhand_id: {
                                    type: "number"
                                },
                                so_id: {
                                    type: "number"
                                },
                                deduction_amount: {
                                    type: "number"
                                },
                                deduction_remarks: {
                                    type: "string"
                                },
                                deduction_report_url: {
                                    type: "string"
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        },
        "/rejected_qty": {
            post: {
                tags: ["po_unloading"],
                summary: "submit po rejected quantity",
                description: "",
                operationId: "submit_rejected_quantity",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "body",
                        name: "body",
                        description: "",
                        required: true,
                        schema: {
                            required: [
                                "rejected_quantity",
                                "rejected_bags",
                                "so_id",
                                "po_id",
                                "send_to"
                            ],
                            properties: {
                                rejected_quantity: {
                                    type: "number"
                                },
                                rejected_bags: {
                                    type: "number"
                                },
                                so_id: {
                                    type: "number"
                                },
                                po_id: {
                                    type: "number"
                                },
                                warehouse_id: {
                                    type: "number"
                                },
                                send_to: {
                                    type: "number"
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        },
        "/po_pending_inhand": {
            get: {
                tags: ["po_unloading"],
                summary: "fetch po pending inhand details",
                description: "",
                operationId: "fetch_po_pending_in_hand",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "query",
                        name: "limit",
                        description: "",
                        required: false,
                        type: "number"
                    },
                    {
                        in: "query",
                        name: "page",
                        description: "",
                        required: false,
                        type: "number"
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        },
        "/po_so_mapped_unloading_list": {
            get: {
                tags: ["po_unloading"],
                summary: "get po unloading list",
                description: "",
                operationId: "get_unloading_list",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "query",
                        name: "po_id",
                        description: "",
                        required: false,
                        type: "number"
                    },
                    {
                        in: "query",
                        name: "po_no",
                        description: "",
                        required: false,
                        type: "string"
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        },
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_unloading/unloading_documentation.md
# purchase order unloading documentation

#### coming sooooon........


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_unloading/enums/get_types.js
const po_unloading_qty_types_model = require("../../../../database/models_v2/po_unloading/po_unloading_qty_types");
const po_unloading_doc_types_model = require("../../../../database/models_v2/po_unloading/po_unloading_doc_types");

const local_cache = {
    /**
     * @type {{id: number, name: string}[] | null}
     */
    qty_types: null,
    /**
     * @type {{id: number, name: string}[] | null}
     */
    doc_types: null
};

/**
 * Fetches data from DB only one time and then cache it.
 * @return {Promise<{id: number, name: string}[]>}
 */
const get_unloading_qty_types = async () => {
    if (local_cache.qty_types === null) {
        const qty_types = await po_unloading_qty_types_model.findAll({
            where: { is_active: 1 }
        });
        local_cache.qty_types = [];
        for (let qty_type of qty_types) {
            local_cache.qty_types.push({ id: qty_type.id, name: qty_type.name });
        }
    }
    return local_cache.qty_types;
}

/**
 * Fetches data from DB only one time and then cache it.
 * @return {Promise<{id: number, name: string}[]>}
 */
const get_unloading_doc_types = async () => {
    if (local_cache.doc_types === null) {
        const doc_types = await po_unloading_doc_types_model.findAll({
            where: { is_active: 1 }
        });
        local_cache.doc_types = [];
        for (let doc_type of doc_types) {
            local_cache.doc_types.push({ id: doc_type.id, name: doc_type.name });
        }
    }
    return local_cache.doc_types;
}

module.exports = {
    get_unloading_qty_types,
    get_unloading_doc_types
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_unloading/enums/index.js
const DeliveryStage = {
    VEHICLE_ARRIVED_AT_BUYER: 9,
    DELIVERED: 6,
    PARTIAL_DELIVERED: 10,
    CANCELLED: 8,
    DEDUCTION_SUBMITTED: 11
};

const DeliveryDocument = {
    DOC_TYPE_VEHICLE_ARRIVED_AT_BUYER: 18,
    BUYER_DEDUCTION_REPORT: 19
}

const PoRetransportTo = {
    WAREHOUSE: 0,
    REMAPING: 1
}

const PoInhandStatus = {
    PENDING: 0
}

module.exports = {
    DeliveryStage,
    DeliveryDocument,
    PoRetransportTo,
    PoInhandStatus
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_unloading/index.js
const router = require("express").Router();
const fetch_unloading_details_controller = require("../../v2/po_unloading/controllers/fetch_unloading_details_controller");
const deduction_info_controller = require("./controllers/deduction_info_controller");
const fetch_po_pending_in_hand_controller = require("./controllers/fetch_po_pending_in_hand_controller");
const { get_po_so_mapped_unloading_details_controller } = require("./controllers/get_po_so_mapped_unloading_controller");
//const get_unloading_details_controller = require("./controllers/get_unloading_details_controller");
const submit_rejected_quantity_controller = require("./controllers/submit_rejected_quantity_controller");
const unloading_details_controller = require("./controllers/unloading_details_controller");
const vehicle_arrival_controller = require("./controllers/vehicle_arrival_controller");

// requires query parameter "po_id" and "so_id" of type number.
router.get("/", fetch_unloading_details_controller); /** @deprecated */ // v2 controller used here
//router.get("/", get_unloading_details_controller); 
router.post("/vehicle_arrival", vehicle_arrival_controller);
router.post('/details', unloading_details_controller);
router.post('/deduction_info', deduction_info_controller);
router.post('/rejected_qty', submit_rejected_quantity_controller);
router.get('/po_pending_inhand', fetch_po_pending_in_hand_controller);
router.get('/po_so_mapped_unloading_list', get_po_so_mapped_unloading_details_controller)

module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_unloading/utils/validator.js
/**
 * @param {string} url 
 * @return {boolean}
 */
const isValidUrl = (url) => {
    const regExp = new RegExp(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/g);
    const res = url.match(regExp);
    return (res !== null)
}

/**
 * @param {string | number | Date} dateStr
 * @return {boolean}
 */
const isValidDate = (dateStr) => {
    const date = new Date(dateStr);
    return !Number.isNaN(date.getDate());
}

module.exports = {
    isValidUrl,
    isValidDate
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_unloading/controllers/get_po_so_mapped_unloading_controller.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes")
const error_log = require("../../../../middelware/error_log")
const { get_po_so_mapped_unloading_details_service } = require("../services/get_po_so_mapped_unloading_details_service")

const get_po_so_mapped_unloading_details_controller = async (req,res) => {

    try {

        const {po_id, po_no} = req.query

        if(!po_id && !po_no)
            return res.status(HTTP_status_codes.badRequest).json({
                status: false,
                message: 'Either po_id or po_no required'
            })

        const response = await get_po_so_mapped_unloading_details_service({po_id,po_no})

        if(response.status === false)
            return res.status(HTTP_status_codes.badRequest).send(response)

        return res.status(HTTP_status_codes.ok).send(response)
        
    } catch (error) {
        error_log(error)
        return res.status(HTTP_status_codes.internalServerError).json({
            status: false,
            message: 'Internal Server Error'
        })
    }

}

module.exports = {
    get_po_so_mapped_unloading_details_controller
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_unloading/controllers/get_unloading_details_controller.js
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const get_unloading_details_service = require('../services/get_unloading_details_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * @param {import("express").Request} req
 * @param {import("express").Response} res
 */
const get_unloading_details_controller = async (req, res) => {
    try {
        const po_id = parseInt(req.query.po_id);
        const so_id = parseInt(req.query.so_id);

        if (!Number.isInteger(po_id)) { throw new ValidationError("'po_id' as query parameter is not a valid id (integer)."); }
        if (!Number.isInteger(so_id)) { throw new ValidationError("'so_id' as query parameter is not a valid id (integer)."); }

        const result = await get_unloading_details_service(po_id, so_id);
        const jsonRes = create_api_response(true, 'success', result);
        res.status(http_status_code_enum.ok).json(jsonRes);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}

module.exports = get_unloading_details_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_unloading/controllers/submit_rejected_quantity_controller.js
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const joi = require('joi');
const error_log = require('../../../../middelware/error_log');
const { submit_rejected_quantity_service } = require('../services/submit_rejected_quantity_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const result = rejected_quantity_schema.validate(req.body);
        if (result.error) { throw new ValidationError(result.error.message); }
        const {
            rejected_quantity,
            rejected_bags,
            so_id,
            po_id,
            po_pending_inhand_id,
            warehouse_id,
            send_to
        } = result.value;

        const add_po_pending_in_hand = await submit_rejected_quantity_service(
            rejected_quantity,
            rejected_bags,
            so_id,
            po_id,
            po_pending_inhand_id,
            warehouse_id,
            send_to
        );
        const response = create_api_response(true, 'success', add_po_pending_in_hand);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}

const rejected_quantity_schema = joi.object({
    rejected_quantity: joi.number().min(0).required(),
    rejected_bags: joi.number().min(0).required(),
    so_id: joi.number().positive().required(),
    po_id: joi.number().positive().required(),
    po_pending_inhand_id: joi.number().positive(),
    warehouse_id: joi.number().positive(),
    send_to: joi.number().required()
});



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_unloading/controllers/deduction_info_controller.js
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const save_deduction_info_service = require('../services/save_deduction_info_service');
const { isValidUrl } = require('../utils/validator');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * @param {import("express").Request} req
 * @param {import("express").Response} res
 */
const deduction_info_controller = async (req, res) => {
    try {
        const {
            po_id,
            po_pending_inhand_id,
            so_id,
            deduction_amount,
            deduction_remarks,
            deduction_report_url // optional field
        } = req.body;

        if (!Number.isInteger(po_id) && !Number.isInteger(po_pending_inhand_id)) { throw new ValidationError("'po_id' and 'po_pending_inhand_id' are not valid ids (integer)."); }
        if (!Number.isInteger(so_id)) { throw new ValidationError("'so_id' is not a valid id (integer)."); }
        if (typeof deduction_amount !== 'number') { throw new ValidationError("only numbers are allowed in 'deduction_amount'."); }
        if (deduction_amount < 0) { throw new ValidationError("'deduction_amount' can be zero but not negative number."); }

        if (typeof deduction_remarks !== 'string' || !deduction_remarks) { throw new ValidationError("'deduction_remarks' is not a valid string."); }

        if (deduction_report_url) {
            if (typeof deduction_report_url === 'string') {
                if (!isValidUrl(deduction_report_url)) { throw new ValidationError("'deduction_report_url' is not a valid URL."); }
            } else { throw new ValidationError("'deduction_report_url' is not a valid string."); }
        }
        const result = await save_deduction_info_service({
            po_id,
            po_pending_inhand_id,
            so_id,
            deduction_amount,
            deduction_remarks,
            deduction_report_url
        });
        const jsonRes = create_api_response(true, 'deduction report submitted successfully.', result);
        res.status(http_status_code_enum.ok).json(jsonRes);
    } catch (err) {
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
        error_log(err);
    }
}

module.exports = deduction_info_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_unloading/controllers/vehicle_arrival_controller.js
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const { isValidDate, isValidUrl } = require('../utils/validator');
const vehicle_arrival_log_service = require('../services/vehicle_arrival_log_service');
const { DeliveryStage } = require('../enums');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * @param {import("express").Request} req
 * @param {import("express").Response} res
 */
const vehicle_arrival_controller = async (req, res) => {
    try {
        const {
            po_id,
            po_pending_inhand_id,
            arrived_at,
            images // optional field (array type)
        } = req.body;

        if (!Number.isInteger(po_id) && !Number.isInteger(po_pending_inhand_id)) { throw new ValidationError("'po_id' and 'po_pending_inhand_id' are not valid ids (integer)."); }
        if (!isValidDate(arrived_at)) { throw new ValidationError("'arrived_at' is not a valid date format"); }

        if (images) {
            if (!Array.isArray(images)) { throw new ValidationError("'images' is not a valid array."); }
            if (images.length > 0) {
                for (const img_url of images) {
                    if (!isValidUrl(img_url)) { throw new ValidationError(`'images' contains an invalid url -> ${img_url}`); }
                }
            }
        }
        const result = await vehicle_arrival_log_service(po_id, po_pending_inhand_id, new Date(arrived_at), DeliveryStage.VEHICLE_ARRIVED_AT_BUYER, images);
        const jsonRes = create_api_response(true, 'vehicle arrival details submitted successfully.', result);
        res.status(http_status_code_enum.ok).json(jsonRes);
    } catch (err) {
        res.status(http_status_code_enum.bad_request)
            .json(create_api_response(false, err.message, null));
        error_log(err);
    }
}

module.exports = vehicle_arrival_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_unloading/controllers/unloading_details_controller.js
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const save_unloading_details_service = require('../services/save_unloading_details_service');
const { isValidUrl } = require('../utils/validator');
const { get_unloading_doc_types, get_unloading_qty_types } = require('../enums/get_types');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * @param {import("express").Request} req
 * @param {import("express").Response} res
 */
const unloading_details_controller = async (req, res) => {
    try {
        const {
            po_id, // integer
            po_pending_inhand_id, // integer
            so_id, // integer
            quantity_info, // array of objects
            quality_info, // array of objects
            destination_info, // object (optional)
            unloading_doc_info // object
        } = req.body;

        if (!Number.isInteger(po_id) && !Number.isInteger(po_pending_inhand_id)) { throw new ValidationError("'po_id' and 'po_pending_inhand_id' are not valid ids (integer)."); }
        if (!Number.isInteger(so_id)) { throw new ValidationError("'so_id' is not a valid id (integer)."); }
        if (!quantity_info) { throw new ValidationError("'quantity_info' is required."); }
        if (!quality_info) { throw new ValidationError("'quality_info' is required."); }
        if (!unloading_doc_info) { throw new ValidationError("'unloading_doc_info' is required."); }
        if (destination_info) {
            const { send_to_warehouse, warehouse_id } = destination_info;
            if (send_to_warehouse && !Number.isInteger(warehouse_id)) { throw new ValidationError("'destination_info.warehouse_id' is not a valid id (integer)."); }
        }

        // fetch types for validation.
        const [doc_types, qty_types] = await Promise.all([
            get_unloading_doc_types(),
            get_unloading_qty_types()
        ]);

        // validate if quality info is of array type of not.
        if (!Array.isArray(quality_info) || quality_info.length === 0) { throw new ValidationError("'quality_info' is not a valid array or it is empty."); }

        // validate each individual quality info.
        for (let index = 0; index < quality_info.length; index++) {
            const { type, actual_value } = quality_info[index];
            if (!Number.isInteger(type)) { throw new ValidationError(`invalid quality check id at position ${index}.`); }
            if (typeof actual_value !== 'string' || !actual_value) { throw new ValidationError('invalid quality check actual_value, it should be a non empty string.'); }
        }
        // validate each key of quantity info
        // here all quantity is in KG
        if (!Array.isArray(quantity_info) || quantity_info.length !== qty_types.length) { throw new ValidationError("'quantity_info' is not a valid array or it is empty."); }
        for (let index = 0; index < qty_types.length; index++) {
            const data = quantity_info.find(qi => qi.type === qty_types[index].id);
            if (!data) { throw new ValidationError(`'quantity_info' is missing the data for ${qty_types[index].name}.`); }
            if (!Number.isInteger(data.value)) { throw new ValidationError("'quantity_info' only numbers are allowd in value."); }
        }
        // validate unloading doc info.
        const { docs, comment } = unloading_doc_info;
        if (!Array.isArray(docs) || docs.length !== doc_types.length) { throw new ValidationError("'unloading_doc_info.docs' is not a valid array or it is empty."); }
        if (!!comment && typeof comment !== 'string') { throw new ValidationError("'unloading_doc_info.comment' is not a valid string."); }
        for (let index = 0; index < doc_types.length; index++) {
            const doc_type = doc_types[index];
            const doc = docs.find(d => d.type === doc_type.id);
            if (!doc) { throw new ValidationError(`'unloading_doc_info.docs' is missing ${doc_type.name}.`); }
            if (!Number.isInteger(doc.type)) { throw new ValidationError(`'unloading_doc_info.docs[${index}].type' invalid number (integer).`); }
            if (typeof doc.url !== 'string' || !isValidUrl(doc.url)) { throw new ValidationError(`'unloading_doc_info.docs[${index}].url' invalid url.`); }
        }
        // res.end();
        const result = await save_unloading_details_service(req.body);
        const jsonRes = create_api_response(true, 'unloading details saved successfully.', result);
        res.status(http_status_code_enum.ok).json(jsonRes);
    } catch (err) {
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
        error_log(err);
    }
}

module.exports = unloading_details_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_unloading/controllers/fetch_po_pending_in_hand_controller.js
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const error_log = require("../../../../middelware/error_log");
const { fetch_po_pending_in_hand_service } = require("../services/fetch_po_pending_in_hand_service");

module.exports = async (req, res) => {
    try {
        let { limit, page } = req.query;
        limit = (limit && parseInt(limit) <= 50 && parseInt(limit) >= 0) ? parseInt(limit) : 50;
        page = (page && parseInt(page) >= 1) ? parseInt(page) : 1;
        const po_pending_in_hand = await fetch_po_pending_in_hand_service(limit, page);
        let response = create_api_response(true, "success", po_pending_in_hand);
        res.status(http_status_code_enum.ok).json(response);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_unloading/services/get_po_so_mapped_unloading_details_service.js
const { Op } = require("sequelize")
const buyer_order_detail = require("../../../../database/models_v2/buyer_order/buyer_order_detail")
const po_pending_inhand_detail = require("../../../../database/models_v2/po_unloading/po_pending_inhand_detail")
const po_unloading_docs = require("../../../../database/models_v2/po_unloading/po_unloading_docs")
const po_unloading_doc_types = require("../../../../database/models_v2/po_unloading/po_unloading_doc_types")
const po_unloading_qty_detail = require("../../../../database/models_v2/po_unloading/po_unloading_qty_detail")
const po_unloading_qty_types = require("../../../../database/models_v2/po_unloading/po_unloading_qty_types")
const purchase_crop_orders = require("../../../../database/models_v2/procurement_order/purchase_crop_orders")
const order_delivery_detail = require("../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail")
const order_delivery_logs = require("../../../../database/models_v2/procurement_order_deliveries/order_delivery_logs")
const order_delivery_stage_enum = require("../../../../enums/purchase_order/order_delivery_stage_enum")
const error_log = require("../../../../middelware/error_log")

const get_po_unloading_date = async (po_id,pending_po_ids) => {

    try {

        const order_detail_id = await order_delivery_detail.findAll({
            where: {
                [Op.or] : [
                    {
                        purchase_crop_order_id: po_id || 0
                    },
                    {
                        po_pending_inhand_detail_id: {[Op.in]: pending_po_ids || []}
                    }
                ],
                is_active: 1
            },
            include: [{
                model: order_delivery_logs,
                where: {
                    order_delivery_stage_id: {
                        [Op.in]: [order_delivery_stage_enum.delivered, order_delivery_stage_enum.partial_delivered, order_delivery_stage_enum.completed, order_delivery_stage_enum.cancelled]
                    },
                    is_active: 1
                }
            }],
            attributes: ["id","purchase_crop_order_id","po_pending_inhand_detail_id"]
        })

        let result = {}

        for(let i=0; i<order_detail_id.length; i++){

            let order_det = order_detail_id[i].dataValues

            for(let j=0; j<order_det.order_delivery_logs.length; j++)
                result[order_det.purchase_crop_order_id || order_det.po_pending_inhand_detail_id] = order_det.order_delivery_logs[j].dataValues.log_time
            
        }

        return result

    } catch (error) {
        error_log(error)
        return null
    }

}

const get_po_unloading_docs = async (po_id,pending_po_ids) => {

    try{

        const po_unloading_documents = await po_unloading_docs.findAll({
            where: {
                [Op.or] : [
                    {
                        purchase_crop_order_id: po_id
                    },
                    {
                        po_pending_inhand_id: {
                            [Op.in]: pending_po_ids
                        }
                    }
                ],
                is_active: 1
            },
            include: [
                {
                    model: po_unloading_doc_types,
                    where: {
                        is_active: 1
                    }
                }
            ]
        })

        let result = {}
        for(let i=0; i<po_unloading_documents.length; i++){
            const doc = po_unloading_documents[i].dataValues

            if(result[doc.buyer_order_detail_id]){
                let doc_list = result[doc.buyer_order_detail_id]
                doc_list.push({name: doc.po_unloading_doc_type.dataValues.name, url:doc.doc_url})
                result[doc.buyer_order_detail_id] = doc_list
            } else {
                result[doc.buyer_order_detail_id] = [{name: doc.po_unloading_doc_type.dataValues.name, url:doc.doc_url}]
            }
        }

        return result

    }catch(err){
        error_log(err)
        return {}
    }

}


const get_po_unloading_qty_details = async (po_id,pending_po_ids) => {
    try {

        const po_unloading_qty_details = await po_unloading_qty_detail.findAll({
            where: {
                [Op.or] : [
                    {
                        purchase_crop_order_id: po_id
                    },
                    {
                        po_pending_inhand_id: {
                            [Op.in]: pending_po_ids
                        }
                    }
                ],
                is_active: 1
            },
            include: [
                {
                    model: buyer_order_detail,
                    where: {
                        is_active: 1
                    }
                },
                {
                    model: po_unloading_qty_types,
                    where: {
                        is_active: 1
                    }
                }
            ]
        })
        
        let result = {}

        const all_docs = await get_po_unloading_docs(po_id,pending_po_ids)

        const unloading_dates = await get_po_unloading_date(po_id,pending_po_ids)

        const po_unloading_weights = {}

        for(let i=0; i<po_unloading_qty_details.length; i++){
           result[po_unloading_qty_details[i].dataValues.buyer_order_detail.dataValues.farmart_id] = {
                docs: all_docs[po_unloading_qty_details[i].dataValues.buyer_order_detail.dataValues.id],
                date: unloading_dates[po_unloading_qty_details[i].dataValues.purchase_crop_order_id || po_unloading_qty_details[i].dataValues.po_pending_inhand_id]
            }
            po_unloading_weights[`${po_unloading_qty_details[i].dataValues.po_unloading_qty_type.dataValues.name}_${po_unloading_qty_details[i].dataValues.buyer_order_detail.dataValues.farmart_id}`] = po_unloading_qty_details[i].dataValues.value
        }

        for(let i=0; i<Object.keys(po_unloading_weights).length; i++){
            const weight_type = Object.keys(po_unloading_weights)[i].split('_')[0]
            const so_farmart_id = Object.keys(po_unloading_weights)[i].split('_')[1]
            result[so_farmart_id][weight_type.toLowerCase().split(' ').join('_')] = po_unloading_weights[Object.keys(po_unloading_weights)[i]]
        }

        return result
    } catch (error) {
        error_log(error)
        return {}
    }
}

const get_po_so_mapped_unloading_details_service = async ({po_id,po_no}) => {
    try {

        if(!po_id){
            const po_details = await purchase_crop_orders.findOne({
                where: {
                    farmart_id: po_no,
                    is_active: 1
                },
                attributes: ["id"]     
            })

            if(!po_details)
                return {status: false, message: 'Incorrect PO Number'}
            
            po_id = po_details.dataValues.id
        }

        const po = await purchase_crop_orders.findOne({
            where: {
                id: po_id,
                is_active: 1
            }
        })

        if(!po)
            return {status: false, message: 'Incorrect po_id'}

        const pending_po = await po_pending_inhand_detail.findAll({
            where: {
               purchase_crop_order_id: po_id,
               is_active: 1 
            },
            attributes: ["id"]
        })

        let pending_po_ids = []

        for(let i=0; i< pending_po.length; i++)
            pending_po_ids.push(pending_po[i].dataValues.id)
        
        const data_to_send = await get_po_unloading_qty_details(po_id,pending_po_ids)

        return {status: true, data: prepare_data(data_to_send), message: ''}
        
        
    } catch (error) {
        error_log(error)
        return {status: false, message: error.message}
    }
}

const prepare_data = (data) => {
    let final_result = []
    for(let i=0; i<Object.keys(data).length; i++){
        const so_no = Object.keys(data)[i]
        data[so_no]['so_no'] = so_no
        final_result.push(data[so_no])
    }
    return final_result
}
 
module.exports = {
    get_po_so_mapped_unloading_details_service
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_unloading/services/save_deduction_info_service.js
const po_unloading_deduction_report_model = require('../../../../database/models_v2/po_unloading/po_unloading_deduction_report');
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const order_delivery_logs_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_logs');
const { POStatus } = require('../../../../enums/market_linkage/enums/po');
const { DeliveryStage } = require('../enums');
const po_pending_inhand_detail_model = require('../../../../database/models_v2/po_unloading/po_pending_inhand_detail');
const { pending_po_status } = require('../../../../enums/market_linkage/enums/po_pending_in_hand_enum');
const add_po_unloading_deduction_report = require('../../../../data_abstraction_layer/po_unlaoding/add_po_unloading_deduction_report');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * @param {{
 *   po_id: number,
 *   po_pending_inhand_id: number,
 *   so_id: number,
 *   deduction_amount: number,
 *   deduction_remarks: string,
 *   deduction_report_url: string | undefined | null
 * }} deduction_info
 *
 * @return {Promise<{
 *   po_id: number,
 *   po_pending_inhand_id: number,
 *   so_id: number,
 *   deduction_amount: number,
 *   deduction_remark: string,
 *   deduction_report_url: string | null
 * }>}
 */
const save_deduction_info_service = async (deduction_info) => {
    const query = {
        is_active: true,
        buyer_order_detail_id: deduction_info.so_id
    }
    if (deduction_info.po_pending_inhand_id) { query.po_pending_inhand_id = deduction_info.po_pending_inhand_id; } else { query.purchase_crop_order_id = deduction_info.po_id; }

    const deduction_report = await po_unloading_deduction_report_model.findOne({
        where: query,
        include: [
            {
                model: purchase_crop_orders_model,
                required: false,
                attributes: ['id', 'status'], // these two fields are used only.
                where: {
                    is_active: true
                },
                include: {
                    model: order_delivery_detail_model,
                    required: true,
                    where: { is_active: true }
                }
            },
            {
                model: po_pending_inhand_detail_model,
                required: false,
                attributes: ['id', 'status'], // these two fields are used only.
                where: {
                    is_active: true
                },
                include: {
                    model: order_delivery_detail_model,
                    required: true,
                    where: { is_active: true }
                }
            }
        ]
    });

    if (!deduction_report) { throw new ValidationError('No active deduction report found with the given PO & SO.'); }
    if (!deduction_report.purchase_crop_order && !deduction_report.po_pending_inhand_detail) { throw new ValidationError('No active PO found with deduction report.'); }

    const purchase_order = deduction_report.purchase_crop_order;
    const po_pending_inhand = deduction_report.po_pending_inhand_detail;
    const order_delivery_detail = purchase_order ? purchase_order.order_delivery_detail : po_pending_inhand.order_delivery_detail;

    // if po is not delivered DON'T submit deduction info.
    if (purchase_order && ![POStatus.DELIVERED, POStatus.PARTIAL_DELIVERED].includes(purchase_order.status)) { throw new ValidationError("PO is not delivered (fully or partially). You can't submit deduction info."); }
    if (po_pending_inhand && ![pending_po_status.DELIVERED, pending_po_status.PARTIAL_DELIVERED].includes(po_pending_inhand.status)) { throw new ValidationError("PO is not delivered (fully or partially). You can't submit deduction info."); }

    deduction_report.deduction_remarks = deduction_info.deduction_remarks;
    deduction_report.deduction_amount = deduction_info.deduction_amount;

    if (purchase_order) {
        purchase_order.status = POStatus.DEDUCTION_SUBMITTED;
        await purchase_order.save();
    } else {
        po_pending_inhand.status = pending_po_status.DEDUCTION_SUBMITTED;
        await po_pending_inhand.save();
    }

    await Promise.all([
        deduction_report.save(),
        order_delivery_logs_model.create({
            is_active: true,
            order_detail_id: order_delivery_detail.id,
            order_delivery_stage_id: DeliveryStage.DEDUCTION_SUBMITTED,
            log_time: new Date()
        })
    ]);

    if (deduction_info.deduction_report_url) {
        await add_po_unloading_deduction_report(deduction_info.deduction_report_url, order_delivery_detail.id);
    }

    return {
        status: purchase_order?.status ?? null,
        po_pending_inhand_status: po_pending_inhand?.status ?? null
    };
}

module.exports = save_deduction_info_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_unloading/services/vehicle_arrival_log_service.js
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const order_delivery_logs_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_logs');
const { POStatus } = require('../../../../enums/market_linkage/enums/po');
const fetch_ml_notification_string = require('../../../../entities_v2/notification/services/fetch_ml_notification_string');
const { send_notification_for_ml } = require('../../../../notifier/firebase_admin_ml');
const ml_notification_event_enum = require('../../../../enums/notification/ml_notification_event_enum');
const buyer_order_detail_model = require('../../../../database/models_v2/buyer_order/buyer_order_detail');
const buyer_order_delivery_info_model = require('../../../../database/models_v2/buyer_order/buyer_order_delivery_info');
const language = require('../../../../enums/global/language');
const po_pending_inhand_detail_model = require('../../../../database/models_v2/po_unloading/po_pending_inhand_detail');
const { pending_po_status } = require('../../../../enums/market_linkage/enums/po_pending_in_hand_enum');
const add_po_unloading_vehicle_images = require('../../../../data_abstraction_layer/po_unlaoding/add_po_unloading_vehicle_images');
const { ValidationError } = require('../../../../utilities/error/custom_error');
const error_log = require('../../../../middelware/error_log');

/**
 * @param {number} po_id
 * @param {number} po_pending_inhand_id
 * @param {Date} arrival_date
 * @param {number} log_stage_id id from the table ``order_delivery_stage_enums``
 * @param {string[]} images defaults to empty array
 * @return {Promise<{
 *   po_status: number,
 *   vehicle_arrived_at: Date
 * }>}
 */
const vehicle_arrival_log_service = async (po_id, po_pending_inhand_id, arrival_date, log_stage_id, images = []) => {
    let purchase_order, po_pending_inhand;
    if (po_pending_inhand_id) {
        po_pending_inhand = await po_pending_inhand_detail_model.findOne({
            where: { id: po_pending_inhand_id, is_active: true },
            include: [
                {
                    model: order_delivery_detail_model,
                    where: { is_active: true },
                    attributes: ['id'] // only id is required.
                },
                {
                    model: purchase_crop_orders_model,
                    where: { is_active: true }
                },
                {
                    model: buyer_order_detail_model,
                    include: [
                        {
                            model: buyer_order_delivery_info_model,
                            as: 'delivery_info',
                            where: { is_active: true },
                            required: false
                        }
                    ],
                    where: { is_active: true },
                    required: false
                }
            ]
        })
        if (!po_pending_inhand) { throw new ValidationError(`No PO pending in hand found with the given id ${po_pending_inhand_id}.`); }
    } else {
        purchase_order = await purchase_crop_orders_model.findOne({
            where: { id: po_id, is_active: true },
            include: [
                {
                    model: order_delivery_detail_model,
                    where: { is_active: true },
                    attributes: ['id'] // only id is required.
                },
                {
                    model: buyer_order_detail_model,
                    include: [
                        {
                            model: buyer_order_delivery_info_model,
                            as: 'delivery_info',
                            where: { is_active: true },
                            required: false
                        }
                    ],
                    where: { is_active: true },
                    required: false
                }
            ]
        });
        if (!purchase_order) {
            throw new ValidationError(`no purchase order found with id: ${po_id}`);
        } else {
            if (!purchase_order.buyer_order_id) { throw new ValidationError(`sale order not found for purchase order with id: ${po_id}`); }
        }
    }

    const order_delivery_detail = purchase_order ? purchase_order.order_delivery_detail : po_pending_inhand.order_delivery_detail;
    if (!order_delivery_detail) { throw new ValidationError('order delivery detail is missing (maybe PO is not mapped with SO as of now).'); }

    if (purchase_order) {
        purchase_order.status = POStatus.ARRIVED_AT_BUYER;
        await purchase_order.save();
    } else {
        po_pending_inhand.status = pending_po_status.ARRIVED_AT_BUYER;
        await po_pending_inhand.save();
    }

    await Promise.all([
        order_delivery_logs_model.create({
            is_active: true,
            order_detail_id: order_delivery_detail.id,
            order_delivery_stage_id: log_stage_id,
            log_time: arrival_date
        }),
        add_po_unloading_vehicle_images(images, order_delivery_detail.id)
    ])

    // push notification for arrived at buyer
    const variables = {
        po_farmart_id: purchase_order ? purchase_order.farmart_id : po_pending_inhand.purchase_crop_order.farmart_id,
        delivery_district: purchase_order ? purchase_order.buyer_order_detail?.delivery_info?.district_name : po_pending_inhand.buyer_order_detail?.delivery_info?.district_name,
        delivery_state: purchase_order ? purchase_order.buyer_order_detail?.delivery_info?.state_name : po_pending_inhand.buyer_order_detail?.delivery_info?.state_name
    }
    const notification = await fetch_ml_notification_string(ml_notification_event_enum.po_arrived_at_buyer, language.english, variables);
    if (notification) {
        send_notification_for_ml([purchase_order ? purchase_order.user_profile_id : po_pending_inhand.purchase_crop_order.user_profile_id], notification.title, notification.message, notification.image)
            .catch(err => {
                error_log(err);
            });
    }

    return {
        status: purchase_order?.status ?? null,
        po_pending_inhand_status: po_pending_inhand?.status ?? null,
        arrived_at: arrival_date
    };
}

module.exports = vehicle_arrival_log_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_unloading/services/submit_rejected_quantity_service.js
const error_log = require('../../../../middelware/error_log');
const po_pending_inhand_detail_model = require('../../../../database/models_v2/po_unloading/po_pending_inhand_detail');
const { pending_po_status, send_to: send_to_enum } = require('../../../../enums/market_linkage/enums/po_pending_in_hand_enum');

const submit_rejected_quantity_service = (
    rejected_quantity,
    rejected_bags,
    so_id,
    po_id,
    po_pending_inhand_id,
    warehouse_id = null,
    send_to
) => {
    return new Promise(async (resolve, reject) => {
        try {
            const po_pending_inhand = await po_pending_inhand_detail_model.findOne({
                where: {
                    previous_buyer_order_detail_id: so_id,
                    purchase_crop_order_id: po_id,
                    is_active: true
                }
            })
            if (po_pending_inhand && !po_pending_inhand_id) {
                po_pending_inhand.weight_kg = rejected_quantity;
                po_pending_inhand.number_of_bag = rejected_bags;
                po_pending_inhand.warehouse_detail_id = warehouse_id;
                po_pending_inhand.send_to = send_to;
                po_pending_inhand.status = (send_to === send_to_enum.WAREHOUSE) ?
                    pending_po_status.MAPPING_SAVED : pending_po_status.SEND_FOR_REMAPPING;
                await po_pending_inhand.save();
            }
            else {
                const po_mapping_exist = await po_pending_inhand_detail_model.findOne({
                    where: {
                        purchase_crop_order_id: po_id,
                        is_active: true
                    },
                    order: [['po_map_count','DESC']]
                })
                const pending_po = {
                    is_active: true,
                    weight_kg: rejected_quantity,
                    number_of_bag: rejected_bags,
                    status: (send_to === send_to_enum.WAREHOUSE) ?
                        pending_po_status.MAPPING_SAVED : pending_po_status.SEND_FOR_REMAPPING,
                    send_to: send_to,
                    purchase_crop_order_id: po_id,
                    previous_buyer_order_detail_id: so_id,
                    warehouse_detail_id: warehouse_id,
                    po_map_count: ((po_mapping_exist?.po_map_count || 0) + 1)
                }
                await po_pending_inhand_detail_model.build(pending_po).save();
            }
            return resolve({});
        } catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    });
};


module.exports = {
    submit_rejected_quantity_service
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_unloading/services/get_unloading_details_service.js
// const { Op } = require("sequelize");
const { Op } = require('sequelize');
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const qc_param_types_model = require('../../../../database/models_v2/procurement_order/qc_param_types');
const buyer_order_detail_model = require('../../../../database/models_v2/buyer_order/buyer_order_detail');
const buyer_detail_model = require('../../../../database/models_v2/buyer/buyer_detail');
const buyer_order_crop_info_model = require('../../../../database/models_v2/buyer_order/buyer_order_crop_info');
const buyer_order_delivery_info_model = require('../../../../database/models_v2/buyer_order/buyer_order_delivery_info');
const buyer_order_quality_check_model = require('../../../../database/models_v2/buyer_order/buyer_order_quality_check');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const order_delivery_documents_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_documents');
const order_delivery_logs_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_logs');
const user_profile_model = require('../../../../database/models/user_profile');
// unloading details models
const po_retransport_to_model = require('../../../../database/models_v2/po_unloading/po_retransport_to');
const po_unloading_deduction_report_model = require('../../../../database/models_v2/po_unloading/po_unloading_deduction_report');
const po_unloading_doc_types_model = require('../../../../database/models_v2/po_unloading/po_unloading_doc_types');
const po_unloading_docs_model = require('../../../../database/models_v2/po_unloading/po_unloading_docs');
const po_unloading_qlty_detail_model = require('../../../../database/models_v2/po_unloading/po_unloading_qlty_detail');
const po_unloading_qty_detail_model = require('../../../../database/models_v2/po_unloading/po_unloading_qty_detail');
const po_unloading_qty_types_model = require('../../../../database/models_v2/po_unloading/po_unloading_qty_types');
const { get_unloading_doc_types, get_unloading_qty_types } = require('../enums/get_types');
const { DeliveryStage, DeliveryDocument } = require('../enums');
const po_pending_inhand_detail_model = require('../../../../database/models_v2/po_unloading/po_pending_inhand_detail');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * @param {number} po_id
 * @param {number} so_id
 * @return {Promise<Object>}
 */
const get_unloading_details_service = async (po_id, so_id) => {
    const [purchase_order, po_pending_inhand] = await Promise.all([
        purchase_crop_orders_model.findOne({
            where: {
                is_active: 1,
                id: po_id
            },
            include: [
                { model: user_profile_model, where: { is_active: 1 } },
                { model: po_retransport_to_model, required: false, where: { is_active: 1 } },
                {
                    model: po_unloading_deduction_report_model,
                    required: false,
                    where: {
                        is_active: 1,
                        buyer_order_detail_id: so_id
                    }
                },
                {
                    model: po_unloading_docs_model,
                    required: false,
                    where: {
                        is_active: 1,
                        buyer_order_detail_id: so_id
                    },
                    include: {
                        model: po_unloading_doc_types_model,
                        where: { is_active: 1 }
                    }
                },
                {
                    model: po_unloading_qlty_detail_model,
                    required: false,
                    where: {
                        is_active: 1,
                        buyer_order_detail_id: so_id
                    }
                },
                {
                    model: po_unloading_qty_detail_model,
                    required: false,
                    where: {
                        is_active: 1,
                        buyer_order_detail_id: so_id
                    },
                    include: {
                        model: po_unloading_qty_types_model,
                        where: { is_active: 1 }
                    }
                },
                {
                    model: order_delivery_detail_model,
                    where: { is_active: 1 },
                    required: true,
                    include: [
                        {
                            model: order_delivery_logs_model,
                            required: false,
                            where: { is_active: 1, order_delivery_stage_id: DeliveryStage.VEHICLE_ARRIVED_AT_BUYER }
                        },
                        {
                            model: order_delivery_documents_model,
                            required: false,
                            where: {
                                is_active: 1,
                                order_transport_doc_type_id: {
                                    [Op.in]: [
                                        DeliveryDocument.DOC_TYPE_VEHICLE_ARRIVED_AT_BUYER,
                                        DeliveryDocument.BUYER_DEDUCTION_REPORT
                                    ]
                                }
                            }
                        }
                    ]
                },
                {
                    model: buyer_order_detail_model,
                    where: { is_active: 1, id: so_id },
                    include: [
                        { model: buyer_detail_model, where: { is_active: 1 } },
                        {
                            model: buyer_order_crop_info_model,
                            as: 'crop_info',
                            where: { is_active: 1 }
                        },
                        {
                            model: buyer_order_delivery_info_model,
                            as: 'delivery_info',
                            where: { is_active: 1 }
                        },
                        {
                            model: buyer_order_quality_check_model,
                            as: 'quality_checks',
                            where: { is_active: 1 },
                            include: {
                                model: qc_param_types_model,
                                where: { is_active: 1 }
                            }
                        }
                    ]
                }
            ]
        }),
        po_pending_inhand_detail_model.findOne({
            where: {
                previous_buyer_order_detail_id: so_id,
                purchase_crop_order_id: po_id,
                is_active: true
            }
        })
    ])
    if (!purchase_order) { throw new ValidationError(`No PO found with id ${po_id}. Or PO is not dispatched yet.`); }

    const [quantity_types, doc_types] = await Promise.all([
        get_unloading_qty_types(),
        get_unloading_doc_types()
    ]);

    const pa_profile = purchase_order.user_profile ?? {};
    const retransport_info = purchase_order.po_retransport_to ?? {};
    const unloading_deduction_report = purchase_order.po_unloading_deduction_report ?? {};
    const order_unloading_docs = purchase_order.po_unloading_docs ?? [];
    const unloading_quality = purchase_order.po_unloading_qlty_details ?? [];
    const unloading_quantity = purchase_order.po_unloading_qty_details ?? [];
    const po_delivery_detail = purchase_order.order_delivery_detail ?? {};
    const arrival_images = po_delivery_detail.order_delivery_documents ?? [];
    const delivery_logs = po_delivery_detail.order_delivery_logs ?? [];
    const buyer_order_detail = purchase_order.buyer_order_detail ?? {};
    const buyer_detail = buyer_order_detail.buyer_detail ?? {};
    const crop_info = buyer_order_detail.crop_info ?? {};
    const order_delivery_info = buyer_order_detail.delivery_info ?? {};
    const quality_checks = buyer_order_detail.quality_checks ?? [];

    const deduction_report_doc = arrival_images.find(ai => ai.order_transport_doc_type_id === DeliveryDocument.BUYER_DEDUCTION_REPORT) ?? {};

    const arrival_info = {
        arrived_at: (delivery_logs.length > 0) ? delivery_logs[0].log_time : null,
        images: arrival_images.filter(ai => ai.order_transport_doc_type_id !== null).map(ai => ai.doc_url)
    };

    const po_retransport_info = {
        total_weight: retransport_info.total_weight ?? null,
        no_of_bags: retransport_info.no_of_bag ?? null,
        send_to: retransport_info.send_to ?? null
    };

    const transport_info = {
        transport_name: po_delivery_detail.transport_name,
        driver_name: po_delivery_detail.driver_name,
        driver_mobile_number: po_delivery_detail.driver_mobile_number,
        vehicle_number: po_delivery_detail.vehicle_number
    };

    const pa_info = {
        name: pa_profile.name,
        mobile_number: pa_profile.mobile_number
    };

    const buyer_info = {
        name: `${buyer_detail.trader_name} (${buyer_detail.legal_name})`,
        state: order_delivery_info.state_name,
        district: order_delivery_info.district_name,
        address: `${order_delivery_info.address}, ${order_delivery_info.district_name} ${order_delivery_info.pincode}, ${order_delivery_info.state_name}, India`
    };

    const sales_order_info = {
        id: buyer_order_detail.id,
        so_number: buyer_order_detail.farmart_id,
        qc_list: quality_checks.map(qc => {
            const qc_type = qc.qc_param_type ?? {};
            const submitted = unloading_quality.find(uc => uc.buyer_order_quality_check_id === qc.id) ?? {};
            return {
                buyer_order_qc_id: qc.id,
                type: qc_type.id,
                name: qc_type.name,
                target_value: qc.required_value,
                actual_value: submitted.actual_value ?? null
            };
        })
    };

    const unloading_docs = doc_types.map(dt => {
        const submitted = order_unloading_docs.find(ud => ud.po_unloading_doc_type_id === dt.id) ?? {};
        return {
            type: dt.id,
            name: dt.name,
            url: submitted.doc_url ?? null
        };
    });

    const deduction_report = {
        deduction_amount: unloading_deduction_report.deduction_amount ?? null,
        deduction_remarks: unloading_deduction_report.deduction_remarks ?? null,
        deduction_report_url: deduction_report_doc.doc_url ?? null,
        unloading_comment: unloading_deduction_report.unloading_comment ?? null
    };

    const unloading_details = quantity_types.map(qt => {
        const submitted = unloading_quantity.find(uqt => uqt.po_unloading_qty_type_id === qt.id) ?? {};
        return {
            type: qt.id,
            name: qt.name,
            value: submitted.value ?? null
        };
    });

    return {
        id: purchase_order.id,
        po_number: purchase_order.farmart_id,
        status: purchase_order.status,
        crop_name: crop_info.crop_name,
        variety_name: crop_info.variety_name,
        quantity_kg: po_delivery_detail.gross_weight,
        no_of_bags: po_delivery_detail.number_of_bags,
        arrival_info,
        po_retransport_info,
        transport_info,
        pa_info,
        buyer_info,
        sales_order_info,
        unloading_docs,
        deduction_report,
        unloading_details,
        rejected_quantity: po_pending_inhand?.weight_kg || null,
        rejected_bags: po_pending_inhand?.number_of_bag || null,
        warehouse_id: po_pending_inhand?.warehouse_detail_id || null,
        send_to: po_pending_inhand?.send_to || null
    };
}

module.exports = get_unloading_details_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_unloading/services/fetch_po_pending_in_hand_service.js
const error_log = require('../../../../middelware/error_log');
const po_pending_inhand_detail_model = require('../../../../database/models_v2/po_unloading/po_pending_inhand_detail');
const { pending_po_status } = require('../../../../enums/market_linkage/enums/po_pending_in_hand_enum');
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const warehouse_detail_model = require('../../../../database/models_v2/warehouse/warehouse_detail');
const buyer_order_detail_model = require('../../../../database/models_v2/buyer_order/buyer_order_detail');
const master_merchant_detail_model = require('../../../../database/models_v2/merchant/master_merchant_detail');
const crop_detail_model = require('../../../../database/models_v2/crop/crop_detail');
const crop_varieties_detail_model = require('../../../../database/models_v2/crop/crop_varieties_detail');
const po_unloading_docs_model = require('../../../../database/models_v2/po_unloading/po_unloading_docs');
const unloading_doc_type_enum = require('../../../../enums/market_linkage/enums/unloading_doc_type_enum');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const po_unloading_qty_detail_model = require('../../../../database/models_v2/po_unloading/po_unloading_qty_detail');
const { UnloadingQuantityType } = require('../../../../enums/market_linkage/enums/unloading_quantity_enum');
const user_profile_model = require('../../../../database/models/user_profile');
const buyer_order_delivery_info_model = require('../../../../database/models_v2/buyer_order/buyer_order_delivery_info');
const Op = require('sequelize').Op;

const fetch_po_pending_in_hand_service = (limit, page) => {
    return new Promise(async (resolve, reject) => {
        try {
            const resp = {
                pending_po_details: [],
                total_records: 0
            }
            const po_pending_in_hand = await po_pending_inhand_detail_model.findAndCountAll({
                where: {
                    status: { [Op.lt]: pending_po_status.SO_MAPPING_SUBMITTED },
                    buyer_order_detail_id: null,
                    is_active: true
                },
                limit: limit,
                offset: ((page - 1) * limit) || 0
            })

            const po_ids = po_pending_in_hand.rows.map((pending_po) => pending_po.purchase_crop_order_id);
            const warehouse_ids = po_pending_in_hand.rows.map((pending_po) => pending_po.warehouse_detail_id);
            const prev_so_ids = po_pending_in_hand.rows.map((pending_po) => pending_po.previous_buyer_order_detail_id);
            const [purchase_orders, warehouses, previous_buyer_orders] = await get_associations(po_ids, warehouse_ids, prev_so_ids);

            resp.pending_po_details = await generate_reponse(po_pending_in_hand.rows, purchase_orders, previous_buyer_orders, warehouses);
            resp.total_records = po_pending_in_hand.count;
            return resolve(resp);
        } catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    });
};

const get_associations = async (po_ids, warehouse_ids, prev_so_ids) => {
    const [purchase_orders, warehouses, previous_buyer_orders] = await Promise.all([
        purchase_crop_orders_model.findAll({
            where: {
                is_active: true,
                id: { [Op.in]: po_ids }
            },
            include: [
                {
                    model: user_profile_model,
                    where: {
                        is_active: true
                    },
                    required: true
                },
                {
                    model: order_delivery_detail_model,
                    where: {
                        is_active: true
                    },
                    required: false,
                },
                {
                    model: crop_detail_model,
                    where: {
                        is_active: true
                    },
                    required: true
                },
                {
                    model: crop_varieties_detail_model,
                    where: {
                        is_active: true
                    },
                    required: true
                },
                {
                    model: po_pending_inhand_detail_model,
                    where: {
                        is_active: true,
                        buyer_order_detail_id: { [Op.ne]: null }
                    },
                    include: [
                        {
                            model: order_delivery_detail_model,
                            where: {
                                is_active: true
                            },
                            required: false
                        }
                    ],
                    required: false
                }
            ],
            order: [[po_pending_inhand_detail_model, 'po_map_count', 'DESC']],
        }),
        warehouse_detail_model.findAll({
            where: {
                is_active: true,
                id: { [Op.in]: warehouse_ids }
            }
        }),
        buyer_order_detail_model.findAll({
            where: {
                is_active: true,
                id: { [Op.in]: prev_so_ids }
            },
            include: [
                {
                    model: po_unloading_qty_detail_model,
                    required: false,
                    where: {
                        is_active: true,
                        po_unloading_qty_type_id: UnloadingQuantityType.ACCEPTED_WEIGHT
                    }
                },
                {
                    model: buyer_order_delivery_info_model,
                    as: "delivery_info",
                    where: {
                        is_active: true
                    },
                    required: false
                },
            ]
        })
    ]);
    return [purchase_orders, warehouses, previous_buyer_orders];
}

const generate_reponse = async (po_pending_in_hand, purchase_orders, previous_buyer_orders, warehouses) => {
    const response = po_pending_in_hand.map((pending_po) => {
        const purchase_order = purchase_orders.find((po) => po.id === pending_po.purchase_crop_order_id);
        const prev_buyer_order = previous_buyer_orders.find((so) => so.id === pending_po.previous_buyer_order_detail_id);
        const warehouse = warehouses.find((w) => w.id === pending_po.warehouse_detail_id);
        let handover_bag, handover_weight, unloading_detail;
        if (purchase_order.po_pending_inhand_details.length) { //po_pending_inhand from purchase order
            handover_weight = purchase_order.po_pending_inhand_details[0].order_delivery_detail?.gross_weight || purchase_order.po_pending_inhand_details[0].weight_kg || null;
            handover_bag = purchase_order.po_pending_inhand_details[0].order_delivery_detail?.number_of_bags || purchase_order.po_pending_inhand_details[0].number_of_bag || null;
        }
        else {
            handover_weight = purchase_order.order_delivery_detail?.gross_weight || null; //order delivery form po
            handover_bag = purchase_order.order_delivery_detail?.number_of_bags || null;
        }
        unloading_detail = prev_buyer_order.po_unloading_qty_details?.find((doc) => {
            if (pending_po.po_map_count > 1)
                return doc.po_pending_inhand_id === purchase_order.po_pending_inhand_details?.[0]?.id
            else
                return doc.purchase_crop_order_id === purchase_order.id
        }) || null;

        return {
            unloading_date: unloading_detail?.createdAt || null, //po_unloading prev_buyer_id and po_id
            po_number: purchase_order.farmart_id, //purchase_order
            so_number: prev_buyer_order.farmart_id, // buyer_order
            buyer_name: prev_buyer_order.buyer_name, // buyer_order
            current_location: warehouse?.name || prev_buyer_order.delivery_info ? (prev_buyer_order.delivery_info?.district_name + ", " + prev_buyer_order.delivery_info?.state_name) : null,
            // warehouse and buyer_order and delivery_info
            PA_name: purchase_order.user_profile.name, // user_profile and purchase_order
            commodity: purchase_order.crop_detail.name + "-" + purchase_order.crop_varieties_detail.name, //crop and crop_variety
            handover_weight,
            handover_bag,
            accepted_weight: unloading_detail?.value || null,
            po_pending_in_hand_id: pending_po.id
        }
    })
    return response;
}

module.exports = {
    fetch_po_pending_in_hand_service
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_unloading/services/save_unloading_details_service.js
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const order_delivery_logs_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_logs');
const { POStatus } = require('../../../../enums/market_linkage/enums/po');
const fetch_ml_notification_string = require('../../../../entities_v2/notification/services/fetch_ml_notification_string');
const { send_notification_for_ml } = require('../../../../notifier/firebase_admin_ml');
const language = require('../../../../enums/global/language');
const ml_notification_event_enum = require('../../../../enums/notification/ml_notification_event_enum');
const po_pending_inhand_detail_model = require('../../../../database/models_v2/po_unloading/po_pending_inhand_detail');
const { pending_po_status } = require('../../../../enums/market_linkage/enums/po_pending_in_hand_enum');
const { update_so_remaining_qty } = require('../../../../common_services/market_linkage/update_so_remaining_qty');
const add_po_unloading_qtys = require('../../../../data_abstraction_layer/po_unlaoding/add_po_unloading_qtys');
const add_po_unloading_qltys = require('../../../../data_abstraction_layer/po_unlaoding/add_po_unloading_qltys');
const add_po_unloading_deduction_comment = require('../../../../data_abstraction_layer/po_unlaoding/add_po_unloading_deduction_comment');
const add_po_unloading_docs = require('../../../../data_abstraction_layer/po_unlaoding/add_po_unloading_docs');
const { ValidationError } = require('../../../../utilities/error/custom_error');
const error_log = require('../../../../middelware/error_log');

/**
 * @param {{
 *  po_id: number,
 *  po_pending_inhand_id: number,
 *  so_id: number,
 *  quantity_info: {type: number, value: number}[],
 *  quality_info: {type: number, actual_value: string}[],
 *  destination_info: {
 *      send_to_warehouse: boolean,
 *      warehouse_id: number
 *  } | undefined,
 *  unloading_doc_info: {
 *      docs: {type: number, url: string}[],
 *      comment: string | undefined
 *  },
 * }} unloading_details
 * @return {Promise<Object>}
 */
const save_unloading_details_service = async (unloading_details) => {
    let purchase_order, po_pending_inhand;
    if (unloading_details.po_pending_inhand_id) {
        po_pending_inhand = await po_pending_inhand_detail_model.findOne({
            where: { is_active: true, id: unloading_details.po_pending_inhand_id },
            attributes: ['id', 'status'],
            include: [
                {
                    model: order_delivery_detail_model,
                    required: true,
                    attributes: ['id', 'gross_weight', 'number_of_bags'],
                    where: { is_active: true }
                },
                {
                    model: purchase_crop_orders_model,
                    required: true,
                    where: { is_active: true }
                }
            ]
        })
        if (!po_pending_inhand) { throw new ValidationError(`No PO pending in hand found with the given id ${unloading_details.po_pending_inhand_id}.`); }
    } else {
        purchase_order = await purchase_crop_orders_model.findOne({
            where: { is_active: true, id: unloading_details.po_id },
            include: {
                model: order_delivery_detail_model,
                required: true,
                attributes: ['id', 'gross_weight', 'number_of_bags'], // only id is required
                where: { is_active: true }
            }
        });
        if (!purchase_order) { throw new ValidationError(`No PO found with the given id ${unloading_details.po_id}.`); }
    }

    const order_delivery_detail = purchase_order ? purchase_order.order_delivery_detail : po_pending_inhand.order_delivery_detail;
    const po_total_weight = order_delivery_detail.gross_weight;
    const po_total_bag = order_delivery_detail.number_of_bags;
    const rejected_weight = unloading_details.quantity_info.find(q => q.type === 4) ?? {};
    const rejected_bag = unloading_details.quantity_info.find(q => q.type === 3) ?? {};

    if (rejected_weight.value === undefined || rejected_bag.value === undefined) { throw new ValidationError("rejected weight & rejected bag can't be undefined."); }
    if ((rejected_bag.value <= 0 && rejected_weight.value > 0) || (rejected_bag.value > 0 && rejected_weight.value <= 0)) { throw new ValidationError("rejected bag or weight one can't be zero or negative."); }

    let status = null;
    let log_stage_id = null;
    // calculate the new status of PO.
    if (rejected_bag.value === 0 && rejected_weight.value === 0) {
        status = purchase_order ? POStatus.DELIVERED : pending_po_status.DELIVERED;
        log_stage_id = 6;
    } else if (rejected_bag.value < po_total_bag && rejected_weight.value < po_total_weight) {
        status = purchase_order ? POStatus.PARTIAL_DELIVERED : pending_po_status.PARTIAL_DELIVERED;
        log_stage_id = 10;
    } else if (rejected_bag.value === po_total_bag && rejected_weight.value === po_total_weight) {
        status = purchase_order ? POStatus.CANCELLED : pending_po_status.CANCELLED;
        log_stage_id = 8;
    }

    if (status === null || log_stage_id === null) { throw new ValidationError("status can't be null. Some cases are not handeled properly."); }

    const po_so_object = {
        buyer_order_detail_id: unloading_details.so_id
    }

    if (purchase_order) {
        purchase_order.status = status;
        po_so_object.purchase_crop_order_id = unloading_details.po_id;
        await purchase_order.save();
    } else {
        po_pending_inhand.status = status;
        po_so_object.po_pending_inhand_id = unloading_details.po_pending_inhand_id;
        await po_pending_inhand.save();
    }

    await Promise.all([
        add_po_unloading_qtys(unloading_details.quantity_info, po_so_object),
        add_po_unloading_qltys(unloading_details.quality_info, po_so_object),
        add_po_unloading_docs(unloading_details.unloading_doc_info.docs, po_so_object),
        add_po_unloading_deduction_comment(unloading_details.unloading_doc_info.comment, po_so_object),
        order_delivery_logs_model.create({
            is_active: true,
            order_detail_id: order_delivery_detail.id,
            order_delivery_stage_id: log_stage_id,
            log_time: new Date()
        })
    ]);

    // push notification for unloading complete
    const notification = await fetch_ml_notification_string(ml_notification_event_enum.po_unloading_completed, language.english, { po_farmart_id: purchase_order ? purchase_order.farmart_id : po_pending_inhand.purchase_crop_order?.farmart_id });
    if (notification) {
        send_notification_for_ml([purchase_order ? purchase_order.user_profile_id : po_pending_inhand.purchase_crop_order?.user_profile_id], notification.title, notification.message, notification.image)
            .catch(err => {
                error_log(err);
            });
    }

    await update_so_remaining_qty(unloading_details.so_id)

    return {
        status: purchase_order?.status ?? null,
        po_pending_inhand_status: po_pending_inhand?.status ?? null
    };
}

module.exports = save_unloading_details_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_so_invoicing/swagger/index.js
module.exports = {
    tags: {
        name: 'po_so_invoicing'
    },
    paths: {
        '/': {
            get: {
                tags: ['po_so_invoicing'],
                summary: 'fetch po so invoicing list',
                description: '',
                operationId: 'fetch_invoicing_list',
                security: [{ Bearer: ['read'] }],
                parameters: [],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/upload_doc': {
            post: {
                tags: ['po_so_invoicing'],
                summary: 'upload invoicing document',
                description: '',
                operationId: 'upload_invoicing_doc',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        required: true,
                        schema: {
                            required: ['inv_id', 'doc_name', 'doc_url', 'doc_created_date', 'doc_value', 'doc_type'],
                            properties: {
                                inv_id: {
                                    type: 'number'
                                },
                                doc_name: {
                                    type: 'string'
                                },
                                doc_url: {
                                    type: 'string'
                                },
                                doc_created_date: {
                                    type: 'string'
                                },
                                doc_value: {
                                    type: 'number'
                                },
                                doc_type: {
                                    type: 'number'
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/update_status': {
            post: {
                tags: ['po_so_invoicing'],
                summary: 'update invoicing status',
                description: '',
                operationId: 'update_invoicing_status',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        required: true,
                        schema: {
                            required: ['inv_id', 'status'],
                            properties: {
                                inv_id: {
                                    type: 'number'
                                },
                                status: {
                                    type: 'number'
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/currency_enum': {
            get: {
                tags: ['po_so_invoicing'],
                summary: 'fetch currency enum',
                description: '',
                operationId: 'fetch_currency_enum',
                security: [{ Bearer: ['read'] }],
                parameters: [],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        }
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_so_invoicing/index.js
const router = require('express').Router();
const fetch_currency_enum_controller = require('./controllers/fetch_currency_enum_controller');
// const fetch_invoicing_list_controller=require('./controllers/fetch_invoicing_list_controller');
const update_invoicing_doc_controller = require('./controllers/update_invoicing_doc_controller');
const update_invoicing_status_controller = require('./controllers/update_invoicing_status_controller');

/** @deprecated */
// router.get("/", fetch_invoicing_list_controller);

router.get('/currency_enum', fetch_currency_enum_controller);
router.post('/upload_doc', update_invoicing_doc_controller);
router.post('/update_status', update_invoicing_status_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_so_invoicing/controllers/update_invoicing_status_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const update_invoicing_status_service = require('../services/update_invoicing_status_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {

    try {
        const { inv_id, status } = req.body;
        const user_profile_id = req.user.user_profile_id;
        if (!inv_id || status === undefined) {
            throw new ValidationError('inv_id and status are mandatory fields');
        }
        const updated_invoicing_data = await update_invoicing_status_service(
            inv_id,
            status,
            user_profile_id
        );
        const updated_invoicing_response = create_api_response(true, 'successfull', updated_invoicing_data);
        return res.status(http_status_code_enum.ok).json(updated_invoicing_response);
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_so_invoicing/controllers/fetch_invoicing_list_controller.js
const error_log=require('../../../../middelware/error_log');
const fetch_invoicing_list_service=require('../services/fetch_invoicing_list_service');
const create_api_response=require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
module.exports=async (req, res)=>{

    try{
        let invoicing_list=await fetch_invoicing_list_service();
        let invoicing_list_response=create_api_response(true,"successfull",invoicing_list);
        return res.status(http_status_code_enum.ok).json(invoicing_list_response);
    }
    catch(ex){
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false,ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_so_invoicing/controllers/update_invoicing_doc_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const update_invoicing_doc_service = require('../services/update_invoicing_doc_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {

    try {
        let {
            inv_id,
            doc_name,
            doc_url,
            doc_created_date,
            doc_value,
            doc_type,
            currency_type
        } = req.body;

        if (!inv_id || !doc_name || !doc_url || !doc_created_date || !doc_type) {
            throw new ValidationError('inv_id, doc_name, doc_url, doc_created_date and doc_type are mandatory fields')
        }
        doc_name = doc_name.trim();
        doc_url = doc_url.trim();

        const updated_invoicing = await update_invoicing_doc_service(
            inv_id,
            doc_name,
            doc_url,
            doc_created_date,
            doc_value,
            doc_type,
            currency_type
        );
        const updated_invoicing_response = create_api_response(true, 'successfull', updated_invoicing);
        return res.status(http_status_code_enum.ok).json(updated_invoicing_response);
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_so_invoicing/controllers/fetch_currency_enum_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const fetch_currency_enum_service = require('../services/fetch_currency_enum_service');

module.exports = async (req, res) => {
    try {
        let currency_enum = await fetch_currency_enum_service();
        let currency_enum_response = create_api_response(true, "successfull", currency_enum);
        return res.status(http_status_code_enum.ok).json(currency_enum_response);
    }
    catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_so_invoicing/services/update_invoicing_doc_service.js
const error_log = require('../../../../middelware/error_log');
const po_so_invoice_doc = require('../../../../database/models_v2/po_so_invoicing/po_so_invoice_doc');
// const currency_enum = require('../../../../enums/market_linkage/enums/currency_enum');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const update_invoicing_doc_service = (
    inv_id,
    doc_name,
    doc_url,
    doc_created_date,
    doc_value = null,
    doc_type,
    currency_type = null) => {
    return new Promise(async (resolve, reject) => {
        try {
            const invoice_docs = await po_so_invoice_doc.findAll({
                where: {
                    is_active: true,
                    doc_type
                }
            })
            if (invoice_docs.length) {
                const duplicated_doc_name_check = invoice_docs.find(doc => doc.doc_name === doc_name && doc.is_active && doc.po_so_invoice_id !== inv_id);
                if (duplicated_doc_name_check) { throw new ValidationError('document already exist with same name'); }

                const invoice_doc_exist = invoice_docs.find(doc => doc.po_so_invoice_id === inv_id);
                if (invoice_doc_exist) {
                    invoice_doc_exist.is_active = 0;
                    await invoice_doc_exist.save();
                }
            }

            await po_so_invoice_doc.build({
                doc_type,
                doc_url,
                doc_name,
                doc_value,
                currency_type,
                doc_created_date,
                po_so_invoice_id: inv_id,
                status: 0,
                is_active: true
            }).save();

            return resolve(true);
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}
module.exports = update_invoicing_doc_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_so_invoicing/services/fetch_invoicing_list_service.js
const error_log = require('../../../../middelware/error_log');
const po_so_invoice_model = require('../../../../database/models_v2/po_so_invoicing/po_so_invoice');
const po_so_invoice_doc_model = require('../../../../database/models_v2/po_so_invoicing/po_so_invoice_doc');
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const procurement_bill_components_model = require('../../../../database/models_v2/procurement_payments/procurement_bill_components');
const buyer_order_detail_model = require('../../../../database/models_v2/buyer_order/buyer_order_detail');
const buyer_order_delivery_info_model = require('../../../../database/models_v2/buyer_order/buyer_order_delivery_info');
const master_merchant_detail_model = require('../../../../database/models_v2/merchant/master_merchant_detail');
const buyer_detail_model = require('../../../../database/models_v2/buyer/buyer_detail');
const purchase_crop_bill_component_enum = require('../../../../enums/market_linkage/enums/purchase_crop_bill_component_enum');
const { procurementTypeToName } = require('../../../../enums/market_linkage/enums/procurementSources');
const order_delivery_detail = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const procurement_lots = require('../../../../database/models_v2/procurement_sample/procurement_lots');
const procurment_crop_sample = require('../../../../database/models_v2/procurement_sample/procurment_crop_sample');
const po_unloading_qty_detail = require('../../../../database/models_v2/po_unloading/po_unloading_qty_detail');
const { UnloadingQuantityType } = require('../../../../enums/market_linkage/enums/unloading_quantity_enum');
const po_unloading_docs = require('../../../../database/models_v2/po_unloading/po_unloading_docs');
const unloading_doc_type_enum = require('../../../../enums/market_linkage/enums/unloading_doc_type_enum');
const po_so_doc_type_enum = require('../../../../enums/market_linkage/enums/po_so_doc_type_enum');
const order_delivery_documents = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_documents');
const dispatch_doc_type = require('../../../../enums/market_linkage/enums/dispatch_doc_type');
const { POStatus } = require('../../../../enums/market_linkage/enums/po');
const invoiceSharingEnum = require('../../../../enums/market_linkage/enums/invoiceSharingEnum');
const identify_file_type_from_url = require('../../../../common_services/url_to_file_type/identify_file_type_from_url');
const Op = require('sequelize').Op;

const fetch_invoicing_list = () => {
    return new Promise(async (resolve, reject) => {
        try {

            let resp = [];
            let po_so_invoice_list = await po_so_invoice_model.findAll({
                where: {
                    is_active: true
                },
                include: [
                    {
                        model: purchase_crop_orders_model,
                        where: {
                            is_active: true
                        },
                        include: [
                            {
                                model: order_delivery_detail,
                                where: {
                                    is_active: true
                                },
                                include: {
                                    model: order_delivery_documents,
                                    where:{
                                        is_active: true,
                                        order_delivery_document_type_id: dispatch_doc_type['handover document']
                                    },
                                    required: true
                                },
                                required: false
                            },
                            {
                                model: master_merchant_detail_model,
                                where: {
                                    is_active: true
                                },
                                required: false
                            },
                            {
                                model: procurement_lots,
                                where: {
                                    is_active: true
                                },
                                include: [
                                    {
                                        model: procurment_crop_sample,
                                        where: {
                                            is_active: true
                                        }
                                    },
                                    {
                                        model: procurement_bill_components_model,
                                        where: {
                                            is_active: true,
                                            order_bill_component_id: purchase_crop_bill_component_enum.mandi_tax
                                        }
                                    }
                                ],
                                required: false
                            }
                        ],
                        required: true
                    },
                    {
                        model: buyer_order_detail_model,
                        where: {
                            is_active: true
                        },
                        include: [
                            {
                                model: buyer_detail_model,
                                where: {
                                    is_active: true
                                },
                                required: false
                            },
                            {
                                model: po_unloading_qty_detail,
                                where:{
                                    is_active: true,
                                    po_unloading_qty_type_id: UnloadingQuantityType.ACCEPTED_WEIGHT
                                },
                                required: false
                            },
                            {
                                model: po_unloading_docs,
                                where:{
                                    is_active: true,
                                    po_unloading_doc_type_id: unloading_doc_type_enum['UNLOADING RECEIPT']
                                },
                                required: false
                            },
                            {
                                model: buyer_order_delivery_info_model,
                                where: {
                                    is_active: true
                                },
                                as: 'delivery_info',
                                required: false
                            }
                        ],
                        required: true
                    },
                    {
                        model: po_so_invoice_doc_model,
                        where: {
                            is_active: true
                        },
                        required: false
                    }
                ],
                order: [['status', 'ASC'], ['createdAt', 'ASC']]
            });

            let sorted_response = po_so_invoice_list.filter((invoice) =>
                invoice.purchase_crop_order?.status === POStatus.READY_TO_DISPATCH
                && invoice.buyer_order_detail?.invoice_sharing === invoiceSharingEnum.beforeUnloading
            )

            sorted_response = sorted_response.concat(po_so_invoice_list.filter((invoice) =>
                invoice.purchase_crop_order?.status >= POStatus.UNLOADING
                && invoice.buyer_order_detail?.invoice_sharing === invoiceSharingEnum.afterUnloading
            ))

            sorted_response = sorted_response.concat(po_so_invoice_list.filter((invoice) => 
                !sorted_response.find((record)=> record.id === invoice.id)
            ))

            if (sorted_response.length > 0) {
                resp = await generate_response(sorted_response);
            }
            return resolve(resp);
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}
module.exports = fetch_invoicing_list;

async function generate_response(po_so_invoice_list) {
    let resp = [];
    try {
        for (let index = 0; index < po_so_invoice_list.length; index++) {
            const po_so_invoice = po_so_invoice_list[index];
            const is_mandi_tax_paid = po_so_invoice.purchase_crop_order?.procurement_lot?.procurment_crop_sample?.is_mandi_tax_paid;
            const po_so_invoice_doc = (po_so_invoice.po_so_invoice_docs || []).find(doc => doc.doc_type === po_so_doc_type_enum.INVOICE);
            const po_so_credit_note_doc = (po_so_invoice.po_so_invoice_docs || []).find(doc => doc.doc_type === po_so_doc_type_enum.CREDIT_NOTE);
            const po_so_debit_note_doc = (po_so_invoice.po_so_invoice_docs || []).find(doc => doc.doc_type === po_so_doc_type_enum.DEBIT_NOTE);
            const mandi_tax_value = po_so_invoice.purchase_crop_order?.procurement_lot?.procurement_order_bill_components;
            let _po_so_invoice = {
                id: po_so_invoice.id,
                po_id: po_so_invoice.purchase_crop_order?.id,
                po_number: po_so_invoice.purchase_crop_order?.farmart_id || '',
                so_Id: po_so_invoice.buyer_order_detail?.id || null,
                so_number: po_so_invoice.buyer_order_detail?.farmart_id || '',
                po_so_map_no: po_so_invoice.po_so_map_no || null,
                status_of_po: po_so_invoice.purchase_crop_order?.status || null,
                po_type: procurementTypeToName[po_so_invoice.purchase_crop_order?.master_merchant_detail?.profession_id || 0],
                buyer_name: po_so_invoice.buyer_order_detail?.buyer_detail?.legal_name || '',
                delivery_location: po_so_invoice.buyer_order_detail?.delivery_info?.address || '',
                status: po_so_invoice.status || 0,
                invoice_on_gross: po_so_invoice.buyer_order_detail?.is_invoice_on_gross || null,
                invoicing_stage: po_so_invoice.buyer_order_detail?.invoice_sharing || null,
                mandi_tax_paid_at_source: is_mandi_tax_paid ? ( mandi_tax_value?.[0]?.amount || null) : false,
                buyer_accepted_weight: po_so_invoice.buyer_order_detail?.po_unloading_qty_details?.[0]?.value || null,
                handover_weight: po_so_invoice.purchase_crop_order?.order_delivery_detail?.gross_weight || null,
                unloading_doc_url: po_so_invoice.buyer_order_detail?.po_unloading_docs?.[0]?.doc_url || '',
                po_so_invoice_doc_url: po_so_invoice_doc?.doc_url || '',
                po_so_invoice_doc_name: po_so_invoice_doc?.doc_name || '',
                po_so_invoice_doc_value: po_so_invoice_doc?.doc_value || null,
                po_so_invoice_doc_created_date: po_so_invoice_doc?.doc_created_date || '',
                po_so_invoice_file_type: await identify_file_type_from_url(po_so_invoice_doc?.doc_url) || '',
                po_so_credit_note_doc_url: po_so_credit_note_doc?.doc_url || '',
                po_so_credit_note_doc_name: po_so_credit_note_doc?.doc_name || '',
                po_so_credit_note_doc_value: po_so_credit_note_doc?.doc_value || null,
                po_so_credit_note_doc_created_date: po_so_credit_note_doc?.doc_created_date || '',
                po_so_credit_note_file_type: await identify_file_type_from_url(po_so_credit_note_doc?.doc_url) || '',
                po_so_debit_note_doc_url: po_so_debit_note_doc?.doc_url || '',
                po_so_debit_note_doc_name: po_so_debit_note_doc?.doc_name || '',
                po_so_debit_note_doc_value: po_so_debit_note_doc?.doc_value || null,
                po_so_debit_note_doc_created_date: po_so_debit_note_doc?.doc_created_date || '',
                po_so_debit_note_file_type: await identify_file_type_from_url(po_so_debit_note_doc?.doc_url) || '',
                handover_document_url: po_so_invoice.purchase_crop_order?.order_delivery_detail?.order_delivery_documents?.[0].doc_url || ''
            };
            resp.push(_po_so_invoice);
        }
        return resp;
    } catch (error) {
        error_log(error);
        return resp;
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_so_invoicing/services/fetch_currency_enum_service.js
const currency_enum = require('../../../../enums/market_linkage/enums/currency_enum');
const error_log = require('../../../../middelware/error_log');

const fetch_currency_enum_service = () => {
    return new Promise(async (resolve, reject) => {
        try {
            const currency_enum_response = Object.entries(currency_enum).map((currency)=>{
                return{
                    id: currency[1],
                    name: currency[0]
                }
            })
            resolve(currency_enum_response)
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}
module.exports = fetch_currency_enum_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/po_so_invoicing/services/update_invoicing_status_service.js
const error_log = require('../../../../middelware/error_log');
const po_so_invoice_model = require('../../../../database/models_v2/po_so_invoicing/po_so_invoice');
const add_invoice_status_log_service = require('../../../../data_abstraction_layer/payment/add_po_so_invoice_status_log');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const update_invoicing_status_service = (
    inv_id,
    status,
    user_profile_id
) => {
    return new Promise(async (resolve, reject) => {
        try {
            const invoice_doc = await po_so_invoice_model.findOne({
                where: {
                    is_active: true,
                    id: inv_id
                }
            })
            if (!invoice_doc) {
                throw new ValidationError('invalid invoicing id');
            }
            invoice_doc.status = status;
            await invoice_doc.save();
            await add_invoice_status_log_service({ user_profile_id, po_so_invoice_id: inv_id, status })
            // .catch(err => {
            //     error_log(err);
            // });
            return resolve(true);
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}
module.exports = update_invoicing_status_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/utilities/csv_to_json/convert_csv_to_json.js
const parser = require('papaparse');

module.exports = function (uploaded_file) {
    return new Promise((resolve, reject) => {
        resolve(parser.parse((uploaded_file.buffer).toString(), {header: true}).data);
    })
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/utilities/json_to_csv/convert_json_to_csv.js
const parser = require('papaparse');

module.exports = function (data) {
    return new Promise((resolve, reject) => {
        resolve(parser.unparse(data));
    })
} 


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/utilities/round_off/round_off_to_two_decimal.js

module.exports = function (value = 0) {
    var rounded_value = Math.round((value + Number.EPSILON) * 100) / 100;
    return rounded_value
} 


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/utilities/unitConversion/convertTonToKg.js
const { inKgs } = require("../../../../enums/market_linkage/enums/masterSampleEnum");

module.exports = function (params) {
    for (const key in params) {
      if(params[key]){
       params[key] = params[key] * inKgs.ton;
      }
    }
    return params;
} 


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/utilities/unitConversion/convertKgToGram.js
const { inKgs } = require("../../../../enums/market_linkage/enums/masterSampleEnum");

module.exports = function (params) {
    for (const key in params) {
      if(params[key]){
        params[key] = params[key] / inKgs.gram
      }
    }
    return params;
} 


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/utilities/unitConversion/convertKgToTon.js
const { inKgs } = require("../../../../enums/market_linkage/enums/masterSampleEnum");

module.exports = function (params) {
    for (const key in params) {
      if(params[key]){
        params[key] = params[key] / inKgs.ton;
      }
    }
    return params;
} 


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/utilities/unitConversion/convertGramToKg.js
const { inKgs } = require("../../../../enums/market_linkage/enums/masterSampleEnum");

module.exports = function (params) {
    for (const key in params) {
      if(params[key]){
        params[key] = params[key] * inKgs.gram;
      }
    }
    return params;
} 


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/utilities/swagger-config/index.js
const swagger_json = require("./swagger.json");
// const global_config = require("../../../../config/global_config");
// const { readdir } = require("fs").promises;
// const path = require("path");
const error_log = require("../../../../middelware/error_log");
const swagger_controller = require("../../../../common_services/swagger/swagger_controller");

module.exports = async (req, res) => {
  try {
    let url_slicing_number = -2
    swagger_controller(req, res, __dirname, swagger_json, url_slicing_number);
    // let directory_str = __dirname;
    // directory_str = directory_str.split(path.sep).slice(0, -2).join(path.sep);
    // let directories = await readdir(directory_str, { withFileTypes: true });
    // directories = directories.filter((e) => {
    //   if (e.name.indexOf(".") < 0) return true;
    //   return false;
    // });
    // let swagger_tags = [];
    // let swagger_paths = {};
    // for (let index = 0; index < directories.length; index++) {
    //   const entity_dir_path = [directory_str, directories[index].name].join(
    //     path.sep
    //   );
    //   const entity_dirs = await readdir(entity_dir_path, { withFileTypes: true });
    //   if (entity_dirs.map((e) => e.name).indexOf("swagger") > 0) {
    //     const swagger_def = require(`${entity_dir_path}${path.sep}swagger`);
    //     swagger_tags = [...swagger_tags, swagger_def.tags];
    //     Object.keys(swagger_def.paths).forEach((ele) => {
    //       swagger_paths[`/${swagger_def.tags.name}${ele}`] =
    //         swagger_def.paths[ele];
    //     });
    //   }
    // }
    // const host = req.get("host") || "localhost:3000";
    // swagger_json["host"] = host;
    // swagger_json["tags"] = [...swagger_json["tags"], ...swagger_tags];
    // swagger_json.paths = { ...swagger_json.paths, ...swagger_paths };
    // res.send(swagger_json);
  }
  catch (err) {
    error_log(err);
    res.status(400).json({
      message: "swagger error"
    });
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/users/swagger/index.js
module.exports = {
    tags: {
        name: 'users'
    },
    paths: {
        '/designations': {
            get: {
                tags: ['users'],
                summary: 'get all designations',
                description: '',
                operationId: 'get_all_designations',
                security: [{ Bearer: ['read'] }],
                parameters: [],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/fPrxO1cd41PZmKFQ': {
            post: {
                tags: ['users'],
                summary: 'get token guest user',
                description: '',
                operationId: 'fPrxO1cd41PZmKFQ',
                security: [],
                parameters: [
                    {
                        in: 'formData',
                        name: 'uuid',
                        description: '',
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: false
            }
        },
        '/user': {
            get: {
                tags: ['users'],
                summary: 'get all users',
                description: '',
                operationId: 'get_all_users',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'type',
                        description: 'ALL, PA, RPM',
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            },
            post: {
                tags: ['users'],
                summary: 'add a user',
                description: '',
                operationId: 'add_user',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'name',
                        description: '',
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'mobile_number',
                        description: '',
                        type: 'integer'
                    },
                    {
                        in: 'formData',
                        name: 'employee_id',
                        description: '',
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'designation',
                        description: '',
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'reports_to',
                        description: 'mobile number',
                        type: 'integer'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/get_all_associates': {
            get: {
                tags: ['users'],
                summary: 'get_all_associates',
                description: '',
                operationId: 'get_all_associates',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'userId',
                        description: '',
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/register_user': {
            post: {
                tags: [
                    'users'
                ],
                summary: 'user regestration api',
                description: 'add details user related and register the user',
                operationId: 'register_user',
                security: [
                    {
                        Bearer: [
                            'read'
                        ]
                    }
                ],
                parameters: [
                    {
                        in: 'formData',
                        name: 'name',
                        description: '',
                        required: true,
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'email',
                        description: '',
                        required: true,
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'mobile_number',
                        description: '',
                        required: true,
                        type: 'integer'
                    },
                    {
                        in: 'formData',
                        name: 'address',
                        description: '',
                        required: true,
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'agent_code',
                        description: '',
                        required: true,
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'user_role_id',
                        description: '1->Super_Admin\n2->Op_Manager\n3->Call_Center_Agent\n4->Finance_Manager \n5->Tiktok_Agent\n6->Merchant\n7->accounts\n8->digital_marketing\n9->District_Manager\n10->Analytics_user\n11-> Market linkage user',
                        required: true,
                        type: 'integer'
                    },
                    {
                        in: 'formData',
                        name: 'password',
                        description: '',
                        required: true,
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'profile_image_url',
                        description: 'url of profile img',
                        required: false,
                        type: 'string'
                    }
                ],
                responses: {
                    405: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/disable_user': {
            post: {
                tags: [
                    'users'
                ],
                summary: 'for deactivating the user',
                description: 'deactivated the user on provided user id',
                operationId: 'disable_user',
                security: [
                    {
                        Bearer: [
                            'read'
                        ]
                    }
                ],
                parameters: [
                    {
                        in: 'formData',
                        name: 'user_id',
                        description: 'user_id',
                        required: true,
                        type: 'string'
                    }
                ],
                responses: {
                    405: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        }
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/users/index.js
const router = require('express').Router();
const authorize = require('../../../middelware/authorized_routes');
const user_roles_enum = require('../../../entities/metadata/enums/user_roles');
// const get_all_designations_controller = require('./controllers/get_all_designations_controller');
// const get_all_users_controller = require('./controllers/get_all_users_controller');
// const add_user_controller = require('./controllers/add_user_controller');
const get_all_associates_controller = require('./controllers/get_all_associates_controller');
// const add_user_device_info_controller = require('./controllers/add_user_device_info_controller.js');
const register_user = require('./controllers/register_user');
const disable_user = require('./controllers/disable_user');
const generate_guest_token = require('./controllers/generate_guest_token.js');
/** @deprecated */
// router.get("/designations", get_all_designations_controller);
// router.get("/user", get_all_users_controller);
// router.post("/user", add_user_controller);
// router.post("/addUserDeviceInfo", add_user_device_info_controller);
router.get('/get_all_associates', get_all_associates_controller);
router.post('/register_user', authorize([user_roles_enum.Super_Admin, user_roles_enum.Op_Manager]), register_user);
router.post('/disable_user', authorize([user_roles_enum.Super_Admin, user_roles_enum.Op_Manager]), disable_user);
router.post('/fPrxO1cd41PZmKFQ', generate_guest_token);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/users/_services/get_all_juniors_service.js
const user_model = require("../../../../database/mongoose/market_linkage_db/user.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
const user_profile = require("../../../../database/models/user_profile");

module.exports = function get_all_juniors_service(userId, loggedInUserId) {
  return new Promise(async (resolve, reject)=>{
  try {
    const query = {
      reports_to: userId || loggedInUserId,
      is_active: 1
    };

    const users = await user_profile.findAll({
      where: query,
      include: [
        {
          model: user_profile,
          as: "user_profile_created_by",
          required: false
        },
        {
          model: user_profile,
          as: "reports",
          required: false
        }
      ]
    });

    const response_data = users.map((user) => {
      return {
        "_id": user.id,
        "name": user.name,
        "mobileNumber": user.mobile_number,
        "employee_id": user.employee_id,
        "designation": user.user_role_id,
        "createdBy": user.user_profile_created_by?{
          "name": user.user_profile_created_by.name,
          "id": user.user_profile_created_by.id
        }: null,
        "reportsTo": user.reports?{
          "id": user.reports.id,
          "name": user.reports.name
        }:null,
        "createdAt": user.createdAt,
        "updatedAt": user.updatedAt
      }
    })

    return resolve({ status: HTTP_status_codes.ok, data: response_data });
  } catch (err) {
    app_log_service({type: type.error, err})
    return reject({
      status: HTTP_status_codes.internalServerError,
      data: {
        message: "Something bad happened",
        error: err.message,
      },
    });
  }
})
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/users/_services/addUserDeviceInfoService.js
const deviceInfoModel = require("../../../../database/mongoose/market_linkage_db/userDeviceInfo");
const appLogService = require("../../../../common_services/market_linkage/logging/app_log_service");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");


const addUserDeviceInfoService = (deviceData, userId) => {
    return new Promise(async (resolve, reject) => {
        try {
            const userExist = await deviceInfoModel.findOne({ userId: userId })
            if (!userExist) {
                deviceData.userId = userId;
                const addedDeviceInfo = await deviceInfoModel.create(deviceData);
                if (!addedDeviceInfo) {
                    reject({ message: "data not updated" })
                }
                resolve({ "addedDeviceData": addedDeviceInfo });
            }
            await deviceInfoModel.updateOne({ userId: userId }, deviceData);
            const updatedUserInfo = await deviceInfoModel.find({ userId: userId })
            resolve({ "addedDeviceData": updatedUserInfo });
        } catch (err) {
            appLogService({ type: type.error, err });
            reject({ message: err.message });

        }
    });
}

module.exports = addUserDeviceInfoService;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/users/_services/get_user_service.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
const user_profile = require("../../../../database/models/user_profile");

module.exports = async function (mobileNumber) {
  try {
    const user = await user_profile.findOne({
      where: {
        mobile_number: mobileNumber,
        is_active: 1
      }
    });

    if (user) {
      return { status: HTTP_status_codes.ok, data: user };
    }

    return {
      status: HTTP_status_codes.badRequest,
      data: { message: "User not found", error: "user not found" },
    };
  } catch (err) {
    app_log_service({ type: type.error, err })
    return {
      status: HTTP_status_codes.internalServerError,
      message: "Something bad happened",
      error: err.message,
    };
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/users/_services/add_user_service.js
const user_model = require("../../../../database/mongoose/market_linkage_db/user.model");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
const register_user_service = require("../../../../entities/users/service/register_user");
const user_role_enum = require("../../../../enums/user_profile/user_role");
const user_profile_model = require("../../../../database/models/user_profile");
const error_log = require("../../../../middelware/error_log");
const bcrypt = require('bcrypt');
const users_login = require("../../../../database/models/user_login");
const get_all_users_service = require("./get_all_users_service");

module.exports = async (newObj) => {
  return new Promise(async (resolve, reject) => {
    try {
      let user_exist = await user_profile_model.findOne({
        where: {
          mobile_number: newObj.mobileNumber,
          is_active: 1
        }
      })
      if (user_exist) {
        throw new Error("user already exist")
      }
      let [created_by_user, reports_to_user] = await Promise.all([
        user_profile_model.findOne({
          where: {
            id: newObj.createdById || null,
            is_active: 1
          }
        }),
        user_profile_model.findOne({
          where: {
            id: newObj.reportsToId || null,
            is_active: 1
          }
        })
      ]);
      if (!created_by_user) {
        throw new Error("created_by user wrong value");
      }
      if (!reports_to_user) {
        throw new Error("reports_to_user user wrong value");
      }

      const user_profile = {
        name: newObj.name,
        mobile_number: newObj.mobileNumber,
        agent_code: newObj.mobileNumber,
        employee_id: newObj.employee_id,
        is_active: 1,
        user_role_id: newObj.designation,
        user_profile_created_by_id: created_by_user.id,
        reports_to: reports_to_user.id
      }
      const user_login = {
        mobile_number: newObj.mobileNumber,
        is_active: 1,
        password: "123456",
        password_hash: ''
      }

      let added_user_profile = await user_profile_model.build(user_profile).save();
      if (added_user_profile) {
        let passwordHash = bcrypt.hashSync(user_login.password, bcrypt.genSaltSync(10));
        user_login.password_hash = passwordHash;
        user_login.user_id = added_user_profile.id;
        await users_login.build(user_login).save();
      }
      const user_reponse = await get_all_users_service({user_id:added_user_profile.id})
      resolve(user_reponse.data);
    } catch (err) {
      app_log_service({ type: type.error, err })
      reject({ message: err.message });
    }
  });
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/users/_services/get_all_desinations_service.js
const user_role = require("../../../../enums/user_profile/user_role");

module.exports = async function () {
  const ml_roles = [
    user_role.PROCUREMENT_ASSOCIATE,
    user_role.REGIONAL_PROCUREMENT_MANAGER,
    user_role.STATE_HEAD_PROCUREMENT,
    user_role.VP_PROCUREMENT,
    user_role.SALES_VP,
    user_role.STATE_HEAD_SALES,
    user_role.REGIONAL_MANAGER_SALES,
    user_role.SALES_ASSOCIATE,
    user_role.FINANCE_CONTROLLER,
    user_role.ACCOUNT_PAYABLES,
    user_role.MIS_Executive_Procurement,
    user_role.CPO,
    user_role.CFO,
    user_role.MIS_Executive_Sales,
    user_role.EXECUTIVE_SALES,
    user_role.ASSISTANT_MANAGER_SALES,
    user_role.ACCOUNT_RECEIVABLES,
    user_role.COMPLIANCE_EXECUTIVE
  ];
  const ml_users = Object.fromEntries(Object.entries(user_role).filter(([key, value]) => ml_roles.find(role => role === value)));
  return { status: 200, data: ml_users };
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/users/_services/get_all_users_service.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
const user_profile = require("../../../../database/models/user_profile");
const user_role = require("../../../../enums/user_profile/user_role");
const Op = require('sequelize').Op;

module.exports = async (filters) => {
  try {
    const { type, user_id } = filters;

    const query = {
      id: user_id,
      user_role_id: type,
      is_active: 1
    };

    if (type === "ALL" || !type) {
      query.user_role_id = {[Op.in]: [
        user_role.PROCUREMENT_ASSOCIATE,
        user_role.REGIONAL_PROCUREMENT_MANAGER,
        user_role.STATE_HEAD_PROCUREMENT,
        user_role.VP_PROCUREMENT,
        user_role.SALES_VP,
        user_role.STATE_HEAD_SALES,
        user_role.REGIONAL_MANAGER_SALES,
        user_role.SALES_ASSOCIATE,
        user_role.FINANCE_CONTROLLER,
        user_role.ACCOUNT_PAYABLES,
        user_role.MIS_Executive_Procurement,
        user_role.CPO,
        user_role.CFO,
        user_role.MIS_Executive_Sales,
        user_role.EXECUTIVE_SALES,
        user_role.ASSISTANT_MANAGER_SALES,
        user_role.ACCOUNT_RECEIVABLES
      ]};
    }

    if(!user_id){
      delete query.id;
    }

    const users = await user_profile.findAll({
      where: query,
      include: [
        {
          model: user_profile,
          as: "user_profile_created_by",
          required: false
        },
        {
          model: user_profile,
          as: "reports",
          required: false
        }
      ]
    });

    const response_data = users.map((user) => {
      return {
        "_id": user.id,
        "name": user.name,
        "mobileNumber": user.mobile_number,
        "employee_id": user.employee_id,
        "designation": user.user_role_id,
        "createdBy": user.user_profile_created_by?{
          "name": user.user_profile_created_by.name,
          "id": user.user_profile_created_by.id
        }: null,
        "reportsTo": user.reports?{
          "id": user.reports.id,
          "name": user.reports.name
        }:null,
        "createdAt": user.createdAt,
        "updatedAt": user.updatedAt
      }
    })

    return { status: HTTP_status_codes.ok, data: response_data || [] };
  } catch (err) {
    app_log_service({ type: type.error, err })
    return {
      status: HTTP_status_codes.internalServerError,
      data: {
        message: "Something bad happened",
        error: err.message,
      },
    };
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/users/controllers/disable_user.js
const error_log = require('../../../../middelware/error_log');
const user_fetch_active_deactive_service=require('../../../../entities/users/service/user_fetch_active_deactive_sevice');

module.exports=async (req,res)=>{

  const user_id = req.body.user_id;
  let user_profile_id =req.user.user_profile_id;
  try{
    if(!user_id)
    {
      res.json({
        status:false,
        message:"Please provide user_id"
      });
    }
    else{
      let result=await user_fetch_active_deactive_service.deactivate_user(user_id,user_profile_id);
      res.json({
        status:true,
        message:"Success",
        data:""
      });
    }
  }
  catch(ex){
    error_log(ex);
    res.json({
      status:false,
      message:ex.message
    });
  }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/users/controllers/get_all_associates_controller.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
const get_all_juniors_service = require("../_services/get_all_juniors_service");

module.exports = async function (req, res) {
  try {
    const { userId } = req.query;
    const { user_profile_id: loggedInUser } = req.user;

    const result = await get_all_juniors_service(userId, loggedInUser);
    res.set("Cache-control", "private, max-age=300");
    res.status(result.status).json(result.data);
  } catch (error) {
    app_log_service({type: type.error, err:error})
    res
      .status(HTTP_status_codes.internalServerError)
      .json({ message: "internal server error", error: error.message });
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/users/controllers/register_user.js
const register_user = require('../../../../entities/users/service/register_user');
const error_log = require('../../../../middelware/error_log');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        /** get params form the req */
        const name = req.body.name;
        const email = req.body.email;
        const mobile_number = +req.body.mobile_number;
        if (Number.isNaN(mobile_number)) {
            throw new ValidationError('Invalid value in mobile_number');
        }
        const address = req.body.address;
        const agent_code = req.body.agent_code;
        const user_role_id = +req.body.user_role_id;
        const password = req.body.password;

        const user_profile_id = req.user.user_profile_id;
        const profile_image_url = req.body.profile_image_url;

        if (name && mobile_number && email && address && user_role_id && password) {
            const is_active = true;
            const user_profile = {
                name,
                email,
                mobile_number,
                address,
                agent_code,
                is_active,
                user_role_id,
                user_profile_created_by_id: user_profile_id,
                profile_image_url
            }
            const user_login = {
                email,
                mobile_number,
                is_active,
                password,
                password_hash: ''
            }
            const result = await register_user(user_profile, user_login);
            res.json({
                status: true,
                message: result.message
            });
        } else {
            res.json({
                status: false,
                message: 'please provide all of these name && mobile_number && email && address && agent_code && user_role_id && password',
                error_code: '8-1-0'

            })
        }
    } catch (ex) {
        error_log(ex);
        res.json({
            status: false,
            message: ex.message,
            error_code: '8-1-1'
        })
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/users/controllers/get_all_designations_controller.js
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
const get_all_desinations_service = require("../_services/get_all_desinations_service");

module.exports = async function (req, res) {
  try {
    const result = await get_all_desinations_service();
    res.set("Cache-control", "private, max-age=300");
    res.status(result.status).json(result.data);
  } catch (error) {
    app_log_service({type: type.error, err:error})
    res
      .status(500)
      .json({ message: "internal server error", error: error.message });
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/users/controllers/add_user_device_info_controller.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const appLogService = require("../../../../common_services/market_linkage/logging/app_log_service");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const addUserDeviceInfoService = require("../_services/addUserDeviceInfoService.js");

const updateUserDeviceInfoController = async (req, res) => {
    try {
        const {
            uploadSpeed,
            batteryMah,
            simOperator,
            screenInch,
            storage,
            androidId,
            deviceModel,
            cameraInfo,
            applicationId,
            appVersionCode,
            sensor,
            deviceBrand,
            ram,
            appVersionName,
            downloadSpeed,
            screenDPI,
            androidVersion,
            isDebug,
        } = req.body;
        const userId = req.user.user_profile_id;

        const addDeviceInfoResult = await addUserDeviceInfoService({
            uploadSpeed,
            batteryMah,
            simOperator,
            screenInch,
            storage,
            androidId,
            deviceModel,
            cameraInfo,
            applicationId,
            appVersionCode,
            sensor,
            deviceBrand,
            ram,
            appVersionName,
            downloadSpeed,
            screenDPI,
            androidVersion,
            isDebug,
        }, userId);
        return res.status(HTTP_status_codes.ok).json(addDeviceInfoResult);
    } catch (err) {
        appLogService({ type: type.error, err });
        return res.status(HTTP_status_codes.badRequest).json({
            message: "unable to add user device info",
            error: err.message,
        });
    }
};

module.exports = updateUserDeviceInfoController;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/users/controllers/generate_guest_token.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const generate_guest_token_service = require('../services/generate_guest_token_service.js');
const { GUEST_TOKEN_KEY } = require('../../../../constants/config');
const decrypt_service = require('../../../../utilities/decrypt');
// const encrypt_service = require('../../../../utilities/encrypt');
const send_suspicious_ip_alert = require('../../../../common_services/message/send_suspicious_ip_alert');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        let error_message = ''
        let uuid = req.body.uuid;
        // console.log(await encrypt_service(uuid, GUEST_TOKEN_KEY));
        const ip = req.headers['x-forwarded-for'] || req.ip;
        if (!uuid) { error_message = 'uuid is a mandatory param'; }
        if (error_message) {
            send_suspicious_ip_alert(ip, 'uuid was not passed')
                .catch(err => error_log(err));
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false, error_message));
        }
        try {
            uuid = await extract_uuid(uuid);
            if (!uuid) { throw new ValidationError('uuid was wrongly encrypted') }
            const { token, message } = await generate_guest_token_service(uuid, ip);
            return res.status(http_status_code_enum.ok).json(create_api_response(true, message, { token }));
        } catch (err) {
            error_message = 'uuid was wrongly encrypted';
            // send_suspicious_ip_alert(ip, "uuid was wrongly encrypted")
            //     .catch(err => error_log(err));
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false, error_message));
        }
    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}

const extract_uuid = async (uuid_hash) => {
    try {
        const uuid_checksum = await decrypt_service(uuid_hash, GUEST_TOKEN_KEY);
        const today = new Date();
        if (+uuid_checksum.slice(0, 2) === today.getDate() && +uuid_checksum.slice(-2) === today.getMonth()) {
            return uuid_checksum.slice(2, -2);
        }
        return null;
    } catch (err) {
        error_log(err);
        throw err;
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/users/controllers/add_user_controller.js
const HTTPStatusCode = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const { type } = require('../../../../enums/market_linkage/enums/appLogEnum');
const app_log_service = require('../../../../common_services/market_linkage/logging/app_log_service');
const add_user_service = require('../_services/add_user_service');
const get_user_service = require('../_services/get_user_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const add_user_controller = async (req, res) => {
    try {
        const { name, mobile_number, employee_id, designation, reports_to } =
      req.body;

        const { user_profile_id: createdById } = req.user;

        if (!createdById) {
            throw new ValidationError('created by details missing');
        }

        if (!mobile_number) {
            throw new ValidationError('mobile_number is Missing');
        }

        if (mobile_number.toString().length !== 10) {
            throw new ValidationError('mobile_number should be 10 digits');
        }

        if (!employee_id) {
            throw new ValidationError('employee_id is Missing');
        }
        if (!designation) {
            throw new ValidationError('designation is Missing');
        }

        if (!reports_to) {
            throw new ValidationError('reports_to is not an mobile number');
        }

        /** @refactor
     * bad practice buisness logic should not be in controller
     * it should service and from there there should a DAL
     */

        const reportingManagerResult = await get_user_service(reports_to);

        if (reportingManagerResult.status === HTTPStatusCode.ok) {
            const reportingManager = reportingManagerResult.data;

            const userData = {
                name,
                mobileNumber: mobile_number,
                employee_id,
                designation,
                reportsToId: reportingManager.id,
                createdById
            };

            const createdUser = await add_user_service(userData);
            return res.status(HTTPStatusCode.ok).json(createdUser);
        }

        return res
            .status(HTTPStatusCode.badRequest)
            .json({ message: 'Reporting manager not found' });
    } catch (e) {
        app_log_service({ type: type.error, err: e })
        return res.status(HTTPStatusCode.badRequest).json({
            message: e.message
        });
    }
};

module.exports = add_user_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/users/controllers/get_all_users_controller.js
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
const get_all_users_service = require("../_services/get_all_users_service");

module.exports = async function (req, res) {
  try {
    const { type } = req.query;

    const result = await get_all_users_service({ type });
    // res.set("Cache-control", "private, max-age=300");
    res.status(result.status).json(result.data);
  } catch (error) {
    app_log_service({type: type.error, err:error})
    res
      .status(500)
      .json({ message: "internal server error", error: error.message });
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/users/services/get_all_juniors_service.js
const user_model = require("../../../../database/mongoose/market_linkage_db/user.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");

module.exports = function get_all_juniors_service(userId, loggedInUserId) {
  return new Promise(async (resolve, reject)=>{
  try {
    const query = {
      "reportsTo.id": userId || loggedInUserId,
    };

    const users = await user_model.find(query);

    return resolve({ status: HTTP_status_codes.ok, data: users });
  } catch (err) {
    app_log_service({type: type.error, err})
    return reject({
      status: HTTP_status_codes.internalServerError,
      data: {
        message: "Something bad happened",
        error: err.message,
      },
    });
  }
})
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/users/services/addUserDeviceInfoService.js
const deviceInfoModel = require("../../../../database/mongoose/market_linkage_db/userDeviceInfo");
const appLogService = require("../../../../common_services/market_linkage/logging/app_log_service");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");


const addUserDeviceInfoService = (deviceData, userId) => {
    return new Promise(async (resolve, reject) => {
        try {
            const userExist = await deviceInfoModel.findOne({ userId: userId })
            if (!userExist) {
                deviceData.userId = userId;
                const addedDeviceInfo = await deviceInfoModel.create(deviceData);
                if (!addedDeviceInfo) {
                    reject({ message: "data not updated" })
                }
                resolve({ "addedDeviceData": addedDeviceInfo });
            }
            await deviceInfoModel.updateOne({ userId: userId }, deviceData);
            const updatedUserInfo = await deviceInfoModel.find({ userId: userId })
            resolve({ "addedDeviceData": updatedUserInfo });
        } catch (err) {
            appLogService({ type: type.error, err });
            reject({ message: err.message });

        }
    });
}

module.exports = addUserDeviceInfoService;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/users/services/get_user_service.js
const user_model = require("../../../../database/mongoose/market_linkage_db/user.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");

module.exports = async function (mobileNumber) {
  try {
    const user = await user_model.findOne({ mobileNumber });

    if (user) {
      return { status: HTTP_status_codes.ok, data: user };
    }

    return {
      status: HTTP_status_codes.badRequest,
      data: { message: "User not found", error: "user not found" },
    };
  } catch (err) {
    app_log_service({type: type.error, err})
    return {
      status: HTTP_status_codes.internalServerError,
      message: "Something bad happened",
      error: err.message,
    };
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/users/services/generate_guest_token_service.js
const error_log = require('../../../../middelware/error_log');
const guest_user_model = require('../../../../database/models_v2/user/guest_user');
const user_role_enum = require('../../../../enums/user_profile/user_role');
const { generate_encrypted_jwt } = require('../../../../common_services/auth/auth_service')
const global_config = require('../../../../config/global_config');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (uuid, ip) => {
    try {
        // if uuid is null, block this ip
        const [guest_user, created] = await guest_user_model.findOrCreate({
            where: {
                uuid
            },
            defaults: { ip, is_active: 1 }
        });
        if (guest_user.is_active === 0) { throw new ValidationError('user deactivated due to suspicious activity, please contact FarMart'); }
        const token_obj = {
            uuid,
            ip,
            user_profile_id: guest_user.id,
            user_role_id: user_role_enum.Guest_user_b2c_app
        }
        const expiresIn = '12h';
        const token = await generate_encrypted_jwt(token_obj, global_config.jwt_secret, expiresIn);
        return {
            token, message: created ? 'user created' : 'user found'
        }
    } catch (err) {
        error_log(err);
        return { token: null, message: err.message }
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/users/services/add_user_service.js
const user_model = require('../../../../database/mongoose/market_linkage_db/user.model');
const { type } = require('../../../../enums/market_linkage/enums/appLogEnum');
const app_log_service = require('../../../../common_services/market_linkage/logging/app_log_service');
const register_user_service = require('../../../../entities/users/service/register_user');
const user_role_enum = require('../../../../enums/user_profile/user_role');
const user_role_mongo_enum = require('../../../../enums/market_linkage/enums/user').designations;
const user_profile_model = require('../../../../database/models/user_profile');
const error_log = require('../../../../middelware/error_log');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (newObj) => {
    return new Promise(async (resolve, reject) => {
        try {
            const user_added = await user_model.create(newObj);
            sync_users(newObj).catch(err => {
                error_log(err);
            })
            resolve(user_added);
        } catch (err) {
            app_log_service({ type: type.error, err })
            reject({ message: err.message });
        }
    });
};

const sync_users = async (newObj) => {
    try {
        let user_role_id;
        Object.keys(user_role_mongo_enum).forEach(ele => {
            if (user_role_mongo_enum[ele] === newObj.designation) { user_role_id = user_role_enum[ele]; }
        });
        const created_by_user = await user_model.findById(newObj.createdBy.id);
        if (!created_by_user) {
            throw new ValidationError('created_by user wrong value');
        }
        const created_by_user_profile = await user_profile_model.findOne({
            where: {
                mobile_number: created_by_user.mobileNumber,
                is_active: 1
            }
        });

        const reports_to_user = await user_model.findById(newObj.reportsTo.id);
        if (!reports_to_user) {
            throw new ValidationError('reports_to_user user wrong value');
        }
        const reports_to_user_profile = await user_profile_model.findOne({
            where: {
                mobile_number: reports_to_user.mobileNumber,
                is_active: 1
            }
        });
        const user_profile = {
            name: newObj.name,
            mobile_number: newObj.mobileNumber,
            agent_code: newObj.mobileNumber,
            is_active: 1,
            user_role_id,
            user_profile_created_by_id: created_by_user_profile.id,
            reports_to: reports_to_user_profile.id
        }
        const user_login = {
            mobile_number: newObj.mobileNumber,
            is_active: 1,
            password: '123456',
            password_hash: ''
        }
        await register_user_service(user_profile, user_login);
    } catch (err) {
        error_log(err);
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/users/services/get_all_desinations_service.js
const user_enums = require("../../../../enums/market_linkage/enums/user");

module.exports = async function () {
  return { status: 200, data: user_enums.designations };
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/users/services/get_all_users_service.js
const user_model = require("../../../../database/mongoose/market_linkage_db/user.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");

const { designationFilterMapping } = require("../../../../enums/market_linkage/constants/users");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");

module.exports = async (filters) => {
  try {
    const { type } = filters;

    const query = {
      designation: designationFilterMapping[type],
    };

    /** @refactor
     *  filteration by type can be improved
     *  in this section facing problem, want to get ENUM string from
     *  front end and want to match it with actual ENum
     *  if invalid or not passed then should throw error
     *  approcah is messy in this one
     */
    if (query.designation === undefined) {
      return {
        status: HTTP_status_codes.badRequest,
        data: {
          message: "Invalid type",
          error: `${type} designation doent exist`,
        },
      };
    }

    if (query.designation === designationFilterMapping.ALL) {
      delete query.designation;
    }

    const users = await user_model.find(query);

    return { status: HTTP_status_codes.ok, data: users || [] };
  } catch (err) {
    app_log_service({type: type.error, err})
    return {
      status: HTTP_status_codes.internalServerError,
      data: {
        message: "Something bad happened",
        error: err.message,
      },
    };
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/multimedia/swagger/index.js
module.exports = {
    tags: {
        name: "multimedia",
    },
    paths: {
        "/image": {
            post: {
                tags: ["multimedia"],
                summary: "upload image",
                description: "",
                operationId: "image_upload_stream",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        "in": "formData",
                        "name": "file",
                        "type": "file",
                        description: "key name should be file"
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    },
                },
            },
        },
    },
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/multimedia/index.js
const router = require("express").Router();
const upload_middleware = require("../../../middelware/upload_file_multer");

//controller
const image_upload = require("./controllers/image_upload_controller");
const document_upload = require("./controllers/document_upload");

//routes
router.post("/image", upload_middleware, image_upload);

/**
 * this api is developed to upload multiple type of
 * documents like pdf, images, audio etc.
 * its multipurpose api which will only accept
 * formats specified in the controller file.
 */
router.post("/document", upload_middleware, document_upload);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/multimedia/controllers/document_upload.js
const error_logs = require('../../../../middelware/error_log');
const file_upload = require('../../../../entities_v2/global/services/file_upload');

const white_listed_file_types = ['image', 'pdf'];
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const file = req.file;
        if (!file) {
            throw new ValidationError('file is a mandatory field');
        }

        const isFileAllowed = white_listed_file_types.filter(function (fileType) {
            return file.mimetype.includes(fileType);
        });

        if (isFileAllowed.length === 0) {
            throw new ValidationError(`only ${white_listed_file_types.toString()} allowed`);
        }

        const data = await file_upload(file, isFileAllowed[0]);
        res.status(200).json({
            message: 'success',
            data,
            status: true
        });
    } catch (ex) {
        error_logs(ex);
        res.status(400).json({
            status: false,
            message: ex.message
        });
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/multimedia/controllers/image_upload_controller.js
const error_logs = require('../../../../middelware/error_log');
const file_upload = require('../../../../entities_v2/global/services/file_upload');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const image = req.file;
        if (!image) {
            throw new ValidationError('file is a mandatory field');
        }

        if (image.mimetype.slice(0, 5) !== 'image') {
            throw new ValidationError('only image files allowed')
        }
        const data = await file_upload(image, 'image');
        res.status(200).json({
            message: 'success',
            data,
            status: true
        })
    } catch (ex) {
        error_logs(ex)
        res.status(400).json({
            status: false,
            message: ex.message
        })
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/app_banner/swagger/index.js
module.exports = {
    tags: {
      name: "app_banner",
    },
    paths: {
      "/": {
        get: {
          tags: ["app_banner"],
          summary: "get list of app_banners on the basis of type and state, dist_id",
          description: "get list of app_banners on the basis of type and state, dist_id",
          operationId: "get_app_banner",
          security: [{ Bearer: ["read"] }],
          parameters: [
            {
              in: "query",
              name: "state_id",
              description: "state_id",
              required: true,
              type: "number",
            },
            {
                in: "query",
                name: "district_id",
                description: "district_id",
                required: true,
                type: "number",
            },
            {
                in: "query",
                name: "banner_type_id",
                description: "banner_type_id",
                required: true,
                type: "number",
            },
            {
                in: "query",
                name: "page_no",
                description: "page_no",
                required: false,
                type: "number",
            },
            {
                in: "query",
                name: "limit",
                description: "limit",
                required: false,
                type: "number",
            }
          ],
          responses: {
            400: {
              description: "Invalid input",
            },
            200: {
              description: "success",
            },
          },
        },
      },
    },
  };
  


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/app_banner/index.js
const router = require("express").Router();
const authorize = require("../../../middelware/authorized_routes");
const user_roles_enum = require("../../../enums/user_profile/user_role");

const fetch_app_banner_controller = require("./controllers/fetch_app_banner_controller");

router.get("/", authorize([user_roles_enum.Merchant]), fetch_app_banner_controller);
module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/app_banner/controllers/fetch_app_banner_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const fetch_app_banner_service = require('../services/fetch_app_banner_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const page_no = +req.query?.page_no || 1;
        const limit = +req.query?.limit || 10;
        const state_id = +req.query.state_id;
        const district_id = +req.query.district_id;
        const banner_type_id = +req.query.banner_type_id;

        if (!state_id || !district_id || !banner_type_id) {
            throw new ValidationError('state_id, district_id and banner_type_id are mandatory parameters !');
        }

        const app_banner_detail = await fetch_app_banner_service(page_no, limit, state_id, district_id, banner_type_id);

        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'successfull', app_banner_detail));
    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/app_banner/services/fetch_app_banner_service.js
const error_log = require("../../../../middelware/error_log");
const get_app_banner_ids_by_state_district = require("../../../../data_abstraction_layer/app_banner/get_app_banner_ids_by_state_dist");
const get_app_banners = require("../../../../data_abstraction_layer/app_banner/get_app_banners");

module.exports = async (page_no, limit, state_id, district_id, banner_type_id) => {
    try {
        let app_banner_ids = await get_app_banner_ids_by_state_district(page_no, limit, state_id, district_id);
        if (!app_banner_ids?.length)
            return [];
        let app_banner_attributes = ["id", "app_banner_link", "action_link", "name"];
        let app_banners = await get_app_banners(app_banner_ids, banner_type_id, app_banner_attributes)
        return app_banners
    } catch (err) {
        error_log(err);
        return [];
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/swagger/index.js
module.exports = {
    tags: {
        name: 'campaign'
    },
    paths: {
        '/leads': {
            get: {
                tags: ['campaign'],
                summary: 'get campaign leads',
                description: '',
                operationId: 'get_campaign_leads',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'state_id',
                        description: '',
                        required: false,
                        type: 'number'
                    },
                    {
                        in: 'query',
                        name: 'district_id',
                        description: '',
                        required: false,
                        type: 'number'
                    },
                    {
                        in: 'query',
                        name: 'merchant_detail_id',
                        description: '',
                        required: false,
                        type: 'number'
                    },
                    {
                        in: 'query',
                        name: 'crop_id',
                        description: 'mongo crop_id',
                        required: false,
                        type: 'string'
                    },
                    {
                        in: 'query',
                        name: 'status',
                        description: '1->mapped \n2->pending \n3-> rejected',
                        required: false,
                        type: 'number',
                        format: 'int32'
                    },
                    {
                        in: 'query',
                        name: 'page_no',
                        description: '',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'query',
                        name: 'limit',
                        description: '',
                        required: true,
                        type: 'number'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/inquiry': {
            post: {
                tags: ['campaign'],
                summary: 'submit campaign lead',
                description: '',
                operationId: 'create_campaign_lead',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'campaign_id',
                        description: '',
                        required: false,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'price',
                        description: '',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'quantity',
                        description: '',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'crop_type_id',
                        description: 'mysql crop_id',
                        required: true,
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/fetch_action_on_lead': {
            get: {
                tags: ['campaign'],
                summary: 'get campaign leads',
                description: '',
                operationId: 'get_action_on_leads',
                security: [{ Bearer: ['read'] }],
                parameters: [],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/lead_actions': {
            get: {
                tags: ['campaign'],
                summary: 'get actions that can be applied to a lead',
                description: '',
                operationId: 'lead_actions_fetch',
                security: [{ Bearer: ['read'] }],
                parameters: [],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/fetch_all_pa': {
            get: {
                tags: ['campaign'],
                summary: 'get all pa',
                description: '',
                operationId: 'get_all_pa',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'state_id',
                        description: '',
                        required: false
                    },
                    {
                        in: 'query',
                        name: 'district_id',
                        description: '',
                        required: false
                    },
                    {
                        in: 'query',
                        name: 'merchant_id',
                        description: '',
                        required: false
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/submit_action_on_lead': {
            patch: {
                tags: ['campaign'],
                summary: 'update leads action',
                description: '',
                operationId: 'patch_action_on_lead',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'lead_id',
                        description: '',
                        type: 'string',
                        required: true
                    },
                    {
                        in: 'formData',
                        name: 'agreed_amount',
                        description: '',
                        type: 'number',
                        required: false
                    },
                    {
                        in: 'formData',
                        name: 'agreed_ton',
                        description: '',
                        type: 'number',
                        required: false
                    },
                    {
                        in: 'formData',
                        name: 'action_performed',
                        description: '',
                        type: 'number',
                        format: 'int32',
                        required: true
                    },
                    {
                        in: 'formData',
                        name: 'assigned_to_pa_id',
                        description: '',
                        type: 'string',
                        required: false
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/pa/lead_action': {
            patch: {
                tags: ['campaign'],
                summary: 'update leads action',
                description: '',
                operationId: 'update_action_on_lead',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'lead_id',
                        description: '',
                        type: 'string',
                        required: true
                    },
                    {
                        in: 'formData',
                        name: 'agreed_amount',
                        description: '',
                        type: 'number',
                        required: false
                    },
                    {
                        in: 'formData',
                        name: 'agreed_ton',
                        description: '',
                        type: 'number',
                        required: false
                    },
                    {
                        in: 'formData',
                        name: 'action_performed',
                        description: '',
                        type: 'number',
                        format: 'int32',
                        required: true
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/reports': {
            get: {
                tags: ['campaign'],
                summary: 'get campaign',
                description: '',
                operationId: 'get_campaign',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'page_no',
                        description: '',
                        required: false
                    },
                    {
                        in: 'query',
                        name: 'limit',
                        description: '',
                        required: false
                    },
                    {
                        in: 'query',
                        name: 'campaignId',
                        description: '',
                        required: false
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/banner': {
            post: {
                tags: ['campaign'],
                summary: 'create campaign banner',
                description: '',
                operationId: 'create_campaign_banner',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'cropId',
                        description: '',
                        required: true
                    },
                    {
                        in: 'formData',
                        name: 'minPrice',
                        description: '',
                        required: true
                    },
                    {
                        in: 'formData',
                        name: 'maxPrice',
                        description: '',
                        required: true
                    },
                    {
                        in: 'formData',
                        name: 'comment',
                        description: '',
                        required: false
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/record': {
            post: {
                tags: ['campaign'],
                summary: 'create campaign',
                description: '',
                operationId: 'create_campaign',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        required: true,
                        schema: {
                            required: ['state', 'districts'],
                            properties: {
                                state: {
                                    properties: {
                                        id: {
                                            type: 'integer'
                                        },
                                        name: {
                                            type: 'string'
                                        }
                                    }
                                },
                                districts: {
                                    type: 'array',
                                    items: {
                                        properties: {
                                            id: {
                                                type: 'integer'
                                            },
                                            name: {
                                                type: 'string'
                                            }
                                        }
                                    }
                                },
                                cropId: {
                                    type: 'string'
                                },
                                quantity: {
                                    type: 'integer'
                                },
                                minPrice: {
                                    type: 'integer'
                                },
                                maxPrice: {
                                    type: 'integer'
                                },
                                startDate: {
                                    type: 'string'
                                },
                                endDate: {
                                    type: 'string'
                                },
                                comment: {
                                    type: 'string'
                                },
                                banner_img_url: {
                                    type: 'string'
                                },
                                platform_id: {
                                    type: 'integer'
                                },
                                target_mobile_numbers: {
                                    type: 'string'
                                }
                            }
                        }
                    }

                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            },
            patch: {
                tags: ['campaign'],
                summary: 'update campaign banner status',
                description: '',
                operationId: 'update_campaign',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'stage',
                        description: '',
                        required: false
                    },
                    {
                        in: 'formData',
                        name: 'campaignId',
                        description: '',
                        required: false
                    },
                    {
                        in: 'formData',
                        name: 'reason',
                        description: '',
                        required: false
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/crops': {
            get: {
                tags: ['campaign'],
                summary: 'get campaign crops',
                description: '',
                operationId: 'get_campaign_crops',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'header',
                        name: 'language',
                        description: '',
                        required: false,
                        type: 'number'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/sell_crop_picture': {
            post: {
                tags: ['campaign'],
                summary: 'add sell_crop_picture',
                description: '',
                operationId: 'add_sell_crop_picture',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'crop_id',
                        description: '',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'lead_id',
                        description: '',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'crop_image',
                        description: '',
                        required: true,
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/merchant_interests': {
            post: {
                tags: ['campaign'],
                summary: 'save merchant interests',
                description: 'save merchant interests',
                operationId: 'post_merchant_interests',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'name',
                        description: 'name of the merchant',
                        required: true,
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'business_name',
                        description: 'name of shop of the merchant',
                        required: true,
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'mobile_number',
                        description: 'mobile number of merchant',
                        required: true,
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'address',
                        description: 'address of merchant',
                        required: true,
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        }
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/index.js
const create_price_polling_controller = require('./controllers/create_price_polling_controller');
const fetch_terms_and_conditions_controller = require('./controllers/fetch_terms_and_conditions_controller');
const terms_and_conditions_controller = require('./controllers/terms_and_conditions_controller');
const fetch_crops_controller = require('./controllers/fetch_crops_controller');
const fetch_all_pa_controller = require('./controllers/fetch_all_pa_controller');
// const submit_action_on_lead_controller = require("./controllers/submit_action_on_lead_controller");
// const update_lead_action_by_pa_controller = require("./controllers/update_lead_action_by_pa");
// const fetch_campaign_leads_controller = require("./controllers/fetch_campaign_leads_controller");
// const fetch_action_on_lead_controller = require("./controllers/fetch_action_on_lead_controller");
const save_merchant_interests_controller = require('../../v1/campaign/controllers/save_merchant_interests_controller');

// const fetch_all_campaign_reports_controller = require("./controllers/fetch_all_campaign_reports_controller");
const create_campaign_banner_controller = require('./controllers/create_campaign_banner_controller');
// const create_campaign_record_controller = require('./controllers/create_campaign_record_controller');
// const update_campaign_banner_status_controller = require('./controllers/update_campaign_banner_status_controller');
const add_sell_crop_picture_controller = require('./controllers/add_sell_crop_picture_controller');

const authorize = require('../../../middelware/authorized_routes');
const user_roles_enum = require('../../../entities/metadata/enums/user_roles')

const router = require('express').Router();

router.post('/inquiry', authorize([user_roles_enum.Merchant]), create_price_polling_controller);
router.post('/merchant_interests', authorize([user_roles_enum.Merchant]), save_merchant_interests_controller);
router.get('/terms_and_conditions', authorize([user_roles_enum.Merchant]), fetch_terms_and_conditions_controller);
router.post('/terms_and_conditions', authorize([user_roles_enum.Merchant]), terms_and_conditions_controller);
router.get('/crops', fetch_crops_controller);
router.get('/fetch_all_pa', fetch_all_pa_controller);

/** @deprecated */
// router.get("/leads", fetch_campaign_leads_controller);
// router.get("/fetch_action_on_lead", fetch_action_on_lead_controller);
// router.get("/lead_actions", fetch_action_on_lead_controller);
// router.patch("/submit_action_on_lead", submit_action_on_lead_controller);
// router.patch("/pa/lead_action", update_lead_action_by_pa_controller);
// router.get("/reports", fetch_all_campaign_reports_controller);
// router.post('/record' , create_campaign_record_controller);
// router.patch('/record', update_campaign_banner_status_controller);

router.post('/banner', create_campaign_banner_controller);
/** @deprecated */
// router.post('/sell_crop_picture', authorize([user_roles_enum.Merchant]), add_sell_crop_picture_controller);
module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/_services/fetch_leads_by_campaign_id_service.js
const purchase_crop_lead_model = require("../../../../database/models_v2/purchase_campaign/purchase_crop_lead");
const error_log = require("../../../../middelware/error_log");
const campaignSourceEnum = require("../../../../enums/market_linkage/enums/campaignEnum").source;
const fetch_merchant_profile_service = require("../../../../common_services/merchant/fetch_merchant_profile");

module.exports = (campaign_id, source) => {
    return new Promise(async (resolve, reject) => {
        try {
            const query = {
                is_active: 1
            }
            let leads;
            if (source == campaignSourceEnum.campaign) {
                query.campaign_id = campaign_id;
            }
            else if (source == campaignSourceEnum.retailer) {
                query.campaign_id = null;
                query.source = campaignSourceEnum.retailer;
            }
            leads = await purchase_crop_lead_model.findAll({
                where: query
            });
            for (let index = 0; index < leads.length; index++) {
                const element = leads[index];
                element.dataValues.campaignId = element.id + "";
                const {
                    name: merchant_name,
                    mobile_number: merchant_mobile_number,
                    district_name: merchant_district_name
                } = await fetch_merchant_profile_service(element.merchant_detail_id);
                element.dataValues.merchantName = merchant_name;
                element.dataValues.merchantMobileNumber = merchant_mobile_number;
                element.dataValues.merchantDistrict = merchant_district_name;
                element.dataValues.quantity = element.quantity_in_kg / 1000;
                element.dataValues.price = element.price_per_kg * 100;
                delete element.dataValues.price_per_kg;
                delete element.dataValues.quantity_in_kg;
                leads[index] = element;
            }
            return resolve(leads);
        }
        catch (err) {
            error_log(err);
            reject(err);
        }
    })
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/_services/update_campaign_stage_service.js
const campaign_model = require("../../../../database/models_v2/purchase_campaign/purchase_crop_campaign")

const campaign_stage_enum = require("../../../../enums/market_linkage/enums/campaignEnum").stages;

const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const appLogService = require("../../../../common_services/market_linkage/logging/app_log_service");
const { delete_app_banner } = require("../../../../entities/app_banner/service/app_banner_operations");
const fetch_campaign_by_id_service = require("./fetch_campaign_by_id");

module.exports = (campaign_id, stage, reason) => {
    return new Promise(async (resolve, reject) => {
        try {
            let campaign = await campaign_model.findOne({
                where: {
                    id: campaign_id,
                    is_active: 1
                },
                attributes: ["stage", "reason", "id", "app_banner_id"]
            });
            if (stage == campaign_stage_enum.force_shut) {
                if (campaign.stage === campaign_stage_enum.force_shut) {
                    throw new Error("already shut down");
                }
                campaign.stage = stage;
                campaign.reason = reason;
                await campaign.save();
                await delete_app_banner(campaign.app_banner_id);
            }
            else {
                throw new Error("operation other than shutting down blocked by the server");
            }
            campaign.campaignId = campaign.id;
            campaign.quantity = campaign.quantity / 1000;
            delete campaign.id;
            campaign.leads = [];
            const campaign_response = await fetch_campaign_by_id_service(campaign_id);
            return resolve(campaign_response);
        }
        catch (err) {
            appLogService({ type: type.error, err });
            console.log(err.message);
            reject(err);
        }
    });
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/_services/create_campaign_banner_service.js
const crop_detail_model = require("../../../../database/models_v2/crop/crop_detail");
const crop_vernacular_metadata_model = require("../../../../database/models_v2/crop/crop_vernacular_metadata");
const language_enum = require("../../../../enums/global/language");

const cropModel = require("../../../../database/mongoose/market_linkage_db/crop.model");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const postRequest = require("../../../../utilities/market_linkage/post_request");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
const save_banner_url_in_s3=require('../../../../common_services/media/save_banner_url_in_s3');
const { BANNERBEAR_API_KEY } = require("../../../../constants/global");
module.exports = (crop_id, min_price, max_price, comment) => {
    return new Promise(async (resolve, reject) => {
        try {
            const crop_detail = await crop_detail_model.findOne({
                where: {
                    id: crop_id,
                    is_active: 1
                },
                include: [{
                    model: crop_vernacular_metadata_model,
                    where: {
                        is_active: 1,
                        language_id: language_enum.default
                    }
                }]
            });

            if (!crop_detail || !crop_detail?.crop_vernacular_metadata?.[0]) {
                throw new Error("crop not present in DB please add crop");
            }
            const banner_template_id = crop_detail.crop_vernacular_metadata[0].banner_template_id;
            if (!banner_template_id) {
                throw new Error("banner_template_id not found");
            }
            const banner_image_url = await generateBanner(banner_template_id, min_price, max_price, comment);
            let banner_image_url_s3=await save_banner_url_in_s3(banner_image_url)
            return resolve({ bannerImageUrl: banner_image_url_s3 });
        }
        catch (err) {
            app_log_service({ type: type.error, err });
            console.log(err.message);
            reject(err);
        }
    });
}

const generateBanner = (bannerTemplateId, minPrice, maxPrice, comment) => {
    return new Promise(async (resolve, reject) => {
        try {
            const API_URL = "https://sync.api.bannerbear.com/v2/images";
            const API_KEY = BANNERBEAR_API_KEY;
            const API_HEADERS = {
                'Content-Type': 'application/json',
                Authorization: `Bearer ${API_KEY}`,
            };
            const body = {
                template: bannerTemplateId,
                modifications: [
                    {
                        "name": "Price_Range",
                        "text": `₹ ${minPrice} - ${maxPrice}`,
                        "color": null,
                        "background": null
                    },
                    {
                        "name": "Text",
                        "text": comment,
                        "color": null,
                        "background": null
                    }
                ],
                transparent: false,
            }
            const response = await postRequest(API_URL, body, API_HEADERS);
            return resolve(response?.data?.image_url_png);
        }
        catch (err) {
            app_log_service({ type: type.error, err });
            console.log(err.message);
            return reject(err);
        }
    })
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/_services/fetch_campaign_crop_service.js
const error_log = require("../../../../middelware/error_log");
const crop_detail_model = require("../../../../database/models_v2/crop/crop_detail");
const crop_vernacular_metadata_model = require("../../../../database/models_v2/crop/crop_vernacular_metadata");
const language_enum = require("../../../../enums/global/language");

module.exports = async (language_id = language_enum.english, crop_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            const query = {
                is_active: 1,
                for_campaign: true
            }
            if (crop_id) {
                query.id = crop_id
            }
            const crops = await crop_detail_model.findAll({
                where: query,
                include: [{
                    model: crop_vernacular_metadata_model,
                    where: {
                        is_active: 1,
                        language_id,
                    }
                }]
            });
            const campaign_crops = crops.map(ele => {
                return {
                    crop_img_url: ele.app_tile_url || "https://farmartdocs2021.s3.ap-south-1.amazonaws.com/metadata/crop_icons/default_crop.png",
                    crop_id: ele.id,
                    name: ele.crop_vernacular_metadata[0].name || ele.name,
                }
            });
            if (crop_id && campaign_crops.length > 0)
                return resolve(campaign_crops?.[0] || {});
            return resolve({ crops: campaign_crops });
        }
        catch (err) {
            error_log(err);
            reject(err);
        }
    })
}




File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/_services/fetch_all_campaign_reports_service.js
const sync_campaign_status_service = require("./sync_campaign_status_service");
const campaign_model = require("../../../../database/models_v2/purchase_campaign/purchase_crop_campaign");
const fetch_campaign_by_id_service = require("./fetch_campaign_by_id");

const fetch_leads_by_campaign_id_service = require("./fetch_leads_by_campaign_id_service");
const campaignSourceEnum = require("../../../../enums/market_linkage/enums/campaignEnum").source;

module.exports = (campaign_id, page_no, limit) => {
  return new Promise(async (resolve, reject) => {
    try {
      await sync_campaign_status_service();
      const skip = (page_no - 1) * limit;

      const campaign_ids = await campaign_model.findAndCountAll({
        where: {
          is_active: 1
        },
        limit: limit,
        offset: skip,
        order: [["created_at", "desc"]],
        attributes: ["id"]
      });
      let campaigns=[];
      for (let index = 0; index < campaign_ids.rows.length; index++) {
        let e = campaign_ids.rows[index];
        let element ={...await fetch_campaign_by_id_service(e.id)};
        let leads = {...await fetch_leads_by_campaign_id_service(e.id, campaignSourceEnum.campaign)};
        element.leads = leads || [];
        campaigns.push(element);
        // element={};
      }
      if (skip < campaign_ids.count && campaign_ids.count < page_no * limit) {
        const retailer_lead = await getRetailerLeads();
        campaigns = [...campaigns, retailer_lead];
      }

      return resolve({
        campaigns,
        campaignsCount: campaign_ids.count,
      });
    } catch (err) {
      reject(err);
    }
  });
};

const getRetailerLeads = () => {
  return new Promise(async (resolve, reject) => {
    try {
      const campaign = {
        cropId: null,
        state: null,
        districts: null,
        startDate: null,
        endDate: null,
        stage: null,
        min_price: null,
        max_price: null,
        banner_img_url: null,
        comment: null,
        createdAt: null,
        updatedAt: null,
        branchUrl: null,
        totalAudience: null,
        campaignId: null,
        quantity: null,
        leads: null,
        source: campaignSourceEnum.retailer,
      };
      campaign.leads = await fetch_leads_by_campaign_id_service(
        null,
        campaignSourceEnum.retailer
      );
      return resolve(campaign);
    } catch (err) {
      error_log(err);
      resolve(null);
    }
  });
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/_services/fetch_campaign_by_id.js
const error_log = require("../../../../middelware/error_log");
const campaign_model = require("../../../../database/models_v2/purchase_campaign/purchase_crop_campaign");
const campaign_state_district_maps_model = require("../../../../database/models_v2/purchase_campaign/purchase_crop_campaign_state_district_map");
const state_model = require("../../../../database/models/state");
const district_model = require("../../../../database/models/district");
const {
    convert_price,
    price_conversion_enums
} = require("../../../../common_services/unit_conversions/price_conversion");

const {
    convert_weight,
    weight_conversion_enums
} = require("../../../../common_services/unit_conversions/weight_conversion");

module.exports = async (campaign_id) => {
    try {
        const campaign = await campaign_model.findOne({
            where: {
                id: campaign_id,
                is_active: 1
            },
            attributes: ["start_date", "end_date", "stage", "min_price", "max_price", "banner_image_url", "total_audience_at_creation", "comment", "crop_id", "reason", "quantity_in_kg", "created_at", "updated_at", "id","target_mobile_numbers"],
        });
        if (campaign) {
            campaign_response.cropId = campaign.crop_id;
            campaign_response.startDate = campaign.start_date;
            campaign_response.endDate = campaign.end_date;
            campaign_response.min_price = convert_price(campaign.min_price, price_conversion_enums.price_per_kg_to_price_per_quintal);
            campaign_response.max_price = convert_price(campaign.max_price, price_conversion_enums.price_per_kg_to_price_per_quintal);
            campaign_response.comment = campaign.comment;
            campaign_response.banner_img_url = campaign.banner_image_url;
            campaign_response.stage = campaign.stage;
            campaign_response.target_mobile_numbers = campaign.target_mobile_numbers;
            campaign_response.createdAt = campaign.dataValues.created_at;
            campaign_response.updatedAt = campaign.dataValues.updated_at;
            campaign_response.branchUrl = campaign.branch_url;
            campaign_response.totalAudience = campaign.total_audience_at_creation;
            campaign_response.campaignId = campaign.id + "";
            campaign_response.quantity = convert_weight(campaign.quantity_in_kg, weight_conversion_enums.kg_into_mt);

            const campaign_state_district_maps = await campaign_state_district_maps_model.findAll({
                where: {
                    purchase_campaign_id: campaign_id,
                    is_active: 1
                },
                include: [
                    {
                        model: state_model,
                        where: {
                            is_active: 1
                        }
                    },
                    {
                        model: district_model,
                        where: {
                            is_active: 1
                        }
                    }
                ]
            });

            let districts = campaign_state_district_maps.map(ele => {
                return {
                    id: ele.district.id,
                    name: ele.district.name
                };
            })
            campaign_response.districts = districts;
            campaign_response.state = campaign_state_district_maps[0].state


            return campaign_response;
        }
    }
    catch (err) {
        error_log(err);
        return campaign_response;
    }
}

const campaign_response = {
    "cropId": null,
    "state": null,
    "districts": null,
    "startDate": null,
    "endDate": null,
    "min_price": null,
    "max_price": null,
    "comment": null,
    "banner_img_url": null,
    "stage": null,
    "target_mobile_numbers":null,
    "createdAt": null,
    "updatedAt": null,
    "branchUrl": null,
    "totalAudience": null,
    "campaignId": null,
    "quantity": null,
    "leads": []
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/_services/create_campaign_lead_service.js
const error_log = require("../../../../middelware/error_log");
const campaign_source_enum = require('../../../../entities_v2/metadata/enums/campaign/source_enum');
const whatsapp_campaign_response_ticket_service = require("../../../../entities_v2/campaign/whatsapp_campaign_response_ticket_service");
const post_request_service = require("../../../../utilities/external_API_calls/post_request");
const global_config = require("../../../../config/global_config");
const env_enum = require("../../../../enums/env/env_enum");
const merchant_detail_model = require("../../../../database/models/merchant_detail");
const { clear_leads_cache } = require("../../../../data_abstraction_layer/order_tracking/order_tracking_leads_in_redis");
const get_language_service = require("../../../../data_abstraction_layer/language/get_language_by_id");
const { lead_creation_alert } = require("../../../../common_services/campaign/alert_on_slack");

/**
 * flow
 * 1. store campaign lead
 * 2. send whatsapp response message
 * 
 * @param {*} campaign_id 
 * @param {*} price_per_quintal 
 * @param {*} quantity_in_tonne 
 * @param {*} crop_type_id 
 * @param {*} merchant_detail_id 
 * @param {*} language_id 
 * @param {*} source 
 * @param {*} created_by_user 
 * @returns 
 */

module.exports = async (campaign_id = null, price_per_quintal, quantity_in_tonne, crop_type_id, merchant_detail_id, ml_merchant_id, language_id, source = campaign_source_enum.campaign, country_code) => {
    try {
        let url = global_config.market_linkage_system_url;
        let token = global_config.retailer_token;
        let endpoint = "/v2/campaign/lead";
        const body = {
            merchant_detail_id: merchant_detail_id,
            weight_in_kg: quantity_in_tonne * 1000,
            price_per_kg: price_per_quintal / 100,
            crop_id: crop_type_id,
            source,
        }
        if (ml_merchant_id) {
            body.master_merchant_detail_id = ml_merchant_id;
        }
        if (campaign_id)
            body.campaign_id = campaign_id;
        let lead_api_response
        try {
            lead_api_response = await post_request_service(url + endpoint, body,
                {
                    "Authorization": token
                }
            );
        }
        catch (err) {
            throw new Error(err.response.data.message);
        }
        const { language_code } = await get_language_service(language_id);
        const lead_data = {
            lead_id: lead_api_response?.data?.data?.lead_id || null,
            farmart_lead_id: lead_api_response?.data?.data?.farmart_lead_id || null,
            message: lead_api_response?.data?.data?.message?.[language_code]
        }
        const merchant_detail = await merchant_detail_model.findOne({
            where: {
                id: merchant_detail_id,
                is_active: 1
            }
        });
        await clear_leads_cache({ master_merchant_id: ml_merchant_id, merchant_detail_id });
        if (lead_data.farmart_lead_id)
            whatsapp_campaign_response_ticket_service(language_id, merchant_detail.name, lead_data.farmart_lead_id, crop_type_id, quantity_in_tonne, price_per_quintal, merchant_detail.mobile_number, country_code)
                .catch(err => {
                    error_log(err);
                });
        else {
            let channel_id = global_config.lead_non_ml_channel_id;

            lead_creation_alert({ merchant_detail_id, crop_detail_id: crop_type_id, quantity_in_tonne, price_per_quintal, channel_id })
                .catch(err => {
                    error_log(err);
                })

        }
        return lead_data;
    }
    catch (err) {
        error_log(err);
        throw err;
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/_services/create_campaign_record_service.js
const campaign_model = require("../../../../database/models_v2/purchase_campaign/purchase_crop_campaign");
const campaign_state_district_map_model = require("../../../../database/models_v2/purchase_campaign/purchase_crop_campaign_state_district_map");
const campaign_stage_enum = require("../../../../enums/market_linkage/enums/campaignEnum").stages;
const broadCastCampaignBannerService = require("./broadcast_campaign_banner_service");
const postRequest = require("../../../../utilities/market_linkage/post_request");
const fetch_campaign_crop_service = require("./fetch_campaign_crop_service");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const broadcast_campaign = require("../../campaign/_services/broadcast_campaign_notification");
const error_log = require("../../../../middelware/error_log");

module.exports = (state_id, district_ids, crop_id, quantity_in_tonne, min_price, max_price, start_date, end_date, comment, banner_img_url, created_by, platform_id, target_mobile_numbers) => {
    return new Promise(async (resolve, reject) => {
        try {
            const dateNow = new Date();
            let stage = campaign_stage_enum.scheduled;
            if (new Date(start_date) < dateNow) {
                stage = campaign_stage_enum.running;
            }
            if (new Date(end_date) < dateNow) {
                stage = campaign_stage_enum.expired;
            }
            let campaign_data = {
                start_date: new Date(start_date),
                end_date: new Date(end_date),
                stage: stage,
                min_price: min_price / 100,
                max_price: max_price / 100,
                banner_img_url,
                comment,
                crop_id,
                created_by,
                quantity_in_kg: quantity_in_tonne * 1000,
                is_active: 1,
                banner_image_url: banner_img_url,
            }
            if (platform_id)
                campaign_data.platform_id = platform_id;
            if (target_mobile_numbers)
                campaign_data.target_mobile_numbers = target_mobile_numbers;

            let campaign = await campaign_model.create(campaign_data);
            let campaign_state_district_maps = district_ids.map(ele => {
                return {
                    purchase_campaign_id: campaign.id,
                    dist_id: ele,
                    state_id: state_id,
                    is_active: 1
                }
            });
            campaign_state_district_maps = await campaign_state_district_map_model.bulkCreate(campaign_state_district_maps);
            const { crop_img_url, name: crop_name } = await fetch_campaign_crop_service(undefined, campaign.crop_id);
            const branch_url = await generateBranchIOLink(campaign.id, campaign.crop_id, crop_name, crop_img_url);
            campaign.branch_url = branch_url.branchUrl;
            let banner;
            let banner_active;
            if (stage == campaign_stage_enum.running) {
                banner_active = true;
            }
            else {
                banner_active = false;
            }
            banner = await broadCastCampaignBannerService(banner_img_url, branch_url.branchUrl, state_id, district_ids, campaign.id, banner_active, campaign.start_date, campaign.end_date);
            //broadcast whatsapp msg
            broadcast_campaign(banner_img_url, branch_url.branchUrl, state_id, district_ids, campaign.id, platform_id, target_mobile_numbers)
                .catch(err => {
                    console.log(err.message);
                    error_log(err);
                })

            campaign.total_audience_at_creation = banner.dataValues.total_audience;
            campaign.app_banner_id = banner.id;// need to recheck this mapping
            campaign = await campaign.save();
            campaign_response.app_banner_id = banner.id;
            campaign_response.banner_img_url = campaign.branch_url;
            campaign_response.campaignId = campaign.id + "";
            campaign_response.comment = campaign.comment;
            campaign_response.createdAt = campaign.createdAt;
            campaign_response.cropId = crop_id;
            campaign_response.endDate = campaign.end_date;
            campaign_response.max_price = campaign.max_price * 100;
            campaign_response.min_price = campaign.min_price * 100;
            campaign_response.quantity = campaign.quantity_in_kg / 1000;
            campaign_response.stage = stage;
            campaign_response.startDate = campaign.start_date;
            campaign_response.totalAudience = banner.dataValues.total_audience;
            campaign_response.updatedAt = campaign.updatedAt;
            return resolve(campaign_response);
        }
        catch (err) {
            console.log(err.message);
            error_log(err);
            return reject(err);
        }
    });
}

const generateBranchIOLink = (campaignId, cropId, cropName, cropPicUrl) => {
    return new Promise(async (resolve, reject) => {
        try {
            const data = JSON.stringify({
                "branch_key": "key_live_pk6sb0nWjlo8i4IEpdwSvepfErlDZ0yB",
                "channel": "whatsapp",
                "feature": "campaign",
                "campaign": "new campaign",
                "stage": "broadcast view",
                "tags": [
                    "generated_from_backend"
                ],
                "data": {
                    "$ios_url": "http://www.farmart.co/",
                    "$android_url": "https://play.google.com/store/apps/details?id=com.farmart.retailer&hl=en_AU",
                    "$desktop_url": "http://www.farmart.co/",
                    "$canonical_identifier": "content/123",
                    "$deeplink_path": `CAMPAIGN`,
                    "$og_title": "Campaign form redirect",
                    "$og_description": "Campaign form redirect",
                    "campaign": {
                        "campaign_id": campaignId,
                        "crop_id": cropId,
                        "name": cropName,
                        "crop_img_url": cropPicUrl,
                    }
                }
            });
            let url = "https://api2.branch.io/v1/url";

            const response = await postRequest(url, data, {
                'Content-Type': 'application/json'
            });

            return resolve({ branchUrl: response.data.url });
        }
        catch (err) {
            error_log(err);
            console.log(err.message);
            return reject(err);
        }
    })
}


const campaign_response = {
    "cropId": null,
    "state": null,
    "districts": null,
    "startDate": null,
    "endDate": null,
    "min_price": null,
    "max_price": null,
    "comment": null,
    "banner_img_url": null,
    "stage": null,
    "createdAt": null,
    "updatedAt": null,
    "branchUrl": null,
    "totalAudience": null,
    "app_banner_id": null,
    "campaignId": null,
    "quantity": null,
    "leads": []
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/_services/broadcast_campaign_notification.js
const error_log = require("../../../../middelware/error_log");
const merchant_detail_model = require("../../../../database/models/merchant_detail");
const campaign_model = require("../../../../database/models_v2/purchase_campaign/purchase_crop_campaign");
const fetch_notification_string_service = require("../../../../entities_v2/notification/services/fetch_notification_string");
const notification_event_enum = require("../../../../entities_v2/metadata/enums/notification/notification_event_enum");
const firebase_admin = require("../../../../notifier/firebase_admin");
const get_notifier_screen_name = require('../../../../entities/metadata/service/get_notifier_screen_name');
const get_merchant_language_selected_service = require("../../../../entities_v2/merchant/services/metadata/get_merchant_language_selected");
const Op = require("sequelize").Op;
const notifier_to_screen_enum = require("../../../../entities/metadata/enums/notifier_to_screen_enum");
const whatsapp_template_model = require("../../../../database/mongoose/mongoose_models/whatsapp/whatsapp_templates");
const whatsapp_template_id_enum = require("../../../../entities_v2/metadata/enums/whatsapp/whatsapp_template_ids");
const send_message_via_whatsapp_service = require("../../../../entities_v2/sms/service/send_message_via_whatsapp");
const fetch_campaign_crop = require("./fetch_campaign_crop_service");
const merchant_platform_enum = require('../../../../enums/merchant/merchant_platform');
const master_merchant_detail_model = require("../../../../database/models_v2/merchant/master_merchant_detail");

module.exports = (app_banner_link, action_link, state_id, district_ids, campaign_id, platform_id, target_mobile_numbers) => {
    return new Promise(async (resolve, reject) => {
        try {
            const merchant_fetch_condition = {
                where: {
                    is_active: 1
                },
            };
            if (target_mobile_numbers) {
                target_mobile_numbers = target_mobile_numbers.split(',');
            }
            if (state_id && !target_mobile_numbers?.length) {
                merchant_fetch_condition.where.state_id = state_id;
            }
            if (district_ids.length > 0 && !target_mobile_numbers?.length) {
                merchant_fetch_condition.where.district_id = {
                    [Op.in]: district_ids
                };
            }
            if (target_mobile_numbers != null || target_mobile_numbers?.length > 0) {
                merchant_fetch_condition.where.mobile_number = {
                    [Op.in]: target_mobile_numbers
                };
            }
            if (platform_id === merchant_platform_enum.ML) {
                merchant_fetch_condition.include = [{
                    model: master_merchant_detail_model,
                    where: {
                        is_active: 1,
                        platform_id: merchant_platform_enum.ML,
                    },
                    required: true
                }]
            }
            if (platform_id === merchant_platform_enum.Retailer) {
                const master_merchants = await master_merchant_detail_model.findAll({
                    where: {
                        is_active: 1,
                    },
                    attributes: ["mobile_number"]
                });
                master_merchant_mobile_numbers = master_merchants.map(ele => ele.mobile_number);
                merchant_fetch_condition.where[Op.not] = {
                    mobile_number: {
                        [Op.in]: master_merchant_mobile_numbers
                    }
                }
            }


            let merchants = await merchant_detail_model.findAll(merchant_fetch_condition);
            if (campaign_id) {
                const campaign = await campaign_model.findOne({
                    where: {
                        id: campaign_id,
                        is_active: 1
                    },
                    attributes: ["min_price", "max_price", "quantity_in_kg", "crop_id", "banner_image_url"]
                });
                broadcast_for_merchant(merchants, campaign, action_link);
            }
            return resolve({ audience_count: merchants.length });
        }
        catch (err) {
            error_log(err);
            return reject(err);
        }
    });
}

const broadcast_campaign_notifications = (merchant_broadcast_detail) => {
    return new Promise(async (resolve, reject) => {
        try {
            const campaign_broadcast_notif = await fetch_notification_string_service(
                notification_event_enum.campaign_broadcast,
                merchant_broadcast_detail.language,
                {
                    crop_name: merchant_broadcast_detail.crop_name,
                    weight_in_mt: merchant_broadcast_detail.quantity_in_kg / 1000,
                    min_price: merchant_broadcast_detail.min_price,
                    max_price: merchant_broadcast_detail.max_price
                }
            )
            firebase_admin.on_action_perform([merchant_broadcast_detail.merchant_detail_id], campaign_broadcast_notif.title, campaign_broadcast_notif.message, get_notifier_screen_name(notifier_to_screen_enum.MARKETING), merchant_broadcast_detail.action_link)
                .catch(err => {
                    error_log(err);
                });
            return resolve({ message: "success" });
        }
        catch (err) {
            error_log(err);
            reject(err);
        }
    })
}

const broadcast_campaign_using_whatsapp = async (merchant_broadcast_detail) => {
    try {
        const broadcast_campaign_template = await whatsapp_template_model.findOne({
            whatsapp_message_type: whatsapp_template_id_enum.campaign_creation_broadcast,
            language_id: merchant_broadcast_detail.language
        });
        if (!broadcast_campaign_template) {
            throw new Error("No template found for template_id =  " + whatsapp_template_id_enum.campaign_creation_broadcast);
        }
        const body_parameters = {
            district_name: merchant_broadcast_detail.district_name,
            crop_name: merchant_broadcast_detail.crop_name
        };
        const header_parameters = [{
            type: "image",
            image: {
                link: merchant_broadcast_detail.banner_img_url
            }
        }]
        send_message_via_whatsapp_service(broadcast_campaign_template.whatsapp_template_id, body_parameters, header_parameters, merchant_broadcast_detail.mobile_number)
            .catch(err => {
                error_log(err);
            });
        return { message: "success" };
    }
    catch (err) {
        error_log(err);
    }
}

const broadcast_for_merchant = async (merchants, campaign, action_link) => {
    const { min_price, max_price, quantity_in_kg, crop_id, banner_image_url } = campaign;
    for (let index = 0; index < merchants.length; index++) {
        let merchant_notification_obj = { min_price: min_price * 100, max_price: max_price * 100, quantity_in_kg, action_link };
        merchant_notification_obj.merchant_detail_id = merchants[index].id;
        merchant_notification_obj.mobile_number = merchants[index].mobile_number;
        merchant_notification_obj.district_name = merchants[index]?.district_name || " ";
        merchant_notification_obj.banner_img_url = banner_image_url || "";
        const merchant_language_selected = await get_merchant_language_selected_service(merchants[index].id);
        const { name: crop_name } = await fetch_campaign_crop(merchant_language_selected, crop_id);
        merchant_notification_obj.language = merchant_language_selected;
        merchant_notification_obj.crop_name = crop_name;
        broadcast_campaign_notifications(merchant_notification_obj)
            .catch(err => {
                error_log(err);
            });

        broadcast_campaign_using_whatsapp(merchant_notification_obj)
            .catch(err => {
                error_log(err);
            });
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/_services/sync_campaign_status_service.js
const campaign_model = require("../../../../database/models_v2/purchase_campaign/purchase_crop_campaign");
const { stages: campaign_stage_enum } = require("../../../../enums/market_linkage/enums/campaignEnum");
const { Op } = require("sequelize");
const error_log = require("../../../../middelware/error_log");

module.exports = async () => {
    try {
        let campaigns = await campaign_model.findAll({
            where: {
                stage: {
                    [Op.in]: [campaign_stage_enum.scheduled, campaign_stage_enum.running]
                },
                is_active: 1
            },
            attributes: ["id", "stage", "start_date", "end_date"]
        });
        for (let index = 0; index < campaigns.length; index++) {
            let element = campaigns[index];
            if ((element.stage == + campaign_stage_enum.scheduled) || (element.stage == +campaign_stage_enum.running)) {
                let stage = campaign_stage_enum.scheduled;
                const time_now = new Date();
                if (new Date(element.start_date) < time_now) {
                    stage = campaign_stage_enum.running;
                }
                if (new Date(element.end_date) < time_now) {
                    stage = campaign_stage_enum.expired;
                }
                element.stage = stage;
                await element.save();
            }
        }
    }
    catch (err) {
        error_log(err);
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/_services/broadcast_campaign_banner_service.js
const appLogService = require("../../../../common_services/market_linkage/logging/app_log_service");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const { store_app_banner } = require("../../../../entities/app_banner/service/app_banner_operations");

module.exports = async (campaignBannerUrl, actionLink, state_id, district_ids, campaignId, active, live_from, live_till) => {
    return new Promise(async (resolve, reject) => {
        try {
            const bannerType = 1;
            const { app_banner } = await store_app_banner(campaignBannerUrl, actionLink, "Campaign Banner", bannerType, state_id, district_ids, campaignId, active, live_from, live_till);
            return resolve(app_banner);
        }
        catch (err) {
            appLogService({ type: type.error, err });
            console.log(err.message);
            return reject(err);
        }
    })
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/_services/submit_action_on_lead_service.js
const purchase_crop_lead_model = require("../../../../database/models_v2/purchase_campaign/purchase_crop_lead");
const location_model = require("../../../../database/models_v2/global/locations")
const error_log = require('../../../../middelware/error_log');
const campaign_lead_actions_model = require("../../../../database/mongoose/market_linkage_db/campaign_lead_actions.model");
const merchant_detail_model = require("../../../../database/models/merchant_detail");
const master_merchant_detail_model = require("../../../../database/models_v2/merchant/master_merchant_detail");
const language_enum = require("../../../../enums/global/language")
const fetch_campaign_crop_service = require("./fetch_campaign_crop_service");

const submit_action_on_lead_service = (lead_id, agreed_amount_per_quintal, agreed_ton, action_performed, assigned_to_pa_id) => {
  return new Promise(async (resolve, reject) => {
    try {
      let campaign_lead = await purchase_crop_lead_model.findOne({
        where: {
          farmart_id: lead_id,
          is_active: 1
        }
      });
      const campaign_lead_action = await campaign_lead_actions_model.findOne({
        id: action_performed,
      });
      let campaign_lead_obj = {};
      if (campaign_lead && campaign_lead_action) {
        campaign_lead.remark_id = +campaign_lead_action.id;
        campaign_lead.status = +campaign_lead_action.status_enum;
        campaign_lead.agreed_amount = campaign_lead.price_per_kg;
        campaign_lead.agreed_weight = campaign_lead.quantity_in_kg;

        if (agreed_amount_per_quintal) {
          campaign_lead.agreed_amount = agreed_amount_per_quintal / 100;
        }
        if (agreed_ton) {
          campaign_lead.agreed_weight = agreed_ton * 1000;
        }
        if (assigned_to_pa_id) {
          campaign_lead.pa_mapped = assigned_to_pa_id;
          // create_retailer_on_lead_service(
          //   campaign_lead.id,
          //   assigned_to_pa_id
          // ).catch((err) => {
          //   error_log(err);
          // });
        }
        campaign_lead = await campaign_lead.save();
        let campaign_weight = campaign_lead.agreed_weight || campaign_lead.quantity_in_kg;
        let campaign_price = campaign_lead.agreed_amount || campaign_lead.price_per_kg;
        campaign_lead_obj = {
          id: campaign_lead.farmart_id,
          source: campaign_lead.source,
          campaign_id: campaign_lead.campaign_id,
          crop_id: campaign_lead.crop_id,
          status: campaign_lead.remark_id,
          stage: campaign_lead.status,
          weight_in_tons: campaign_weight / 1000,
          price_per_quintal: campaign_price * 100,
          created_at: campaign_lead.createdAt,
          merchant_detail_id: campaign_lead.merchant_detail_id
        }
        const merchant = await merchant_detail_model.findOne({
          where: {
            id: campaign_lead_obj.merchant_detail_id,
            is_active: 1
          }
        });
        campaign_lead_obj.merchant_mobile_number = merchant.mobile_number;
        if (merchant) {
          campaign_lead_obj.merchant_name = merchant.name;
          if (campaign_lead_obj.merchant_mobile_number) {
            const master_merchant_detail = await master_merchant_detail_model.findOne({
              where: {
                merchant_detail_id:campaign_lead_obj.merchant_detail_id,
                is_active: 1
              }
            });
            campaign_lead_obj.retailer_farmart_id = master_merchant_detail?.farmartId || null;
            campaign_lead_obj.retailer_id = master_merchant_detail?._id || null;
            campaign_lead_obj.retailer_pincode = master_merchant_detail?.pincode || null;
            if (master_merchant_detail?.location_id) {
              const merchant_location = await location_model.findOne({
                where: {
                  id: master_merchant_detail.location_id,
                  is_active: 1
                }
              });
              campaign_lead_obj.geoLocation = merchant_location || null;
            }
            campaign_lead_obj.geoLocation = null;
          }
          campaign_lead_obj.merchant_state = merchant.state_name;
          campaign_lead_obj.merchant_district = merchant.district_name;
          const { name: crop_name } = await fetch_campaign_crop_service(language_enum.default, campaign_lead_obj.crop_id)
          campaign_lead_obj.crop_name = crop_name;
        }
      }
      resolve({ "updated_lead_data": campaign_lead_obj });
    } catch (ex) {
      error_log(ex);
      reject({ message: ex.message });
    }
  });
};

module.exports = submit_action_on_lead_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/_services/fetch_all_pa_service.js

const user_profile_model = require("../../../../database/models/user_profile");
const error_log = require('../../../../middelware/error_log');
const user_role_enum = require("../../../../enums/user_profile/user_role");
const user_status = require("../../../../enums/market_linkage/enums/v2/user_status");
const fetch_all_pa_service = (district_id, state_id) => {
  return new Promise(async (resolve, reject) => {
    try {
      const user_profiles = await user_profile_model.findAll({
        where: {
          user_role_id: user_role_enum.PROCUREMENT_ASSOCIATE,
          is_active: true,
          status: user_status.ACTIVATED
        },
        attributes: [["id", "_id"], "name", "mobile_number"],
        order: [['name', 'ASC']]
      });
      resolve({ "pa_data": user_profiles });
    } catch (ex) {
      error_log(ex);
      reject({ message: ex.message });
    }
  });
};

module.exports = fetch_all_pa_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/_services/create_price_polling_service.js
const master_merchant_detail_model = require("../../../../database/models_v2/merchant/master_merchant_detail");
const purchase_crop_lead_model = require('../../../../database/models_v2/purchase_campaign/purchase_crop_lead');

const error_log = require("../../../../middelware/error_log");
const merchant_detail_model = require('../../../../database/models/merchant_detail')
const campaign_source_enum = require('../../../../entities_v2/metadata/enums/campaign/source_enum');
const whatsapp_campaign_response_ticket_service = require("../../../../entities_v2/campaign/whatsapp_campaign_response_ticket_service");
const campaign_lead_status_enum = require("../../../../enums/campaign/campaign_lead_status");
const { generate_unique_id } = require("../../../../common_services/unique_id_generation/generate_unique_id");
const { categories } = require("../../../../enums/market_linkage/enums/categories");
const crop_detail = require("../../../../database/models_v2/crop/crop_detail");


/**
 * 
 * flow
 * 1. fetch master merchant id 
 * 2. generate farmart unique id 
 * 3. store campaign lead
 * 4. send whatsapp response message
 * 
 * @param {*} campaign_id 
 * @param {*} price_per_quintal 
 * @param {*} quantity_in_tonne 
 * @param {*} crop_type_id 
 * @param {*} merchant_detail_id 
 * @param {*} language_id 
 * @param {*} source 
 * @param {*} created_by_user 
 * @returns 
 */

module.exports = async (campaign_id, price_per_quintal, quantity_in_tonne, crop_type_id, merchant_detail_id, ml_merchant_id, language_id, source = campaign_source_enum.campaign, created_by, country_code) => {
    try {
        let master_merchant_detail = null;
        if (ml_merchant_id) {
            master_merchant_detail = await master_merchant_detail_model.findOne({
                where: {
                    id: ml_merchant_id,
                    is_active: 1
                }
            });
        }
        const merchant_detail = await merchant_detail_model.findOne({
            where: {
                id: merchant_detail_id,
                is_active: 1
            }
        });

        const { data: farmart_id } = await generate_unique_id({
            state: master_merchant_detail?.state_name || merchant_detail.state_name || null,
            district: master_merchant_detail?.district_name || merchant_detail.district_name || null,
            category: categories.ProcurementLead
        });

        let campaign_lead = {
            farmart_id,
            is_active: 1,
            quantity_in_kg: quantity_in_tonne * 1000,
            price_per_kg: price_per_quintal / 100,
            source,
            status: campaign_lead_status_enum.pending,
            crop_id: crop_type_id,
            crop_variety_id: null,
            merchant_detail_id
        }
        if (master_merchant_detail)
            campaign_lead.master_merchant_id = master_merchant_detail.id;

        if (campaign_id)
            campaign_lead.campaign_id = campaign_id;

        if (source === campaign_source_enum.pa){
            campaign_lead.created_by_user = created_by;
            campaign_lead.assigned_pa = created_by;
        }

        campaign_lead = await purchase_crop_lead_model.create(campaign_lead);
        whatsapp_campaign_response_ticket_service(language_id, merchant_detail?.name || master_merchant_detail?.name, campaign_lead.farmart_id, crop_type_id, quantity_in_tonne, price_per_quintal, merchant_detail?.mobile_number || master_merchant_detail?.mobile_number, country_code)
            .catch(err => {
                error_log(err);
            });
        return campaign_lead;
    }
    catch (err) {
        error_log(err);
        return null;
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/_services/fetch_campaign_leads_service.js
const purchase_crop_lead_model = require('../../../../database/models_v2/purchase_campaign/purchase_crop_lead');
const merchant_detail_model = require('../../../../database/models/merchant_detail');
const fetch_merchant_profile_service = require("../../../../common_services/merchant/fetch_merchant_profile");
const fetch_campaign_crop_service = require("./fetch_campaign_crop_service");
const language_enum = require("../../../../enums/global/language");
const error_log = require('../../../../middelware/error_log');
const campaign_lead_status_enum = require("../../../../enums/campaign/campaign_lead_status");
const Op=require('sequelize').Op;

const fetch_campaign_leads_service = (state_id, district_id, crop_id, status, merchant_detail_id, page_no, limit) => {
  return new Promise(async (resolve, reject) => {
    try {
      const lead_fetch_condition = {
        'is_active': true,
        'source':{
          [Op.ne]:3
        }
        
      }
      let merchant_condition = {
        'is_active': true
      }
      if (state_id) merchant_condition['state_id'] = state_id;
      if (district_id) merchant_condition["district_id"] = district_id;
      if (crop_id) lead_fetch_condition["crop_id"] = crop_id;
      if (status) lead_fetch_condition["status"] = status;
      if (merchant_detail_id) lead_fetch_condition.merchant_detail_id = merchant_detail_id;
      const offset = (page_no - 1) * limit;
      const campaign_leads = await purchase_crop_lead_model.findAndCountAll({
        where: lead_fetch_condition,
        include:[
          {
            model:merchant_detail_model,
            where : merchant_condition,
            required:true
          }
        ],
        limit,
        offset,
        order: [["created_at", "desc"]]
      });
      for (let index = 0; index < campaign_leads.rows.length; index++) {
        const {
          name: merchant_name,
          mobile_number: merchant_mobile_number,
          state_name: merchant_state_name,
          district_name: merchant_district_name
        } = await fetch_merchant_profile_service(campaign_leads.rows[index].merchant_detail_id);
        let lead_element = {
          id: campaign_leads.rows[index].farmart_id,
          source: campaign_leads.rows[index].source,
          campaign_id: campaign_leads.rows[index].campaign_id,
          crop_id: campaign_leads.rows[index].crop_id,
          status: campaign_leads.rows[index].status,
          weight_in_tons: campaign_leads.rows[index].quantity_in_kg / 1000,
          price_per_quintal: campaign_leads.rows[index].price_per_kg * 100,
          created_at: campaign_leads.rows[index].createdAt,
          merchant_mobile_number: merchant_mobile_number,
          merchant_state: merchant_state_name || "",
          merchant_district: merchant_district_name || "",
          merchant_detail_id: campaign_leads.rows[index].merchant_detail_id,
          merchant_name: merchant_name
        };
        const { name: crop_name } = await fetch_campaign_crop_service(language_enum.english, campaign_leads.rows[index].crop_id);
        lead_element.crop_name = crop_name;
        campaign_leads.rows[index] = lead_element;
      }
      const pending_leads = await purchase_crop_lead_model.count({
        where: { status: campaign_lead_status_enum.pending, is_active: 1 }
      });
      const assigned_leads = await purchase_crop_lead_model.count({
        where: { status: campaign_lead_status_enum.accepted, is_active: 1 }
      });
      const rejected_leads = await purchase_crop_lead_model.count({
        where: { status: campaign_lead_status_enum.cancelled, is_active: 1 }
      });
      return resolve({
        "campaign_lead_data": {
          number_of_assigned_leads: assigned_leads,
          number_of_pending_leads: pending_leads,
          number_of_rejected_leads: rejected_leads,
          campaign_leads
        }
      });
    } catch (ex) {
      error_log(ex);
      return reject({ message: ex.message });
    }
  });
};

module.exports = fetch_campaign_leads_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/controllers/update_lead_action_by_pa.js
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const submit_action_on_lead_service = require("../services/submit_action_on_lead_service");

module.exports = async (req, res) => {
    try {
        const lead_id = req.body.lead_id;
        const agreed_amount = +req.body.agreed_amount || 0;
        const agreed_ton = +req.body.agreed_ton || 0;
        const action_performed = +req.body.action_performed || 0;
        if (!lead_id || !action_performed) {
            return res.status(http_status_code_enum.badRequest).json({ message: "Parameters missing: lead_id or action_performed" });
        }
        let lead_updated_data = await submit_action_on_lead_service(lead_id, agreed_amount, agreed_ton, action_performed);
        let submit_action_on_lead = create_api_response(true, lead_updated_data);
        return res.status(http_status_code_enum.ok).json(submit_action_on_lead);
    } catch (err) {
        return res.status(http_status_code_enum.bad_request).json({
            message: err.message,
        });
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/controllers/save_merchant_interests_controller.js
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response.js');
const merchant_interests_service = require('../services/save_merchant_interests_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const merchant_detail_id = req.user.user_profile_id;
        const name = req.body.name;
        const mobile_number = req.body.mobile_number;
        const business_name = req.body.business_name;
        const address = req.body.address;

        if (!name || !business_name || !mobile_number || !address) {
            throw new ValidationError('All parameters are mandatory!');
        }
        if (mobile_number.length === 10) {
            const result = await merchant_interests_service(merchant_detail_id, name, business_name, mobile_number, address);
            const response = create_api_response(true, result.message);
            res.status(http_status_code_enum.ok).json(response);
        } else {
            throw new ValidationError('Invalid number');
        }
    } catch (err) {
        return res.status(http_status_code_enum.bad_request).json({
            status: false,
            message: err.message
        });
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/controllers/fetch_crops_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const language_enum = require("../../../../entities_v2/metadata/enums/global/langauge");
const fetch_campaign_crops = require("../_services/fetch_campaign_crop_service");

module.exports = async (req, res) => {
  try {
    const language = +req.headers.language || language_enum.english;
    const data = await fetch_campaign_crops(language);
    let response = create_api_response(true, "success", data);
    res.status(http_status_code_enum.ok).json(response);
  } catch (err) {
    error_log(err);
    res
      .status(http_status_code_enum.bad_request)
      .json(create_api_response(false, err.message));
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/controllers/add_sell_crop_picture_controller.js
const http_status_codes = require("../../../../enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const add_sell_crop_picture_service = require("../services/add_sell_crop_picture_service");
module.exports = async (req, res) => {
  try {
    const crop_id = +req.body.crop_id || 0;
    const lead_id = +req.body.lead_id || 0;
    const crop_image = req.body.crop_image;
    const merchant_detail_id = req.user.user_profile_id;
    if (!crop_id || !lead_id || !crop_image) {
      let error_message =
        "crop_id, lead_id and crop_image are mandatory params";
      return res
        .status(http_status_codes.bad_request)
        .json(create_api_response(false, error_message));
    }
    const added_sell_crop_picture = await add_sell_crop_picture_service(
      crop_id,
      lead_id,
      crop_image,
      merchant_detail_id
    );
    return res
      .status(http_status_codes.ok)
      .json(create_api_response(true, "success", {}));
  } catch (err) {
    return res
      .status(http_status_codes.bad_request)
      .json(create_api_response(false, err.message));
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/controllers/fetch_all_pa_controller.js
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const fetch_all_pa_service = require("../_services/fetch_all_pa_service");

module.exports = async (req, res) => {
  try {
    const district_id = +req.query.district_id;
    const state_id = +req.query.state_id;
    let pa_data = await fetch_all_pa_service(district_id, state_id);
    let fetched_pa_data = create_api_response(true, "success", pa_data);
    return res.status(http_status_code_enum.ok).json(fetched_pa_data);
  } catch (err) {
    return res.status(http_status_code_enum.bad_request).json({
      message: err.message,
    });
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/controllers/submit_action_on_lead_controller.js
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const submit_action_on_lead_service = require("../_services/submit_action_on_lead_service");
const lead_remark_enum = require("../../../../enums/campaign/lead_actions");

module.exports = async (req, res) => {
  try {
    const action_on_leads = req.body || [];
    const lead_updated_data = [];
    for (let index = 0; index < action_on_leads.length; index++) {
      const action_body = action_on_leads[index];
      const lead_id = action_body.lead_id;
      const agreed_amount = +action_body.agreed_amount || 0;
      const agreed_ton = +action_body.agreed_ton || 0;
      let action_performed = +action_body.action_performed || 0;
      const assigned_to_pa_id = action_body.assigned_to;
      if (assigned_to_pa_id) {
        action_performed = lead_remark_enum.Assign_To_PA_To_Collect_Sample
      }
      if (!lead_id || !action_performed) {
        return res.status(http_status_code_enum.badRequest).json({ message: "Parameters missing: lead_id or action_performed" });
      }
      let lead_update_data = await submit_action_on_lead_service(lead_id, agreed_amount, agreed_ton, action_performed, assigned_to_pa_id);
      lead_updated_data.push(lead_update_data);
    }
    let submit_action_on_lead = create_api_response(true, lead_updated_data);
    return res.status(http_status_code_enum.ok).json(submit_action_on_lead);
  } catch (err) {
    return res.status(http_status_code_enum.bad_request).json({
      message: err.message,
    });
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/controllers/create_campaign_banner_controller.js
const HTTPStatusCodeEnum = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const { type } = require('../../../../enums/market_linkage/enums/appLogEnum');
const app_log_service = require('../../../../common_services/market_linkage/logging/app_log_service');
const create_campaign_banner_service = require('../_services/create_campaign_banner_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');
const error_log = require('../../../../middelware/error_log');

module.exports = async (req, res) => {
    try {
        const crop_id = req.body.cropId || '';
        const min_price = +req.body.minPrice || 0;
        const max_price = +req.body.maxPrice || 0;
        const comment = req.body.comment;
        if (!min_price || !max_price || !crop_id) {
            throw new ValidationError('minPrice, maxPrice and cropId are mandatory params');
        }
        const data = await create_campaign_banner_service(crop_id, min_price, max_price, comment);
        return res.status(HTTPStatusCodeEnum.ok).json({
            data
        })
    } catch (err) {
        error_log(err);
        app_log_service({ type: type.error, err });
        return res.status(HTTPStatusCodeEnum.badRequest).json({
            message: err.message
        });
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/controllers/fetch_campaign_leads_controller.js
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const fetch_campaign_leads_services = require("../_services/fetch_campaign_leads_service");
const { fetch_mapped_campaign_leads_service } = require("../services/fetch_mapped_lead_service");
const user_role_enum = require("../../../../enums/user_profile/user_role")

module.exports = async (req, res) => {
  try {
    const user_role_id = +req.user?.user_role_id;
    const user_profile_id = req.user?.user_profile_id;
    const state_id = +req.query.state_id || null;
    const district_id = +req.query.district_id || null;
    const crop_id = req.query.crop_id || null;
    const status = +req.query.status || null;
    const merchant_detail_id = +req.query.merchant_detail_id || null;
    const page_no = +req.query.page_no || 1;
    const limit = +req.query.limit || 10;
    let campaign_leads;
    if (user_role_id === +user_role_enum.PROCUREMENT_ASSOCIATE)
      campaign_leads = await fetch_mapped_campaign_leads_service(state_id, district_id, crop_id, merchant_detail_id, user_profile_id);
    else
      campaign_leads = await fetch_campaign_leads_services(state_id, district_id, crop_id, status, merchant_detail_id, page_no, limit);
    let fetched_campaign = create_api_response(true, "success", campaign_leads);
    return res.status(http_status_code_enum.ok).json(fetched_campaign);
  } catch (err) {
    return res.status(http_status_code_enum.bad_request).json({
      message: err.message,
    });
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/controllers/fetch_action_on_lead_controller.js
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const fetch_action_on_lead_service = require("../services/fetch_action_on_lead_service");

module.exports = async (req, res) => {
  try {
    const user_role_id = req.user.user_role_id;
    let actions = await fetch_action_on_lead_service(user_role_id);
    let fetched_actions = create_api_response(true, "success", actions);
    return res.status(http_status_code_enum.ok).json(fetched_actions);
  } catch (err) {
    return res.status(http_status_code_enum.bad_request).json({
      message: err.message,
    });
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/controllers/fetch_terms_and_conditions_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const fetch_pending_tnc_service = require("../../../../entities_v2/campaign_services/fetch_pending_tnc_service");
const language_enum=require('../../../../entities_v2/metadata/enums/global/langauge')
module.exports = async (req, res) => {
    try {
        
        let merchant_detail_id=req.user.user_profile_id;
        let language_id=+req.headers.language || language_enum.hindi;
        let fetch_pending_tnc=await fetch_pending_tnc_service(merchant_detail_id,language_id);
       
        let sample_response=create_api_response(true,"success",fetch_pending_tnc);
        res.status(http_status_code_enum.ok).json(sample_response);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false,err.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/controllers/create_campaign_record_controller.js
const HTTPStatusCode = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const { type } = require('../../../../enums/market_linkage/enums/appLogEnum');
const create_campaign_record_service = require('../_services/create_campaign_record_service');
const appLogService = require('../../../../common_services/market_linkage/logging/app_log_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');
const error_log = require('../../../../middelware/error_log');

module.exports = async (req, res) => {
    try {
        const state_id = req.body?.state?.id || null;
        const districts = req.body.districts || [];// [{id,name}]
        const district_ids = districts.map(ele => ele.id);
        const crop_id = req.body.cropId;
        const quantity_in_tonne = +req.body.quantity || 0;
        const min_price = +req.body.minPrice || 0;
        const max_price = +req.body.maxPrice || 0;
        const start_date = req.body.startDate;
        const end_date = req.body.endDate;
        const comment = req.body.comment;
        const banner_img_url = req.body.banner_img_url;
        const user_id = req.user.user_profile_id;
        const platform_id = +req.body.platform_id || null;
        const target_mobile_numbers = req.body.target_mobile_numbers || null;
        if (platform_id && target_mobile_numbers) {
            throw new ValidationError('need one param at a time ');
        }
        if (!state_id || district_ids.length === 0 || !crop_id || !quantity_in_tonne) {
            throw new ValidationError('state, districts, quantity and cropId are mandatory params');
        }
        const data = await create_campaign_record_service(state_id, district_ids, crop_id, quantity_in_tonne, min_price, max_price, start_date, end_date, comment, banner_img_url, user_id, platform_id, target_mobile_numbers);
        data.state = req.body.state;
        data.districts = req.body.districts;
        return res.status(HTTPStatusCode.ok).json({
            data,
            message: 'success'
        });
    } catch (err) {
        error_log(err);
        appLogService({ type: type.error, err });
        return res.status(HTTPStatusCode.badRequest).json({
            message: err.message
        });
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/controllers/update_campaign_banner_status_controller.js
const HTTPStatusCode = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
// const { type } = require('../../../../enums/market_linkage/enums/appLogEnum');
const campaignStagesEnum = require('../../../../enums/market_linkage/enums/campaignEnum').stages;
const update_campaign_stage_service = require('../_services/update_campaign_stage_service');
const error_log = require('../../../../middelware/error_log')
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const stage = +req.body.status || campaignStagesEnum.force_shut;
        const campaign_id = req.body.campaignId;
        const reason = req.body.reason || '';
        if (!campaign_id) {
            throw new ValidationError('campaignId is a mandatory param');
        }
        const data = await update_campaign_stage_service(campaign_id, stage, reason);
        return res.status(HTTPStatusCode.ok).json({
            data
        });
    } catch (err) {
        error_log(err);
        return res.status(HTTPStatusCode.badRequest).json({
            message: err.message
        });
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/controllers/fetch_all_campaign_reports_controller.js
const HTTPStatusCode = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
const fetch_all_campaign_reports_service = require("../_services/fetch_all_campaign_reports_service");

module.exports = async (req, res) => {
    try {
        const page_no = +req.query.page_no || 1;
        const limit = +req.query.limit || 100;
        const campaign_id = +req.query.campaignId || 0;
        const data = await fetch_all_campaign_reports_service(campaign_id, page_no, limit);
        return res.status(HTTPStatusCode.ok).json({
            data,
            message: "success"
        });
    }
    catch (err) {
        console.log(err);
        app_log_service({ type: type.error, err });
        return res.status(HTTPStatusCode.badRequest).json({
            message: err.message
        });
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/controllers/create_price_polling_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const create_price_polling_service = require('../_services/create_campaign_lead_service');
const language_enum = require('../../../../entities_v2/metadata/enums/global/langauge');
const campaign_source_enum = require('../../../../entities_v2/metadata/enums/campaign/source_enum');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const campaign_id = req.body.campaign_id;
        const country_code = req.user.country?.country_code;
        const price_per_quintal = +req.body.price || 0;// per quintal
        const quantity_in_tonne = +req.body.quantity || 0;// in tonne
        const crop_type_id = req.body.crop_type_id;
        const merchant_id = req.user.user_profile_id;
        const language_id = +req.headers.language || language_enum.hindi;
        const master_merchant_id = req.user.master_merchant_id || null;
        if (!price_per_quintal || !quantity_in_tonne) {
            throw new ValidationError('price_per_quintal and quantity_in_tonne are mandatory parameter');
        }
        if (!campaign_id && !crop_type_id) {
            throw new ValidationError('must have either campaign_id or crop_type_id parameter');
        }
        // respective service to be called
        let source = campaign_source_enum.campaign;
        if (!campaign_id) {
            source = campaign_source_enum.retailer;
        }
        const price_polling_data = await create_price_polling_service(campaign_id, price_per_quintal, quantity_in_tonne, crop_type_id, merchant_id, master_merchant_id, language_id, source, country_code)
        const response = create_api_response(true, 'success', price_polling_data);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/controllers/terms_and_conditions_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const register_tnc_acknowledgement = require('../../../../entities_v2/campaign/register_tnc_acknowledgement');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const tnc_id = +req.body.tnc_id;
        const merchant_detail_id = req.user.user_profile_id;
        if (!tnc_id) {
            throw new ValidationError('tnc_id is required parameter');
        }
        await register_tnc_acknowledgement(tnc_id, merchant_detail_id);
        const sample_response = create_api_response(true, 'success');
        res.status(http_status_code_enum.ok).json(sample_response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/services/fetch_leads_by_campaign_id_service.js
const leadModel = require("../../../../database/mongoose/market_linkage_db/lead.model");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
const campaignSourceEnum = require("../../../../enums/market_linkage/enums/campaignEnum").source;

module.exports = (campaignId, source) => {
    return new Promise(async (resolve, reject) => {
        try {
            let leads;
            if (source == campaignSourceEnum.campaign) {
                leads = await leadModel.find({
                    campaign_id: campaignId
                }).sort({ createdAt: -1 });
            }
            else if (source == campaignSourceEnum.retailer) {
                leads = await leadModel.find({
                    source: campaignSourceEnum.retailer
                }).sort({ createdAt: -1 });
            }
            for (let index = 0; index < leads.length; index++) {
                const element = leads[index].toObject();
                element.merchantName = element.merchant.name;
                element.merchantMobileNumber = element.merchant.mobile_number;
                element.merchantDistrict = element.merchant?.district?.name || null;
                element.quantity = element.quantity_in_kg / 1000;
                element.price = element.price_per_kg * 100;
                delete element.price_per_kg;
                delete element.quantity_in_kg;
                delete element.merchant;
                leads[index] = element;
            }
            return resolve(leads);
        }
        catch (err) {
            app_log_service({ type: type.error, err });
            console.log(err.message);
            reject(err);
        }
    })
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/services/update_campaign_stage_service.js
const campaignModel = require('../../../../database/mongoose/market_linkage_db/campaign.model');
const campaignStageEnum = require('../../../../enums/market_linkage/enums/campaignEnum').stages;

const { type } = require('../../../../enums/market_linkage/enums/appLogEnum');
const appLogService = require('../../../../common_services/market_linkage/logging/app_log_service');
const { delete_app_banner } = require('../../../../entities/app_banner/service/app_banner_operations');
const { ValidationError } = require('../../../../utilities/error/custom_error');
const error_log = require('../../../../middelware/error_log');

module.exports = (campaignId, stage, reason) => {
    return new Promise(async (resolve, reject) => {
        try {
            let campaign = await campaignModel.findById(campaignId);
            if (stage === campaignStageEnum.force_shut) {
                if (campaign.stage === campaignStageEnum.force_shut) {
                    throw new ValidationError('already shut down');
                }
                campaign.stage = stage;
                campaign.reason = reason;
                await campaign.save();
                await delete_app_banner(campaign.app_banner_id);
            } else {
                throw new ValidationError('operation other than shutting down blocked by the server');
            }
            campaign = campaign.toObject();
            campaign.campaignId = campaign._id;
            campaign.quantity = campaign.quantity_in_kg / 1000;
            delete campaign.quantity_in_kg;
            delete campaign._id;
            campaign.leads = [];
            return resolve(campaign);
        } catch (err) {
            appLogService({ type: type.error, err });
            error_log(err);
            reject(err);
        }
    });
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/services/create_campaign_banner_service.js
const cropModel = require('../../../../database/mongoose/market_linkage_db/crop.model');
const { type } = require('../../../../enums/market_linkage/enums/appLogEnum');
const postRequest = require('../../../../utilities/market_linkage/post_request');
const app_log_service = require('../../../../common_services/market_linkage/logging/app_log_service');
const save_banner_url_in_s3 = require('../../../../common_services/media/save_banner_url_in_s3');
const { BANNERBEAR_API_KEY } = require('../../../../constants/global');
const { ValidationError } = require('../../../../utilities/error/custom_error');
const error_log = require('../.././../../middelware/error_log');

module.exports = (cropId, minPrice, maxPrice, comment) => {
    return new Promise(async (resolve, reject) => {
        try {
            const cropDetail = await cropModel.findById(cropId);
            if (!cropDetail || !cropDetail?.cropPic) {
                throw new ValidationError('crop not present in DB please add crop');
            }
            const bannerTemplateId = cropDetail.bannerTemplateId;
            if (!bannerTemplateId) {
                throw new ValidationError('bannerTemplateId not found');
            }
            const bannerImageUrl = await generateBanner(bannerTemplateId, minPrice, maxPrice, comment);
            const banner_image_url_s3 = await save_banner_url_in_s3(bannerImageUrl)
            return resolve({ bannerImageUrl: banner_image_url_s3 });
        } catch (err) {
            app_log_service({ type: type.error, err });
            error_log(err);
            reject(err);
        }
    });
}

const generateBanner = (bannerTemplateId, minPrice, maxPrice, comment) => {
    return new Promise(async (resolve, reject) => {
        try {
            const API_URL = 'https://sync.api.bannerbear.com/v2/images';
            const API_KEY = BANNERBEAR_API_KEY;
            const API_HEADERS = {
                'Content-Type': 'application/json',
                Authorization: `Bearer ${API_KEY}`
            };
            const body = {
                template: bannerTemplateId,
                modifications: [
                    {
                        name: 'Price_Range',
                        text: `₹ ${minPrice} - ${maxPrice}`,
                        color: null,
                        background: null
                    },
                    {
                        name: 'Text',
                        text: comment,
                        color: null,
                        background: null
                    }
                ],
                transparent: false
            }
            const response = await postRequest(API_URL, body, API_HEADERS);
            return resolve(response?.data?.image_url_png);
        } catch (err) {
            app_log_service({ type: type.error, err });
            error_log(err);
            return reject(err);
        }
    })
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/services/add_sell_crop_picture_service.js
const error_log = require('../.././../../middelware/error_log');
const sell_crop_picture_model = require('../../../../database/models_v2/campaign/sell_crop_picture');
const post_request_service = require('../../../../utilities/external_API_calls/post_request');
const {
    get_sell_crop_picture_detail_by_id
} = require('../../../../data_abstraction_layer/campaign/sell_crop_picture');
const global_config = require('../../../../config/global_config');
const env_enum = require('../../../../enums/env/env_enum');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const add_sell_crop_picture_service = async (
    crop_id,
    lead_id,
    crop_image,
    merchant_detail_id
) => {
    try {
        const sell_crop_picture_details = await sell_crop_picture_model.create({
            is_active: 1,
            crop_id,
            lead_id,
            crop_image,
            merchant_detail_id
        });
        if (!sell_crop_picture_details) { throw new ValidationError('cannot add sell crop picture'); }
        // logging data science api stats
        await post_crop_identification(
            merchant_detail_id,
            crop_image,
            sell_crop_picture_details.id
        );

        return sell_crop_picture_details;
    } catch (ex) {
        error_log(ex);
        return { message: ex.message };
    }
};
const post_crop_identification = async (
    merchant_detail_id,
    crop_image,
    sell_crop_picture_detail_id
) => {
    let status = false;
    const send_date = new Date().getTime();
    let url =
      'https://asia-south1-data-science-test-343606.cloudfunctions.net/crop-identification-model';
    const headers = {
        Authorization: 'Bearer e0573219-bcbe-4ef4-a8a8-81534b249a16'
    };
    if (global_config.env === env_enum.production) {
        url =
      'https://asia-south1-data-science-test-343606.cloudfunctions.net/commodity-detection-prod';
    }
    const body = {
        url: crop_image
    };
    let crop_identification_obj = '';

    try {
        crop_identification_obj = await post_request_service(
            url,
            body,
            headers,
            crop_image,
            'crop_identification'
        );
        // save for status true
        status = true;
    } catch (err) {
        error_log(err);
    } finally {
        const receive_date = new Date().getTime();
        // total time taken by data science api
        const response_time_ms = receive_date - send_date;
        // fetch sell crop picture details to update with stats data
        const sell_crop_picture_details = await get_sell_crop_picture_detail_by_id({
            merchant_detail_id,
            id: sell_crop_picture_detail_id
        });
        // properties to update
        sell_crop_picture_details.crop_type =
      crop_identification_obj?.data?.crop_type;
        sell_crop_picture_details.response_time = response_time_ms;
        sell_crop_picture_details.status = status;
        await sell_crop_picture_details.save();
    }

};
module.exports = add_sell_crop_picture_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/services/fetch_all_campaign_reports_service.js
const campaignModel = require("../../../../database/mongoose/market_linkage_db/campaign.model");
const fetch_leads_by_campaign_id_service = require("./fetch_leads_by_campaign_id_service");
const userModel = require("../../../../database/mongoose/market_linkage_db/user.model");
const campaignSourceEnum = require("../../../../enums/market_linkage/enums/campaignEnum").source;
const sync_campaign_status_service = require("./sync_campaign_status_service");

module.exports = (campaignId, pageNo, limit) => {
  return new Promise(async (resolve, reject) => {
    try {
      await sync_campaign_status_service();
      const skip = (pageNo - 1) * limit;
      let campaigns = await campaignModel
        .find()
        .sort({ createdAt: -1 })
        .skip(skip)
        .limit(limit);
      let campaignsCount = (await campaignModel.countDocuments({}).exec()) + 1;
      for (let index = 0; index < campaigns.length; index++) {
        const element = campaigns[index].toObject();
        element.campaignId = element._id;
        delete element._id;
        element.quantity = element.quantity_in_kg / 1000;
        element.min_price = element.min_price * 100; // per quintal to per kg
        element.max_price = element.max_price * 100; // per quintal to per kg
        delete element.quantity_in_kg;
        const user = await userModel.findById(element.createdBy);
        delete element.createdBy;
        if (user) {
          element.createdBy = {
            name: user.name,
            mobileNumber: user.mobileNumber,
          };
        }
        element.leads = await fetch_leads_by_campaign_id_service(
          element.campaignId,
          campaignSourceEnum.campaign
        );
        campaigns[index] = element;
      }
      if (skip < campaignsCount && campaignsCount < pageNo * limit) {
        const retailerLead = await getRetailerLeads();
        campaigns = [...campaigns, retailerLead];
      }
      return resolve({
        campaigns,
        campaignsCount,
      });
    } catch (err) {
      reject(err);
    }
  });
};

const getRetailerLeads = () => {
  return new Promise(async (resolve, reject) => {
    try {
      const campaign = {
        cropId: null,
        state: null,
        districts: null,
        startDate: null,
        endDate: null,
        stage: null,
        min_price: null,
        max_price: null,
        banner_img_url: null,
        comment: null,
        createdAt: null,
        updatedAt: null,
        branchUrl: null,
        totalAudience: null,
        campaignId: null,
        quantity: null,
        leads: null,
        source: campaignSourceEnum.retailer,
      };
      campaign.leads = await fetch_leads_by_campaign_id_service(
        null,
        campaignSourceEnum.retailer
      );
      return resolve(campaign);
    } catch (err) {
      error_log(err);
      resolve(null);
    }
  });
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/services/create_retailer_on_lead_service.js
const leadModel = require('../../../../database/mongoose/market_linkage_db/lead.model');
const userModel = require('../../../../database/mongoose/market_linkage_db/user.model');
const error_log = require('../../../../middelware/error_log');
const add_procurement_bulk_service = require('../../procurement_sources/services/add_procurement_bulk_service');

const create_retailer_on_lead_service = (lead_id, assigned_to_pa_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            const [lead_data, pa_data] = await Promise.all([
                leadModel.findById(lead_id),
                userModel.findById(assigned_to_pa_id)
            ])
            if (!lead_data) {
                return reject({ message: "Invalid lead_id" });
            }
            if (!pa_data) {
                return reject({ message: "Invalid assigned_to_pa_id" })
            }
            const retailer_data = [{
                "Retailer Name": lead_data.merchant?.name,
                "Retailer Mobile Number": lead_data.merchant?.mobile_number,
                "Retailer Address": lead_data.merchant?.full_address,
                "Retailer District": lead_data.merchant?.district?.name,
                "PA Mobile Number": pa_data.mobileNumber
            }];
            await add_procurement_bulk_service(retailer_data);
            resolve(true);
        } catch (err) {
            error_log(err);
            reject({ message: err.message });
        }
    });
};

module.exports = create_retailer_on_lead_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/services/create_campaign_record_service.js
const campaignModel = require("../../../../database/mongoose/market_linkage_db/campaign.model");
const campaignStageEnum = require("../../../../enums/market_linkage/enums/campaignEnum").stages;
const broadCastCampaignBannerService = require("./broadcast_campaign_banner_service");
const postRequest = require("../../../../utilities/market_linkage/post_request");
const fetchCropService = require("../../../../entities_v2/campaign/fetch_campaign_crops_service");
const broadcast_campaign = require("../../../../entities_v2/campaign/broadcast_campaign");
const error_log = require("../../../../middelware/error_log");
const fetch_campaign_crops_service = require("../../../../entities_v2/campaign/fetch_campaign_crops_service");
const language_enum = require('../../../../enums/global/language');

module.exports = (state, districts, cropId, quantityInTonne, minPrice, maxPrice, startDate, endDate, comment, banner_img_url, createdBy, platform_id, target_mobile_numbers) => {
    return new Promise(async (resolve, reject) => {
        try {
            const dateNow = new Date();
            let stage = campaignStageEnum.scheduled;
            if (new Date(startDate) < dateNow) {
                stage = campaignStageEnum.running;
            }
            if (new Date(endDate) < dateNow) {
                stage = campaignStageEnum.expired;
            }
            let campaign = new campaignModel(
                {
                    cropId,
                    state,
                    districts,
                    quantity_in_kg: quantityInTonne * 1000,
                    startDate,
                    endDate,
                    min_price: minPrice / 100,// saving in kg
                    max_price: maxPrice / 100,//converting from per quintal to per kg
                    comment,
                    banner_img_url,
                    stage,
                    createdBy,
                    platform_id,
                    target_mobile_numbers
                }
            );
            campaign = await campaign.save();
            const { cropPicUrl, cropName } = await fetchCropService(campaign.cropId);
            const branchIOresponseurl = await generateBranchIOLink(campaign.id, campaign.cropId, cropName, cropPicUrl);
            campaign.branchUrl = branchIOresponseurl.branchUrl;
            let banner;
            let banner_active;
            if (stage == campaignStageEnum.running) {
                banner_active = true;
            }
            else {
                banner_active = false;
            }
            const campaign_crop = await fetch_campaign_crops_service(language_enum.default, cropId);
            const campaign_banner_object = {
                "campaign_id": campaign.id,
                "crop_id": cropId,
                "crop_img_url": campaign_crop.crop_img_url || "",
                name: campaign_crop.name
            }
            banner = await broadCastCampaignBannerService(banner_img_url, branchIOresponseurl.branchUrl, state.id, districts.map(d => d.id), campaign.id, banner_active, campaign_banner_object);
            campaign.totalAudience = banner.dataValues.total_audience;
            campaign.app_banner_id = banner.id;
            campaign = await campaign.save();
            broadcast_campaign(banner_img_url, branchIOresponseurl.branchUrl, state.id, districts.map(ele => ele.id), campaign._id + "", platform_id, target_mobile_numbers)
                .catch(err => {
                    error_log(err);
                })
            campaign = campaign.toObject();
            campaign.campaignId = campaign._id;
            campaign.quantity = campaign.quantity_in_kg / 1000;
            campaign.min_price = campaign.min_price * 100;
            campaign.max_price = campaign.max_price * 100;
            delete campaign.quantity_in_kg;
            delete campaign._id;
            campaign.leads = [];
            delete campaign.createdBy;
            return resolve(campaign);
        }
        catch (err) {
            error_log(err);
            return reject(err);
        }
    });
}

const generateBranchIOLink = (campaignId, cropId, cropName, cropPicUrl) => {
    return new Promise(async (resolve, reject) => {
        try {
            const data = JSON.stringify({
                "branch_key": "key_live_pk6sb0nWjlo8i4IEpdwSvepfErlDZ0yB",
                "channel": "whatsapp",
                "feature": "campaign",
                "campaign": "new campaign",
                "stage": "broadcast view",
                "tags": [
                    "generated_from_backend"
                ],
                "data": {
                    "$ios_url": "http://www.farmart.co/",
                    "$android_url": "https://play.google.com/store/apps/details?id=com.farmart.retailer&hl=en_AU",
                    "$desktop_url": "http://www.farmart.co/",
                    "$canonical_identifier": "content/123",
                    "$deeplink_path": `CAMPAIGN`,
                    "$og_title": "Campaign form redirect",
                    "$og_description": "Campaign form redirect",
                    "campaign": {
                        "campaign_id": campaignId,
                        "crop_id": cropId,
                        "name": cropName,
                        "crop_img_url": cropPicUrl,
                    }
                }
            });
            let url = "https://api2.branch.io/v1/url";

            const response = await postRequest(url, data, {
                'Content-Type': 'application/json'
            });

            return resolve({ branchUrl: response.data.url });
        }
        catch (err) {
            error_log(err);
            return reject(err);
        }
    })
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/services/dispatch_document_create_service.js
const purchase_order_model = require('../../../../database/mongoose/market_linkage_db/purchaseOrder.model');
const retailer_model = require('../../../../database/mongoose/market_linkage_db/procurementSources.model');
const master_sample_model = require('../../../../database/mongoose/market_linkage_db/masterSample.model');
const get_company_gst_detail_service = require('../../../../common_services/billing/get_company_gst_based_on_state');
const get_purchase_order_document_template = require('./get_purchase_order_document_template');
const { generate_pdf_document } = require('../../../../common_services/document/generate_pdf_document');
const error_log = require('../../../../middelware/error_log');
const bag_type_enum = require('../../../../enums/market_linkage/enums/masterSampleEnum').bagType
const { ValidationError } = require('../../../../utilities/error/custom_error');

const add_dispatch_document = async (purchase_order_id) => {
    try {
        const purchase_order = await purchase_order_model.findById(purchase_order_id);
        if (!purchase_order) { throw new ValidationError('purchase order not created'); }
        const pa_name = purchase_order?.paInfo?.name;
        const retailer_id = purchase_order?.retailerInfo?.id;
        const retailer = await retailer_model.findById(retailer_id);
        const sample_id = purchase_order.sampleId;
        const sample = await master_sample_model.findById(sample_id);
        const { company_name, billing_address, cin_number, gst_number } = await get_company_gst_detail_service(purchase_order?.retailerInfo?.state);
        const bill_to = `${company_name}\\n\\nAddress - ${billing_address}\\n\\nCIN - ${cin_number}\\n\\nGST - ${gst_number}`;
        let ship_to = `${company_name}`;
        if (pa_name) { ship_to += '\\n\\nPA -' + pa_name; }
        if (purchase_order?.retailerInfo?.district) { ship_to += ', ' + purchase_order?.retailerInfo?.district; }
        if (purchase_order?.retailerInfo?.state) { ship_to += ', ' + purchase_order?.retailerInfo?.state; }

        let transacted_by = '';
        if (purchase_order?.retailerInfo?.name) { transacted_by += 'Retailer Name: ' + purchase_order?.retailerInfo?.name; }
        if (retailer?.business_name) { transacted_by += '\\nShop Name: ' + retailer?.business_name; }
        if (retailer?.address) { transacted_by += '\\n\\nAddress: ' + retailer?.address; }

        let bag_type = '';
        let bag_capacity = 1;
        const cost_per_bag = 60;
        switch (sample.bagType) {
        case bag_type_enum.Jute:
            bag_type = 'Jute'
            bag_capacity = 60;
            break;
        case bag_type_enum.PP:
            bag_type = 'PP'
            bag_capacity = 60;
            break;
        case bag_type_enum['Boxes(10 kgs)']:
            bag_type = 'Boxes(10 kgs)';
            bag_capacity = 10;
            break;
        case bag_type_enum['Crates(20 kgs)']:
            bag_type = 'Crates(20 kgs)';
            bag_capacity = 20;
            break;
        }
        const commission_per_kg = 40 / 100;
        const labor_per_kg = 60 / 100;

        const document_params = {
            $po_number: purchase_order.farmartId,
            $po_date: new Date(purchase_order.createdAt).toDateString(),
            $bill_to: bill_to,
            $ship_to: ship_to,
            $transacted_by: transacted_by,
            $bag_type: bag_type,
            $commodity_name: sample.cropName,
            $loading_bag_weight: bag_capacity,
            $cost_per_bag: cost_per_bag,
            $gross_weight: sample.procurableTon * 1000,
            $bag_deduction: sample.bagDeduction * sample.procurableTon * 1000 / 100,
            $purchase_rate: sample.retailerLockedPrice / 100
        }
        document_params.$net_weight = document_params.$gross_weight - document_params.$bag_deduction;
        document_params.$number_of_bags = Math.ceil(document_params.$net_weight / bag_capacity);
        document_params.$total_crop_value = sample.retailerLockedPrice * document_params.$net_weight;
        document_params.$expected_commission = document_params.$net_weight * commission_per_kg;
        document_params.$labour_cost = document_params.$net_weight * labor_per_kg;
        document_params.$payable_amount = document_params.$total_crop_value + document_params.$expected_commission + document_params.$labour_cost;

        const { template } = await get_purchase_order_document_template();
        const file_path = `${purchase_order.farmartId}/Dispatch${purchase_order.farmartId}.pdf`;
        const po_doc_url = await generate_pdf_document(template, document_params, file_path);
        purchase_order.purchase_order_doc_link = po_doc_url;
        purchase_order.purchase_order_accepted = 2;
        await purchase_order.save();
    } catch (err) {
        error_log(err);
        return null;
    }
}

module.exports = {
    add_dispatch_document
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/services/fetch_mapped_lead_service.js
const purchase_crop_lead_model = require('../../../../database/mongoose/market_linkage_db/lead.model');
const error_log = require('../../../../middelware/error_log');
const read_mongo_documents = require('../../../../database/mongoose/read_document');
const campaign_lead_status_enum = require('../../../../enums/campaign/campaign_lead_status');
const merchant_detail_model = require('../../../../database/models/merchant_detail');
const crop_mongoose_model = require('../../../../database/mongoose/market_linkage_db/crop.model');
const retailer_model = require('../../../../database/mongoose/market_linkage_db/procurementSources.model');
const master_sample_model = require('../../../../database/mongoose/market_linkage_db/masterSample.model');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const fetch_mapped_campaign_leads_service = (state_id, district_id, crop_id, merchant_detail_id, pa_user_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            const lead_fetch_condition = {
                is_active: true,
                status: {
                    $ne: campaign_lead_status_enum.pending
                },
                pa_mapped: pa_user_id
            }
            if (state_id) lead_fetch_condition['merchant.state.id'] = state_id;
            if (district_id) lead_fetch_condition['merchant.district_id'] = district_id;
            if (crop_id) lead_fetch_condition.cropId = crop_id;
            if (merchant_detail_id) {
                const filtered_merchant = await merchant_detail_model.findOne({
                    where: {
                        id: merchant_detail_id,
                        is_active: 1
                    },
                    attributes: ['mobile_number']
                });
                if (!filtered_merchant) {
                    throw new ValidationError('merchant not found');
                }
                const filtered_merchant_mobile_number = filtered_merchant.mobile_number;
                lead_fetch_condition['merchant.mobile_number'] = filtered_merchant_mobile_number;
            }
            const leads_count = await purchase_crop_lead_model.countDocuments(lead_fetch_condition);
            const leads = await read_mongo_documents(purchase_crop_lead_model, lead_fetch_condition, leads_count, 0, 'createdAt', -1);
            const campaign_leads = {
                rows: [],
                count: leads.length
            };
            for (let index = 0; index < leads.length; index++) {

                const campaign_weight = leads[index].agreed_weight || leads[index].quantity_in_kg;
                const campaign_price = leads[index].agreed_amount || leads[index].price_per_kg;
                const lead_element = {
                    id: leads[index].farmart_id,
                    source: leads[index].source,
                    campaign_id: leads[index].campaign_id,
                    crop_id: leads[index].crop_id,
                    status: leads[index].remark_id,
                    stage: leads[index].status,
                    weight_in_tons: campaign_weight / 1000,
                    price_per_quintal: campaign_price * 100,
                    created_at: leads[index].createdAt,
                    merchant_mobile_number: leads[index].merchant.mobile_number
                };
                const sample = await master_sample_model.findOne({
                    leadId: leads[index]._id
                })
                if (sample) { continue; }
                const merchant = await merchant_detail_model.findOne({
                    where: {
                        mobile_number: lead_element.merchant_mobile_number,
                        is_active: 1
                    }
                });
                if (!merchant) {
                    campaign_leads.count--;
                    continue;
                }
                lead_element.merchant_detail_id = merchant.id;
                lead_element.merchant_name = merchant.name;
                if (lead_element.merchant_mobile_number) {
                    const retailer = await retailer_model.findOne({
                        mobileNumber: lead_element.merchant_mobile_number,
                        isActive: true
                    });
                    lead_element.retailer_farmart_id = retailer?.farmartId || null;
                    lead_element.retailer_id = retailer?._id || null;
                    lead_element.geoLocation = retailer?.geoLocation || null;
                    lead_element.retailer_pincode = retailer?.pincode || null;
                    lead_element.merchant_state = retailer?.stateName || null;
                    lead_element.merchant_district = retailer?.districtName || null;
                }
                lead_element.merchant_state = lead_element.merchant_state || merchant.state_name;
                lead_element.merchant_district = lead_element.merchant_district || merchant.district_name;
                const crop = await crop_mongoose_model.findById(leads[index].crop_id);
                lead_element.crop_name = crop.name;
                campaign_leads.rows.push(lead_element);
            }
            campaign_leads.count = campaign_leads.rows.length;
            return resolve({
                campaign_lead_data: {
                    campaign_leads
                }
            });
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    });
};

module.exports = { fetch_mapped_campaign_leads_service };



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/services/get_purchase_order_document_template.js

module.exports = async (template_id) => {
    return {
        template: '[{"layout":"lightHorizontalLines","columns":[{"width":"40%","style":"centerColumn","text":"PO Number : # $po_number"},{"width":"20%","style":"rightColumn","text":""},{"width":"40%","style":"centerColumn","text":"PO Date : $po_date"}]},{"text":"\\n\\n"},{"table":{"headerRows":1,"widths":[170,"*",170],"body":[[{"text":"Bill To","bold":true,"fontSize":10},{"text":"Ship To","bold":true,"fontSize":10},{"text":"Transacted By","bold":true,"fontSize":10}],[{"text":"$bill_to","fontSize":10},{"text":"$ship_to","fontSize":10},{"text":"$transacted_by","fontSize":10}]]}},{"text":"\\n\\n"},{"text":"Loading Instructions","fontSize":14,"bold":true},{"table":{"headerRows":1,"widths":[80,90,"*",100,100],"body":[[{"text":"Bag Type","bold":true,"fontSize":10},{"text":"Commodity Name","bold":true,"fontSize":10},{"text":"Loading Weight / Bag (Kg)","bold":true,"fontSize":10},{"text":"Cost Per Bag (in Rs)","bold":true,"fontSize":10},{"text":"Number of Bags","bold":true,"fontSize":10}],[{"text":"$bag_type","fontSize":10},{"text":"$commodity_name","fontSize":10},{"text":"$loading_bag_weight","fontSize":10},{"text":"$cost_per_bag","fontSize":10},{"text":"$number_of_bags","fontSize":10}]]}},{"text":"\\n\\n"},{"text":"Transaction details","fontSize":14,"bold":true},{"table":{"headerRows":1,"widths":[125,125,125,"*"],"body":[[{"text":"Crop Gross Weight (Kg)","bold":true,"fontSize":10},{"text":"Crop Net Weight (Kg)","bold":true,"fontSize":10},{"text":"Bag Deduction (Kg)","bold":true,"fontSize":10},{"text":"Purchase Rate (Rs/Quintal)","bold":true,"fontSize":10}],[{"text":"$gross_weight","fontSize":10},{"text":"$net_weight","fontSize":10},{"text":"$bag_deduction","fontSize":10},{"text":"$purchase_rate","fontSize":10}]]}},{"text":"\\n\\n"},{"text":"Payment details (in Rupees)","fontSize":14,"bold":true},{"table":{"headerRows":1,"widths":[125,125,125,"*"],"body":[[{"text":"Total Crop Value (Rs)","bold":true,"fontSize":10},{"text":"Expected Commission (Rs)","bold":true,"fontSize":10},{"text":"Labour & Bag Cost (Rs)","bold":true,"fontSize":10},{"text":"Expected Payable Amount (Rs)","bold":true,"fontSize":10}],[{"text":"$total_crop_value","fontSize":10},{"text":"$expected_commission","fontSize":10},{"text":"$labour_cost","fontSize":10},{"text":"$payable_amount","fontSize":10}]]}},{"text":"\\n\\n","pageBreak":"before"},{"text":"Terms and Condition of the PO","fontSize":14,"bold":true},{"text":"\\n"},{"ol":["The PO is valid only from 3 days of the PO creation","Farmart holds the right to penalize incase of not fulfilling the complete order post the PO acknowledgement"]}]',
        variables_required: ['$po_number', '$po_date', '$bill_to', '$ship_to', '$transacted_by', '$bag_type', '$commodity_name', '$loading_bag_weight', '$cost_per_bag', '$number_of_bags', '$gross_weight', '$net_weight', '$bag_deduction', '$purchase_rate', '$total_crop_value', '$expected_commission', '$labour_cost', '$payable_amount']
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/services/save_merchant_interests_service.js
const purchase_crop_lead_interests_model = require("../../../../database/models_v2/campaign/purchase_crop_lead_interests")
const error_log = require("../../../../middelware/error_log");

module.exports = async(merchant_detail_id, name, business_name, mobile_number, address) => {
   try{
    let message;
    const [interests, created] = await purchase_crop_lead_interests_model.findOrCreate({
        where:{
            merchant_detail_id : merchant_detail_id
        },
        defaults: {
            merchant_detail_id: merchant_detail_id,
            merchant_name: name,    
            business_name: business_name,
            mobile_number: mobile_number,
            address: address    
        }
    });
    if(!created){
        message = "Your request already exists.";
      }
     else {
        message = "Your request has been submitted successfully.";
      }
    let result = {
        created : created,
        message : message
    }
    return result;
   }catch(err){
    error_log(err);
   }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/services/fetch_action_on_lead_service.js
const error_log = require('../../../../middelware/error_log');
const user_role_enum = require("../../../../enums/user_profile/user_role");
const { ml_lead_stages } = require('../../../../enums/market_linkage/enums/ml_lead_enum');

const fetch_action_on_lead_service = (user_role_id) => {
  return new Promise(async (resolve, reject) => {
    try {
      let lead_actions = Object.entries(ml_lead_stages).map(ele => {
        return {
          id: ele[1],
          remark: ele[0],
        }
      })
      if (user_role_id !== user_role_enum.PROCUREMENT_ASSOCIATE) {
        lead_actions = lead_actions.filter(ele => ele.remark != "Create Sample")
      }
      resolve({ "actions": lead_actions });
    } catch (ex) {
      error_log(ex);
      reject({ message: ex.message });
    }
  });
};

module.exports = fetch_action_on_lead_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/services/purchase_order_document_create_service.js
const purchase_order_model = require('../../../../database/mongoose/market_linkage_db/purchaseOrder.model');
const retailer_model = require('../../../../database/mongoose/market_linkage_db/procurementSources.model');
const master_sample_model = require('../../../../database/mongoose/market_linkage_db/masterSample.model');
const get_company_gst_detail_service = require('../../../../common_services/billing/get_company_gst_based_on_state');
const get_purchase_order_document_template = require('./get_purchase_order_document_template');
const { generate_pdf_document } = require('../../../../common_services/document/generate_pdf_document');
const error_log = require('../../../../middelware/error_log');
const bag_type_enum = require('../../../../enums/market_linkage/enums/masterSampleEnum').bagType
const { ValidationError } = require('../../../../utilities/error/custom_error');

const add_purchase_document = async (purchase_order_id) => {
    try {
        const purchase_order = await purchase_order_model.findById(purchase_order_id);
        if (!purchase_order) { throw new ValidationError('purchase order not created'); }
        const pa_name = purchase_order?.paInfo?.name;
        const retailer_id = purchase_order?.retailerInfo?.id;
        const retailer = await retailer_model.findById(retailer_id);
        const sample_id = purchase_order.sampleId;
        const sample = await master_sample_model.findById(sample_id);
        const { company_name, billing_address, cin_number, gst_number } = await get_company_gst_detail_service(purchase_order?.retailerInfo?.state);
        const bill_to = `${company_name}\\n\\nAddress - ${billing_address}\\n\\nCIN - ${cin_number}\\n\\nGST - ${gst_number}`;
        let ship_to = `${company_name}`;
        if (pa_name) { ship_to += '\\n\\nPA -' + pa_name; }
        if (purchase_order?.retailerInfo?.district) { ship_to += ', ' + purchase_order?.retailerInfo?.district; }
        if (purchase_order?.retailerInfo?.state) { ship_to += ', ' + purchase_order?.retailerInfo?.state; }

        let transacted_by = '';
        if (purchase_order?.retailerInfo?.name) { transacted_by += 'Retailer Name: ' + purchase_order?.retailerInfo?.name; }
        if (retailer?.business_name) { transacted_by += '\\nShop Name: ' + retailer?.business_name; }
        if (retailer?.address) { transacted_by += '\\n\\nAddress: ' + retailer?.address; }

        let bag_type = '';
        let bag_capacity = 1;
        const cost_per_bag = 60;
        switch (sample.bagType) {
        case bag_type_enum.Jute:
            bag_type = 'Jute'
            bag_capacity = 60;
            break;
        case bag_type_enum.PP:
            bag_type = 'PP'
            bag_capacity = 60;
            break;
        case bag_type_enum['Boxes(10 kgs)']:
            bag_type = 'Boxes(10 kgs)';
            bag_capacity = 10;
            break;
        case bag_type_enum['Crates(20 kgs)']:
            bag_type = 'Crates(20 kgs)';
            bag_capacity = 20;
            break;
        }
        const commission_per_kg = 40 / 100;
        const labor_per_kg = 60 / 100;

        const document_params = {
            $po_number: purchase_order.farmartId,
            $po_date: new Date(purchase_order.createdAt).toDateString(),
            $bill_to: bill_to,
            $ship_to: ship_to,
            $transacted_by: transacted_by,
            $bag_type: bag_type,
            $commodity_name: sample.cropName,
            $loading_bag_weight: bag_capacity,
            $cost_per_bag: cost_per_bag,
            $gross_weight: sample.procurableTon * 1000,
            $bag_deduction: sample.bagDeduction * sample.procurableTon * 1000 / 100,
            $purchase_rate: sample.retailerLockedPrice
        }
        document_params.$net_weight = document_params.$gross_weight - document_params.$bag_deduction;
        document_params.$number_of_bags = Math.ceil(document_params.$net_weight / bag_capacity);
        document_params.$total_crop_value = sample.retailerLockedPrice * document_params.$net_weight;
        document_params.$expected_commission = document_params.$net_weight * commission_per_kg;
        document_params.$labour_cost = document_params.$net_weight * labor_per_kg;
        document_params.$payable_amount = document_params.$total_crop_value + document_params.$expected_commission + document_params.$labour_cost;

        const { template } = await get_purchase_order_document_template();
        const file_path = `${purchase_order.farmartId}/PO${purchase_order.farmartId}.pdf`;
        const po_doc_url = await generate_pdf_document(template, document_params, file_path);
        purchase_order.purchase_order_doc_link = po_doc_url;
        purchase_order.purchase_order_accepted = 2;
        await purchase_order.save();
    } catch (err) {
        error_log(err);
        return null;
    }
}

module.exports = {
    add_purchase_document
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/services/sync_campaign_status_service.js
const campaignModel = require("../../../../database/mongoose/market_linkage_db/campaign.model");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
const campaignStageEnum = require("../../../../enums/market_linkage/enums/campaignEnum").stages;

module.exports = async()=>{
    try{
        let campaigns = await campaignModel.find({
            "stage" : {
                "$in" : [campaignStageEnum.scheduled,campaignStageEnum.running]
            }
        });
        for(let index = 0;index<campaigns.length;index++){
            let element = campaigns[index];
            if ((element.stage = + campaignStageEnum.scheduled) || (element.stage = +campaignStageEnum.running)) {
                let stage = campaignStageEnum.scheduled;
                const dateNow = new Date();
                if (new Date(element.startDate) < dateNow) {
                    stage = campaignStageEnum.running;
                }
                if (new Date(element.endDate) < dateNow) {
                    stage = campaignStageEnum.expired;
                }
                element.stage = stage;
                await element.save();
            }
        }
    }
    catch(err){
        app_log_service({type:type.error,err});
        console.log(err);
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/services/broadcast_campaign_banner_service.js
const appLogService = require("../../../../common_services/market_linkage/logging/app_log_service");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const { store_app_banner } = require("../../../../entities/app_banner/service/app_banner_operations");

module.exports = async (campaignBannerUrl, actionLink, state_id, district_ids, campaignId, active, campaign_data) => {
    return new Promise(async (resolve, reject) => {
        try {
            const bannerType = 1;
            const screen_name = "CAMPAIGN";
            const tab_name = "MARKETING_TAB";
            const params = {
                data: campaign_data
            }
            const { app_banner } = await store_app_banner(campaignBannerUrl, actionLink, "Campaign Banner", bannerType, state_id, district_ids, campaignId, active, params, tab_name, screen_name);
            return resolve(app_banner);
        }
        catch (err) {
            appLogService({ type: type.error, err });
            console.log(err.message);
            return reject(err);
        }
    })
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/services/submit_action_on_lead_service.js
const purchase_crop_lead_model = require("../../../../database/mongoose/market_linkage_db/lead.model");
const error_log = require('../../../../middelware/error_log');
const campaign_lead_actions_model = require("../../../../database/mongoose/market_linkage_db/campaign_lead_actions.model");
const merchant_detail_model = require("../../../../database/models/merchant_detail");
const retailer_model = require("../../../../database/mongoose/market_linkage_db/procurementSources.model")
const crop_mongoose_model = require("../../../../database/mongoose/market_linkage_db/crop.model");
const create_retailer_on_lead_service = require("./create_retailer_on_lead_service");


const submit_action_on_lead_service = (lead_id, agreed_amount_per_quintal, agreed_ton, action_performed, assigned_to_pa_id) => {
  return new Promise(async (resolve, reject) => {
    try {
      let campaign_lead = await purchase_crop_lead_model.findOne({
        farmart_id: lead_id
      });
      const campaign_lead_action = await campaign_lead_actions_model.findOne({
        id: action_performed,
      });
      let campaign_lead_obj = {};
      if (campaign_lead && campaign_lead_action) {
        campaign_lead.remark_id = +campaign_lead_action.id;
        campaign_lead.status = +campaign_lead_action.status_enum;
        campaign_lead.agreed_amount = campaign_lead.price_per_kg;
        campaign_lead.agreed_weight = campaign_lead.quantity_in_kg;

        if (agreed_amount_per_quintal) {
          campaign_lead.agreed_amount = agreed_amount_per_quintal / 100;
        }
        if (agreed_ton) {
          campaign_lead.agreed_weight = agreed_ton * 1000;
        }
        if (assigned_to_pa_id) {
          campaign_lead.pa_mapped = assigned_to_pa_id;
          create_retailer_on_lead_service(
            campaign_lead.id,
            assigned_to_pa_id
          ).catch((err) => {
            error_log(err);
          })
        }
        campaign_lead = await campaign_lead.save();
        let campaign_weight = campaign_lead.agreed_weight || campaign_lead.quantity_in_kg;
        let campaign_price = campaign_lead.agreed_amount || campaign_lead.price_per_kg;
        campaign_lead_obj = {
          id: campaign_lead.farmart_id,
          source: campaign_lead.source,
          campaign_id: campaign_lead.campaign_id,
          crop_id: campaign_lead.crop_id,
          status: campaign_lead.remark_id,
          stage: campaign_lead.status,
          weight_in_tons: campaign_weight / 1000,
          price_per_quintal: campaign_price * 100,
          created_at: campaign_lead.createdAt,
          merchant_mobile_number: campaign_lead.merchant.mobile_number
        }
        const merchant = await merchant_detail_model.findOne({
          where: {
            mobile_number: campaign_lead_obj.merchant_mobile_number,
            is_active: 1
          }
        });
        if (merchant) {
          campaign_lead_obj.merchant_detail_id = merchant.id;
          campaign_lead_obj.merchant_name = merchant.name;
          if (campaign_lead_obj.merchant_mobile_number) {
            const retailer = await retailer_model.findOne({
              mobileNumber: campaign_lead_obj.merchant_mobile_number,
              isActive: true
            });
            campaign_lead_obj.retailer_farmart_id = retailer?.farmartId || null;
            campaign_lead_obj.retailer_id = retailer?._id || null;
            campaign_lead_obj.retailer_pincode = retailer?.pincode || null;
            campaign_lead_obj.geoLocation = retailer?.geoLocation || null;
          }
          campaign_lead_obj.merchant_state = merchant.state_name;
          campaign_lead_obj.merchant_district = merchant.district_name;
          const crop = await crop_mongoose_model.findById(campaign_lead_obj.crop_id);
          campaign_lead_obj.crop_name = crop.name;
        }
      }
      resolve({ "updated_lead_data": campaign_lead_obj });
    } catch (ex) {
      error_log(ex);
      reject({ message: ex.message });
    }
  });
};

module.exports = submit_action_on_lead_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/campaign/services/fetch_campaign_leads_service.js
const purchase_crop_lead_model = require('../../../../database/mongoose/market_linkage_db/lead.model');
const error_log = require('../../../../middelware/error_log');
const read_mongo_documents = require('../../../../database/mongoose/read_document');
const campaign_lead_status_enum = require('../../../../enums/campaign/campaign_lead_status');
const merchant_detail_model = require('../../../../database/models/merchant_detail');
const crop_mongoose_model = require('../../../../database/mongoose/market_linkage_db/crop.model');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const fetch_campaign_leads_service = (state_id, district_id, crop_id, status, merchant_detail_id, page_no, limit) => {
    return new Promise(async (resolve, reject) => {
        try {
            const lead_fetch_condition = {
                is_active: true
            }
            if (state_id) lead_fetch_condition['merchant.state.id'] = state_id;
            if (district_id) lead_fetch_condition['merchant.district_id'] = district_id;
            if (crop_id) lead_fetch_condition.crop_id = crop_id;
            if (status) lead_fetch_condition.status = status;
            if (merchant_detail_id) {
                const filtered_merchant = await merchant_detail_model.findOne({
                    where: {
                        id: merchant_detail_id,
                        is_active: 1
                    },
                    attributes: ['mobile_number']
                });
                if (!filtered_merchant) {
                    throw new ValidationError('merchant not found');
                }
                const filtered_merchant_mobile_number = filtered_merchant.mobile_number;
                lead_fetch_condition['merchant.mobile_number'] = filtered_merchant_mobile_number;
            }
            const offset = (page_no - 1) * limit;
            const leads = await read_mongo_documents(purchase_crop_lead_model, lead_fetch_condition, limit, offset, 'createdAt', -1);
            const leads_count = await purchase_crop_lead_model.countDocuments(lead_fetch_condition);
            const campaign_leads = {
                rows: [],
                count: leads_count
            };
            for (let index = 0; index < leads.length; index++) {
                const lead_element = {
                    id: leads[index].farmart_id,
                    source: leads[index].source,
                    campaign_id: leads[index].campaign_id,
                    crop_id: leads[index].crop_id,
                    status: leads[index].status,
                    weight_in_tons: leads[index].quantity_in_kg / 1000,
                    price_per_quintal: leads[index].price_per_kg * 100,
                    created_at: leads[index].createdAt,
                    merchant_mobile_number: leads[index].merchant.mobile_number,
                    merchant_state: leads[index].merchant.state?.name || '',
                    merchant_district: leads[index].merchant.district?.name || '',
                    // eslint-disable-next-line no-dupe-keys
                    merchant_mobile_number: leads[index].merchant.mobile_number
                };
                const merchant = await merchant_detail_model.findOne({
                    where: {
                        mobile_number: lead_element.merchant_mobile_number,
                        is_active: 1
                    }
                });
                if (!merchant) {
                    campaign_leads.count--;
                    continue;
                }
                lead_element.merchant_detail_id = merchant.id;
                lead_element.merchant_name = merchant.name;
                const crop = await crop_mongoose_model.findById(leads[index].crop_id);
                lead_element.crop_name = crop.name;
                campaign_leads.rows.push(lead_element);
            }
            const pending_leads = await purchase_crop_lead_model.countDocuments({ status: campaign_lead_status_enum.pending });
            const assigned_leads = await purchase_crop_lead_model.countDocuments({ status: campaign_lead_status_enum.accepted });
            const rejected_leads = await purchase_crop_lead_model.countDocuments({ status: campaign_lead_status_enum.cancelled });
            return resolve({
                campaign_lead_data: {
                    number_of_assigned_leads: assigned_leads,
                    number_of_pending_leads: pending_leads,
                    number_of_rejected_leads: rejected_leads,
                    campaign_leads
                }
            });
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    });
};

module.exports = fetch_campaign_leads_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/distributer/swagger/index.js
module.exports = {
  tags: {
    name: "distributer",
  },
  paths: {
    "/distributers": {
      get: {
        tags: ["distributer"],
        summary: "Fetches list of distributers",
        description: "",
        operationId: "get_distributers",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "search_param",
            description: "search_param for agency_name or mobile number",
            type: "string",
          },
          {
            in: "query",
            name: "district_id",
            description: "District Id",
            required: true,
            type: "integer",
            format: "int64",
          },
          {
            in: "query",
            name: "dist_for",
            description:
              "distributer for : \n1-> fertilizer \n2-> seed \n3-> medicine",
            required: true,
            type: "string",
            enum: [1, 2, 3],
          },
          {
            in: "query",
            name: "page_no",
            description: "Page number",
            required: false,
            type: "integer",
            format: "int64",
          },
          {
            in: "query",
            name: "limit",
            description: "Limit",
            required: false,
            type: "integer",
            format: "int64",
          },
        ],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/rake/subscribe": {
      post: {
        tags: ["distributer"],
        summary: "rake subscription",
        description: "",
        operationId: "rake_subscription",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "formData",
            name: "state_id",
            description: "",
            required: true,
            type: "integer",
            format: "int64",
          },
          {
            in: "formData",
            name: "district_id",
            description: "",
            required: true,
            type: "integer",
            format: "int64",
          },
        ],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
  },
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/distributer/index.js
const router = require("express").Router();
const authorize = require("../../../middelware/authorized_routes");
const user_roles_enum = require("../../../entities/metadata/enums/user_roles");

const pesticide_variants_controller = require("./controllers/pesticide_variants");
const pesticides_controller = require("./controllers/pesticides");
const get_distributers_controller = require("./controllers/get_distributers_controller");
const subscribe_rake_controller = require("./controllers/subscribe_rake_controller");

router.get("/pesticide_variants",pesticide_variants_controller);
router.get("/pesticide_distributers",pesticides_controller);

router.get('/distributers',get_distributers_controller);
router.post('/rake/subscribe',authorize([user_roles_enum.Merchant]),subscribe_rake_controller);

module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/distributer/controllers/get_distributers_controller.js
const error_log=require('../../../../middelware/error_log');
const create_api_response=require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");

const get_fert_distributer_service = require("../../../../entities_v2/distributer/service/get_fert_distributer");
const get_distributer_seed_service = require('../../../../entities/distributer/services/get_distributer_seed');
const distributer_type_enum = require('../../../../entities/metadata/enums/distributer_type');
const get_pesticide_distributer_service = require("../../../../entities_v2/distributer/service/pesticide/get_pesticide_distributer_service");

module.exports = async function (req, res) {
    try {
        let merchant_profile_id = req.decode.user_profile_id;
        let district_id = +req.query.district_id;
        let search_param = req.query.search_param || '';
        let page_no = +req.query.page_no || 1;
        let limit = +req.query.limit || 20;
        let dist_for = +req.query.dist_for || 1;
        if (district_id) {
            let result = {};
            if (dist_for === distributer_type_enum.fert) {
                result = await get_fert_distributer_service(merchant_profile_id, district_id, search_param, page_no, limit);
            }
            else if (dist_for === distributer_type_enum.seed) {
                result = await get_distributer_seed_service(merchant_profile_id, district_id, search_param, page_no, limit);
            }
            else {
                result = await get_pesticide_distributer_service(merchant_profile_id,district_id, search_param,page_no, limit);
            }
            return res.json(create_api_response(true,'successfull',result));
        }
        else {
            return res.json(create_api_response(false,'please provide district_id'));
        }
    } catch (ex) {
        error_log(ex)
        return res.json(create_api_response(false,ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/distributer/controllers/subscribe_rake_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const subscribe_rake_service = require('../services/subscribe_rake_service');

module.exports = async (req, res) => {
    try {
        let state_id = +req.body.state_id || 0,
            district_id = +req.body.district_id || 0;
            let merchant_detail_id=req.user.user_profile_id;
        if (!state_id || !district_id) {
            let message ="state and district id are compulsory params";
            res.status(http_status_code_enum.ok).json(create_api_response(false, message));
        }
        let subscription_details = await subscribe_rake_service(state_id, district_id,merchant_detail_id);
        let subscription_details_response = create_api_response(true, "successfull", subscription_details);
        res.status(http_status_code_enum.ok).json(subscription_details_response);


    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/distributer/controllers/pesticides.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const pesticides_service = require('../../../../entities_v2/campaign_services/pesticides_service');
const create_api_response = require('../../../../common_services/api_responses/create_api_response')
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const state_id = +req.query.state_id;
        const district_id = +req.query.district_id;
        const variant_ids = req.query.variant_ids || [];
        const page_no = +req.query.page_no || 1;
        const limit = +req.query.limit || 20;
        const country_code = req.user?.country?.country_code;
        const search_param = req.query.search_param || null;

        if (!state_id || !district_id) {
            throw new ValidationError('state_id and district_id are mandatory parameter');
        }
        // service to be called
        const pesticides_data = await pesticides_service(state_id, district_id, variant_ids, search_param, page_no, limit, country_code);
        const pesticide_response = create_api_response(true, 'successfull', pesticides_data);

        res.status(http_status_code_enum.ok).json(pesticide_response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/distributer/controllers/pesticide_variants.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const fetch_pesticides_variant_service = require("../../../../entities_v2/campaign_services/fetch_pesticides_variant_service");
const create_api_response=require('../../../../common_services/api_responses/create_api_response')

module.exports = async (req, res) => {
    try {


        const all_pesticide_variants=await fetch_pesticides_variant_service()
        let pesticide_variants_response=create_api_response(true,"successfull",all_pesticide_variants);
        res.status(http_status_code_enum.ok).json(pesticide_variants_response);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false,err.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/distributer/services/subscribe_rake_service.js
const error_log = require("../../../../middelware/error_log");
const rake_subscription_model = require("../../../../database/models_v2/rake/rake_ subscription");

const subscribe_rake_service = async(state_id, district_id,merchant_detail_id) => {
    try {
        let subscription_obj={
            state_id,
            district_id,
            merchant_detail_id,
            is_active:1
        }
        const is_subscribed=await rake_subscription_model.findOne({
            where:{
                is_active:1,
                merchant_detail_id,
                district_id
            }
        });
        if(is_subscribed)
        {
            return ({message:"already subscribed",subscribed:true})
        }
        const rake_subscribed=await rake_subscription_model.create(subscription_obj)
        return ({message:"successfully subscribed",subscribed:true})
    } catch (ex) {
      error_log(ex);
      return({ message: ex.message });
    }
};

module.exports = subscribe_rake_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/weather/swagger/index.js
module.exports = {
    tags: {
        name: 'weather'
    },
    paths: {
        '/weekly_weather_detail': {
            get: {
                tags: ['weather'],
                summary: 'fetches seven days weather details from the skymet weather api',
                description: 'get_skymet_weather_detail',
                operationId: 'get_skymet_weather_detail',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'latitude',
                        description: 'latitude',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'query',
                        name: 'longitude',
                        description: 'longitude',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'header',
                        name: 'language_id',
                        description: 'language',
                        required: false,
                        type: 'number'
                    }
                ],
                responses: {
                    405: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        }
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/weather/index.js
const router = require('express').Router();
const authorize = require('../../../middelware/authorized_routes');
const user_roles_enum = require('../../../enums/user_profile/user_role');
const get_weather_stack_controller = require('./controllers/get_weather_stack_controller');
// const get_skymet_weather_controller = require('./controllers/get_skymet_weather_controller');

// router.get('/weekly_weather_detail', authorize([user_roles_enum.Merchant]), get_skymet_weather_controller);
router.get('/weekly_weather_detail', authorize([user_roles_enum.Merchant, user_roles_enum.Guest_user_b2c_app]), get_weather_stack_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/weather/controllers/get_skymet_weather_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const get_skymet_weather_service = require('../services/get_skymet_weather_service');
const language_enums = require('../../../../enums/global/language');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const latitude = +req.query.latitude;
        const longitude = +req.query.longitude;
        const language = +req.headers.language_id || language_enums.hindi;
        const merchant_detail_id = req.user.user_profile_id;

        if (!latitude || !longitude) {
            throw new ValidationError('latitude and longitude are mandatory parameters!');
        }
        const lat_long = latitude + ',' + longitude;
        const weather_accessed_at = new Date();
        const seven_days_weather_details = await get_skymet_weather_service(merchant_detail_id, lat_long, language, weather_accessed_at);

        const response = create_api_response(true, 'success', seven_days_weather_details);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/weather/controllers/get_weather_stack_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const get_weather_stack_service = require('../services/get_weather_stack_service');
const language_enums = require('../../../../enums/global/language');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const latitude = +req.query.latitude;
        const longitude = +req.query.longitude;
        const language = +req.headers.language_id || language_enums.hindi;
        const merchant_detail_id = req.user.user_profile_id;

        if (!latitude || !longitude) {
            throw new ValidationError('latitude and longitude are mandatory parameters!');
        }
        const lat_long = latitude + ',' + longitude;
        const weather_accessed_at = new Date();
        const seven_days_weather_details = await get_weather_stack_service(merchant_detail_id, lat_long, language, weather_accessed_at);

        const response = create_api_response(true, 'success', seven_days_weather_details);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/weather/services/get_weather_stack_service.js
const error_log = require('../../../../middelware/error_log');
const weatherstack_fetch_weather_detail = require('../../../../common_services/weather/weatherstack_fetch_weather_detail');
const { read_string, key_gen_redis, write_string } = require('../../../../database/redis/helper_redis_methods');
const redis_key_entities_enum = require('../../../../database/redis/redis_key_entities');
const { reverseGeocodeWithAdministrativeLevels } = require('../../../../common_services/location/geolocation');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const get_weather_stack_service = async (merchant_detail_id, lat_long, language, weather_accessed_at) => {
    const weather_detail_response = {
        weekly_weather_detail: []
    }

    try {
        const [lat, long] = lat_long.split(',');
        const reverse_geocode_result = await reverseGeocodeWithAdministrativeLevels(lat, long);
        if (!reverse_geocode_result) {
            throw new ValidationError('invalid lat long !')
        }
        const pincode = reverse_geocode_result?.zipcode;
        const serviceable_redis_key = await key_gen_redis(redis_key_entities_enum.CURRENT_WEATHER, pincode, language);
        const weather_detail_redis = await read_string(serviceable_redis_key);
        if (weather_detail_redis) {
            return JSON.parse(weather_detail_redis);
        }

        const weather_detail = await weatherstack_fetch_weather_detail(merchant_detail_id, lat_long, language, weather_accessed_at);
        weather_detail_response.weekly_weather_detail = weather_detail

        const ttl = 60 * 60 * 12 // 12 hours in seconds
        await write_string(serviceable_redis_key, JSON.stringify(weather_detail_response), ttl);
        return weather_detail_response;
    } catch (err) {
        error_log(err);
        return weather_detail_response
    }
}

module.exports = get_weather_stack_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/weather/services/get_skymet_weather_service.js
const error_log = require("../../../../middelware/error_log");
const skymet_fetch_weather_detail = require("../../../../common_services/weather/skymet_fetch_weather_detail");

const get_skymet_weather_service = async(merchant_detail_id, lat_long, language, weather_accessed_at) => {
    try{    
        const weather_detail = await skymet_fetch_weather_detail(merchant_detail_id, lat_long, language, weather_accessed_at);
        const weekly_weather_detail = {
            weekly_weather_detail : weather_detail
        }
        return weekly_weather_detail;
    }catch(err){
        error_log(err);
        return null
    }
}

module.exports = get_skymet_weather_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/home_screen/swagger/index.js
module.exports = {
  tags: {
    name: "home_screen",
  },
  paths: {
    "/feature_list": {
      get: {
        tags: ["home_screen"],
        summary: "get list of features for home screen",
        description: "",
        operationId: "feature_list",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "merchant_occupation_id",
            description: "",
            required: true,
            type: "number",
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/feature_location": {
      post: {
        tags: ["home_screen"],
        summary: "save feature usage location of merchant",
        description: "",
        operationId: "save_feature_location",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "formData",
            name: "feature_id",
            description: "",
            required: true,
            type: "number",
          },
          {
            in: "formData",
            name: "state_id",
            description: "",
            required: true,
            type: "number",
          },
          {
            in: "formData",
            name: "district_id",
            description: "",
            required: true,
            type: "number",
          }
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
      get: {
        tags: ["home_screen"],
        summary: "fetch feature usage location of merchant",
        description: "",
        operationId: "fetch_feature_location",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "feature_id",
            description: "",
            required: true,
            type: "number",
          }
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
  },
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/home_screen/index.js
const router = require('express').Router();
const authorize = require('../../../middelware/authorized_routes');
const user_roles_enum = require('../../../enums/user_profile/user_role');

const fetch_home_screen_features_controller = require('./controllers/fetch_home_screen_features_controller');
const save_feature_location_controller = require('./controllers/save_feature_location_controller');
const fetch_feature_location_controller = require('./controllers/fetch_feature_location_controller');

router.get('/feature_list', authorize([user_roles_enum.Merchant, user_roles_enum.Guest_user_b2c_app]), fetch_home_screen_features_controller);
router.post('/feature_location', authorize([user_roles_enum.Merchant]), save_feature_location_controller);
router.get('/feature_location', authorize([user_roles_enum.Merchant, user_roles_enum.Guest_user_b2c_app]), fetch_feature_location_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/home_screen/controllers/save_feature_location_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const save_feature_location_service = require('../services/save_feature_location_service');

module.exports = async (req, res) => {
    try {
    /* The code block you provided is extracting values from the request object (`req`) and assigning
    them to variables. */
        const merchant_detail_id = +req.user.user_profile_id;
        const feature_id = +req.body.feature_id;
        const state_id = +req.body.state_id; // these are master state and district id
        const district_id = +req.body.district_id;
        if (!feature_id || !state_id || !district_id) {
            return res
                .status(http_status_code_enum.bad_request)
                .json(create_api_response(false, 'request parameters missing'));
        }
        /* The code is calling the `save_feature_location_service` function and passing in the variables
   `merchant_detail_id`, `feature_id`, `state_id`, and `district_id` as arguments. It is using the
   `await` keyword to wait for the function to complete and return a result. The result is then
   stored in the `result` variable. */
        const result = await save_feature_location_service(
            merchant_detail_id,
            feature_id,
            state_id,
            district_id
        );
        return res
            .status(http_status_code_enum.ok)
            .json(create_api_response(true, 'successfull'));
    } catch (ex) {
        error_log(ex);
        return res
            .status(http_status_code_enum.bad_request)
            .json(create_api_response(false, ex.message));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/home_screen/controllers/fetch_home_screen_features_controller.js
const error_log = require("../../../../middelware/error_log");
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const store_sign_up_log_service = require("../../../../common_services/sign_up/sign_up_logs");
const fetch_home_screen_features_service = require('../services/fetch_home_screen_features_service');
const http_headers_enums = require("../../../../enums/global/http_headers");
const { Merchant } = require("../../../../enums/user_profile/user_role");
const signup_log_stage_enum = require("../../../../enums/signup_log/signup_log_stage_enum");


module.exports = async (req, res) => {
  try {
    let installation_id = req.headers[http_headers_enums['fmt-installation-id']];
    let device_id = req.headers[http_headers_enums['fmt-device-id']];
    let merchant_detail_id = +req.user.user_profile_id;
    let merchant_occupation_id = +req.query.merchant_occupation_id || Merchant;
    const current_app_version = req.headers.appversion;
    if (!merchant_occupation_id) {
      return res.status(http_status_code_enum.bad_request).json(create_api_response(false, 'parameter not passed'));
    }
    let result = await fetch_home_screen_features_service(merchant_detail_id, merchant_occupation_id);
    let home_screen_requested_at = new Date();
    store_sign_up_log_service({ merchant_detail_id, signup_log_stage: signup_log_stage_enum.home_screen_fetched, installation_id, device_id, home_screen_requested_at, current_app_version })
      .catch(err => {
        error_log(err);
      });

    if (current_app_version == "9.0.2" || current_app_version == "9.1.0") {
      result = result.filter(ele => ele.category_enum_id != 5)
    }
    return res.status(http_status_code_enum.ok).json(create_api_response(true, 'successfull', result));

  } catch (ex) {
    error_log(ex);
    return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/home_screen/controllers/fetch_feature_location_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const fetch_feature_location_service = require('../services/fetch_feature_location_service');

module.exports = async (req, res) => {
    try {
    /* The code `const merchant_detail_id = +req.user.user_profile_id;` is converting the
    `user_profile_id` property of the `req.user` object to a number and assigning it to the
    `merchant_detail_id` variable. */
        const ip_address = req.headers['x-forwarded-for'] || '';

        const merchant_detail_id = +req.user.user_profile_id;
        const feature_id = +req.query.feature_id;
        /* This code block is checking if the `feature_id` parameter is missing or falsy. If it is, it
        returns a response with a bad request status code and a JSON object indicating that the required
        parameter was not passed. */
        if (!feature_id) {
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false, 'required parameter not passed'));
        }
        const result = await fetch_feature_location_service(merchant_detail_id, feature_id);
        if (result) {
            result.ip_address = ip_address
        }

        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'successfull', result));
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/home_screen/services/fetch_home_screen_features_service.js
const error_log = require('../../../../middelware/error_log');
const FetchFeatureListManager = require('../../../../common_services/home_screen/FetchFeatureListManager');

const fetch_home_screen_features_service = async (
    merchant_detail_id,
    merchant_occupation_id
) => {
    try {
        const fetchFeatureList = new FetchFeatureListManager(merchant_detail_id, merchant_occupation_id);
        return await fetchFeatureList.fetchHomeScreenFeatures();
    } catch (ex) {
        error_log(ex);
        return [];
    }
};

module.exports = fetch_home_screen_features_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/home_screen/services/fetch_feature_location_service.js
/* eslint-disable no-use-before-define */
const error_log = require('../../../../middelware/error_log');
const FeatureUsageLocationManger = require('../../../../common_services/home_screen/FeatureUsageLocationManager')
const fetch_feature_location_service = async (
    merchant_detail_id,
    feature_id
) => {
    try {

        /* The code snippet is creating a new instance of the `FeatureUsageLocationManger` class with
        `merchant_detail_id` and `feature_id` as parameters. Then, it is calling the
        `fetchFeatureLocation` method on the `featureUsageLocationManger` object using `await` to
        asynchronously wait for the method to complete and return the result. */
        const featureUsageLocationManger = new FeatureUsageLocationManger(merchant_detail_id, feature_id);
        return await featureUsageLocationManger.fetchFeatureLocation();
    } catch (ex) {
        error_log(ex);
        return null;
    }
};

module.exports = fetch_feature_location_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/home_screen/services/save_feature_location_service.js
/* The code is defining a JavaScript function called `save_feature_location_service`. This function
takes four parameters: `merchant_detail_id`, `feature_id`, `state_id`, and `district_id`. */
const error_log = require('../../../../middelware/error_log');
const FeatureUsageLocationManger = require('../../../../common_services/home_screen/FeatureUsageLocationManager')

const save_feature_location_service = async (
    merchant_detail_id,
    feature_id,
    state_id,
    district_id
) => {
    try {

        const featureUsageLocationManger = new FeatureUsageLocationManger(merchant_detail_id, feature_id);
        return await featureUsageLocationManger.saveFeatureLocation(state_id, district_id);
    } catch (ex) {
        error_log(ex);
        return null;
    }
};

module.exports = save_feature_location_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/procurement_sources/swagger/index.js
module.exports = {
    tags: {
        name: 'procurement_sources'
    },
    paths: {
        '/status': {
            get: {
                tags: ['procurement_sources'],
                summary: 'get retailer stats by mobile number',
                description: '',
                operationId: 'get_retailer_status',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'retailer_mobile_number',
                        description: '',
                        type: 'number'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/alternate_mobile_number': {
            post: {
                tags: ['procurement_sources'],
                summary: 'add alternate mobile numbers, merge two business account',
                description: '',
                operationId: 'add_alternate_mobile_number',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'retailer_mobile_number',
                        description: '',
                        type: 'number'
                    },
                    {
                        in: 'formData',
                        name: 'alternate_mobile_number',
                        description: '',
                        type: 'number'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/procurement': {
            get: {
                tags: ['procurement_sources'],
                summary: 'GetRetailers',
                description: '',
                operationId: 'procurement_sources',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'status',
                        description: '',
                        type: 'string'
                    },
                    {
                        in: 'query',
                        name: 'mobileNumber',
                        description: '',
                        type: 'string'
                    },
                    {
                        in: 'query',
                        name: 'name',
                        description: '',
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            },
            post: {
                tags: ['procurement_sources'],
                summary: 'add procurement',
                description: '',
                operationId: 'add_procurement',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'header',
                        name: 'geolocation',
                        description: '',
                        type: 'string'
                    },
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        required: true,
                        schema: {
                            properties: {
                                name: {
                                    type: 'string'
                                },
                                farmartId: {
                                    type: 'string'
                                },
                                mobileNumber: {
                                    type: 'integer'
                                },
                                email: {
                                    type: 'string'
                                },
                                type: {
                                    type: 'integer'
                                },
                                business_name: {
                                    type: 'string'
                                },
                                address: {
                                    type: 'string'
                                },
                                districtName: {
                                    type: 'string'
                                },
                                stateName: {
                                    type: 'string'
                                },
                                talukName: {
                                    type: 'string'
                                },
                                pincode: {
                                    type: 'string'
                                },
                                geoLocation: {
                                    properties: {
                                        lat: {
                                            type: 'string'
                                        },
                                        long: {
                                            type: 'string'
                                        },
                                        accuracy: {
                                            type: 'string'
                                        }
                                    }
                                },
                                bankAccountDetails: {
                                    properties: {
                                        accountNumber: {
                                            type: 'string'
                                        },
                                        IFSC: {
                                            type: 'string'
                                        },
                                        bankName: {
                                            type: 'string'
                                        }
                                    }
                                },
                                documents: {
                                    type: 'array',
                                    items: {
                                        required: ['type', 'value', 'images'],
                                        properties: {
                                            type: {
                                                type: 'string'
                                            },
                                            value: {
                                                type: 'string'
                                            },
                                            images: {
                                                type: 'array',
                                                items: {
                                                    required: ['url'],
                                                    properties: {
                                                        url: {
                                                            type: 'string'
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                remarks: {
                                    type: 'string'
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            },
            put: {
                tags: ['procurement_sources'],
                summary: 'update procurement',
                description: '',
                operationId: 'update_procurement',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'header',
                        name: 'geolocation',
                        description: '',
                        type: 'string'
                    },
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        required: true,
                        schema: {
                            properties: {
                                id: {
                                    type: 'string'
                                },
                                name: {
                                    type: 'string'
                                },
                                farmartId: {
                                    type: 'string'
                                },
                                mobileNumber: {
                                    type: 'integer'
                                },
                                email: {
                                    type: 'string'
                                },
                                type: {
                                    type: 'integer'
                                },
                                business_name: {
                                    type: 'string'
                                },
                                address: {
                                    type: 'string'
                                },
                                districtName: {
                                    type: 'string'
                                },
                                stateName: {
                                    type: 'string'
                                },
                                talukName: {
                                    type: 'string'
                                },
                                pincode: {
                                    type: 'string'
                                },
                                geoLocation: {
                                    properties: {
                                        lat: {
                                            type: 'string'
                                        },
                                        long: {
                                            type: 'string'
                                        },
                                        accuracy: {
                                            type: 'string'
                                        }
                                    }
                                },
                                bankAccountDetails: {
                                    properties: {
                                        accountNumber: {
                                            type: 'string'
                                        },
                                        IFSC: {
                                            type: 'string'
                                        },
                                        bankName: {
                                            type: 'string'
                                        }
                                    }
                                },
                                documents: {
                                    type: 'array',
                                    items: {
                                        required: ['type', 'value', 'images'],
                                        properties: {
                                            type: {
                                                type: 'string'
                                            },
                                            value: {
                                                type: 'string'
                                            },
                                            images: {
                                                type: 'array',
                                                items: {
                                                    required: ['url'],
                                                    properties: {
                                                        url: {
                                                            type: 'string'
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/procurement/download': {
            get: {
                tags: ['procurement_sources'],
                summary: 'DownloadRetailers',
                description: '',
                operationId: 'procurement_download',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'status',
                        description: '',
                        type: 'string'
                    },
                    {
                        in: 'query',
                        name: 'mobileNumber',
                        description: '',
                        type: 'string'
                    },
                    {
                        in: 'query',
                        name: 'name',
                        description: '',
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/procurement/bulk': {
            post: {
                tags: ['procurement_sources'],
                summary: 'add procurement bulk',
                description: '',
                operationId: 'add_procurement_bulk',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        required: true,
                        schema: {
                            required: ['users'],
                            properties: {
                                users: {
                                    type: 'array',
                                    items: {
                                        required: ['Retailer Name', 'Retailer Mobile Number', 'Retailer Address', 'Retailer District', 'stateName', 'PA Mobile Number'],
                                        properties: {
                                            'Retailer Name': {
                                                type: 'string'
                                            },
                                            'Retailer Mobile Number': {
                                                type: 'string'
                                            },
                                            'Retailer Address': {
                                                type: 'string'
                                            },
                                            'Retailer District': {
                                                type: 'string'
                                            },
                                            stateName: {
                                                type: 'string'
                                            },
                                            'PA Mobile Number': {
                                                type: 'integer'
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/procurement/update': {
            put: {
                tags: ['procurement_sources'],
                summary: 'panel side update procurement',
                description: '',
                operationId: 'panel_update_procurement',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        required: true,
                        schema: {
                            required: ['users'],
                            properties: {
                                id: {
                                    type: 'string'
                                },
                                farmartId: {
                                    type: 'string'
                                },
                                name: {
                                    type: 'string'
                                },
                                mobileNumber: {
                                    type: 'integer'
                                },
                                email: {
                                    type: 'string'
                                },
                                type: {
                                    type: 'integer'
                                },
                                business_name: {
                                    type: 'string'
                                },
                                address: {
                                    type: 'string'
                                },
                                pincode: {
                                    type: 'string'
                                },
                                districtName: {
                                    type: 'string'
                                },
                                stateName: {
                                    type: 'string'
                                },
                                geoLocation: {
                                    properties: {
                                        lat: {
                                            type: 'string'
                                        },
                                        long: {
                                            type: 'string'
                                        },
                                        accuracy: {
                                            type: 'string'
                                        }
                                    }
                                },
                                talukName: {
                                    type: 'string'
                                },
                                bankAccountDetails: {
                                    properties: {
                                        accountNumber: {
                                            type: 'string'
                                        },
                                        IFSC: {
                                            type: 'string'
                                        },
                                        bankName: {
                                            type: 'string'
                                        }
                                    }
                                },
                                aadhar: {
                                    properties: {
                                        frontImage: {
                                            properties: {
                                                url: {
                                                    type: 'string'
                                                }
                                            }
                                        },
                                        backImage: {
                                            properties: {
                                                url: {
                                                    type: 'string'
                                                }
                                            }
                                        },
                                        number: {
                                            type: 'string'
                                        },
                                        id: {
                                            type: 'string'
                                        },
                                        status: {
                                            type: 'string'
                                        }
                                    }
                                },
                                bankAccount: {
                                    properties: {
                                        frontImage: {
                                            properties: {
                                                url: {
                                                    type: 'string'
                                                }
                                            }
                                        },
                                        number: {
                                            type: 'string'
                                        },
                                        id: {
                                            type: 'string'
                                        },
                                        status: {
                                            type: 'string'
                                        }
                                    }
                                },
                                gst: {
                                    properties: {
                                        frontImage: {
                                            properties: {
                                                url: {
                                                    type: 'string'
                                                }
                                            }
                                        },
                                        backImage: {
                                            properties: {
                                                url: {
                                                    type: 'string'
                                                }
                                            }
                                        },
                                        number: {
                                            type: 'string'
                                        },
                                        id: {
                                            type: 'string'
                                        },
                                        status: {
                                            type: 'string'
                                        }
                                    }
                                },
                                licence: {
                                    properties: {
                                        frontImage: {
                                            properties: {
                                                url: {
                                                    type: 'string'
                                                }
                                            }
                                        },
                                        backImage: {
                                            properties: {
                                                url: {
                                                    type: 'string'
                                                }
                                            }
                                        },
                                        number: {
                                            type: 'string'
                                        },
                                        id: {
                                            type: 'string'
                                        },
                                        status: {
                                            type: 'string'
                                        }
                                    }
                                },
                                pancard: {
                                    properties: {
                                        frontImage: {
                                            properties: {
                                                url: {
                                                    type: 'string'
                                                }
                                            }
                                        },
                                        number: {
                                            type: 'string'
                                        },
                                        id: {
                                            type: 'string'
                                        },
                                        status: {
                                            type: 'string'
                                        }
                                    }
                                },
                                status: {
                                    type: 'integer'
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/pa_drawer_links': {
            get: {
                tags: ['procurement_sources'],
                summary: 'pa_drawer_links',
                description: '',
                operationId: 'pa_drawer_links',
                security: [{ Bearer: ['read'] }],
                parameters: [],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/PA': {
            get: {
                tags: ['procurement_sources'],
                summary: 'fetch all pa',
                description: '',
                operationId: 'fetch_all_pa',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'status',
                        description: '',
                        type: 'string'
                    },
                    {
                        in: 'query',
                        name: 'mobileNumber',
                        description: '',
                        type: 'string'
                    },
                    {
                        in: 'query',
                        name: 'name',
                        description: '',
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/zoho': {
            post: {
                tags: ['procurement_sources'],
                summary: 'upload zoho retailers',
                description: '',
                operationId: 'upload_zoho_retailers',
                security: [{ Bearer: ['read'] }],
                consumes: 'multipart/form-data',
                parameters: [
                    {
                        in: 'formData',
                        name: 'file',
                        type: 'file',
                        description: ''
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        }
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/procurement_sources/index.js
const router = require('express').Router();

const get_procurement_controller = require('./controllers/get_procurement_controller');
// const add_procurement_controller = require('./controllers/add_procurement_controller');
const get_procurement_records_controller = require('./controllers/get_procurement_records_controller');
const add_procurement_bulk_controller = require('./controllers/add_procurement_bulk_controller');
// const update_procurement_panel_controller = require('./controllers/update_procurement_panel_controller');
const get_pa_drawer_links_controller = require('./controllers/get_pa_drawer_links_controller');
const get_procurement_pa_controller = require('./controllers/get_procurement_pa_controller');
// const update_procurement_controller = require('./controllers/update_procurement_controller');
const upload_zoho_retailers_controller = require('./controllers/upload_zoho_retailers_controller');
const upload_middleware = require('../../../middelware/upload_file_multer');
const add_altenate_mobile_number_controller = require('./controllers/add_alternate_mobile_number_controller.js');
const get_retailer_status_controller = require('./controllers/get_retailer_status_controller.js');

router.get('/procurement', get_procurement_controller);
/** @deprecated */
// router.post("/procurement", add_procurement_controller);
// router.put("/procurement", update_procurement_controller);
router.get('/procurement/download', get_procurement_records_controller);
router.post('/procurement/bulk', add_procurement_bulk_controller);
/** @deprecated */
// router.put("/procurement/update", update_procurement_panel_controller);
router.get('/pa_drawer_links', get_pa_drawer_links_controller);
router.get('/PA', get_procurement_pa_controller);// role pa get retailer
router.post('/zoho', upload_middleware, upload_zoho_retailers_controller);
router.post('/alternate_mobile_number', add_altenate_mobile_number_controller);
router.get('/status', get_retailer_status_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/procurement_sources/_services/get_ml_retailer_service.js
const procurementModel = require("../../../../database/mongoose/market_linkage_db/procurementSources.model");
const master_merchant_detail_model = require("../../../../database/models_v2/merchant/master_merchant_detail");
const merchant_verification_docs_model = require("../../../../database/models_v2/merchant/merchant_verification_docs");
const account_details_model = require("../../../../database/models_v2/transactions/account_details");
const banks_model = require("../../../../database/models_v2/transactions/banks");
const locations_model = require("../../../../database/models_v2/global/locations");
const user_profile_model = require("../../../../database/models/user_profile");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const { userStatus, documentTypeToNameApp } = require("../../../../enums/market_linkage/enums/procurementSources");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
const { condition } = require("sequelize");
const user_state_district_map = require("../../../../database/models_v2/user/user_state_district_map");
const Op = require("sequelize").Op;

module.exports = async (filter) => {
  try {
    const { status, mobileNumber, name, createdBy } = filter;

    /** @refactor
     *  can improve upon the filter system
     */
    let _response_merchant_detail_list=[];
    let condition={
      is_active:true
    };
    
    if(status!='ALL'){
      condition.status=status;
    }
    if(mobileNumber){
      condition.mobile_number={ [Op.like]: mobileNumber};
    }
    if(name){
      condition.mobile_number={ [Op.like]: name};
    }
    if(createdBy){

      const pa_districts = await user_state_district_map.findAll({
        where: {
          user_id: createdBy
        },
        attributes: ["district_id"]
      })

      const pa_district_id_list = pa_districts.map((district) => district.dataValues.district_id)

      if(pa_district_id_list.length > 0)
        condition[Op.or] = [
          {
            added_by: createdBy
          },
          {
            district_id: {
              [Op.in]: pa_district_id_list
            }
          }
        ]
      
      else
        condition.added_by=createdBy;

    }

    let master_merchant_detail_list=await master_merchant_detail_model.findAndCountAll({
      where : condition,
      include:[
        {
          model:account_details_model,
          required:false,
          where:{
            is_active:true
          },
          include:[
            {
              model:banks_model,
              required:false
            }
          ]
        },
        {
          model:locations_model,
          required:false
        },
        {
          model:merchant_verification_docs_model,
          where : {
            is_active:true
          },
          required:false
        },
        {
          model:user_profile_model,
          as:'added_by_user',
          required:false
        },
        {
          model:user_profile_model,
          as:'assigned_to_user',
          required:false
        }
      ],
      order:[
        ['status','ASC']
      ]
    });

    if(master_merchant_detail_list.count>0){
      for (let index = 0; index < master_merchant_detail_list.rows.length; index++) {
        const element = master_merchant_detail_list.rows[index];
        let master_merchant_detail_obj={
          "_id": element.id,
          "business_name": element.business_name,
          "pincode": element.pincode,
          "isActive": element.is_active,
          "remarks": "",
          "name": element.name,
          "mobileNumber": element.mobile_number,
          "email": element.email,
          "farmartId": element.farmart_id,
          "type": element.profession_id,
          "address": element.full_address,
          "stateName": element.state_name,
          "districtName": element.district_name,
          "talukName": element.taluk_name,
          "status": element.status,
          "createdAt": element.createdAt,
          "updatedAt": element.updatedAt
        };
        master_merchant_detail_obj.bankAccountDetails={
          "accountNumber":'',
          "IFSC":'',
          "bankName": ""
        };
        if(element.bank_account_details.length>0){
          let bank_info={
            "accountNumber": element.bank_account_details[0].account_number,
            "IFSC": element.bank_account_details[0].ifsc_code,
            "bankName": ""
          }
          master_merchant_detail_obj.bankAccountDetails=bank_info
        }
        if(element.location){
          let location={
            "accuracy": element.location.accuracy,
            "lat": element.location.latitude,
            "long": element.location.longitude
          };
          master_merchant_detail_obj.geoLocation=location; 
        }
        if(element.added_by_user){
          let user_info={
            "id": element.added_by_user.id,
            "name": element.added_by_user.name,
            "mobileNumber": element.added_by_user.mobile_number
          }
          master_merchant_detail_obj.createdBy=user_info;
        }
        if(element.assigned_to_user){
          let user_info={
            "id": element.assigned_to_user.id,
            "name": element.assigned_to_user.name,
            "mobileNumber": element.assigned_to_user.mobile_number
          }
          master_merchant_detail_obj.assignedTo=user_info;
        }
        if(element.merchant_verification_docs.length>0){
          for (let index = 0; index < element.merchant_verification_docs.length; index++) {
            const doc = element.merchant_verification_docs[index];
            
            if(!master_merchant_detail_obj.hasOwnProperty(documentTypeToNameApp[doc.document_type])){
              master_merchant_detail_obj[documentTypeToNameApp[doc.document_type]]={};
              master_merchant_detail_obj[documentTypeToNameApp[doc.document_type]].backImage={ URL:doc.back_image?doc.back_image:'',id:doc.id};
              master_merchant_detail_obj[documentTypeToNameApp[doc.document_type]].frontImage={ URL:doc.front_image?doc.front_image:'',id:doc.id};
              master_merchant_detail_obj[documentTypeToNameApp[doc.document_type]].number=doc.value;
              master_merchant_detail_obj[documentTypeToNameApp[doc.document_type]].id=doc.id;
              master_merchant_detail_obj[documentTypeToNameApp[doc.document_type]].status=doc.status;
            }
          }
        }
        _response_merchant_detail_list.push(master_merchant_detail_obj)
      }
    }
    
    return { status: HTTP_status_codes.ok, data: _response_merchant_detail_list };
  } catch (err) {
    app_log_service({ type: type.error, err });
    return {
      status: HTTP_status_codes.internalServerError,
      message: "Error while creating user",
      error: err.message,
    };
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/procurement_sources/_services/add_procurement_bulk_service.js
const procurement_model = require("../../../../database/mongoose/market_linkage_db/procurementSources.model");
const procurementSourcesDocumentsModel = require("../../../../database/mongoose/market_linkage_db/procurementSourcesDocuments.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const { assignLeadsStatus } = require("../../../../enums/market_linkage/enums/procurementSources");
const formatRetailersData = require("../../../../common_services/market_linkage/formart_uploaded_data/format_retailers_data");
const formatRetailersDocs = require("../../../../common_services/market_linkage/formart_uploaded_data/format_retailers_docs");
const master_merchant_detail = require("../../../../database/models_v2/merchant/master_merchant_detail");
const banks = require("../../../../database/models_v2/transactions/banks");
const bank_account_details = require("../../../../database/models_v2/transactions/account_details");
const merchant_verification_docs = require("../../../../database/models_v2/merchant/merchant_verification_docs");
const ml_notification_event_enum = require("../../../../enums/notification/ml_notification_event_enum");
const fetch_ml_notification_string = require("../../../../entities_v2/notification/services/fetch_ml_notification_string");
const language = require("../../../../enums/global/language");
const { send_notification_for_ml } = require("../../../../notifier/firebase_admin_ml");

module.exports = async (users) => {
  let problematicRetailers = [];
  try {
    let allRetailers = [];
    for (let i = 0; i < users.length; i++) {
      const formatedData = await formatRetailersData(users[i]);

      // saving records of retailers with wrong PA Number
      if (formatedData.status === HTTP_status_codes.badRequest) {
        problematicRetailers.push({
          name: users[i]["Retailer Name"],
          mobileNumber: users[i]["Retailer Mobile Number"],
          problem: formatedData.data.message
        })
      }
      else if (formatedData.status === HTTP_status_codes.internalServerError) {
        return formatedData;
      }

      else {
        const merchant_exist = await master_merchant_detail.findOne({
          where: {
            mobile_number: formatedData.data.mobile_number
          }
        })

        if (merchant_exist) {
          problematicRetailers.push({
            name: merchant_exist.name,
            mobileNumber: merchant_exist.mobile_number,
            problem: "Duplicate Entry"
          })
        }
        else {
          const addedProcurementUser = await master_merchant_detail.build(formatedData.data).save();

          //push notification for lead
          const variables = {
            retailer_name: addedProcurementUser.name,
            retailer_mobile_number: addedProcurementUser.mobile_number
          }
          const notification = await fetch_ml_notification_string(ml_notification_event_enum.retailer_lead_assigned, language.english, variables);
          if (notification) {
            send_notification_for_ml([addedProcurementUser.added_by], notification.title, notification.message, notification.image)
              .catch(err => {
                error_log(err);
              });
          }

          if (users[i].bankAccountDetails && users[i].bankAccountDetails.bankName && users[i].bankAccountDetails.IFSC && users[i].bankAccountDetails.accountNumber) {
            const bank_name = await banks.findOrCreate({
              where: {
                name: users[i].bankAccountDetails?.bankName,
                is_active: 1
              }
            });
            await bank_account_details.findOrCreate({
              where: {
                account_number: users[i].bankAccountDetails?.accountNumber,
                ifsc_code: users[i].bankAccountDetails?.IFSC,
                bank_id: bank_name[0]?.id,
                master_merchant_id: addedProcurementUser.id,
                is_active: 1,
              }
            });
          }
          allRetailers.push(addedProcurementUser);
        }
      }
    }

    for (let retailer of allRetailers) {
      const formatedDocs = formatRetailersDocs(retailer.id);
      if (formatedDocs.status !== HTTP_status_codes.ok) {
        return formatedDocs;
      }
      await merchant_verification_docs.bulkCreate(formatedDocs.data);
    }

    return {
      status: HTTP_status_codes.ok,
      data: {
        uploadStatus: (users.length === problematicRetailers.length) ? assignLeadsStatus.Fail
          : problematicRetailers.length ? assignLeadsStatus.Partial
            : assignLeadsStatus.Success,
        problematicRetailers
      }
    };

  } catch (err) {
    app_log_service({ type: type.error, err });
    return {
      status: HTTP_status_codes.internalServerError,
      data: {
        message: "Error while creating user",
        error: err.message,
      },
    };
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/procurement_sources/_services/add_ml_retailer_service.js
const procurement_model = require("../../../../database/mongoose/market_linkage_db/procurementSources.model");
const master_merchant_detail_model = require("../../../../database/models_v2/merchant/master_merchant_detail");
const merchant_detail_model = require("../../../../database/models/merchant_detail");
const account_details_model = require("../../../../database/models_v2/transactions/account_details");
const banks_model = require("../../../../database/models_v2/transactions/banks");
const master_state_model = require("../../../../database/models_v2/location/master_state");
const master_district_model = require("../../../../database/models_v2/location/master_district");
const master_taluka_model = require("../../../../database/models_v2/location/master_taluka");
const merchant_verification_docs_model = require("../../../../database/models_v2/merchant/merchant_verification_docs");
const locations_model = require("../../../../database/models_v2/global/locations");
const procurementDocumentsModel = require("../../../../database/mongoose/market_linkage_db/procurementSourcesDocuments.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const {
  userStatus,
  documentStatus,
} = require("../../../../enums/market_linkage/enums/procurementSources");

const { categories } = require("../../../../enums/market_linkage/enums/categories");
const appLogService = require("../../../../common_services/market_linkage/logging/app_log_service");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const { actionPerformed } = require("../../../../enums/market_linkage/enums/paActivityEnum");
const { generate_unique_id } = require("../../../../common_services/unique_id_generation/generate_unique_id");
const error_log = require("../../../../middelware/error_log");
const { pa_activity_log_service } = require("../../../../common_services/market_linkage/logging/pa_activity_log_service");
/**
 * 
 * @param {*} name 
 * @param {*} mobileNumber 
 * @param {*} farmartId 
 * @param {*} email 
 * @param {*} type 
 * @param {*} business_name 
 * @param {*} address 
 * @param {*} lat 
 * @param {*} long 
 * @param {*} accuracy 
 * @param {*} accountNumber 
 * @param {*} IFSC 
 * @param {*} bankName 
 * @param {*} districtName 
 * @param {*} stateName 
 * @param {*} talukName 
 * @param {*} pincode 
 * @param {*} createdById 
 * @param {*} documents 
 * @param {*} remarks 
 * @returns 
 */
module.exports = async (name,
    mobileNumber,
    farmartId,
    email,
    retailer_type,
    business_name,
    address,
    // geoLocation,
    lat,
    long,
    accuracy,
    // bankAccountDetails,
    accountNumber,
    IFSC,
    bankName,
    districtName,
    stateName,
    talukName,
    pincode,
    createdById,
    createdByName,
    createdByMobileNumber,
    // making documents optional in case someone is not willing to provide
    // documents before sampling
    documents = [],
    remarks = "",
    reqLocation) => {
  try {
    /**
     * extracting the documents form
     * details object, so that can directly pass to model
     */
    let _response_merchant_detail={
        "business_name": business_name,
        "pincode": pincode,
        "isActive": true,
        "createdBy": {
            "id": createdById,
            "name": createdByName,
            "mobileNumber": createdByMobileNumber
        },
        "assignedTo": {
            "id": createdById,
            "name": createdByName,
            "mobileNumber": createdByMobileNumber
        },
        "remarks": remarks,
        "_id": null,
        "name": name,
        "mobileNumber": mobileNumber,
        "email": email,
        "farmartId": farmartId,
        "type": retailer_type,
        "address": address,
        "geoLocation": {
            "accuracy": accuracy,
            "lat": lat,
            "long": long
        },
        "bankAccountDetails": {
            "accountNumber": accountNumber,
            "IFSC": IFSC,
            "bankName": bankName
        },
        "stateName": stateName,
        "districtName": districtName,
        "talukName": talukName,
        "status": 3,
        "createdAt": "2022-07-09T14:49:20.359Z",
        "updatedAt": "2022-07-09T14:49:20.359Z",
    }
    let master_merchant_detail_obj={
        name:name,
        farmart_id:farmartId,
        profession_id:retailer_type,
        status:0,
        business_name:business_name,
        mobile_number:mobileNumber,
        platform_id:1,//"1->ml, 2->retailer, 3-> both"
        stage:1, // activated or deactivated stage
        merchant_profile_pic:'',
        full_address:address,
        state_name:stateName,
        district_name:districtName,
        pincode:pincode,
        taluk_name:talukName,
        email:email,
        whatsapp_number:0,
        onboarded_on_ml:Date.now(),
        onboarded_on_retailer:null,
        is_active:1,
        merchant_detail_id:null,
        location_id:null,
        added_by:createdById,
        state_id:null,
        district_id:null,
        taluk_id:null
    }
    let account_details_obj={
        account_number:accountNumber,
        ifsc_code:IFSC,
        account_holder_name:'',
        is_active:1,
        bank_id:null,
        master_merchant_id:null,
        buyer_detail_id:null
    }
    let location_obj={
        latitude:lat,
        longitude:long,
        accuracy:accuracy,
        is_active:1
    }
    // const {procurementData, reqLocation} = procurementUser;
    // const { documents, ...procurementUserDetails } = procurementData;

    master_merchant_detail_obj.status = master_merchant_detail_obj.status || userStatus.PENDING;
    master_merchant_detail_obj.pincode = master_merchant_detail_obj.pincode || 0;//"UNINITIALISED";

    if(!master_merchant_detail_obj.farmart_id){
      const uniqueIdResult = await generate_unique_id({        
        state: master_merchant_detail_obj.state_name,
        district: master_merchant_detail_obj.district_name,
        category: categories.ProcurementSources
      })

      if (uniqueIdResult.status === HTTP_status_codes.internalServerError) {
        return uniqueIdResult;
      }
      master_merchant_detail_obj.farmart_id = uniqueIdResult.data;
    }
    let location_obj_added=await locations_model.build(location_obj).save();
    if(location_obj_added){
        master_merchant_detail_obj.location_id=location_obj_added.id;
    }
    let merchant_detail_exist=await merchant_detail_model.findOne({
        where : {
            mobile_number:master_merchant_detail_obj.mobile_number,
        }
    });
    if(merchant_detail_exist){
        master_merchant_detail_obj.merchant_detail_id=merchant_detail_exist.id;
        master_merchant_detail_obj.onboarded_on_retailer=merchant_detail_exist.createdAt;
        master_merchant_detail_obj.platform_id=3;// for both (ml & retailer) platform
    } else {
        master_merchant_detail_obj.merchant_detail_id=null;
        master_merchant_detail_obj.onboarded_on_retailer=null;
        master_merchant_detail_obj.platform_id=1;// for retailer platform
    }
    
    // state
    let state_exist=await master_state_model.findOne({
        where : {
            name:master_merchant_detail_obj.state_name
        }
    });
    if(state_exist){
        master_merchant_detail_obj.state_id=state_exist.id;
    }
    // district
    let district_exist=await master_district_model.findOne({
        where : {
            name:master_merchant_detail_obj.district_name
        }
    });
    if(district_exist){
        master_merchant_detail_obj.district_id=district_exist.id;
    }
    //  taluka
    let taluka_exist=await master_taluka_model.findOne({
        where : {
            name:master_merchant_detail_obj.taluk_name
        }
    });
    if(taluka_exist){
        master_merchant_detail_obj.taluk_id=taluka_exist.id;
    }
    let mobile_exist=await master_merchant_detail_model.findOne({
        where : {
            mobile_number:master_merchant_detail_obj.mobile_number
        }
    });
    if(mobile_exist){
        throw new Error('mobile number already exist')
    }
    else{
        let master_merchant_detail_obj_added=await master_merchant_detail_model.build(master_merchant_detail_obj).save().catch(ex=>{throw ex;});
        // const addedProcurementUser = await procurement_model.create(procurementUserDetails);
        if(master_merchant_detail_obj_added){
            if(reqLocation){
                // pa activity logging
                pa_activity_log_service({
                    paId: master_merchant_detail_obj_added.added_by,
                    actionLocation: reqLocation,
                    actionTimestamp: new Date(Date.now()),
                    actionPerformed: actionPerformed.RetailerOnboarding,
                    retailerId: master_merchant_detail_obj_added.id
                }).catch((err)=>{
                    error_log(err);
                })
            }
            account_details_obj.master_merchant_id=master_merchant_detail_obj_added.id;
            if(bankName){
                let bank_exist=await banks_model.findOrCreate({
                    where : {
                        name:bankName,
                        is_active:true
                    }
                });
                if(bank_exist){
                    account_details_obj.bank_id=bank_exist.id;
                }
            }
            await account_details_model.build(account_details_obj).save();
            let documents_list=[];
            documents.forEach(
                function (document) {
                    let document_obj={
                        front_image: document.images[0]?.URL || '',
                        back_image: document.images[1]?.URL || '',
                        value: document.value || '',
                        remarks:document.remarks || '',
                        status:documentStatus.PENDING,
                        is_active:1,
                        document_type:document.type,
                        master_merchant_id:master_merchant_detail_obj_added.id
                    };
                    documents_list.push(document_obj);
                // document.images.forEach(
                //     function (image) {
                        
                // });
            });
            let added_docs=await merchant_verification_docs_model.bulkCreate(documents_list);
            if(added_docs.length && (lat && long && accuracy)){
                let flag = false;
                for (let index = 0; index < added_docs.length; index++) {
                    if(added_docs[index].front_image){
                        flag = true;
                        break;
                    }
                }
                if(flag){
                    pa_activity_log_service({
                        paId: master_merchant_detail_obj_added.added_by,
                        actionLocation: reqLocation,
                        actionTimestamp: new Date(Date.now()),
                        actionPerformed: actionPerformed.RetailerDocumentSubmission,
                        retailerId: master_merchant_detail_obj_added.id
                    }).catch((err)=>{
                        error_log(err);
                    })
                }
            }
            
            await master_merchant_detail_obj_added.save();
            _response_merchant_detail.status=master_merchant_detail_obj_added.status;
            _response_merchant_detail._id=master_merchant_detail_obj_added.id;
            _response_merchant_detail.createdAt=master_merchant_detail_obj_added.createdAt;
            _response_merchant_detail.updatedAt=master_merchant_detail_obj_added.updatedAt;
        }
    }
    // const addedDocs = await procurementDocumentsModel.insertMany(documents);

    return { status: HTTP_status_codes.ok, data: _response_merchant_detail };
  } catch (err) {
    appLogService({type:type.error,err});
    return {
      status: HTTP_status_codes.internalServerError,
      data: {
        message: "Error while creating user",
        error: err.message,
      },
    };
  }
};




File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/procurement_sources/_services/get_retailer_detail_for_excel_download.js
const procurementModel = require("../../../../database/mongoose/market_linkage_db/procurementSources.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const { userStatus } = require("../../../../enums/market_linkage/enums/procurementSources");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
const get_ml_retailer_service=require('../_services/get_ml_retailer_service')
const { documentNameToTypeApp, procurementTypeToName, userStatusToName } = require("../../../../enums/market_linkage/enums/procurementSources");

module.exports = async (filter) => {
  try {
    // const { status, mobileNumber, name, createdBy } = filter;
    let retailer_list=await get_ml_retailer_service(filter);
    const modifiedResponseData = [];

    retailer_list.data.forEach(retailer => {

      let retailerObj = {
        "FarMart Id": retailer.farmartId,
        "Date and Time of Creation": retailer.createdAt,
        "Name of PA": retailer.createdBy?.name,
        "PA mobile number": retailer.createdBy?.mobileNumber,
        "Type of retailer": procurementTypeToName[retailer.type],
        "Status": userStatusToName[retailer.status],
        "Business Name": retailer.business_name,
        "Retailer name": retailer.name,
        "Retailer Mobile number": retailer.mobileNumber,
        "Retailer email id": retailer.email,
        "Address of retailer": retailer.address,
        "Pincode of retailer": retailer.pincode,
        "District of retailer": retailer.districtName,
        "State of Retailers": retailer.stateName,
        "Bank details- Account number": retailer.bankAccountDetails?.accountNumber,
        "Bank- IFSC Code": retailer.bankAccountDetails?.IFSC,
      };
      if(retailer?.aadhar){
        retailerObj["Aadhar Number"] = retailer?.aadhar.number;
        if(retailer?.aadhar?.frontImage?.URL){
            retailerObj["Aadhar front link"] = retailer?.aadhar?.frontImage?.URL||'';
        }
        if(retailer?.aadhar?.backImage?.URL){
            retailerObj["Aadhar back link"] = retailer?.aadhar?.backImage?.URL||'';
        }
      }
      if(retailer?.pancard){
        retailerObj["Pan Number"] = retailer?.pancard?.number;
        if(retailer?.pancard?.frontImage?.URL){
            retailerObj["Pan Card image link"] = retailer?.pancard?.frontImage?.URL||'';
        }
      }
      if(retailer?.gst){
        retailerObj["GST Number"] = retailer?.gst?.number;
        if(retailer?.gst?.frontImage?.URL){
            retailerObj["GST Document front link"] = retailer?.gst?.frontImage?.URL||'';
        }
        if(retailer?.gst?.backImage?.URL){
            retailerObj["GST Document back link"] = retailer?.gst?.backImage?.URL||'';
        }
      }
      if(retailer?.bankAccount){
        retailerObj["Bank details image"] = retailer?.bankAccount?.frontImage?.URL||'';
      }
      if(retailer?.licence){
        retailerObj["License number"] = retailer?.licence?.number;
        if(retailer?.licence?.frontImage?.URL){
            retailerObj["License front link"] = retailer?.licence?.frontImage?.URL||'';
        }
        if(retailer?.licence?.backImage?.URL){
            retailerObj["License back link"] = retailer?.licence?.backImage?.URL||'';
        }
      }

      modifiedResponseData.push(retailerObj)
    });

    return { status: HTTP_status_codes.ok, data: modifiedResponseData };
  } catch (err) {
    app_log_service({ type: type.error, err });
    return {
      status: HTTP_status_codes.internalServerError,
      message: "Error while creating user",
      error: err.message,
    };
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/procurement_sources/_services/add_alternate_mobile_number_service.js
const error_log = require("../../../../middelware/error_log");
const get_master_merchant_detail_by_id = require("../../../../data_abstraction_layer/master_merchant/get_master_merchant_detail_by_id");
const merchant_stages = require("../../../../enums/market_linkage/enums/v2/merchant_stages");
const migrate_purchase_crop_lead = require("../../../../data_abstraction_layer/purchase_crop_leads/migrate_crop_leads");
const migrate_master_sample = require("../../../../data_abstraction_layer/procurment_master_sample/migrate_master_sample");
const add_master_merchant = require("../../../../common_services/merchant/add_master_merchant");

module.exports = async (retailer_mobile_number, alternate_mobile_number) => {
    try {
        const primary_retailer = await get_master_merchant_detail_by_id({ mobile_number: retailer_mobile_number });
        if (!primary_retailer)
            throw new Error("no business account linked with number = " + retailer_mobile_number);

        if (primary_retailer.primary_master_merchant_id)
            throw new Error("Primary number is already a secondary number for another number");

        let secondary_retailer = await get_master_merchant_detail_by_id({ mobile_number: alternate_mobile_number });
        if (!secondary_retailer) {
            // create retailer and update
            secondary_retailer = { ...primary_retailer.dataValues, mobile_number: alternate_mobile_number }
            await add_master_merchant(secondary_retailer);
            secondary_retailer = await get_master_merchant_detail_by_id({ mobile_number: alternate_mobile_number });
            // throw new Error("no business account linked with number = " + alternate_mobile_number);
        }

        if (secondary_retailer.primary_master_merchant_id)
            throw new Error("Alternate number is already a secondary number for another number");

        if (primary_retailer?.status == merchant_stages.APPROVED && secondary_retailer?.status == merchant_stages.APPROVED)
            throw new Error("Both accounts verified, can not be merged");

        else {
            if (primary_retailer.status == merchant_stages.APPROVED) {
                secondary_retailer.status = merchant_stages.SECONDARY_ACCOUNT;
                secondary_retailer.primary_master_merchant_id = primary_retailer.id;
                await migrate_purchase_crop_lead(secondary_retailer.id, primary_retailer.id);
                await migrate_master_sample(secondary_retailer.id, primary_retailer.id);
                await secondary_retailer.save();
                return primary_retailer;
            }
            else {
                primary_retailer.status = merchant_stages.SECONDARY_ACCOUNT;
                primary_retailer.primary_master_merchant_id = secondary_retailer.id;
                await migrate_purchase_crop_lead(primary_retailer.id, secondary_retailer.id);
                await migrate_master_sample(primary_retailer.id, primary_retailer.id);
                await primary_retailer.save();
                return secondary_retailer;
            }
        }
    }
    catch (err) {
        error_log(err);
        throw err;
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/procurement_sources/_services/update_ml_retailer_service.js
const procurement_model = require("../../../../database/mongoose/market_linkage_db/procurementSources.model");
const master_merchant_detail_model = require("../../../../database/models_v2/merchant/master_merchant_detail");
const master_state_model = require("../../../../database/models_v2/location/master_state");
const master_district_model = require("../../../../database/models_v2/location/master_district");
const master_taluka_model = require("../../../../database/models_v2/location/master_taluka");
const merchant_verification_docs_model = require("../../../../database/models_v2/merchant/merchant_verification_docs");
const account_details_model = require("../../../../database/models_v2/transactions/account_details");
const banks_model = require("../../../../database/models_v2/transactions/banks");
const procurementDocumentsModel = require("../../../../database/mongoose/market_linkage_db/procurementSourcesDocuments.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const { categories } = require("../../../../enums/market_linkage/enums/categories");
const {
  userStatus,
  documentStatus,
} = require("../../../../enums/market_linkage/enums/procurementSources");
const appLogService = require("../../../../common_services/market_linkage/logging/app_log_service");
const { actionPerformed } = require("../../../../enums/market_linkage/enums/paActivityEnum");
const { generate_unique_id } = require("../../../../common_services/unique_id_generation/generate_unique_id");
const error_log = require("../../../../middelware/error_log");
const locations = require("../../../../database/models_v2/global/locations");
const { pa_activity_log_service } = require("../../../../common_services/market_linkage/logging/pa_activity_log_service");
const Op=require('sequelize').Op;

module.exports = async (name
    ,mobileNumber
    ,farmartId
    ,email
    ,retailer_type
    ,business_name
    ,address
    ,lat
    ,long
    ,accuracy
    ,accountNumber
    ,IFSC
    ,bankName
    ,districtName
    ,stateName
    ,talukName
    ,pincode
    ,documents
    ,id
    ,status
    ,reqLocation) => {
  try {
    /**
     * extracting the documents form
     * details object, so that can directly pass to model
     */

    let master_merchant_detail_exist=await master_merchant_detail_model.findOne({
        where : {
            id:id,
            is_active:true
        }
    });
    if(master_merchant_detail_exist){
      master_merchant_detail_exist.status = status || userStatus.KYC_PENDING;
      master_merchant_detail_exist.farmart_id = farmartId;
      
      if(!master_merchant_detail_exist.farmart_id){
          const uniqueIdResult = await generate_unique_id({        
            state: stateName,
            district: districtName,
            category: categories.ProcurementSources
          })
    
          if (uniqueIdResult.status === HTTP_status_codes.internalServerError) {
            return uniqueIdResult;
          }
          master_merchant_detail_exist.farmart_id = uniqueIdResult.data;
      }
      master_merchant_detail_exist.name=name?name:master_merchant_detail_exist.name;
      master_merchant_detail_exist.mobile_number=mobileNumber?mobileNumber:master_merchant_detail_exist.mobile_number;
      master_merchant_detail_exist.email=email?email:master_merchant_detail_exist.email;
      master_merchant_detail_exist.profession_id=retailer_type;
      master_merchant_detail_exist.business_name=business_name?business_name:master_merchant_detail_exist.business_name;
      master_merchant_detail_exist.full_address=address?address:master_merchant_detail_exist.full_address;
      master_merchant_detail_exist.district_name=districtName?districtName:master_merchant_detail_exist.district_name;
      master_merchant_detail_exist.state_name=stateName?stateName:master_merchant_detail_exist.state_name;
      master_merchant_detail_exist.taluk_name=talukName?talukName:master_merchant_detail_exist.taluk_name;
      master_merchant_detail_exist.pincode=pincode?pincode:master_merchant_detail_exist.pincode;
      // state
      if(master_merchant_detail_exist.state_name){
        let state_exist=await master_state_model.findOne({
          where : {
              name:master_merchant_detail_exist.state_name
          }
        });
        if(state_exist){
            master_merchant_detail_exist.state_id=state_exist.id;
        }
      }
      
      // district
      if(master_merchant_detail_exist.district_name){
        let district_exist=await master_district_model.findOne({
          where : {
              name:master_merchant_detail_exist.district_name
          }
        });
        if(district_exist){
            master_merchant_detail_exist.district_id=district_exist.id;
        }
      }
      
      //  taluka
      if(master_merchant_detail_exist.taluk_name){
        let taluka_exist=await master_taluka_model.findOne({
          where : {
              name:master_merchant_detail_exist.taluk_name
          }
        });
        if(taluka_exist){
            master_merchant_detail_exist.taluk_id=taluka_exist.id;
        }
      }

      if(lat && long && accuracy){
        let location_exist =await locations.findOne({
          where : {
            latitude: lat,
            longitude: long,
            accuracy: accuracy,
            is_active: 1
          }
        });
        if(location_exist){
          master_merchant_detail_exist.location_id = location_exist.id;
        }
        else{
          const location_obj = {
            latitude: lat,
            longitude: long,
            accuracy: accuracy,
            is_active: 1
          }
          let location_obj_added =await locations.build(location_obj).save();
          master_merchant_detail_exist.location_id = location_obj_added.id;
        }
      }
      
      if(accountNumber && IFSC && bankName){
        let master_merchant_account_exist=await account_details_model.findOne({
          where : {
            master_merchant_id:master_merchant_detail_exist.id,
            is_active:true
          }
        });
        if(master_merchant_account_exist){
          master_merchant_account_exist.is_active=false;
          await master_merchant_account_exist.save();
        }
        let master_merchant_account_obj={
          account_number:accountNumber,
          ifsc_code:IFSC,
          account_holder_name:'',
          is_active:1,
          bank_id:null,
          master_merchant_id:master_merchant_detail_exist.id,
          buyer_detail_id:null
        }
        if(bankName){
          let bank_exist=await banks_model.findOrCreate({
              where : {
                  name:bankName,
                  is_active:true
              }
          });
          if(bank_exist){
            master_merchant_account_obj.bank_id=bank_exist.id;
          }
        }
        await account_details_model.build(master_merchant_account_obj).save();
      }
      
      // recheck documents saving 
      let flag = false;
      for (let i = 0; i < documents.length; i++) {
        let document = documents[i];
  
        document.status = document.status || documentStatus.PENDING;
        let merchant_verification_docs_exist=await merchant_verification_docs_model.findOne({
          where : {
            id:document.id,
            is_active:true,
            document_type:document.type
          }
        });
        if(merchant_verification_docs_exist){
          
          if(merchant_verification_docs_exist.status!=documentStatus.APPROVED){
            let back_image=document.images[1]?.URL||'';
            let front_image=document.images[0]?.URL||'';
            if(front_image && !flag){
              flag = true;
            }
            if(document.status===documentStatus.REJECTED || document.status===documentStatus.RE_UPLOAD){
              front_image='';
              back_image='';
            }
            merchant_verification_docs_exist.status=document.status;
            merchant_verification_docs_exist.front_image=front_image;
            merchant_verification_docs_exist.back_image=back_image;
            merchant_verification_docs_exist.remarks=document.remarks || '';
            merchant_verification_docs_exist.value=document.value || '';
            await merchant_verification_docs_exist.save();
          }
        }
        else{
          let document_obj={
            front_image:document.images[0]?.URL,
            back_image:document.images[1]?.URL,
            value: document.value || '',
            remarks:document.remarks || '',
            status:documentStatus.PENDING,
            is_active:1,
            document_type:document.type,
            master_merchant_id:master_merchant_detail_exist.id
          };
          let added_doc = await merchant_verification_docs_model.build(document_obj).save();
          if(document_obj.front_image && !flag){
            flag = true;
          }
        }
      }
      master_merchant_detail_exist = await master_merchant_detail_exist.save();

      if(flag && reqLocation){
        pa_activity_log_service({
          paId: master_merchant_detail_exist.added_by,
          actionLocation: reqLocation,
          actionTimestamp: new Date(Date.now()),
          actionPerformed: actionPerformed.RetailerDocumentSubmission,
          retailerId: master_merchant_detail_exist.id
        }).catch((err)=>{
            error_log(err);
        })
      }
    
    // const {procurementData, reqLocation} = procurementUser;
    // const { documents, ...procurementUserDetails } = procurementData;

    // procurementUserDetails.status = procurementUserDetails.status || userStatus.KYC_PENDING;

    // if(!procurementUserDetails.farmartId){
    //   const uniqueIdResult = await generate_unique_id({        
    //     state: procurementUserDetails.stateName,
    //     district: procurementUserDetails.districtName,
    //     category: categories.ProcurementSources
    //   })

    //   if (uniqueIdResult.status === HTTP_status_codes.internalServerError) {
    //     return uniqueIdResult;
    //   }
    //   procurementUserDetails.farmartId = uniqueIdResult.data;
    // }

    // const updatedProcurementUser = await procurement_model.findByIdAndUpdate(
    //   procurementUserDetails.id,
    //   procurementUserDetails,
    //   {new:true}
    // );
    // let flag = true;
    // for (let i = 0; i < documents.length; i++) {
    //   let document = documents[i];

    //   document.status = document.status || documentStatus.PENDING;

    //   if (document.status === documentStatus.RE_UPLOAD) {
    //     document.images.forEach(function (documentImage) {
    //       documentImage.URL = "";
    //     });

    //     document.value = "";
    //   }

    //   if (document._id) {
    //     await procurementDocumentsModel.findByIdAndUpdate(
    //       document._id,
    //       document
    //     );
    //   } else {
    //     document.userId = procurementUserDetails.id;
    //     const addedDoc = await procurementDocumentsModel.create(document);
    //     if(addedDoc && flag && reqLocation){
    //       flag = false;
    //       addPaActivityService({
    //         paId: updatedProcurementUser.createdBy.id,
    //         actionLocation: {"lat":lat,"long":long,"accuracy":accuracy},
    //         actionTimestamp: addedDoc.createdAt,
    //         actionPerformed: actionPerformed.RetailerDocumentSubmission,
    //         retailerId: updatedProcurementUser.id
    //       }).catch((err)=>{
    //         appLogService({type:type.error,err});
    //       })
    //     }
    //   }
    }

    return { status: HTTP_status_codes.ok, data: true };
  } catch (err) {
    appLogService({type:type.error,err});
    return {
      status: HTTP_status_codes.internalServerError,
      data:{
        message: "Error while creating user",
        error: err.message,
      }
    };
  }
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/procurement_sources/controllers/upload_zoho_retailers_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const { upload_zoho_retailers_service } = require("../services/upload_zoho_retailers_service");

const upload_zoho_retailers_controller = async (req, res) => {
    try {
        let file = req.file;
        if(!file){
            return res.status(http_status_code_enum.bad_request).json({message: "file missing"});
        }
        if(file?.mimetype !== 'text/csv'){
            return res.status(http_status_code_enum.bad_request).json({message: "file format should be csv"});
        }
        const result = await upload_zoho_retailers_service(file);
        res.status(http_status_code_enum.ok).json(result);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({message: err.message});
    }
}

module.exports = upload_zoho_retailers_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/procurement_sources/controllers/get_procurement_records_controller.js
const { Parser } = require("json2csv");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const get_procurement_records_service = require("../services/get_procurement_records_service");
const get_retailer_detail_for_excel_download = require("../_services/get_retailer_detail_for_excel_download");

const get_procurement_records_controller = async (req, res) => {
  try {
    let { status = "ALL", mobileNumber = "", name = "" } = req.query;

    name = name.toLowerCase();
    // const procurementUserResult = await get_procurement_records_service({
    //   status,
    //   mobileNumber,
    //   name,
    // });
    const procurementUserResult = await get_retailer_detail_for_excel_download({
      status,
      mobileNumber,
      name,
    });
    if (procurementUserResult.status !== HTTP_status_codes.ok) {
      return res
        .status(procurementUserResult.status)
        .json(procurementUserResult.data);
    }

    const csvFileHeader = Object.keys(procurementUserResult.data[0] || []);
    const csvFileOpts = { csvFileHeader };

    const csvParser = new Parser(csvFileOpts);
    const csv = csvParser.parse(procurementUserResult.data);

    res.setHeader("Content-Type", "text/csv");
    res.setHeader("Content-disposition", "attachment; filename=data.csv");

    return res.status(HTTP_status_codes.ok).send(csv);
  } catch (e) {
    app_log_service({type:type.error,err:e});
    return res.status(HTTP_status_codes.badRequest).json({
      message: e.message,
    });
  }
};

module.exports = get_procurement_records_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/procurement_sources/controllers/update_procurement_controller.js
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const { type } = require('../../../../enums/market_linkage/enums/appLogEnum');
const { documentStatus } = require('../../../../enums/market_linkage/enums/procurementSources');
const appLogService = require('../../../../common_services/market_linkage/logging/app_log_service');
// const update_procurement_service = require('../services/update_procurement_service');
const update_ml_retailer_service = require('../_services/update_ml_retailer_service');
const user_role = require('../../../../enums/user_profile/user_role');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const update_procurement_controller = async (req, res) => {
    try {
        const {
            name,
            farmartId,
            mobileNumber,
            email,
            type,
            business_name,
            address,
            districtName,
            stateName,
            talukName,
            pincode,
            geoLocation,
            bankAccountDetails,
            documents,
            id
        } = req.body;

        const { user } = req;
        let reqLocation;

        if (user.ml_user?.designation === user_role.PROCUREMENT_ASSOCIATE) {
            if (!req.headers.geolocation) throw new ValidationError('geolocation header missing'); ;
            reqLocation = JSON.parse(req.headers.geolocation);
        }

        if (!name) {
            throw new ValidationError('name is Missing');
        }

        if (!id) {
            throw new ValidationError('id is Missing');
        }

        if (!type) {
            throw new ValidationError('type is Missing');
        }
        if (!business_name) {
            throw new ValidationError('business_name is Missing');
        }
        if (!address) {
            throw new ValidationError('address is Missing');
        }

        if (!stateName) {
            throw new ValidationError('State is Missing');
        }

        if (!districtName) {
            throw new ValidationError('District is Missing');
        }

        if (!pincode) {
            throw new ValidationError('Pincode is Missing');
        }

        if (!mobileNumber) {
            throw new ValidationError('Mobile number is Missing');
        }

        if (!geoLocation || typeof geoLocation !== 'object') {
            throw new ValidationError('Geo_location is Missing');
        }

        if (!bankAccountDetails || typeof bankAccountDetails !== 'object') {
            throw new ValidationError('Bank details is Missing');
        }

        if (!documents || !documents.length) {
            throw new ValidationError('documents is missing');
        }

        documents.forEach(function (document) {
            if (document.status === documentStatus.RE_UPLOAD) {
                document.status = documentStatus.PENDING;
            }
        });

        // const addedProcurementUserResult = await update_procurement_service({
        //   procurementData:{
        //     name,
        //     mobileNumber,
        //     email,
        //     farmartId,
        //     type,
        //     business_name,
        //     address,
        //     geoLocation,
        //     districtName,
        //     stateName,
        //     talukName,
        //     pincode,
        //     documents,
        //     bankAccountDetails,
        //     id,
        //   },
        //   reqLocation
        // });
        const result = await update_ml_retailer_service(name
            , mobileNumber
            , farmartId
            , email
            , type
            , business_name
            , address
            , geoLocation.lat
            , geoLocation.long
            , geoLocation.accuracy
            , bankAccountDetails.accountNumber
            , bankAccountDetails.IFSC
            , bankAccountDetails.bankName
            , districtName
            , stateName
            , talukName
            , pincode
            , documents
            , id
            , null
            , reqLocation);
        return res
            .status(result.status)
            .json(result.data);
    } catch (e) {
        appLogService({ type: type.error, err: e });
        return res.status(HTTP_status_codes.badRequest).json({
            message: e.message
        });
    }
};

module.exports = update_procurement_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/procurement_sources/controllers/get_procurement_pa_controller.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const {
    documentTypeToNameApp,
  } = require("../../../../enums/market_linkage/enums/procurementSources");
  const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
  const get_procurement_service = require("../services/get_procurement_service");
  const get_ml_retailer_service = require("../_services/get_ml_retailer_service");

const add_procurement_controller = async (req, res) => {
  try {
    let { status = "ALL", mobileNumber = "", name = "" } = req.query;

    let { _id: requestingUserId } = req.user.ml_user._id;
    const user_profile_id=req.user.user_profile_id;
    //lower casing
    name = name.toLowerCase();
    let result=await get_ml_retailer_service({
      status,
      mobileNumber,
      name,
      createdBy: user_profile_id,
    })
    // const procurementUserResult = await get_procurement_service({
    //   status,
    //   mobileNumber,
    //   name,
    //   createdBy: requestingUserId,
    // });

    // if (procurementUserResult.status === HTTP_status_codes.ok) {
    //   const modifiedResponseData = procurementUserResult.data.map(function (
    //     user
    //   ) {
    //     /**
    //      * extracting the documents form
    //      * details object, so that can directly pass to model
    //      */
    //     const { documents, ...rest } = user;

    //     Object.entries(documentTypeToNameApp).forEach((doc) => {
    //       user[doc[1]] = null;
    //     })

    //     documents.forEach(function (document) {
    //       user[documentTypeToNameApp[document.type]] = {
    //         frontImage: document.images[0],
    //         backImage: document.images[1],
    //         number: document.value,
    //         id: document._id,
    //         status: document.status,
    //       };
    //     });

    //     delete user.documents;

    //     return user;
    //   });

    //   return res
    //     .status(procurementUserResult.status)
    //     .json(modifiedResponseData);
    // }

    return res
      .status(result.status)
      .json(result.data);
  } catch (e) {
    app_log_service({type:type.error,err:e});
    return res.status(HTTP_status_codes.badRequest).json({
      message: e.message,
    });
  }
};

module.exports = add_procurement_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/procurement_sources/controllers/get_pa_drawer_links_controller.js
const { paDrawerLinks } = require("../../../../enums/market_linkage/enums/procurementSources");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const appLogService = require("../../../../common_services/market_linkage/logging/app_log_service");

const controller = async (req, res) => {
  try {
    return res.status(HTTP_status_codes.ok).json(paDrawerLinks);
  } catch (e) {
    appLogService({type:type.error,err:e});
    return res.status(HTTP_status_codes.badRequest).json({
      message: e.message,
    });
  }
};

module.exports = controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/procurement_sources/controllers/update_procurement_panel_controller.js
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
// const { type } = require('../../../../enums/market_linkage/enums/appLogEnum');
const {
    documentNameToTypeApp,
    documentStatus,
    userStatus
} = require('../../../../enums/market_linkage/enums/procurementSources');
// const appLogService = require('../../../../common_services/market_linkage/logging/app_log_service');
// const update_procurement_service = require('../services/update_procurement_service');
const update_ml_retailer_service = require('../_services/update_ml_retailer_service');
const error_log = require('../../../../middelware/error_log');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const update_procurement_controller = async (req, res) => {
    try {
        let {
            id,
            farmartId,
            name,
            mobileNumber,
            email,
            type,
            business_name,
            address,
            pincode,
            districtName,
            stateName,
            geoLocation,
            talukName,
            bankAccountDetails,
            aadhar,
            bankAccount,
            gst,
            licence,
            pancard,
            status
        } = req.body;

        if (!name) {
            throw new ValidationError('name is Missing');
        }

        if (!id) {
            throw new ValidationError('id is Missing');
        }

        if (!type) {
            throw new ValidationError('type is Missing');
        }
        if (!business_name) {
            throw new ValidationError('business_name is Missing');
        }
        if (!address) {
            throw new ValidationError('address is Missing');
        }

        if (!stateName) {
            throw new ValidationError('State is Missing');
        }

        if (!districtName) {
            throw new ValidationError('District is Missing');
        }

        if (!pincode) {
            throw new ValidationError('Pincode is Missing');
        }

        if (!mobileNumber) {
            throw new ValidationError('Mobile number is Missing');
        }

        if (!geoLocation || typeof geoLocation !== 'object') {
            throw new ValidationError('Geo_location is Missing');
        }

        if (!bankAccountDetails || typeof bankAccountDetails !== 'object') {
            throw new ValidationError('Bank details is Missing');
        }

        if (!aadhar || !bankAccount || !gst || !licence || !pancard) {
            throw new ValidationError('documents is missing');
        }

        const documents = makeAllDocumentsArray(id, [
            { ...aadhar, documentNameENUM: 'aadhar' },
            { ...bankAccount, documentNameENUM: 'bankAccount' },
            { ...gst, documentNameENUM: 'gst' },
            { ...licence, documentNameENUM: 'licence' },
            { ...pancard, documentNameENUM: 'pancard' }
        ]);

        if (!documents || !documents.length) {
            throw new ValidationError('documents is missing');
        }

        let shouldApprove = true;

        documents.forEach(function (document) {
            if (document.status !== documentStatus.APPROVED) {
                shouldApprove = false;
            }
        });

        // const addedProcurementUserResult = await update_procurement_service({
        //   procurementData:{
        //     name,
        //     mobileNumber,
        //     farmartId,
        //     email,
        //     type,
        //     business_name,
        //     address,
        //     geoLocation,
        //     districtName,
        //     stateName,
        //     talukName,
        //     pincode,
        //     documents,
        //     bankAccountDetails,
        //     id,
        //     status: shouldApprove ? userStatus.APPROVED : userStatus.KYC_PENDING,
        //   }
        // });
        const result = await update_ml_retailer_service(
            name
            , mobileNumber
            , farmartId
            , email
            , type
            , business_name
            , address
            , geoLocation.lat
            , geoLocation.long
            , geoLocation.accuracy
            , bankAccountDetails.accountNumber
            , bankAccountDetails.IFSC
            , bankAccountDetails.bankName
            , districtName
            , stateName
            , talukName
            , pincode
            , documents
            , id
            // eslint-disable-next-line no-unused-vars
            , status = shouldApprove ? userStatus.APPROVED : userStatus.KYC_PENDING
        )
        return res
            .status(result.status)
            .json(result.data);
    } catch (e) {
        error_log(e);
        return res.status(HTTP_status_codes.badRequest).json({
            message: e.message
        });
    }
};

module.exports = update_procurement_controller;

function makeAllDocumentsArray (userId, documents) {
    return documents.map(function (document) {
        const images = [];

        if (document.frontImage) {
            images.push({
                URL: document.frontImage.URL,
                id: document.frontImage.id
            });
        }

        if (document.backImage) {
            images.push({
                URL: document.backImage.URL,
                id: document.backImage.id
            });
        }

        return {
            id: document.id,
            userId,
            type: documentNameToTypeApp[document.documentNameENUM],
            status: document.status,
            value: document.number,
            images
        };
    });
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/procurement_sources/controllers/get_retailer_status_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const get_retailer_status_service = require('../services/get_retailer_status_service.js');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const retailer_mobile_number = +req.query.retailer_mobile_number || null;
        if (!retailer_mobile_number) {
            throw new ValidationError('retailer_mobile_number  missing');
        }

        const retailer_status = await get_retailer_status_service(retailer_mobile_number);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'success', retailer_status));
    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/procurement_sources/controllers/add_procurement_bulk_controller.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const appLogService = require("../../../../common_services/market_linkage/logging/app_log_service");
const add_procurement_bulk_service = require("../_services/add_procurement_bulk_service");

const add_procurement_controller = async (req, res) => {
  try {
    const { users = [] } = req.body;

    const addedProcurementUserResult = await add_procurement_bulk_service(users);

    //sending empty fields as "N/A"
    return res
      .status(addedProcurementUserResult.status)
      .json(addedProcurementUserResult.data);
  } catch (e) {
    appLogService({type:type.error,err:e});
    return res.status(HTTP_status_codes.badRequest).json({
      message: e.message,
    });
  }
};

module.exports = add_procurement_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/procurement_sources/controllers/get_procurement_controller.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const {
  documentTypeToNameApp,
} = require("../../../../enums/market_linkage/enums/procurementSources");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
const get_procurement_service = require("../services/get_procurement_service");
const get_ml_retailer_service = require("../_services/get_ml_retailer_service");

const add_procurement_controller = async (req, res) => {
  try {
    let { status = "ALL", mobileNumber = "", name = "" } = req.query;

    //lower casing
    name = name.toLowerCase();
    let result=await get_ml_retailer_service({status,mobileNumber,name});
    // const procurementUserResult = await get_procurement_service({
    //   status,
    //   mobileNumber,
    //   name,
    // });

    // if (procurementUserResult.status === HTTP_status_codes.ok) {
    //   const modifiedResponseData = procurementUserResult.data.map(function (
    //     user
    //   ) {
    //     /**
    //      * extracting the documents form
    //      * details object, so that can directly pass to model
    //      */
    //     const { documents, ...rest } = user;

    //     Object.entries(documentTypeToNameApp).forEach((doc) => {
    //       user[doc[1]] = null;
    //     })

    //     documents.forEach(function (document) {
    //       user[documentTypeToNameApp[document.type]] = {
    //         frontImage: document.images[0],
    //         backImage: document.images[1],
    //         number: document.value,
    //         id: document._id,
    //         status: document.status,
    //       };
    //     });

    //     delete user.documents;

    //     return user;
    //   });

    //   return res
    //     .status(procurementUserResult.status)
    //     .json(modifiedResponseData);
    // }

    return res
      .status(result.status)
      .json(result.data);
  } catch (e) {
    app_log_service({type:type.error,err:e});
    return res.status(HTTP_status_codes.badRequest).json({
      message: e.message,
    });
  }
};

module.exports = add_procurement_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/procurement_sources/controllers/add_alternate_mobile_number_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const add_alternate_mobile_number_service = require("../_services/add_alternate_mobile_number_service.js");

module.exports = async (req, res) => {
    try {
        const retailer_mobile_number = +req.body.retailer_mobile_number || null;
        const alternate_mobile_number = +req.body.alternate_mobile_number || null;
        if (!retailer_mobile_number || !alternate_mobile_number)
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false, "Mandatory params missing"));

        const master_merchant_detail = await add_alternate_mobile_number_service(retailer_mobile_number, alternate_mobile_number);

        return res.status(http_status_code_enum.ok).json(create_api_response(true, "success", { master_merchant_id: master_merchant_detail?.id }));
    }
    catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/procurement_sources/controllers/add_procurement_controller.js
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const { type } = require('../../../../enums/market_linkage/enums/appLogEnum');
const appLogService = require('../../../../common_services/market_linkage/logging/app_log_service');
// const add_procurement_service = require('../services/add_procurement_service');
const add_ml_retailer_service = require('../_services/add_ml_retailer_service');
const user_role = require('../../../../enums/user_profile/user_role');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * Use this controller for farmartos (web)
 * @param {import("express").Request} req
 * @param {import("express").Response} res
 */

const add_procurement_controller = async (req, res) => {
    try {
        const {
            name,
            mobileNumber,
            farmartId,
            email,
            type: retailer_type,
            business_name,
            address,
            geoLocation,
            bankAccountDetails,
            districtName,
            stateName,
            talukName,
            pincode,

            // making documents optional in case someone is not willing to provide
            // documents before sampling
            documents = [],
            remarks = ''
        } = req.body;

        const {
            _id: createdById,
            name: createdByName,
            mobileNumber: createdByMobileNumber,
            designation: createdByDesignation
        } = req.user.ml_user || {};
        const user_profile_id = req.user.user_profile_id || null;
        let reqLocation;

        if (createdByDesignation === user_role.PROCUREMENT_ASSOCIATE) {
            if (!req.headers.geolocation) throw new ValidationError('geolocation header missing'); ;
            reqLocation = JSON.parse(req.headers.geolocation);
        }

        if (!createdById || !createdByName || !user_profile_id) {
            return res
                .status(HTTP_status_codes.unauthorised)
                .json({ message: 'unauthrised', error: 'creator details missing' });
        }

        if (!name) {
            throw new ValidationError('name is Missing');
        }
        if (!type) {
            throw new ValidationError('type is Missing');
        }
        if (!business_name) {
            throw new ValidationError('business_name is Missing');
        }
        if (!address) {
            throw new ValidationError('address is Missing');
        }

        if (!stateName) {
            throw new ValidationError('State is Missing');
        }

        if (!districtName) {
            throw new ValidationError('District is Missing');
        }

        if (!pincode) {
            throw new ValidationError('Pincode is Missing');
        }

        if (!mobileNumber) {
            throw new ValidationError('Mobile number is Missing');
        }

        if (!geoLocation || typeof geoLocation !== 'object') {
            throw new ValidationError('Geo_location is Missing');
        }

        if (!bankAccountDetails || typeof bankAccountDetails !== 'object') {
            throw new ValidationError('Bank details is Missing');
        }

        // const addedProcurementUserResult = await add_procurement_service({
        //   procurementData: {
        //     name,
        //     mobileNumber,
        //     email,
        //     farmartId,
        //     type,
        //     business_name,
        //     address,
        //     geoLocation,
        //     documents,
        //     bankAccountDetails,
        //     stateName,
        //     districtName,
        //     talukName,
        //     pincode,
        //     createdBy: {
        //       id: createdById,
        //       name: createdByName,
        //       mobileNumber: createdByMobileNumber,
        //     },
        //     assignedTo: {
        //       id: createdById,
        //       name: createdByName,
        //       mobileNumber: createdByMobileNumber,
        //     },
        //     remarks
        //   },
        //   reqLocation
        // });

        const result = await add_ml_retailer_service(name
            , mobileNumber
            , farmartId
            , email
            , retailer_type
            , business_name
            , address
            , geoLocation.lat
            , geoLocation.long
            , geoLocation.accuracy
            , bankAccountDetails.accountNumber
            , bankAccountDetails.IFSC
            , bankAccountDetails.bankName
            , districtName
            , stateName
            , talukName
            , pincode
            , user_profile_id
            , createdByName
            , createdByMobileNumber
            , documents
            , remarks
            , reqLocation);

        return res
            .status(result.status)
            .json(result.data);
    } catch (e) {
        appLogService({ type: type.error, err: e });
        return res.status(HTTP_status_codes.badRequest).json({
            message: 'unable to add retailer',
            error: e.message
        });
    }
};

module.exports = add_procurement_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/procurement_sources/services/add_procurement_service.js
const procurement_model = require("../../../../database/mongoose/market_linkage_db/procurementSources.model");
const procurementDocumentsModel = require("../../../../database/mongoose/market_linkage_db/procurementSourcesDocuments.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const {
  userStatus,
  documentStatus,
} = require("../../../../enums/market_linkage/enums/procurementSources");

const { categories } = require("../../../../enums/market_linkage/enums/categories");
const appLogService = require("../../../../common_services/market_linkage/logging/app_log_service");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const { actionPerformed } = require("../../../../enums/market_linkage/enums/paActivityEnum");
const { generate_unique_id } = require("../../../../common_services/unique_id_generation/generate_unique_id");
const { pa_activity_log_service } = require("../../../../common_services/market_linkage/logging/pa_activity_log_service");
const error_log = require("../../../../middelware/error_log");

module.exports = async (procurementUser) => {
  try {
    /**
     * extracting the documents form
     * details object, so that can directly pass to model
     */
    const {procurementData, reqLocation} = procurementUser;
    const { documents, ...procurementUserDetails } = procurementData;

    procurementUserDetails.status = procurementUserDetails.status || userStatus.KYC_PENDING;
    procurementUserDetails.pincode = procurementUserDetails.pincode || "UNINITIALISED";

    if(!procurementUserDetails.farmartId){
      const uniqueIdResult = await generate_unique_id({        
        state: procurementUserDetails.stateName,
        district: procurementUserDetails.districtName,
        category: categories.ProcurementSources
      })

      if (uniqueIdResult.status === HTTP_status_codes.internalServerError) {
        return uniqueIdResult;
      }
      procurementUserDetails.farmartId = uniqueIdResult.data;
    }

    const addedProcurementUser = await procurement_model.create(procurementUserDetails);

    if(reqLocation){
    // pa activity logging
    pa_activity_log_service({
        paId: addedProcurementUser.createdBy.id,
        actionLocation: reqLocation,
        actionTimestamp: new Date(Date.now()),
        actionPerformed: actionPerformed.RetailerOnboarding,
        retailerId: addedProcurementUser.id
      }).catch((err)=>{
        error_log(err);
      })
    }

    documents.forEach(function (document) {
      document.status = documentStatus.PENDING;
      document.userId = addedProcurementUser.id;

      document.images.forEach(function (image) {
        image.status = documentStatus.PENDING;
      });
    });

    const addedDocs = await procurementDocumentsModel.insertMany(documents);

    if(addedDocs.length && reqLocation){
      pa_activity_log_service({
        paId: addedProcurementUser.createdBy.id,
        actionLocation: reqLocation,
        actionTimestamp: new Date(Date.now()),
        actionPerformed: actionPerformed.RetailerDocumentSubmission,
        retailerId: addedProcurementUser.id
      }).catch((err)=>{
        error_log(err);
      })
    }

    return { status: HTTP_status_codes.ok, data: addedProcurementUser };
  } catch (err) {
    appLogService({type:type.error,err});
    return {
      status: HTTP_status_codes.internalServerError,
      data: {
        message: "Error while creating user",
        error: err.message,
      },
    };
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/procurement_sources/services/get_procurement_records_service.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const { documentNameToTypeApp, procurementTypeToName, userStatusToName } = require("../../../../enums/market_linkage/enums/procurementSources");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
const get_procurement_service = require("./get_procurement_service");


module.exports = async (filter) => {
  try {
    const procurementResult = await get_procurement_service(filter);
    
    if (procurementResult.status !== HTTP_status_codes.ok) {
        return procurementResult;
    }

    const modifiedResponseData = [];

    procurementResult.data.forEach(retailer => {

      let retailerObj = {
        "FarMart Id": retailer.farmartId,
        "Date and Time of Creation": retailer.createdAt,
        "Name of PA": retailer.createdBy?.name,
        "PA mobile number": retailer.createdBy?.mobileNumber,
        "Type of retailer": procurementTypeToName[retailer.type],
        "Status": userStatusToName[retailer.status],
        "Business Name": retailer.business_name,
        "Retailer name": retailer.name,
        "Retailer Mobile number": retailer.mobileNumber,
        "Retailer email id": retailer.email,
        "Address of retailer": retailer.address,
        "Pincode of retailer": retailer.pincode,
        "District of retailer": retailer.districtName,
        "State of Retailers": retailer.stateName,
        "Bank details- Account number": retailer.bankAccountDetails?.accountNumber,
        "Bank- IFSC Code": retailer.bankAccountDetails?.IFSC,
      };

      retailer.documents?.forEach(document => {
        if(document.type === documentNameToTypeApp.pancard){
          retailerObj["Pan Number"] = document.value;
          retailerObj["Pan Card image link"] = document.images[0]?.URL;
        }
        else if(document.type === documentNameToTypeApp.gst){
          retailerObj["GST Number"] = document.value;
          retailerObj["GST Document link"] = document.images[0]?.URL;
        }
        else if(document.type === documentNameToTypeApp.aadhar){
          retailerObj["Aadhar Number"] = document.value;
          retailerObj["Aadhar link"] = document.images[0]?.URL;
        }
        else if(document.type === documentNameToTypeApp.bankAccount){
          retailerObj["Bank details image"] = document.images[0]?.URL;
        }
        else if(document.type === documentNameToTypeApp.licence){
          retailerObj["License number"] = document.value;
          retailerObj["License link"] = document.images[0]?.URL;
        }
      });

      modifiedResponseData.push(retailerObj)
    });

    return{
        status: HTTP_status_codes.ok,
        data: modifiedResponseData
    }

  } catch (err) {
    app_log_service({type:type.error,err});
    return {
      status: HTTP_status_codes.internalServerError,
      data: {
        message: "Something bad happened",
        error: err.message,
      },
    };
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/procurement_sources/services/upload_zoho_retailers_service.js
const generate_zoho_user_id = require("../../../../common_services/unique_id_generation/generate_zoho_user_id");
const userModel = require("../../../../database/mongoose/market_linkage_db/user.model");
const { procurementType, userStatus, documentNameToTypeApp } = require("../../../../enums/market_linkage/enums/procurementSources");
const error_log = require("../../../../middelware/error_log");
const convert_excel_to_json = require("../../utilities/csv_to_json/convert_csv_to_json");
const add_procurement_service = require("./add_procurement_service");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const convert_json_to_csv = require("../../utilities/json_to_csv/convert_json_to_csv");
const save_media_stream_file_aws = require("../../../../utilities/save_media_stream_file_aws");

const upload_zoho_retailers_service = async (uploaded_file) => {
    return new Promise(async (resolve, reject) => {
        try {
            const procurement_data = await convert_excel_to_json(uploaded_file);
            const problematic_users = [];
            for (let record of procurement_data) {
                if (record["Retailer ID"]) {
                    const assigned_to_details = await userModel.find(
                        {
                            mobileNumber: {
                                $in: [record["RPM Mobile Number"], record["PA Mobile Number"]]
                            }
                        });
                    let created_by = {}, assigned_to = {};
                    let date =  record["Created Date and Time"].toString().split(' ')[0];
                    let day = date.split('-')[0];
                    let month = date.split('-')[1];
                    let year = date.split('-')[2];
                    let time = record["Created Date and Time"].toString().split(' ')[1] + ':00';

                    assigned_to_details.forEach(user_data => {
                        if (user_data.mobileNumber === parseInt(record["PA Mobile Number"])) {
                            created_by["id"] = user_data.id;
                            created_by["name"] = user_data.name;
                            created_by["mobileNumber"] = user_data.mobileNumber;
                        } else {
                            assigned_to["id"] = user_data.id;
                            assigned_to["name"] = user_data.name;
                            assigned_to["mobileNumber"] = user_data.mobileNumber;
                        }
                    });

                    let new_record = {
                        "farmartId": await generate_zoho_user_id(record["Retailer ID"]),
                        "name": record["Retailer Name"],
                        "mobileNumber": record["Retailer Phone Number"],
                        "email": record["Email"],
                        "type": procurementType[record["Type of Retailer"]],
                        "business_name": record["Shop_Name"],
                        "address": record["Address"],
                        "status": userStatus.APPROVED,
                        "stateName": record["State"],
                        "districtName": record["District"],
                        "geoLocation": {
                            "lat": record["Lat"],
                            "long": record["Long"],
                            "accuracy": record["Accuracy"] || 1000
                        },
                        "bankAccountDetails": {
                            "accountNumber": record["Bank Account Number"],
                            "IFSC": record["IFSC Code"],
                            "bankName": record["Bank Name"]
                        },
                        "documents": [
                            {
                                "type": documentNameToTypeApp.pancard,
                                "value": "",
                                "images": [
                                    {
                                        "URL": record["PAN"]
                                    }
                                ],
                                "createdAt": new Date(year + '-' + month + '-' + day + 'T' + time + 'Z')
                            },
                            {
                                "type": documentNameToTypeApp.gst,
                                "value": "",
                                "images": [
                                    {
                                        "URL": record["GST / License"]
                                    }
                                ],
                                "createdAt": new Date(year + '-' + month + '-' + day + 'T' + time + 'Z')
                            },
                            {
                                "type": documentNameToTypeApp.aadhar,
                                "value": "",
                                "images": [
                                    {
                                        "URL": record["Aadhaar"]
                                    }
                                ],
                                "createdAt": new Date(year + '-' + month + '-' + day + 'T' + time + 'Z')
                            },
                            {
                                "type": documentNameToTypeApp.licence,
                                "value": "",
                                "images": [
                                    {
                                        "URL": record["GST / License"]
                                    }
                                ],
                                "createdAt": new Date(year + '-' + month + '-' + day + 'T' + time + 'Z')
                            },
                            {
                                "type": documentNameToTypeApp.bankAccount,
                                "value": "",
                                "images": [
                                    {
                                        "URL": record["Cheque Photo"]
                                    }
                                ],
                                "createdAt": new Date(year + '-' + month + '-' + day + 'T' + time + 'Z')
                            }
                        ],
                        "createdBy": created_by,
                        "assignedTo": assigned_to,
                        "createdAt": new Date(year + '-' + month + '-' + day + 'T' + time + 'Z')
                    }
                    const added_retailers = await add_procurement_service({ procurementData: new_record });
                    if (added_retailers.status !== HTTP_status_codes.ok) {
                        problematic_users.push({
                            ...record,
                            problem: added_retailers.data.error
                        })
                    }
                }
            }
            const csv_data = await convert_json_to_csv(problematic_users);
            const data_buffer = Buffer.from(csv_data, "utf-8");
            const file_url =  await save_media_stream_file_aws(data_buffer, "text/csv", "Zoho_Retailer/"+procurement_data[0]?.State+"/"+Date.now());
            resolve({file_url});
        } catch (err) {
            error_log(err);
            reject({ message: err.message });
        }
    });
};

module.exports = {
    upload_zoho_retailers_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/procurement_sources/services/update_procurement_service.js
const procurement_model = require("../../../../database/mongoose/market_linkage_db/procurementSources.model");
const procurementDocumentsModel = require("../../../../database/mongoose/market_linkage_db/procurementSourcesDocuments.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const { categories } = require("../../../../enums/market_linkage/enums/categories");
const {
  userStatus,
  documentStatus,
} = require("../../../../enums/market_linkage/enums/procurementSources");
const appLogService = require("../../../../common_services/market_linkage/logging/app_log_service");
const { actionPerformed } = require("../../../../enums/market_linkage/enums/paActivityEnum");
const { generate_unique_id } = require("../../../../common_services/unique_id_generation/generate_unique_id");
const { pa_activity_log_service } = require("../../../../common_services/market_linkage/logging/pa_activity_log_service");
const error_log = require("../../../../middelware/error_log");

module.exports = async (procurementUser) => {
  try {
    /**
     * extracting the documents form
     * details object, so that can directly pass to model
     */
    const {procurementData, reqLocation} = procurementUser;
    const { documents, ...procurementUserDetails } = procurementData;

    procurementUserDetails.status = procurementUserDetails.status || userStatus.KYC_PENDING;

    if(!procurementUserDetails.farmartId){
      const uniqueIdResult = await generate_unique_id({        
        state: procurementUserDetails.stateName,
        district: procurementUserDetails.districtName,
        category: categories.ProcurementSources
      })

      if (uniqueIdResult.status === HTTP_status_codes.internalServerError) {
        return uniqueIdResult;
      }
      procurementUserDetails.farmartId = uniqueIdResult.data;
    }

    const updatedProcurementUser = await procurement_model.findByIdAndUpdate(
      procurementUserDetails.id,
      procurementUserDetails,
      {new:true}
    );
    let flag = true;
    for (let i = 0; i < documents.length; i++) {
      let document = documents[i];

      document.status = document.status || documentStatus.PENDING;

      if (document.status === documentStatus.RE_UPLOAD) {
        document.images.forEach(function (documentImage) {
          documentImage.URL = "";
        });

        document.value = "";
      }

      if (document._id) {
        await procurementDocumentsModel.findByIdAndUpdate(
          document._id,
          document
        );
      } else {
        document.userId = procurementUserDetails.id;
        const addedDoc = await procurementDocumentsModel.create(document);
        if(addedDoc && flag && reqLocation){
          flag = false;
          pa_activity_log_service({
            paId: updatedProcurementUser.createdBy.id,
            actionLocation: reqLocation,
            actionTimestamp: new Date(Date.now()),
            actionPerformed: actionPerformed.RetailerDocumentSubmission,
            retailerId: updatedProcurementUser.id
          }).catch((err)=>{
            error_log(err);
          })
        }
      }
    }

    return { status: HTTP_status_codes.ok, data: true };
  } catch (err) {
    appLogService({type:type.error,err});
    return {
      status: HTTP_status_codes.internalServerError,
      data:{
        message: "Error while creating user",
        error: err.message,
      }
    };
  }
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/procurement_sources/services/add_procurement_bulk_service.js
const procurement_model = require("../../../../database/mongoose/market_linkage_db/procurementSources.model");
const procurementSourcesDocumentsModel = require("../../../../database/mongoose/market_linkage_db/procurementSourcesDocuments.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const { assignLeadsStatus } = require("../../../../enums/market_linkage/enums/procurementSources");
const formatRetailersData = require("../../../../common_services/market_linkage/formart_uploaded_data/format_retailers_data");
const formatRetailersDocs = require("../../../../common_services/market_linkage/formart_uploaded_data/format_retailers_docs");

module.exports = async (users) => {
  let problematicRetailers = [];
  try {
    let allRetailers = [];
    for (let i = 0; i < users.length; i++) {
      const formatedData = await formatRetailersData(users[i]);

      // saving records of retailers with wrong PA Number
      if(formatedData.status === HTTP_status_codes.badRequest){
        problematicRetailers.push({
          name : users[i]["Retailer Name"],
          mobileNumber : users[i]["Retailer Mobile Number"],
          problem : formatedData.data.message
        })
      }
      else if(formatedData.status === HTTP_status_codes.internalServerError){
        return formatedData;
      }
      else{
        allRetailers.push(formatedData.data);
      }
    }

    const addedProcurementUser = await procurement_model.insertMany(allRetailers, {ordered:false, upsert:true});

    for(let retailer of addedProcurementUser){
      const formatedDocs = formatRetailersDocs(retailer.id);
      if(formatedDocs.status !== HTTP_status_codes.ok){
        return formatedDocs;
      }
      await procurementSourcesDocumentsModel.insertMany(formatedDocs.data);
    }

    return { 
      status : HTTP_status_codes.ok,
      data: {
        uploadStatus: (users.length === problematicRetailers.length) ? assignLeadsStatus.Fail
          : problematicRetailers.length ? assignLeadsStatus.Partial 
          : assignLeadsStatus.Success,
        problematicRetailers
      }
    };

  } catch (err) {
    app_log_service({type:type.error,err});
    if(err.code === 11000){
       // saving records of retailers with duplicate mobileNumber
      err.writeErrors.forEach(error => {
        problematicRetailers.push({
          name : error.err.op.name,
          mobileNumber : (error.err.op.mobileNumber).toString(),
          problem : "Duplicate Entry"
        })
      });

      // inserting docs of inserted retailers in case of duplication error 
      for(let retailer of err.insertedDocs){
        const formatedDocs = formatRetailersDocs(retailer.id);
        if(formatedDocs.status !== HTTP_status_codes.ok){
          return formatedDocs;
        }
        await procurementSourcesDocumentsModel.insertMany(formatedDocs.data);
      }

      return {
        status : HTTP_status_codes.ok,
        data: {
          uploadStatus: (users.length === problematicRetailers.length) ? assignLeadsStatus.Fail
            : problematicRetailers.length ? assignLeadsStatus.Partial 
            : assignLeadsStatus.Success,
          problematicRetailers
        }
      }
    }
    return {
      status: HTTP_status_codes.internalServerError,
      data: {
        message: "Error while creating user",
        error: err.message,
      },
    };
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/procurement_sources/services/get_retailer_status_service.js
const error_log = require("../../../../middelware/error_log");
const get_master_merchant_by_mobile_number = require("../../../../data_abstraction_layer/master_merchant/get_master_merchant_by_mobile_number");

module.exports = async (retailer_mobile_number) => {
    try {
        const master_merchant = await get_master_merchant_by_mobile_number(retailer_mobile_number);
        if (!master_merchant)
            return null;
        return {
            master_merchant_id: master_merchant.id,
            status: master_merchant.status,
            primary_master_merchant_id: master_merchant.primary_master_merchant_id
        };
    }
    catch (err) {
        error_log(err);
        return null;
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/procurement_sources/services/get_procurement_service.js
const procurementModel = require("../../../../database/mongoose/market_linkage_db/procurementSources.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const { userStatus } = require("../../../../enums/market_linkage/enums/procurementSources");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");

module.exports = async (filter) => {
  try {
    const { status, mobileNumber, name, createdBy } = filter;

    /** @refactor
     *  can improve upon the filter system
     */
    let match = {
      isActive: true,
      status: {
        $eq: parseInt(status),
      },
    };

    if (status === "ALL") {
      delete match.status;
    }

    if (name) {
      match.name = { '$regex': name }
    }

    if (mobileNumber) {
      match.mobileNumberStr = { '$regex': mobileNumber };
    }

    if (createdBy) {
      match["createdBy.id"] = createdBy;
    }

    const users = await procurementModel.aggregate([
      {
        $lookup: {
          from: "procurementsourcedocuments",
          localField: "_id",
          foreignField: "userId",
          as: "documents",
        },
      },
      {
        $addFields: {
          "mobileNumberStr": {
            $toString: { $toLong: '$mobileNumber' }
          },
          "priority": {
            $cond: [
              { $eq: ['$status', userStatus.CREATED] },
              0,
              {
                $cond: [
                  { $eq: ['$status', userStatus.REVALIDATE] },
                  1,
                  {
                    $cond: [
                      { $eq: ['$status', userStatus.KYC_PENDING] },
                      2,
                      {
                        $cond: [
                          { $eq: ['$status', userStatus.APPROVED] },
                          3,
                          {
                            $cond: [
                              { $eq: ['$status', userStatus.REJECTED] },
                              4,
                              5
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      {
        $match: match,
      },
      {
        $sort: {
          "priority": 1,
          "createdAt": -1
        }
      }
    ]);

    return { status: HTTP_status_codes.ok, data: users };
  } catch (err) {
    app_log_service({ type: type.error, err });
    return {
      status: HTTP_status_codes.internalServerError,
      message: "Error while creating user",
      error: err.message,
    };
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/warehouse/swagger/index.js
module.exports = {
    tags: {
        name: "warehouse",
    },
    paths: {
        "/": {
            post: {
                tags: ["warehouse"],
                summary: "add warehouse details",
                description: "",
                operationId: "add_warehouse_details",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "body",
                        name: "body",
                        description: "",
                        required: true,
                        schema: {
                            required: [
                                "warehouse_name",
                                "address",
                                "pincode",
                                "state_id",
                                "district_id",
                                "storage_area_sqft",
                                "storage_capacity_no_of_bag"
                            ],
                            type: "object",
                            properties: {
                                warehouse_name: {
                                    type: "string"
                                },
                                address: {
                                    type: "string"
                                },
                                pincode: {
                                    type: "string"
                                },
                                state_id: {
                                    type: "number"
                                },
                                district_id: {
                                    type: "number"
                                },
                                storage_area_sqft: {
                                    type: "number"
                                },
                                storage_capacity_no_of_bag: {
                                    type: "number"
                                },
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            },
            get: {
                tags: ["warehouse"],
                summary: "fetch warehouse for rejected qty mapping",
                description: "",
                operationId: "fetch_warehouse_for_rejected_qty_mapping",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "query",
                        name: "state_id",
                        description: "",
                        required: false,
                        type: "number"
                    },
                    {
                        in: "query",
                        name: "district_id",
                        description: "",
                        required: false,
                        type: "number"
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        },
        "/details": {
            get: {
                tags: ["warehouse"],
                summary: "fetch inventory details",
                description: "",
                operationId: "fetch_inventory_details",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "query",
                        name: "limit",
                        description: "",
                        required: false,
                        type: "number"
                    },
                    {
                        in: "query",
                        name: "page",
                        description: "",
                        required: false,
                        type: "number"
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        },
        "/incharge": {
            post: {
                tags: ["warehouse"],
                summary: "add warehouse incharge details",
                description: "",
                operationId: "add_warehouse_incharge",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "body",
                        name: "body",
                        description: "",
                        required: true,
                        schema: {
                            required: ["warehouse_id", "incharge_list"],
                            type: "object",
                            properties: {
                                warehouse_id: {
                                    type: "number"
                                },
                                incharge_list: {
                                    type: "array",
                                    items: {
                                        required: ["name", "mobile_number"],
                                        properties: {
                                            name: {
                                                type: "string"
                                            },
                                            mobile_number: {
                                                type: "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        },
        "/remap_warehouse": {
            post: {
                tags: ["warehouse"],
                summary: "remap warehouse for rejected quantity",
                description: "",
                operationId: "update_warehouse_for_rejected_qty",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "body",
                        name: "body",
                        description: "",
                        required: true,
                        schema: {
                            required: ["warehouse_id", "pending_in_hand_id"],
                            type: "object",
                            properties: {
                                warehouse_id: {
                                    type: "number"
                                },
                                pending_in_hand_id: {
                                    type: "number"
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        }
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/warehouse/index.js
const add_warehouse_details_controller = require("./controllers/add_warehouse_details_controller");
const add_warehouse_incharge_controller = require("./controllers/add_warehouse_incharge_controller");
const fetch_inventory_details_controller = require("./controllers/fetch_inventory_details_controller");
const fetch_warehouse_for_rejected_qty_mapping_controller = require("./controllers/fetch_warehouse_for_rejected_qty_mapping_controller");
const update_warehouse_for_rejected_qty_controller = require("./controllers/update_warehouse_for_rejected_qty_controller");

const router = require("express").Router();

router.post("/", add_warehouse_details_controller);
router.post("/remap_warehouse", update_warehouse_for_rejected_qty_controller);
router.post("/incharge", add_warehouse_incharge_controller);
router.get("/", fetch_warehouse_for_rejected_qty_mapping_controller)
router.get("/details", fetch_inventory_details_controller)

module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/warehouse/controllers/fetch_inventory_details_controller.js
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const error_log = require("../../../../middelware/error_log");
const fetch_inventory_details_service = require("../services/fetch_inventory_details_service");

module.exports = async (req, res) => {
    try {
        let { limit, page } = req.query;
        limit = (limit && parseInt(limit) <= 50 && parseInt(limit) >= 0) ? parseInt(limit) : 50;
        page = (page && parseInt(page) >= 1) ? parseInt(page) : 1;
        const warehouse_list = await fetch_inventory_details_service(limit, page);
        let response = create_api_response(true, "success", warehouse_list);
        res.status(http_status_code_enum.ok).json(response);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/warehouse/controllers/fetch_warehouse_for_rejected_qty_mapping_controller.js
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const error_log = require("../../../../middelware/error_log");
const fetch_warehouse_for_rejected_qty_mapping_service = require("../services/fetch_warehouse_for_rejected_qty_mapping_service");

module.exports = async (req, res) => {
    try {
        const { state_id, district_id } = req.query;
        const warehouse_list = await fetch_warehouse_for_rejected_qty_mapping_service(state_id, district_id);
        let response = create_api_response(true, "success", warehouse_list);
        res.status(http_status_code_enum.ok).json(response);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/warehouse/controllers/add_warehouse_incharge_controller.js
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const joi = require('joi');
const error_log = require('../../../../middelware/error_log');
const add_warehouse_incharge_service = require('../services/add_warehouse_incharge_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const result = incharge_schema.validate(req.body);
        if (result.error) { throw new ValidationError(result.error.message); }
        const {
            warehouse_id,
            incharge_list
        } = result.value;

        const { user } = req;
        if (!user || !user.user_profile_id) {
            throw new ValidationError('unauthrised access');
        }
        const added_warehouse_incharge = await add_warehouse_incharge_service(
            warehouse_id,
            incharge_list,
            // eslint-disable-next-line no-undef
            mapped_by_id = user.user_profile_id
        );
        const response = create_api_response(true, 'success', added_warehouse_incharge);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}

const incharge_schema = joi.object({
    warehouse_id: joi.number().positive().required(),
    incharge_list: joi.array().items(
        joi.object({
            name: joi.string().trim().required(),
            mobile_number: joi.string().trim().length(10).regex(/^[0-9]+$/).required()
        })
    ).required()
});



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/warehouse/controllers/update_warehouse_for_rejected_qty_controller.js
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const joi = require('joi');
const error_log = require('../../../../middelware/error_log');
const update_warehouse_for_rejected_qty_service = require('../services/update_warehouse_for_rejected_qty_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const result = update_warehouse_schema.validate(req.body);
        if (result.error) { throw new ValidationError(result.error.message); }
        const {
            pending_in_hand_id,
            warehouse_id
        } = result.value;

        const updated_warehouse = await update_warehouse_for_rejected_qty_service(
            pending_in_hand_id,
            warehouse_id
        );
        const response = create_api_response(true, 'success', updated_warehouse);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}

const update_warehouse_schema = joi.object({
    pending_in_hand_id: joi.number().positive().required(),
    warehouse_id: joi.number().positive().required()
});



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/warehouse/controllers/add_warehouse_details_controller.js
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const joi = require('joi');
const add_warehouse_service = require('../services/add_warehouse_details_service');
const error_log = require('../../../../middelware/error_log');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const result = warehouse_schema.validate(req.body);
        if (result.error) { throw new ValidationError(result.error.message); }
        const {
            warehouse_name,
            address,
            pincode,
            state_id,
            district_id,
            storage_area_sqft,
            storage_capacity_no_of_bag
        } = result.value;

        const { user } = req;
        if (!user || !user.user_profile_id) {
            throw new ValidationError('unauthrised access');
        }
        const added_warehouse = await add_warehouse_service(
            warehouse_name,
            address,
            pincode,
            state_id,
            district_id,
            storage_area_sqft,
            storage_capacity_no_of_bag,
            // eslint-disable-next-line no-undef
            onboarded_by_id = user.user_profile_id
        );
        const response = create_api_response(true, 'success', added_warehouse);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}

const warehouse_schema = joi.object({
    warehouse_name: joi.string().trim().required(),
    address: joi.string().trim().required(),
    pincode: joi.string().trim().length(6).regex(/^[0-9]+$/).required(),
    state_id: joi.number().positive().required(),
    district_id: joi.number().positive().required(),
    storage_area_sqft: joi.number().positive().required(),
    storage_capacity_no_of_bag: joi.number().positive().required()
});



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/warehouse/services/fetch_inventory_details_service.js
const buyer_order_detail_model = require('../../../../database/models_v2/buyer_order/buyer_order_detail');
const crop_detail_model = require('../../../../database/models_v2/crop/crop_detail');
const crop_varieties_detail_model = require('../../../../database/models_v2/crop/crop_varieties_detail');
const geographical_detail_model = require('../../../../database/models_v2/location/geographical_detail');
const master_district_model = require('../../../../database/models_v2/location/master_district');
const master_state_model = require('../../../../database/models_v2/location/master_state');
const po_pending_inhand_detail_model = require('../../../../database/models_v2/po_unloading/po_pending_inhand_detail');
const po_unloading_qty_detail_model = require('../../../../database/models_v2/po_unloading/po_unloading_qty_detail');
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const warehouse_detail_model = require('../../../../database/models_v2/warehouse/warehouse_detail');
const { pending_po_status } = require('../../../../enums/market_linkage/enums/po_pending_in_hand_enum');
const error_log = require('../../../../middelware/error_log');
const Op = require('sequelize').Op;

const fetch_inventory_details_service = (limit, page) => {
    return new Promise(async (resolve, reject) => {
        try {
            const po_pending_inhand = await po_pending_inhand_detail_model.findAndCountAll({
                where: {
                    is_active: true,
                    status: { [Op.or]: [pending_po_status.MAPPING_SAVED, pending_po_status.SO_MAPPING_SAVED] },
                    warehouse_detail_id: { [Op.ne]: null }
                },
                distinct: ['id'],
                limit: limit,
                offset: ((page - 1) * limit) || 0
            });

            const prev_buyer_order_ids = po_pending_inhand.rows.map((pending_po) => pending_po.previous_buyer_order_detail_id);

            const prev_buyer_order_details = await buyer_order_detail_model.findAll({
                where: {
                    is_active: true,
                    id: { [Op.in]: prev_buyer_order_ids }
                },
                include: [
                    {
                        model: po_unloading_qty_detail_model,
                        where: {
                            is_active: true
                        },
                        required: true
                    }
                ],
            })

            const warehouse_ids = (po_pending_inhand.rows)
                .map((po_pending) => po_pending.warehouse_detail_id);
            const po_ids = (po_pending_inhand.rows)
                .map((po_pending) => po_pending.purchase_crop_order_id);

            const [warehouses, purchase_orders] = await Promise.all([
                warehouse_detail_model.findAll({
                    where: {
                        is_active: true,
                        id: { [Op.in]: warehouse_ids }
                    },
                    include: [
                        {
                            model: geographical_detail_model,
                            where: {
                                is_active: true
                            },
                            include: [
                                {
                                    model: master_district_model,
                                    where: {
                                        is_active: true
                                    },
                                    required: true
                                },
                                {
                                    model: master_state_model,
                                    where: {
                                        is_active: true
                                    },
                                    required: true
                                }
                            ],
                            required: true
                        }
                    ]
                }),
                purchase_crop_orders_model.findAll({
                    where: {
                        is_active: true,
                        id: { [Op.in]: po_ids }
                    },
                    include: [
                        {
                            model: crop_detail_model,
                            where: {
                                is_active: true
                            },
                            require: true
                        },
                        {
                            model: crop_varieties_detail_model,
                            where: {
                                is_active: true
                            },
                            require: true
                        }
                    ]
                })
            ]);

            const po_pending_inhand_details = generate_response(
                po_pending_inhand.rows,
                prev_buyer_order_details,
                warehouses,
                purchase_orders
            );

            return resolve({
                inventories: po_pending_inhand_details,
                total_records: po_pending_inhand.count
            });
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

const generate_response = (
    po_pending_inhand,
    prev_buyer_order_details,
    warehouses,
    purchase_orders
) => {
    const response = po_pending_inhand.map((pending_po) => {
        const prev_buyer_order = prev_buyer_order_details
            .find((prev_so) => prev_so.id === pending_po.previous_buyer_order_detail_id);
        const unloading_qty = prev_buyer_order?.po_unloading_qty_details
            ?.find((qty) => qty.purchase_crop_order_id === pending_po.purchase_crop_order_id);
        const warehouse = warehouses.find((wh) => wh.id === pending_po.warehouse_detail_id);
        const purchase_order = purchase_orders
            .find((po) => po.id === pending_po.purchase_crop_order_id);
        const aging = Math.floor(((new Date().getTime()) - (unloading_qty?.createdAt?.getTime())) / (1000 * 3600 * 24));
        return {
            pending_inhand_id: pending_po.id,
            warehouse_id: warehouse?.id || null,
            warehouse_name: warehouse?.name || null,
            location: warehouse?.geographical_detail?.address || null,
            state_name: warehouse?.geographical_detail?.master_state?.name || null,
            district_name: warehouse?.geographical_detail?.master_district?.name || null,
            po_number: purchase_order?.farmart_id || null,
            po_status: purchase_order?.status || null,
            pending_weight_in_kg: pending_po.weight_kg ?? null,
            pending_in_hand_bag: pending_po.number_of_bag ?? null,
            crop_name: purchase_order?.crop_detail.name || null,
            variety_name: purchase_order?.crop_varieties_detail.name || null,
            unloading_date: unloading_qty?.createdAt || null,
            aging: aging ?? null
        }
    });
    return response;
}

module.exports = fetch_inventory_details_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/warehouse/services/update_warehouse_for_rejected_qty_service.js
const po_pending_inhand_detail_model = require('../../../../database/models_v2/po_unloading/po_pending_inhand_detail');
const { pending_po_status } = require('../../../../enums/market_linkage/enums/po_pending_in_hand_enum');
const error_log = require('../../../../middelware/error_log');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const update_warehouse_for_rejected_qty_service = (
    pending_in_hand_id,
    warehouse_id
) => {
    return new Promise(async (resolve, reject) => {
        try {
            const po_pending_in_hand = await po_pending_inhand_detail_model.findOne({
                where: {
                    is_active: true,
                    id: pending_in_hand_id
                }
            });
            if (!po_pending_in_hand) {
                throw new ValidationError('invalid pending_in_hand id');
            }
            if (po_pending_in_hand.status === pending_po_status.SO_MAPPING_SUBMITTED) {
                throw new ValidationError('inventory already mapped with so');
            }
            po_pending_in_hand.warehouse_detail_id = warehouse_id;
            await po_pending_in_hand.save();
            return resolve({});
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

module.exports = update_warehouse_for_rejected_qty_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/warehouse/services/add_warehouse_incharge_service.js
const user_profile_model = require('../../../../database/models/user_profile');
const warehouse_detail_model = require('../../../../database/models_v2/warehouse/warehouse_detail');
const warehouse_incharge_detail_model = require('../../../../database/models_v2/warehouse/warehouse_incharge_detail');
const warehouse_incharge_map_model = require('../../../../database/models_v2/warehouse/warehouse_incharge_map');
const error_log = require('../../../../middelware/error_log');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const add_warehouse_incharge_service = (
    warehouse_id,
    incharge_list,
    mapped_by_id
) => {
    return new Promise(async (resolve, reject) => {
        try {
            const warehouse_data = await warehouse_detail_model.findOne({
                where: {
                    id: warehouse_id,
                    is_active: true
                }
            });
            if (!warehouse_data) {
                throw new ValidationError('invalid warehouse id');
            }
            const incharge_to_warehouse_map = []
            for (const incharge of incharge_list) {
                const user_profile_data = await user_profile_model.findOne({
                    where: {
                        mobile_number: incharge.mobile_number,
                        is_active: true
                    }
                })
                if (!user_profile_data) {
                    const added_incharge = await warehouse_incharge_detail_model.build({
                        name: incharge.name,
                        mobile_number: incharge.mobile_number,
                        is_active: true
                    }).save();
                    incharge_to_warehouse_map.push({
                        is_active: true,
                        warehouse_detail_id: warehouse_id,
                        warehouse_incharge_detail_id: added_incharge.id,
                        incharge_id: null,
                        mapped_by_id
                    })
                } else {
                    incharge_to_warehouse_map.push({
                        is_active: true,
                        warehouse_detail_id: warehouse_id,
                        warehouse_incharge_detail_id: null,
                        incharge_id: user_profile_data.id,
                        mapped_by_id
                    })
                }
            }
            await warehouse_incharge_map_model.bulkCreate(incharge_to_warehouse_map);
            return resolve({});
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

module.exports = add_warehouse_incharge_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/warehouse/services/fetch_warehouse_for_rejected_qty_mapping_service.js
const geographical_detail_model = require('../../../../database/models_v2/location/geographical_detail');
const master_district_model = require('../../../../database/models_v2/location/master_district');
const master_state_model = require('../../../../database/models_v2/location/master_state');
const warehouse_detail_model = require('../../../../database/models_v2/warehouse/warehouse_detail');
const error_log = require('../../../../middelware/error_log');

const fetch_warehouse_for_rejected_qty_mapping_service = (state_id, district_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            const query = {
                is_active: true
            };
            if (state_id) {
                query.state_id = state_id;
            }
            if (district_id) {
                query.district_id = district_id;
            }
            const warehouse_list = await warehouse_detail_model.findAll({
                where: {
                    is_active: true
                },
                include: [
                    {
                        model: geographical_detail_model,
                        where: query,
                        include: [
                            {
                                model: master_district_model,
                                where: {
                                    is_active: true
                                },
                                required: true
                            },
                            {
                                model: master_state_model,
                                where: {
                                    is_active: true
                                },
                                required: true
                            }
                        ],
                        required: true
                    }
                ]
            })
            const response = warehouse_list.map((warehouse)=>{
                return{
                    id: warehouse.id,
                    name: warehouse.name,
                    state_name: warehouse.geographical_detail?.master_state?.name,
                    district_name: warehouse.geographical_detail?.master_district?.name,
                    pincode: warehouse.geographical_detail?.pincode
                }
            })
            return resolve({ warehouse_list: response });
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

module.exports = fetch_warehouse_for_rejected_qty_mapping_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/warehouse/services/add_warehouse_details_service.js
const geographical_detail_model = require('../../../../database/models_v2/location/geographical_detail');
const warehouse_detail_model = require('../../../../database/models_v2/warehouse/warehouse_detail');
const warehouse_capacity_measure_type_enum = require('../../../../enums/market_linkage/enums/warehouse_capacity_measure_type_enum');
const error_log = require('../../../../middelware/error_log');

const add_warehouse_details_service = (
    warehouse_name,
    address,
    pincode,
    state_id,
    district_id,
    storage_area_in_sqft,
    storage_capacity_in_bags,
    onboarded_by_id
) => {
    return new Promise(async (resolve, reject) => {
        try {
            const geographical_data = await geographical_detail_model.findOrCreate({
                where: {
                    address,
                    pincode,
                    is_active: true,
                    state_id,
                    district_id
                }
            })
            const added_warehouse = await warehouse_detail_model.build({
                name: warehouse_name,
                storage_capacity_in_bags,
                storage_area_in_sqft,
                utilised_capacity: 100,
                capacity_measure_type: warehouse_capacity_measure_type_enum.area_wise,
                geographical_detail_id: geographical_data[0].id,
                onboarded_by_id,
                is_active: true
            }).save();
            return resolve({ warehouse_id: added_warehouse.id });
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

module.exports = add_warehouse_details_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/app_version/swagger/index.js
const { TINYINT } = require('sequelize');

module.exports = {
    tags: {
        name: 'app_version'
    },
    paths: {
        '/app_version_details': {
            get: {
                tags: ['app_version'],
                summary: 'get list of app versions',
                description: '',
                operationId: 'fetch_app_version_details',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'app_version',
                        description: '',
                        required: true,
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            },
            post: {
                tags: ['app_version'],
                summary: 'save app versions',
                description: '',
                operationId: 'save_app_version_details',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'app_version',
                        description: '',
                        required: false,
                        type: 'string'
                    },
                    {
                        in: 'formData',
                        name: 'is_latest',
                        description: '',
                        required: false,
                        type: TINYINT,
                        enum: [0, 1]
                    },
                    {
                        in: 'formData',
                        name: 'allow_force_update',
                        description: '',
                        required: false,
                        type: TINYINT,
                        enum: [0, 1]
                    },
                    {
                        in: 'formData',
                        name: 'is_code_push',
                        description: '',
                        required: false,
                        type: TINYINT,
                        enum: [0, 1]
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        }
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/app_version/index.js
const router = require('express').Router();
// const authorize = require('../../../middelware/authorized_routes');
// const user_roles_enum = require('../../../enums/user_profile/user_role');

const fetch_app_version_details_controller = require('./controllers/fetch_app_version_details_controller');
const create_app_version_details_controller = require('./controllers/create_app_version_details_controller');

router.get('/app_version_details', fetch_app_version_details_controller);
router.post('/app_version_details', create_app_version_details_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/app_version/controllers/fetch_app_version_details_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const fetch_app_version_details_service = require('../services/fetch_app_version_details_service')

module.exports = async (req, res) => {
    try {
        /* The code snippet is extracting the `app_version` query parameter from the request object (`req`) and
then calling the `fetch_app_version_details_service` function asynchronously with the extracted
`app_version`. The result of this function call is stored in the `app_version_details` variable.
This code is part of an asynchronous function that handles a request and responds with the details
of the app version fetched using the `fetch_app_version_details_service`. */
        let app_version = req.query.app_version;
        const app_version_details = await fetch_app_version_details_service(app_version);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'successfull', app_version_details));
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/app_version/controllers/create_app_version_details_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_app_version_details_service = require('../services/create_app_version_details_service')

module.exports = async (req, res) => {
    try {
        /* The code snippet you provided is attempting to extract values from the `req.body` object and
   assign them to variables `app_version`, `is_latest`, `allow_force_update`, and `is_code_push`.
   However, the syntax used in the code snippet is incorrect. */
        let app_version = req.body.app_version || null,
            is_latest= +req.body.is_latest || 0,
            allow_force_update= +req.body.allow_force_update || 0,
            is_code_push= +req.body.is_code_push || 0;
        await create_app_version_details_service(app_version, is_latest, allow_force_update, is_code_push)
        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'successful'));
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/app_version/services/create_app_version_details_service.js
const {
    save_app_version_details
} = require('../../../../data_abstraction_layer/app_version/app_versions');
const error_log = require('../../../../middelware/error_log');

const create_app_version_details_service = async (
    app_version,
    is_latest,
    allow_force_update,
    is_code_push
) => {
    try {
    /* The `await save_app_version_details` function is being called with an object containing the
    parameters `app_version`, `is_latest`, `allow_force_update`, and `is_code_push`. This function
    is likely responsible for saving the details of an app version in a data abstraction layer. The
    `await` keyword is used to wait for the asynchronous operation of saving the app version details
    to complete before proceeding further in the code. */
        let saved_app_version=await save_app_version_details({
            app_version,
            is_latest,
            allow_force_update,
            is_code_push
        });
        return saved_app_version;
    } catch (ex) {
        error_log(ex);
        return {};
    }
};
module.exports = create_app_version_details_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/app_version/services/fetch_app_version_details_service.js
const error_log = require('../../../../middelware/error_log');
const {
    get_app_version_details_by_id,
    get_latest_app_version_details
} = require('../../../../data_abstraction_layer/app_version/app_versions');
const fetch_app_version_details_service = async (app_version) => {
    try {
    /* The code snippet is using asynchronous functions to fetch specific app version details and the
    latest app version details. */
        let specific_app_version_details = await get_app_version_details_by_id({
            app_version
        });
        let latest_app_version_detail = await get_latest_app_version_details({});

        let app_version_details = {
            latest_app_version_detail
        };
        if (specific_app_version_details) {
            app_version_details.specific_app_version_details = specific_app_version_details;
        }
        return app_version_details;
    } catch (ex) {
        error_log(ex);
        return {};
    }
};
module.exports = fetch_app_version_details_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/metadata/swagger/index.js
module.exports = {
  tags: {
    name: "metadata",
  },
  paths: {
    "/merchant_version_and_device_info": {
      post: {
        tags: ["metadata"],
        summary: "adds and upates merchant app and device information",
        description: "",
        operationId: "add_and_update_merchant_version_and_device_info",
        security: [],
        parameters: [
          {
            in: "formData",
            name: "current_app_version",
            description: "app_version - string",
            required: true,
            type: "string",
          },
          {
            in: "formData",
            name: "device_manufacturer",
            description: "string",
            required: false,
            type: "string",
          },
          {
            in: "formData",
            name: "android_version",
            description: "string",
            required: false,
            type: "string",
          },
          {
            in: "formData",
            name: "device_model",
            description: "string",
            required: false,
            type: "string",
          },
          {
            in: "formData",
            name: "device_name",
            description: "string",
            required: false,
            type: "string",
          },
          {
            in: "formData",
            name: "device_memory",
            description: "string",
            required: false,
            type: "string",
          },
          {
            in: "formData",
            name: "screen_resolution",
            description: "string",
            required: false,
            type: "string",
          },
          {
            in: "formData",
            name: "device_country",
            description: "string",
            required: false,
            type: "string",
          },
          {
            in: "formData",
            name: "device_imei_number_1",
            description: "string",
            required: true,
            type: "string",
          },
          {
            in: "formData",
            name: "device_imei_number_2",
            description: "string",
            required: false,
            type: "string",
          },
        ],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
  },
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/metadata/index.js
const router = require("express").Router();

const merchant_version_and_device_info_controller = require("./controllers/merchant_version_and_device_info_controller");

router.post("/merchant_version_and_device_info",  merchant_version_and_device_info_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/metadata/controllers/merchant_version_and_device_info_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const store_sign_up_log_service = require("../../../../common_services/sign_up/sign_up_logs");
const http_headers_enums = require("../../../../enums/global/http_headers");

const application_version_service = require('../../../../entities/metadata/service/application_version_service');
const signup_log_stage_enum = require('../../../../enums/signup_log/signup_log_stage_enum');
module.exports = async (req, res) => {
    try {
        let installation_id = req.headers[http_headers_enums['fmt-installation-id']];
        let device_id = req.headers[http_headers_enums['fmt-device-id']];
        let current_app_version = req.body.current_app_version || req.headers.appversion;
        let device_manufacturer = req.body.device_manufacturer;
        let android_version = req.body.android_version;
        let device_model = req.body.device_model;
        let device_name = req.body.device_name;
        let device_memory = req.body.device_memory;
        let screen_resolution = req.body.screen_resolution;
        let device_country = req.body.device_country;
        let device_imei_number_1 = req.body.device_imei_number_1;
        let device_imei_number_2 = req.body.device_imei_number_2;
        let app_launched_at = new Date();
        let app_installed_at = new Date();

        let user_profile_id = req?.user?.user_profile_id || null;

        if (current_app_version) {
            let app_version = await application_version_service.set_merchant_version_and_device_info(current_app_version
                , device_manufacturer
                , android_version
                , device_model
                , device_name
                , device_memory
                , screen_resolution
                , device_country
                , device_imei_number_1
                , device_imei_number_2
                , user_profile_id);

            store_sign_up_log_service({ signup_log_stage: signup_log_stage_enum.app_restart, installation_id, device_id, current_app_version, app_launched_at, app_installed_at })
                .catch(err => {
                    error_log(err);
                });

            return res.status(http_status_code_enum.ok).json(create_api_response(true, 'Success'));
        }
        else {
            return res.status(http_status_code_enum.ok).json(create_api_response(false, 'please send current_app_version'));
        }
    }
    catch (ex) {
        error_log(ex);
        return res.json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/story/swagger/index.js
module.exports = {
    tags: {
      name: "story",
    },
    paths: {
      "/": {
        post: {
          tags: ["story"],
          summary: "create shorts stories",
          description: "",
          operationId: "create_shorts stories",
          security: [{ Bearer: ["read"] }],
          parameters: [
            {
              in: "body",
              name: "body",
              required: ["media_type", "media_url", "thumbnail_image_url", "description","language_id"],
              properties: {
                media_type: {
                  type: "integer",
                },
                media_url: {
                  type: "string",
                },
                thumbnail_image_url: {
                  type: "string",
                },
                description: {
                    type: "string",
                  },
                language_id: {
                  type: "integer",
                },
                redirect_text:{
                  type: "string",
                },
                redirect_url:{
                  type: "string",
                },
                redirect_screen_name:{
                  type: "string",
                },
                redirect_tab_name:{
                  type: "string",
                }
              },
            },
          ],
          responses: {
            405: {
              description: "Invalid input",
            },
            200: {
              description: "success",
            },
          },
        },
        put: {
          tags: ["story"],
          summary: "update story",
          description: "",
          operationId: "update_story",
          security: [{ Bearer: ["read"] }],
          parameters: [
            {
              in: "body",
              name: "body",
              required: ["story_id","media_type", "media_url", "thumbnail_image_url","language_id", "description"],
              properties: {
                story_id: {
                  type: "integer",
                },
                media_type: {
                  type: "integer",
                },
                media_url: {
                  type: "string",
                },
                thumbnail_image_url: {
                  type: "string",
                },
                language_id: {
                  type: "integer",
                },
                description: {
                  type: "string",
                },
                redirect_text:{
                  type: "string",
                },
                redirect_url:{
                  type: "string",
                },
                redirect_screen_name:{
                  type: "string",
                },
                redirect_tab_name:{
                  type: "string",
                }
              },
            },
          ],
          responses: {
            405: {
              description: "Invalid input",
            },
            200: {
              description: "success",
            },
          },
        },
        delete: {
          tags: ["story"],
          summary: "delete story",
          description: "",
          operationId: "delete story",
          security: [{ Bearer: ["read"] }],
          parameters: [
            {
              in: "formData",
              name: "story_id",
              description: "",
              required: true,
              type: "integer",
            },
          ],
          responses: {
            400: {
              description: "Invalid input",
            },
            200: {
              description: "success",
            },
          },
        },
      },
      "/app":{
        get: {
          tags: ["story"],
          summary: "get shorts stories",
          description: "",
          operationId: "get_shorts stories",
          security: [{ Bearer: ["read"] }],
          parameters: [
            {
              in: "query",
              name: "page_no",
              description: "",
              required: false,
              type: "integer",
            },
            {
              in: "query",
              name: "limit",
              description: "",
              required: false,
              type: "integer",
            },
            {
              in: "header",
              name: "language_id",
              description: "",
              required: true,
              type: "integer",
            },
          ],
          responses: {
            405: {
              description: "Invalid input",
            },
            200: {
              description: "success",
            },
          },
        },
      },
      "/app/{story_id}": {
        get: {
          tags: ["story"],
          summary: "get story by id",
          description: "",
          operationId: "get_story_by_id",
          security: [{ Bearer: ["read"] }],
          parameters: [
            {
              in: "query",
              name: "story_id",
              description: "",
              required: true,
              type: "integer",
            },
          ],
          responses: {
            400: {
              description: "Invalid input",
            },
            200: {
              description: "success",
            },
          },
        },
      },
      "/action":{
        post: {
          tags: ["story"],
          summary: "create stories action",
          description: "",
          operationId: "create_stories_action",
          security: [{ Bearer: ["read"] }],
          parameters: [
            {
              in: "formData",
              name: "story_id",
              description: "",
              required: true,
              type: "integer",
            },
            {
              in: "formData",
              name: "action",
              description: "1->like \n2->share \n 3->clap",
              required: true,
              type: "integer",
              enum: [1, 2, 3],
            },
          ],
          responses: {
            405: {
              description: "Invalid input",
            },
            200: {
              description: "success",
            },
          },
        },
      },
      "/panel":{
        get: {
          tags: ["story"],
          summary: "get shorts stories for panel",
          description: "",
          operationId: "get_shorts_for_panel",
          security: [{ Bearer: ["read"] }],
          parameters: [
            {
              in: "query",
              name: "page_no",
              description: "",
              required: false,
              type: "integer",
            },
            {
              in: "query",
              name: "limit",
              description: "",
              required: false,
              type: "integer",
            },
          ],
          responses: {
            405: {
              description: "Invalid input",
            },
            200: {
              description: "success",
            },
          },
        },
      },
    },
  };
  


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/story/index.js
const router = require("express").Router();
const authorize = require("../../../middelware/authorized_routes");
const user_roles_enum = require("../../../entities/metadata/enums/user_roles");
const create_story_controller=require('./controllers/create_story_controller');
const update_story_controller=require('./controllers/update_story_controller');
const get_stories_controller=require('./controllers/get_stories_controller');
const get_story_by_id_controller=require('./controllers/get_story_by_id_controller');
const create_story_action_log_controller=require('./controllers/create_story_action_log_controller');
const get_stories_for_panel_controller=require('./controllers/get_stories_for_panel_controller');
const delete_stories_controller=require('./controllers/delete_stories_controller');

router.post("/", authorize([user_roles_enum.digital_marketing]),create_story_controller );
router.put("/", authorize([user_roles_enum.digital_marketing]),update_story_controller );
router.get("/app", authorize([user_roles_enum.Merchant]),get_stories_controller );
router.get("/app/:story_id",authorize([user_roles_enum.Merchant]), get_story_by_id_controller);
router.post("/action", authorize([user_roles_enum.Merchant]),create_story_action_log_controller );
router.get("/panel", authorize([user_roles_enum.digital_marketing]),get_stories_for_panel_controller );
router.delete("/", authorize([user_roles_enum.digital_marketing]),delete_stories_controller );

module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/story/controllers/create_story_controller.js
const error_log=require('../../../../middelware/error_log');
const create_api_response=require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_story_service=require('../services/create_story_service');
const langauge_enum = require('../../../../entities_v2/metadata/enums/global/langauge');
const media_type_enum = require('../../../../enums/shorts/media_type_enum');

module.exports=async (req,res)=>{
    try{
        let media_type=+req.body.media_type, 
        media_url=req.body.media_url ,
        thumbnail_image_url=req.body.thumbnail_image_url,
        language_id=+req.body.language_id || langauge_enum.default,
        description=req.body.description,
        redirect_text=req.body.redirect_text || null,
        redirect_url=req.body.redirect_url || null,
        redirect_screen_name=req.body.redirect_screen_name || null,
        redirect_tab_name=req.body.redirect_tab_name || null;
        let user_profile_id=+req.user.user_profile_id 

        if(!media_type ||!media_url ||!thumbnail_image_url ||!language_id ||!description)
        {
            let error_message="media_type ,media_url ,thumbnail_image_url ,language_id and description are mandatory parameter"
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false,error_message));
        }
        if(description.length>4000)
        {
            let error_message="description cannot be more than 4000 characters"
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false,error_message)); 
        }
        let is_image_or_video=Object.keys(media_type_enum).includes(media_type+'')
        if(!is_image_or_video)
        {
            let error_message="only image or video allowed"
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false,error_message));  
        }
        let shorts_created =await create_story_service(media_type, media_url, thumbnail_image_url , language_id, description,user_profile_id,redirect_text,redirect_url,redirect_screen_name,redirect_tab_name);
        let shorts_created_response=create_api_response(true,"successfull",shorts_created);
        return res.status(http_status_code_enum.ok).json(shorts_created_response);
    }catch(ex){
        error_log(ex);
       return res.status(http_status_code_enum.bad_request).json(create_api_response(false,ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/story/controllers/get_stories_controller.js
const error_log=require('../../../../middelware/error_log');
const create_api_response=require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const get_stories_service=require('../services/get_stories_service');
const langauge = require('../../../../entities_v2/metadata/enums/global/langauge');

module.exports=async (req,res)=>{
    try{
        let page_no=+req.query.page_no || 1, limit=+req.query.limit||20 ,language_id=+req.headers.language_id || langauge.default,merchant_detail_id=req.user.user_profile_id;
        let internal_navigation_allowed=false;
        let shorts =await get_stories_service(page_no,limit,language_id,merchant_detail_id,internal_navigation_allowed);
        let shorts_response=create_api_response(true,"successfull",shorts);
        return res.status(http_status_code_enum.ok).json(shorts_response);
    }catch(ex){
        error_log(ex);
       return res.status(http_status_code_enum.bad_request).json(create_api_response(false,ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/story/controllers/create_story_action_log_controller.js
const error_log=require('../../../../middelware/error_log');
const create_api_response=require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_story_action_logs_service=require('../services/create_story_action_logs_service');

module.exports=async (req,res)=>{
    try{
        const story_id  =+req.body.story_id || 0,action=+req.body.action || 0;
        const merchant_detail_id = req.user.user_profile_id;
        if(!story_id || !action)
        {
            let message="story_id and action is required"
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false,message));
        }
        let action_saved =await create_story_action_logs_service(merchant_detail_id,story_id,action);
        let action_saved_response=create_api_response(true,"successfull",action_saved);
        return res.status(http_status_code_enum.ok).json(action_saved_response);
    }catch(ex){
        error_log(ex);
       return res.status(http_status_code_enum.bad_request).json(create_api_response(false,ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/story/controllers/delete_stories_controller.js
const create_api_response=require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const delete_stories_service=require('../services/delete_stories_service');

module.exports=async (req,res)=>{
    try{
        const { story_id } = req.body;
        if(!story_id)
        {
            let message="story id required"
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false,message));
        }
        let story =await delete_stories_service(story_id);
        if(!story)
       {
        let message="story not found"
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false,message));
       }
        let story_response=create_api_response(true,"successfull",story);
        return res.status(http_status_code_enum.ok).json(story_response);
    }catch(ex){
       return res.status(http_status_code_enum.bad_request).json(create_api_response(false,ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/story/controllers/update_story_controller.js
const error_log=require('../../../../middelware/error_log');
const create_api_response=require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const update_story_service=require('../services/update_story_service');

module.exports=async (req,res)=>{
    try{

        let story_id=+req.body.story_id,
        media_type=req.body.media_type, 
        media_url=req.body.media_url ,
        thumbnail_image_url=req.body.thumbnail_image_url,
        language_id=+req.body.language_id,
        description=req.body.description,
        redirect_text=req.body.redirect_text,
        redirect_url=req.body.redirect_url,
        redirect_screen_name=req.body.redirect_screen_name,
        redirect_tab_name=req.body.redirect_tab_name

        if(!story_id || !media_type ||!media_url ||!thumbnail_image_url ||!language_id ||!description,!redirect_screen_name || !redirect_tab_name)
        {
            let error_message="story_id, media_type, media_url, thumbnail_image_url, language_id, description,redirect_screen_name and redirect_tab_name are mandatory parameter"
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false,error_message));
        }
        if(description.length>4000)
        {
            let error_message="description too long"
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false,error_message));
        }
        let updated_story =await update_story_service(story_id, media_type, media_url, thumbnail_image_url, language_id, description,redirect_text,redirect_url,redirect_screen_name, redirect_tab_name);
        let updated_story_response=create_api_response(true,"successfull",updated_story);
        return res.status(http_status_code_enum.ok).json(updated_story_response);
    }catch(ex){
        error_log(ex);
       return res.status(http_status_code_enum.bad_request).json(create_api_response(false,ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/story/controllers/get_stories_for_panel_controller.js
const error_log=require('../../../../middelware/error_log');
const create_api_response=require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const get_stories_for_panel_service=require('../services/get_stories_for_panel_service');

module.exports=async (req,res)=>{
    try{
        let page_no=+req.query.page_no || 1, limit=+req.query.limit||5,  language_id=+req.query.language_id;
        let shorts_for_panel =await get_stories_for_panel_service(page_no,limit,language_id);
        let shorts_for_panel_response=create_api_response(true,"successfull",shorts_for_panel);
        return res.status(http_status_code_enum.ok).json(shorts_for_panel_response);
    }catch(ex){
        error_log(ex);
       return res.status(http_status_code_enum.bad_request).json(create_api_response(false,ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/story/controllers/get_story_by_id_controller.js
const error_log=require('../../../../middelware/error_log');
const create_api_response=require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const {get_story_by_id_service}=require('../services/get_story_by_id_service');

module.exports=async (req,res)=>{
    try{
        const { story_id } = req.query;
        const merchant_detail_id = req.user.user_profile_id;
        if(!story_id)
        {
            let message="story id required"
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false,message));
        }
        let story =await get_story_by_id_service(merchant_detail_id,story_id);
        let story_response=create_api_response(true,"successfull",story);
        return res.status(http_status_code_enum.ok).json(story_response);
    }catch(ex){
        error_log(ex);
       return res.status(http_status_code_enum.bad_request).json(create_api_response(false,ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/story/services/create_story_action_logs_service.js
const error_log = require("../../../../middelware/error_log");
const stories_log_model = require("../../../../database/models_v2/stories/stories_log");
const story_actions_enum = require("../../../../enums/shorts/story_actions");

module.exports = async (merchant_detail_id, story_id, action) => {
  try {
    let stories_log = {
      merchant_detail_id,
      story_id,
      action,
      is_active: 1,
    };
    let stories_log_saved={};
    if(action==story_actions_enum.like)
    {
      stories_log_saved= await check_for_like(merchant_detail_id,story_id,action)
     if(stories_log_saved)
     {
      stories_log_saved.is_active=0
      stories_log_saved= await stories_log_saved.save()
     }
     else
     {
        stories_log_saved = await stories_log_model.create(stories_log);
     }
    }
    else
    {
      stories_log_saved = await stories_log_model.create(stories_log);
    }
    return stories_log_saved;
  } catch (err) {
    error_log(err);
    return null;
  }
};

const check_for_like=async (merchant_detail_id,story_id,action)=>{
let liked =await stories_log_model.findOne({
  where :{
    is_active:1,
    merchant_detail_id,
    story_id,
    action
  }
})
if(liked)
return liked ;
else
return null
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/story/services/get_stories_service.js
const error_log = require("../../../../middelware/error_log");
const {get_stories}=require('../../../../data_abstraction_layer/story/stories')
const {count_get_story_logs}=require('../../../../data_abstraction_layer/story/story_logs');
const { story_liked_by_merchant_or_not } = require("./get_story_by_id_service");
const story_actions_enum = require("../../../../enums/shorts/story_actions");

module.exports = async (
    page_no=1,limit=20,language_id,merchant_detail_id,internal_navigation_allowed=true
) => {
  try {
    let offset=((page_no-1)*limit);
    let order=[['created_at','DESC']]
    // fetching all stories paginated wise and langugae wise
    let stories = await get_stories({offset,limit,language_id,internal_navigation_allowed,order});
    let shorts_stories=[]
    for(let i=0;i<stories.rows.length;i++)
    {
      let liked_by_merchant=false;
        let temp_stories={
            story_id: stories.rows[i]?.id,
            media_type: stories.rows[i]?.media_type,
            media_url: stories.rows[i]?.media_url,
            thumbnail_image_url: stories.rows[i]?.thumbnail_image,
            language_id: stories.rows[i]?.language_id,
            description: stories.rows[i]?.description,
            redirect_text: stories.rows[i]?.redirect_text,
            redirect_url: stories.rows[i]?.redirect_url,
            created_at: stories.rows[i]?.createdAt,
            created_by:{
              "name":"FarMart",
              "image":"https://farmartdocs2021.s3.ap-south-1.amazonaws.com/metadata/stories/farmart_story_profile.webp",
              "verified":true
            }
        }
        if(internal_navigation_allowed)
        {
          temp_stories.redirect_screen_name= stories.rows[i]?.redirect_screen_name;
          temp_stories.redirect_tab_name= stories.rows[i]?.redirect_tab_name;
        }
        // checking whether merchant liked it or not
        liked_by_merchant=await story_liked_by_merchant_or_not(merchant_detail_id,stories.rows[i]?.id,story_actions_enum.like)
        // number of likes came on the story.
        let likes=await count_get_story_logs({story_id:stories.rows[i]?.id,action:story_actions_enum.like})
        //total number of claps on the story
        let total_claps=await count_get_story_logs({story_id:stories.rows[i]?.id,action:story_actions_enum.clap})
        // number of claps given by the merchant
        let clapped_by_user=await count_get_story_logs({merchant_detail_id,story_id:stories.rows[i]?.id,action:story_actions_enum.clap})
        temp_stories.liked_by_merchant=liked_by_merchant
        temp_stories.likes=likes
        temp_stories.total_claps=total_claps
        temp_stories.clapped_by_user=clapped_by_user
        shorts_stories.push(temp_stories);
    }
    let response = {
        stories:shorts_stories,
        total_story_count:stories.count
    };
    return response;
  } catch (err) {
    error_log(err);
    return {
      stories:[],
      total_story_count:0
  };
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/story/services/get_story_by_id_service.js
const error_log = require("../../../../middelware/error_log");
const { get_stories } = require('../../../../data_abstraction_layer/story/stories');
const story_actions_enum = require("../../../../enums/shorts/story_actions");
const { get_story_logs } = require('../../../../data_abstraction_layer/story/story_logs');
const { count_get_story_logs } = require('../../../../data_abstraction_layer/story/story_logs');

const get_story_by_id_service = async (
  merchant_detail_id, story_id,internal_navigation_allowed=true
) => {
  try {

    let stories = await get_stories({ story_id, internal_navigation_allowed });
    if (stories.rows.length == 0) {
      return null;
    }
    let liked_by_merchant = false;
    let story_response = {
      story_id: stories.rows[0]?.id,
      media_type: stories.rows[0]?.media_type,
      media_url: stories.rows[0]?.media_url,
      thumbnail_image_url: stories.rows[0]?.thumbnail_image,
      language_id: stories.rows[0]?.language_id,
      description: stories.rows[0]?.description,
      redirect_text: stories.rows[0]?.redirect_text,
      redirect_url: stories.rows[0]?.redirect_url,
      created_at: stories.rows[0]?.createdAt,
      created_by: {
        "name": "FarMart",
        "image": "https://farmartdocs2021.s3.ap-south-1.amazonaws.com/metadata/stories/farmart_story_profile.webp",
        "verified": true
      },
      redirect_screen_name: stories.rows[0]?.redirect_screen_name,
      redirect_tab_name: stories.rows[0]?.redirect_tab_name,
    }
    liked_by_merchant = await story_liked_by_merchant_or_not(merchant_detail_id, story_id, story_actions_enum.like)
    let likes = await count_get_story_logs({ story_id, like: story_actions_enum.like })
    let shares = await count_get_story_logs({ story_id, share: story_actions_enum.share })
    story_response.no_of_likes = likes
    story_response.no_of_shares = shares
    story_response.liked_by_merchant = liked_by_merchant

    return story_response;
  } catch (err) {
    error_log(err);
    return null;
  }
};
const story_liked_by_merchant_or_not = async (merchant_detail_id, story_id, like) => {
  let likes_by_merchant = await get_story_logs({ merchant_detail_id, story_id, like })
  let liked_by_merchant_status = false
  if (likes_by_merchant.count >= 1) {
    liked_by_merchant_status = true
  }
  return liked_by_merchant_status
}

module.exports = {
  get_story_by_id_service,
  story_liked_by_merchant_or_not
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/story/services/delete_stories_service.js
const error_log = require('../../../../middelware/error_log');
const { get_stories } = require('../../../../data_abstraction_layer/story/stories');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const get_story_by_id_service = async (
    story_id, internal_navigation_allowed = true
) => {
    try {

        const stories = await get_stories({ story_id, internal_navigation_allowed });
        if (stories.rows.length === 0) {
            throw new ValidationError('story not found to delete');
        }
        stories.rows[0].is_active = 0;
        await stories.rows[0].save()
        return stories.rows[0];
    } catch (err) {
        error_log(err);
        return null;
    }
};

module.exports = get_story_by_id_service



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/story/services/update_story_service.js
const error_log = require('../../../../middelware/error_log');
const { get_stories } = require('../../../../data_abstraction_layer/story/stories')
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (
    story_id, media_type, media_url, thumbnail_image_url, language_id, description, redirect_text, redirect_url, redirect_screen_name, redirect_tab_name, internal_navigation_allowed = true
) => {
    try {
        const stories = await get_stories({ story_id, internal_navigation_allowed });
        if (stories.rows.length === 0) {
            throw new ValidationError('no story found to update ');
        }
        stories.rows[0].media_type = media_type;
        stories.rows[0].media_url = media_url;
        stories.rows[0].thumbnail_image = thumbnail_image_url;
        stories.rows[0].language_id = language_id;
        stories.rows[0].description = description;
        stories.rows[0].redirect_text = redirect_text;
        stories.rows[0].redirect_url = redirect_url;
        stories.rows[0].redirect_screen_name = redirect_screen_name;
        stories.rows[0].redirect_tab_name = redirect_tab_name
        const story_saved = await stories.rows[0].save();

        const response = {
            id: story_saved.id,
            media_type: story_saved.media_type,
            media_url: story_saved.media_url,
            thumbnail_image_url: story_saved.thumbnail_image,
            language_id: story_saved.language_id,
            description: story_saved.description,
            redirect_text: story_saved.redirect_text,
            redirect_url: story_saved.redirect_url,
            redirect_screen_name: story_saved.redirect_screen_name,
            redirect_tab_name: story_saved.redirect_tab_name

        };
        return response;
    } catch (err) {
        error_log(err);
        return { message: err.message };
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/story/services/get_stories_for_panel_service.js
const error_log = require("../../../../middelware/error_log");
const {get_stories}=require('../../../../data_abstraction_layer/story/stories');
const story_actions_enum = require("../../../../enums/shorts/story_actions");
const {count_get_story_logs}=require('../../../../data_abstraction_layer/story/story_logs');

module.exports = async (
    page_no=1,limit=5,language_id,internal_navigation_allowed=true
) => {
  try {
    let offset=((page_no-1)*limit);
    let order=[['created_at','DESC']]
    let stories = await get_stories({offset,limit,language_id,internal_navigation_allowed,order});
    let shorts_stories=[]
    for(let i=0;i<stories.rows.length;i++)
    {
        let story_id=stories.rows[i]?.id
        let story_response={
            story_id,
            media_type: stories.rows[i]?.media_type,
            media_url: stories.rows[i]?.media_url,
            thumbnail_image_url: stories.rows[i]?.thumbnail_image,
            language_id: stories.rows[i]?.language_id,
            description: stories.rows[i]?.description,
            redirect_text: stories.rows[i]?.redirect_text,
            redirect_url: stories.rows[i]?.redirect_url,
            redirect_screen_name: stories.rows[i]?.redirect_screen_name,
            redirect_tab_name: stories.rows[i]?.redirect_tab_name,
        }
        let likes=await count_get_story_logs({story_id,like:story_actions_enum.like})
        let shares=await count_get_story_logs({story_id,share:story_actions_enum.share})
        story_response.no_of_likes=likes
        story_response.no_of_shares=shares
        shorts_stories.push(story_response);
    }
   
    return {stories:shorts_stories,total_story_count:stories.count};
  } catch (err) {
    error_log(err);
    return {stories:[],total_story_count:0};
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/story/services/create_story_service.js
const error_log = require('../../../../middelware/error_log');
const stories_model = require('../../../../database/models_v2/stories/stories');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (
    media_type,
    media_url,
    thumbnail_image_url,
    language_id,
    description,
    user_profile_id,
    redirect_text,
    redirect_url,
    redirect_screen_name,
    redirect_tab_name
) => {
    try {
        const stories = {
            media_type,
            media_url,
            thumbnail_image: thumbnail_image_url,
            language_id,
            description,
            user_profile_id,
            is_active: 1,
            redirect_text,
            redirect_url,
            redirect_screen_name,
            redirect_tab_name
        };

        const stories_saved = await stories_model.create(stories);
        if (!stories_saved) { throw new ValidationError('could not save stories') }
        const response = {
            id: stories_saved.id,
            media_type: stories_saved.media_type,
            media_url: stories_saved.media_url,
            thumbnail_image_url: stories_saved.thumbnail_image,
            language_id: stories_saved.language_id,
            description: stories_saved.description,
            redirect_text,
            redirect_url,
            redirect_screen_name,
            redirect_tab_name
        };
        return response;
    } catch (err) {
        error_log(err);
        return { message: err.message };
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/buyer/swagger/index.js
module.exports = {
    tags: {
        name: 'buyer'
    },
    paths: {
        '/permissions': {
            put: {
                tags: ['buyer'],
                summary: 'modify buyer permissions',
                description: '',
                operationId: 'modify_buyer_permissions',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'body',
                        name: 'body',
                        description: 'action_enum 1:create_order',
                        required: true,
                        schema: {
                            properties: {
                                buyer_id: {
                                    type: 'integer'
                                },
                                action_permission: {
                                    type: 'boolean'
                                },
                                action_enum: {
                                    type: 'integer'
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/': {
            get: {
                tags: ['buyer'],
                summary: 'get all buyer',
                description: '',
                operationId: 'get_all_buyer',
                security: [{ Bearer: ['read'] }],
                parameters: [],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            },
            post: {
                tags: ['buyer'],
                summary: 'add buyer',
                description: '',
                operationId: 'add_buyer',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        required: true,
                        schema: {
                            properties: {
                                email: {
                                    type: 'string'
                                },
                                mobileNumber: {
                                    type: 'string'
                                },
                                gstStatus: {
                                    type: 'integer'
                                },
                                docs: {
                                    type: 'array',
                                    items: {
                                        required: ['type', 'value', 'frontImage', 'backImage'],
                                        properties: {
                                            type: {
                                                type: 'string'
                                            },
                                            value: {
                                                type: 'string'
                                            },
                                            frontImage: {
                                                type: 'string'
                                            },
                                            backImage: {
                                                type: 'string'
                                            }
                                        }
                                    }
                                },
                                traderName: {
                                    type: 'integer'
                                },
                                legalName: {
                                    type: 'string'
                                },
                                address: {
                                    type: 'integer'
                                },
                                state: {
                                    type: 'string'
                                },
                                district: {
                                    type: 'string'
                                },
                                pincode: {
                                    type: 'string'
                                },
                                annualTurnover: {
                                    type: 'string'
                                },

                                type: {
                                    type: 'string'
                                },
                                product: {
                                    type: 'string'
                                },
                                repaymentTimeline: {
                                    type: 'string'
                                },
                                workingCrops: {
                                    type: 'array',
                                    items: {
                                        type: 'string'
                                    }
                                },
                                recommended_credit_limit: {
                                    type: 'string'
                                },
                                buyer_id: {
                                    type: 'string'
                                },
                                gst_treatment: {
                                    type: 'string'
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/order/{po_id}': {
            get: {
                tags: ['buyer'],
                summary: 'get buyer order for mapping',
                description: '',
                operationId: 'get_so_for_mapping',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'path',
                        name: 'po_id',
                        description: '',
                        required: true,
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/repayment/url': {
            get: {
                tags: ['buyer'],
                summary: 'get all repayment_url',
                description: '',
                operationId: 'get_all_repayment_url',
                security: [{ Bearer: ['read'] }],
                parameters: [],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/order': {
            post: {
                tags: ['buyer'],
                summary: 'add_sales_ordder',
                description: '',
                operationId: 'add_sales_ordder',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        required: true,
                        schema: {
                            properties: {
                                buyerId: {
                                    type: 'number'
                                },

                                orderQuantityInTon: {
                                    type: 'integer'
                                },
                                buyerOfferingPriceQuintal: {
                                    type: 'integer'
                                },
                                deliveryInfo: {
                                    properties: {
                                        address: {
                                            type: 'string'
                                        },
                                        pincode: {
                                            type: 'string'
                                        },
                                        district: {
                                            type: 'string'
                                        },
                                        state: {
                                            type: 'string'
                                        },
                                        image: {
                                            type: 'string'
                                        }
                                    }
                                },
                                cropId: {
                                    type: 'number'
                                },
                                varietyId: {
                                    type: 'number'
                                },
                                expDeliveryIn: {
                                    type: 'integer'
                                },
                                packagingType: {
                                    type: 'integer'
                                },
                                fullfillmentType: {
                                    type: 'integer'
                                },
                                qualityChecks: {
                                    type: 'array',
                                    items: {
                                        properties: {
                                            id: {
                                                type: 'number'
                                            },
                                            name: {
                                                type: 'string'
                                            },
                                            requiredValue: {
                                                type: 'string'
                                            }
                                        }
                                    }
                                },
                                licenceNumber: {
                                    type: 'string'
                                },
                                buyerFacilityGst: {
                                    type: 'string'
                                },
                                cashDiscountPercent: {
                                    type: 'integer'
                                },
                                bagDeductionPercent: {
                                    type: 'integer'
                                },
                                soRepaymentTimeline: {
                                    type: 'string'
                                },
                                isInvoiceOnGross: {
                                    type: 'boolean'
                                },
                                invoiceSharing: {
                                    type: 'integer'
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/order/sa': {
            get: {
                tags: ['buyer'],
                summary: 'get sales order by sa',
                description: '',
                operationId: 'get_sales_order_by_sa',
                security: [{ Bearer: ['read'] }],
                parameters: [],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/order/so-target': {
            get: {
                tags: ['buyer'],
                summary: 'get so target',
                description: '',
                operationId: 'get_target_price',
                security: [{ Bearer: ['read'] }],
                parameters: [],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/invoice_mandi_docs': {
            get: {
                tags: ['buyer'],
                summary: 'fetch mandi and invoice documents',
                description: '',
                operationId: 'fetch_mandi_and_invoicing_doc',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'po_id',
                        description: '',
                        required: true,
                        type: 'number'
                    },
                    {
                        in: 'query',
                        name: 'so_id',
                        description: '',
                        required: true,
                        type: 'number'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/{buyerId}': {
            get: {
                tags: ['buyer'],
                summary: 'get buyer details by Id',
                description: '',
                operationId: 'get_single_buyer',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'path',
                        name: 'buyerId',
                        description: '',
                        required: true,
                        type: 'string'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/dashboard_buyer_data': {
            get: {
                tags: ['buyer'],
                summary: 'get buyer dashboard data',
                description: '',
                operationId: 'get dashboard data',
                security: [{ Bearer: ['read'] }],
                parameters: [],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/update_buyer_status': {
            patch: {
                tags: ['buyer'],
                summary: 'update buyer status',
                description: '',
                operationId: 'change buyer status',
                security: [{ Bearer: ['read'] }],
                parameters: [{
                    in: 'body',
                    name: 'body',
                    description: '',
                    required: true,
                    schema: {
                        properties: {
                            buyer_id: {
                                type: 'integer'
                            },
                            buyer_status: {
                                type: 'integer'
                            },
                            gst_status: {
                                type: 'integer'
                            },
                            recommended_credit_limit: {
                                type: 'integer'
                            }
                        }
                    }
                }],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/detach': {
            post: {
                tags: ['buyer'],
                summary: 'detach Sales Order from Purchase Order',
                description: '',
                operationId: 'detach SO from PO',
                security: [{ Bearer: ['read'] }],
                parameters: [{
                    in: 'body',
                    name: 'body',
                    description: '',
                    required: false,
                    schema: {
                        properties: {
                            po_id: {
                                type: 'integer'
                            },
                            so_id: {
                                type: 'integer'
                            }
                        }
                    }
                }],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/edit_buyer_by_finance': {
            patch: {
                tags: ['buyer'],
                summary: 'update buyer by finance controller',
                description: '',
                operationId: 'change buyer details',
                security: [{ Bearer: ['read'] }],
                parameters: [{
                    in: 'body',
                    name: 'body',
                    description: '',
                    required: false,
                    schema: {
                        properties: {
                            email: {
                                type: 'string'
                            },
                            mobileNumber: {
                                type: 'string'
                            },
                            gstStatus: {
                                type: 'integer'
                            },
                            docs: {
                                type: 'array',
                                items: {
                                    required: ['type', 'value', 'frontImage', 'backImage'],
                                    properties: {
                                        type: {
                                            type: 'integer'
                                        },
                                        value: {
                                            type: 'string'
                                        },
                                        frontImage: {
                                            type: 'string'
                                        },
                                        backImage: {
                                            type: 'string'
                                        }
                                    }
                                }
                            },
                            traderName: {
                                type: 'integer'
                            },
                            legalName: {
                                type: 'string'
                            },
                            pincode: {
                                type: 'string'
                            },
                            annualTurnover: {
                                type: 'integer'
                            },

                            type: {
                                type: 'integer'
                            },
                            product: {
                                type: 'string'
                            },
                            repaymentTimeline: {
                                type: 'integer'
                            },
                            workingCrops: {
                                type: 'array',
                                items: {
                                    type: 'string'
                                }
                            },
                            buyer_id: {
                                type: 'integer'
                            }
                        }
                    }
                }],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        }
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/buyer/index.js
const router = require('express').Router();

// const get_buyer_controller = require('./controllers/get_buyer_controller');
const add_buyer_controller = require('./controllers/add_buyer_controller');
const get_repayment_url_controller = require('./controllers/get_repayment_url_controller');
const get_so_for_mapping_controller = require('./controllers/get_so_for_mapping_controller');
// const add_sales_order_controller = require('./controllers/add_sales_order_controller');
// const get_sales_order_by_sa_controller = require('./controllers/get_sales_order_by_sa_controller');
const validate_buyer_data = require('../../../middelware/validate_buyer_data');
// const validate_order_data = require('../../../middelware/validate_order_data');
// const get_target_price_controller = require('./controllers/get_target_price_controller');
// const fetch_mandi_and_invoicing_doc_controller = require('./controllers/fetch_mandi_and_invoicing_doc_controller');
// const get_buyer_by_id_controller = require('./controllers/get_buyer_by_id_controller');
const get_dashboard_data_controller = require('./controllers/dashboard_data_controller');
const update_buyer_status_controller = require('./controllers/update_buyer_status_controller');
const validateBuyerEditDataByFinance = require('./validation/validation');
const edit_buyer_by_finance_controller = require('./controllers/edit_buyer_by_finance_controller');
const user_role = require('../../../enums/user_profile/user_role');
const modify_buyer_permission_controller = require('./controllers/modify_buyer_permission_controller');
const detach_so_from_po_controller = require('./controllers/detach_so_from_po_controller');
const authorize = require('../../../middelware/authorized_routes');

router.get('/dashboard_buyer_data', get_dashboard_data_controller);
router.patch('/update_buyer_status', update_buyer_status_controller);

router.post('/', validate_buyer_data, add_buyer_controller);
router.get('/repayment/url', get_repayment_url_controller);
router.get('/order/:po_id', get_so_for_mapping_controller);

router.patch('/edit_buyer_by_finance', validateBuyerEditDataByFinance, edit_buyer_by_finance_controller)
router.post('/detach', detach_so_from_po_controller)
router.put('/permissions', authorize([user_role.FINANCE_CONTROLLER]), modify_buyer_permission_controller);

/** @deprecated */
// router.get('/', get_buyer_controller);
// router.post('/order', validate_order_data, add_sales_order_controller);
// router.get('/order/sa', get_sales_order_by_sa_controller);
// router.get('/order/so-target', get_target_price_controller);
// router.get('/invoice_mandi_docs', fetch_mandi_and_invoicing_doc_controller);
// router.get('/:buyerId', get_buyer_by_id_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/buyer/utils/is_valid_pan.js
const is_valid_pan = (panCardNo) => {

    let regex = new RegExp(/^[A-Z]{5}[0-9]{4}[A-Z]{1}$/);

    if (panCardNo === null) {
        return false;
    }
 
    if (regex.test(panCardNo) === true) {
        return true;
    }
    else {
        return false;
    }
}

module.exports = {
    is_valid_pan
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/buyer/utils/is_valid_gst.js
const is_valid_gst = (gstNo,panCardNo) => {

    let regex = new RegExp(/^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}Z[0-9A-Z]{1}$/);
 
    if (gstNo === null) {
        return false;
    }
 
    if (regex.test(gstNo) === true && gstNo.substring(2,12) === panCardNo) {
        return true;
    }
    else {
        return false;
    }
}

module.exports = {
    is_valid_gst
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/buyer/utils/is_user_allowed_to_take_action.js
const user_profile = require("../../../../database/models/user_profile")
const buyer_logs = require("../../../../database/models_v2/buyer/buyer_logs")
const { BUYER_LOG_ACTION, BUYER_STATUS } = require("../../../../enums/market_linkage/enums/buyerEnum")
const error_log = require("../../../../middelware/error_log")
const user_role = require("../../../../enums/user_profile/user_role");
const { Op } = require("sequelize");

const is_user_allowed_to_take_action = async ({user_role_id_for_next_action, buyerId, action}) => {

    try {

        const user_allowed_to_perform_action = new Set([user_role.SALES_ASSOCIATE, user_role.SALES_VP, user_role.REGIONAL_MANAGER_SALES, user_role.STATE_HEAD_SALES])

        if(!user_allowed_to_perform_action.has(user_role_id_for_next_action))
            return false

        const latestBuyerLog = await buyer_logs.findAll({
            where: {
                buyer_id: buyerId,
                action_by_user: {
                    [Op.in]: [BUYER_LOG_ACTION.EDIT,BUYER_LOG_ACTION.BUYER_STATUS_CHANGE]
                }
            },
            attributes: ["user_id","action_by_user","action_description"],
            limit: 1,
            order: [['createdAt','DESC']]
        })

        if((!latestBuyerLog || latestBuyerLog.length === 0) && (action === BUYER_LOG_ACTION.BUYER_STATUS_CHANGE && (user_role_id_for_next_action === user_role.SALES_ASSOCIATE || user_role_id_for_next_action === user_role.REGIONAL_MANAGER_SALES)))
            return false
        else if(!latestBuyerLog || latestBuyerLog.length === 0)
            return true

        const user_role_for_last_action = await user_profile.findByPk(latestBuyerLog[0].dataValues.user_id,{
            attributes: ['user_role_id']
        })

        const user_role_id_for_last_action = user_role_for_last_action.dataValues.user_role_id

        const action_description = user_role_for_last_action.dataValues.action_description

        if(action === BUYER_LOG_ACTION.EDIT){
            let latest_buyer_action = latestBuyerLog[0];
            
            if(user_role_id_for_last_action === user_role.SALES_VP 
                && latest_buyer_action.action_by_user === BUYER_LOG_ACTION.BUYER_STATUS_CHANGE
                && (latest_buyer_action.action_description === BUYER_STATUS.APPROVED_BY_VP || latest_buyer_action.action_description === BUYER_STATUS.HOLD))
                return false
            
            if(user_role_id_for_last_action === user_role.STATE_HEAD_SALES
                && latest_buyer_action.action_by_user === BUYER_LOG_ACTION.BUYER_STATUS_CHANGE
                && (latest_buyer_action.action_description === BUYER_STATUS.APPROVED_BY_VP || latest_buyer_action.action_description === BUYER_STATUS.HOLD)){

                if(user_role_id_for_next_action === user_role.SALES_ASSOCIATE || user_role_id_for_next_action === user_role.REGIONAL_MANAGER_SALES)
                    return false

            }


        } else if(action === BUYER_LOG_ACTION.BUYER_STATUS_CHANGE){

            if(user_role_id_for_next_action === user_role.SALES_ASSOCIATE || user_role_id_for_next_action === user_role.REGIONAL_MANAGER_SALES)
                return false
            
            if(action_description === BUYER_STATUS.HOLD){

                if(user_role_id_for_last_action !== user_role_id_for_next_action)
                    return false

            }
                        
            if(action_description === BUYER_STATUS.APPROVED){

                if(user_role_id_for_last_action === user_role.SALES_VP)
                    return false

            }

        } 

        return true

    } catch (error) {
        error_log(error)
    }

}

module.exports = is_user_allowed_to_take_action


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/buyer/controllers/get_sales_order_by_sa_controller.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
const get_sales_order_service = require("../../sales/services/get_sales_order_service");

const get_sales_order_by_sa_controller = async (req, res) => {
  try {

    const {
      mobileNumber: placedByMobileNumber
    } = req.user.ml_user || {};

    const all_sales_order_result = await get_sales_order_service(placedByMobileNumber);
    return res.status(all_sales_order_result.status).json(all_sales_order_result.data);
  } catch (e) {
    app_log_service({type:type.error,err:e});
    return res.status(HTTP_status_codes.internalServerError).json({
      message: e.message,
    });
  }
};

module.exports = get_sales_order_by_sa_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/buyer/controllers/update_buyer_status_controller.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
const update_buyer_status_service = require("../services/update_buyer_status_service");

const update_buyer_status_controller = async (req, res) => {
  try {
    const {
        buyer_id,buyer_status,gst_status,recommended_credit_limit
    } = req.body;

    if (!buyer_id) {
        return res
          .status(HTTP_status_codes.badRequest)
          .json({ message: "bad request", error: "buyer_id missing" });
    }
    
    const {user_role_id,user_profile_id} = req.user;

    if (!user_role_id || !user_profile_id) {
      return res
        .status(HTTP_status_codes.unauthorised)
        .json({ message: "unauthrised", error: "onboarder details missing" });
    }

    const updateBuyerResult = await update_buyer_status_service({buyer_id,buyer_status,gst_status,user_profile_id,user_role_id,recommended_credit_limit});

    return res.status(updateBuyerResult.status).json(updateBuyerResult.data);
  } catch (err) {
    app_log_service({type:type.error,err});
    return res.status(HTTP_status_codes.badRequest).json({
      message: "unable to add buyer",
      error: err.message,
    });
  }
};

module.exports = update_buyer_status_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/buyer/controllers/add_buyer_controller.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const add_buyer_service = require("../services/add_buyer_service");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");

const add_buyer_controller = async (req, res) => {
  try {
    const {
      email,
      mobileNumber,
      docs,
      gstStatus,
      traderName,
      legalName,
      address,
      state,
      district,
      pincode,
      annualTurnover,
      workingCrops,
      type,
      product,
      repaymentTimeline,
      recommended_credit_limit,
      buyer_id,
      gst_treatment
    } = req.body;
    
    const {
      _id: onboardedById,
      name: onboardedByName,
      mobileNumber: onboardedByMobileNumber,
    } = req.user.ml_user || {};

    const {user_role_id,user_profile_id} = req.user;

    if (!onboardedById || !onboardedByName || !onboardedByMobileNumber || !user_role_id) {
      return res
        .status(HTTP_status_codes.unauthorised)
        .json({ message: "unauthrised", error: "onboarder details missing" });
    }

    const addBuyerResult = await add_buyer_service({
      email,
      mobileNumber,
      docs,
      gstStatus,
      traderName,
      legalName,
      address,
      state,
      district,
      pincode,
      annualTurnover,
      workingCrops,
      type,
      product,
      repaymentTimeline,
      onboardedBy: {
        id: req.user.ml_user._id,
        name: req.user.ml_user.name,
        mobileNumber: req.user.ml_user.mobileNumber,
      },
      recommended_credit_limit,
      buyer_id,
      user_role_id,
      user_profile_id,
      gst_treatment
    });

    return res.status(addBuyerResult.status).json(addBuyerResult.data);
  } catch (err) {
    app_log_service({type:type.error,err});
    return res.status(HTTP_status_codes.badRequest).json({
      message: "unable to add buyer",
      error: err.message,
    });
  }
};

module.exports = add_buyer_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/buyer/controllers/dashboard_data_controller.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const appLogService = require("../../../../common_services/market_linkage/logging/app_log_service");
const get_dashboard_data = require("../services/dashboard_data_service");

const get_dashboard_data_controller = async (req, res) => {
  try {

    const user_profile_id = req.user && req.user.user_profile_id ? req.user.user_profile_id : null
    const user_role_id = req.user && req.user.user_role_id ? req.user.user_role_id : null

    if(!user_profile_id)
      return res.status(HTTP_status_codes.badRequest).json({
        message: e.message,
      });

    const dashboardData = await get_dashboard_data({user_profile_id});
    return res.status(dashboardData.status).json(dashboardData.data);

  } catch (e) {
    appLogService({type:type.error,err:e});
    return res.status(HTTP_status_codes.internalServerError).json({
      message: e.message,
    });
  }
};

module.exports = get_dashboard_data_controller;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/buyer/controllers/get_buyer_controller.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const appLogService = require("../../../../common_services/market_linkage/logging/app_log_service");
const get_buyer_service = require("../services/get_buyer_service");

const get_buyer_controller = async (req, res) => {
  try {
    let buyer_status;

    if (req.query.status)
      buyer_status = parseInt(req.query.status);

    const allBuyerResult = await get_buyer_service(buyer_status);
    return res.status(allBuyerResult.status).json(allBuyerResult.data);
  } catch (e) {
    appLogService({type:type.error,err:e});
    return res.status(HTTP_status_codes.internalServerError).json({
      message: e.message,
    });
  }
};

module.exports = get_buyer_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/buyer/controllers/get_repayment_url_controller.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const { repayment } = require("../../../../enums/market_linkage/enums/buyerEnum");
const appLogService = require("../../../../common_services/market_linkage/logging/app_log_service");

const get_repayment_url_controller = async (req, res) => {
  try {
    return res.status(HTTP_status_codes.ok).json({url:repayment.url});
  } catch (e) {
    appLogService({type:type.error,err:e});
    return res.status(HTTP_status_codes.internalServerError).json({
      message: e.message,
    });
  }
};

module.exports = get_repayment_url_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/buyer/controllers/edit_buyer_by_finance_controller.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const {edit_buyer_by_finance_service} = require("../services/edit_buyer_by_finance_service");
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
const user_role = require("../../../../enums/user_profile/user_role");

const edit_buyer_by_finance_controller = async (req, res) => {
  try {
    const {
      email,
      mobileNumber,
      docs,
      gstStatus,
      traderName,
      legalName,
      pincode,
      annualTurnover,
      workingCrops,
      type,
      product,
      repaymentTimeline,
      buyer_id
    } = req.body;

    const {user_role_id,user_profile_id} = req.user;

    if (!user_role_id) {
      return res
        .status(HTTP_status_codes.unauthorised)
        .json({status: false, message: "unauthorised" });
    }

    const allowed_users_to_edit = new Set([user_role.FINANCE_CONTROLLER, user_role.Finance_Manager, user_role.CFO])

    if(!allowed_users_to_edit.has(user_role_id))
        return res.status(HTTP_status_codes.unauthorised).json({status: false, message: "Only Finance controller can edit"})

    const edit_buyer_data = await edit_buyer_by_finance_service({
      email,
      mobileNumber,
      docs,
      gstStatus,
      traderName,
      legalName,
      annualTurnover,
      workingCrops,
      type,
      pincode,
      product,
      repaymentTimeline,
      buyer_id,
      user_role_id,
      user_profile_id
    });

    if(edit_buyer_data.status === false)
        return res.status(HTTP_status_codes.badRequest).json(edit_buyer_data);

    return res.status(HTTP_status_codes.ok).json(edit_buyer_data);

  } catch (err) {
    app_log_service({type:type.error,err});
    return res.status(HTTP_status_codes.internalServerError).json({
      status: false,
      message: 'Internal Server Error',
    });
  }
};

module.exports = edit_buyer_by_finance_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/buyer/controllers/get_target_price_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const get_target_price_service = require("../services/get_target_price_service");

module.exports = async (req, res) => {
    try {
        const userId = req.user.user_profile_id;
        const target_price = await get_target_price_service(userId);
        return res.status(target_price.status).json(target_price.data);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({ message: err.message });
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/buyer/controllers/detach_so_from_po_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const detach_so_from_po_service = require('../services/detach_so_from_po_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { po_id, so_id } = req.body;
        if (!po_id || !so_id) {
            throw new ValidationError('po id and so id are mandatory query params');
        }
        await detach_so_from_po_service({ po_id, so_id });
        const detach_resp = create_api_response(true, 'successfull');
        return res.status(http_status_code_enum.ok).json(detach_resp);
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/buyer/controllers/add_sales_order_controller.js
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const { type } = require('../../../../enums/market_linkage/enums/appLogEnum');
const app_log_service = require('../../../../common_services/market_linkage/logging/app_log_service');
const add_sales_order_service = require('../services/add_sales_order_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const add_sales_order_controller = async (req, res) => {
    try {

        const {
            buyerId,
            deliveryInfo,
            orderQuantityInTon,
            buyerOfferingPriceQuintal,
            cropId,
            varietyId,
            expDeliveryIn,
            packagingType,
            fullfillmentType,
            qualityChecks,
            licenceNumber,
            buyerFacilityGst,
            cashDiscountPercent,
            bagDeductionPercent,
            soRepaymentTimeline,
            isInvoiceOnGross,
            invoiceSharing
        } = req.body;

        if (!buyerId) throw new ValidationError('buyer id is missing');
        if (!licenceNumber || !buyerFacilityGst || !cashDiscountPercent || !bagDeductionPercent) {
            throw new ValidationError('parameters are missing')
        }
        if (cashDiscountPercent < 0 || cashDiscountPercent > 99) {
            throw new ValidationError('invalid cash discount percent')
        }
        if (bagDeductionPercent < 0 || bagDeductionPercent > 99) {
            throw new ValidationError('invalid bag deduction percent')
        }
        if (soRepaymentTimeline < 0) {
            throw new ValidationError('soRepaymentTimeline cannot be negative')
        }
        const {
            _id: placedById,
            name: placedByName,
            mobileNumber: placedByMobileNumber
        } = req.user.ml_user || {};

        if (!placedById || !placedByName || !placedByMobileNumber) {
            return res
                .status(HTTP_status_codes.unauthorised)
                .json({ message: 'unauthrised', error: 'placedBy details missing' });
        }

        const orderResult = await add_sales_order_service(
            {
                buyerId,
                deliveryInfo,
                orderQuantityInTon,
                buyerOfferingPriceQuintal,
                cropId,
                varietyId,
                expDeliveryIn,
                packagingType,
                fullfillmentType,
                qualityChecks,
                placedBy: {
                    id: placedById,
                    name: placedByName,
                    mobileNumber: placedByMobileNumber
                },
                licenceNumber,
                buyerFacilityGst,
                cashDiscountPercent,
                bagDeductionPercent,
                soRepaymentTimeline,
                isInvoiceOnGross,
                invoiceSharing
            }
        );
        res.status(orderResult.status).json(orderResult.data);

    } catch (err) {
        app_log_service({ type: type.error, err });
        return res.status(HTTP_status_codes.badRequest).json({
            message: 'unable to create new order',
            error: err.message
        });
    }
};

module.exports = add_sales_order_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/buyer/controllers/fetch_mandi_and_invoicing_doc_controller.js
const error_log = require('../../../../middelware/error_log');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const fetch_mandi_and_invoicing_doc_service = require('../services/fetch_mandi_and_invoicing_doc_service');
module.exports = async (req, res) => {

    try {
        const { po_id, so_id } = req.query;
        if (!po_id || !so_id) {
            throw new ValidationError('po id and so id are mandatory query params');
        }
        const mandi_and_invoicing_docs = await fetch_mandi_and_invoicing_doc_service(po_id, so_id);
        const doc_response = create_api_response(true, 'successfull', mandi_and_invoicing_docs);
        return res.status(http_status_code_enum.ok).json(doc_response);
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/buyer/controllers/modify_buyer_permission_controller.js
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const http_status_code = require("../../../../enums/global/http_status_codes");
const modify_buyer_permission_service = require("../services/modify_buyer_permission_service");

module.exports = async (req, res) => {
    try {
        const action_enum = +req.body.action_enum;
        const action_permission = req.body.action_permission ?? null;
        const buyer_id = +req.body.buyer_id;
        if (!buyer_id)
            return res.status(http_status_code.bad_request).json(create_api_response(false, "buyer_id is mandatory"));
        if (!action_enum)
            return res.status(http_status_code.bad_request).json(create_api_response(false, "action_enum is mandatory"));
        if (action_permission == null)
            return res.status(http_status_code.bad_request).json(create_api_response(false, "action_permission is mandatory"));
        const buyer_permissions = await modify_buyer_permission_service(buyer_id, action_enum, action_permission);
        return res.status(http_status_code.ok).json(create_api_response(true, "success"));
    }
    catch (err) {
        return res.status(http_status_code.bad_request).json(create_api_response(false, err.message, null));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/buyer/controllers/get_buyer_by_id_controller.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const appLogService = require("../../../../common_services/market_linkage/logging/app_log_service");
const get_buyer_by_id_service = require("../services/get_buyer_by_id_service");

const get_buyer_by_id_controller = async (req, res) => {
  try {
    let buyer_id;

    if (!req.params.buyerId)
        return res.status(HTTP_status_codes.badRequest).json({
            message: "buyer id missing",
        });

    buyer_id = parseInt(req.params.buyerId);

    const buyerResult = await get_buyer_by_id_service({buyer_id});
    return res.status(buyerResult.status).json(buyerResult.data);

  } catch (e) {
    appLogService({type:type.error,err:e});
    return res.status(HTTP_status_codes.internalServerError).json({
      message: e.message,
    });
  }
};

module.exports = get_buyer_by_id_controller;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/buyer/controllers/get_so_for_mapping_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const { get_so_for_mapping_service } = require("../services/get_so_for_mapping_service");

module.exports = async (req, res) => {
    try {
        const { po_id } = req.params;
        const allSOForMappingResult = await get_so_for_mapping_service(po_id);
        return res.status(allSOForMappingResult.status).json(allSOForMappingResult.data);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({ message: err.message });
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/buyer/services/add_buyer_service.js
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const { categories } = require('../../../../enums/market_linkage/enums/categories');
const { generate_unique_id } = require('../../../../common_services/unique_id_generation/generate_unique_id');
const buyer_detail = require('../../../../database/models_v2/buyer/buyer_detail');
const error_log = require('../../../../middelware/error_log');
const buyer_working_crop = require('../../../../database/models_v2/buyer/buyer_working_crop');
const buyer_document = require('../../../../database/models_v2/buyer/buyer_document');
const user_profile = require('../../../../database/models/user_profile');
const master_state = require('../../../../database/models_v2/location/master_state');
const master_district = require('../../../../database/models_v2/location/master_district');
const crop_detail = require('../../../../database/models_v2/crop/crop_detail');
const { BUYER_STATUS, BUYER_LOG_ACTION, docType } = require('../../../../enums/market_linkage/enums/buyerEnum');
const is_user_allowed_to_take_action = require('../utils/is_user_allowed_to_take_action');
const buyer_logs = require('../../../../database/models_v2/buyer/buyer_logs');
const user_role = require('../../../../enums/user_profile/user_role');
const { is_valid_pan } = require('../utils/is_valid_pan');
const { is_valid_gst } = require('../utils/is_valid_gst');
const Op = require('sequelize').Op;
const { ValidationError } = require('../../../../utilities/error/custom_error');

const add_buyer_working_crops = async (working_crops, buyer_id) => {
    const crop_details = await crop_detail.findAll({
        where: {
            name: { [Op.in]: working_crops },
            is_active: 1
        }
    }).map((crop) => {
        return {
            id: crop.id,
            name: crop.name
        }
    });
    const crop_data = working_crops.map((crop) => {
        return {
            crop_name: crop || null,
            crop_id: crop_details.find(o => o.name === crop)?.id || null,
            buyer_id: buyer_id || null,
            is_active: 1
        }
    })
    await buyer_working_crop.bulkCreate(crop_data);
    return working_crops;
}

const add_buyer_documents = async (docs, buyer_id) => {
    const buyer_doc_data = docs.map((doc) => {
        return {
            type: doc.type || null,
            value: doc.value || null,
            front_image: doc.frontImage || null,
            back_image: doc.backImage || null,
            buyer_id: buyer_id || null,
            is_active: 1
        }
    })
    const added_docs = await buyer_document.bulkCreate(buyer_doc_data);
    const response = added_docs.map((doc) => {
        return {
            status: doc.status,
            _id: doc.id,
            type: doc.type,
            value: doc.value,
            frontImage: doc.front_image,
            backImage: doc.back_image
        }
    })
    return response;
}

const remove_buyer_crops = async (buyer_id) => {

    await buyer_working_crop.destroy({
        where: {
            buyer_id
        }
    })

}

const update_buyer_details = async ({ buyer_id, buyerData, state_data, district_data, user_role_id, user_profile_id }) => {

    try {

        const eligibility_check_object = {
            buyerId: buyer_id,
            user_role_id_for_next_action: user_role_id,
            action: BUYER_LOG_ACTION.EDIT
        }

        const is_user_allowed_to_make_action = await is_user_allowed_to_take_action(eligibility_check_object)

        if (!is_user_allowed_to_make_action) {
            return {
                status: HTTP_status_codes.badRequest,
                data: {
                    message: 'User not allowed to perform this action',
                    error: 'unauthorised'
                }
            };
        }

        const buyer_details = await buyer_detail.findByPk(buyer_id)

        if (!buyer_details) {
            return {
                status: HTTP_status_codes.badRequest,
                data: {
                    message: 'Invalid buyer_id',
                    error: ''
                }
            };
        }

        const updatObject = {}

        if (buyerData.docs) {
            for (let i = 0; i < buyerData.docs.length; i++) {

                if (buyerData.docs[i].type === docType.gst) {
                    const regex = /^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}Z[0-9A-Z]{1}$/

                    if (!regex.test(buyerData.docs[i].value)) { throw new ValidationError('Invalid GST Number') }

                    const gst_exist = await buyer_document.findOne({
                        where: {
                            value: buyerData.docs[i].value,
                            is_active: 1
                        }
                    })

                    if (gst_exist && gst_exist.dataValues.buyer_id !== buyer_id) { throw new ValidationError('Duplicate GST Number') }
                } else if (buyerData.docs[i].type === docType.pancard) {

                    if (!is_valid_pan(buyerData.docs[i].value)) { throw new ValidationError('Invalid Pan Number') }
                }

                const buyer_doc = await buyer_document.findOne({
                    where: {
                        buyer_id,
                        is_active: 1,
                        type: buyerData.docs[i].type
                    }
                })

                if (!buyer_doc) {

                    if (buyerData.docs[i].type === docType.gst) { updatObject.gst_treatment = 'business_gst' }

                    await buyer_document.create({
                        buyer_id,
                        is_active: 1,
                        type: buyerData.docs[i].type,
                        value: buyerData.docs[i].value,
                        front_image: buyerData.docs[i].frontImage,
                        back_image: buyerData.docs[i].backImage
                    })
                } else {
                    await buyer_doc.update({
                        value: buyerData.docs[i].value,
                        front_image: buyerData.docs[i].frontImage,
                        back_image: buyerData.docs[i].backImage
                    })
                }
            }
        }

        if (buyerData.gst_treatment) { updatObject.gst_treatment = buyerData.gst_treatment }

        if (buyerData.email) { updatObject.email = buyerData.email }

        if (buyerData.mobileNumber) { updatObject.mobile_number = buyerData.mobileNumber }

        if (buyerData.creditLimit) { updatObject.credit_limit = buyerData.creditLimit }

        if (buyerData.statusRemark) { updatObject.status_remark = buyerData.statusRemark }

        if (buyerData.traderName) { updatObject.trader_name = buyerData.traderName }

        if (buyerData.legalName) { updatObject.legal_name = buyerData.legalName }

        if (buyerData.address) { updatObject.address = buyerData.address }

        if (buyerData.country) { updatObject.country = buyerData.country }

        if (buyerData.state) { updatObject.state_name = buyerData.state }

        if (state_data?.id) { updatObject.state_id = state_data?.id }

        if (buyerData.district) { updatObject.district_name = buyerData.district }

        if (district_data?.id) { updatObject.district_id = district_data?.id }

        if (buyerData.pincode) { updatObject.pincode = buyerData.pincode }

        if (buyerData.annualTurnover) { updatObject.annual_turnover = buyerData.annualTurnover }

        if (buyerData.type) { updatObject.type = buyerData.type }

        if (buyerData.product) { updatObject.product = buyerData.product }

        if (buyerData.repaymentTimeline) { updatObject.repayment_timeline = buyerData.repaymentTimeline }

        if (buyerData.recommended_credit_limit) { updatObject.recommended_credit_limit = buyerData.recommended_credit_limit }

        if (user_role_id === user_role.SALES_ASSOCIATE || user_role_id === user_role.REGIONAL_MANAGER_SALES) { updatObject.status = BUYER_STATUS.CREATED }

        const new_updated_details = await buyer_details.update(updatObject)

        const buyer_log_obj = {
            user_id: user_profile_id,
            buyer_id,
            action_by_user: BUYER_LOG_ACTION.EDIT
        }

        await buyer_logs.create(buyer_log_obj)

        let buyer_working_crops = []

        if (buyerData.workingCrops && buyerData.workingCrops.length > 0) {
            await remove_buyer_crops(buyer_id)

            buyer_working_crops = await add_buyer_working_crops(buyerData.workingCrops, buyer_id);
        }

        const updated_details = new_updated_details && new_updated_details.dataValues ? new_updated_details.dataValues : {}

        const response_data = {}

        if (buyerData.docs) { response_data.docs = buyerData.docs }

        if (updated_details.gst_treatment) { response_data.gst_treatment = updated_details.gst_treatment }

        if (updated_details.recommended_credit_limit) { response_data.recommended_credit_limit = updated_details.recommended_credit_limit }

        if (updated_details.status) { response_data.status = updated_details.status }

        if (updated_details.repayment_timeline) { response_data.repaymentTimeline = updated_details.repayment_timeline }

        if (updated_details.product) { response_data.product = updated_details.product }

        if (updated_details.type) { response_data.type = updated_details.type }

        if (updated_details.annual_turnover) { response_data.annualTurnover = updated_details.annual_turnover }

        if (updated_details.pincode) { response_data.pincode = updated_details.pincode }

        if (updated_details.district_name) { response_data.district = updated_details.district_name }

        if (updated_details.state_name) { response_data.state = updated_details.state_name }

        if (updated_details.address) { response_data.address = updated_details.address }

        if (updated_details.legal_name) { response_data.legalName = updated_details.legal_name }

        if (updated_details.credit_limit) { response_data.creditLimit = updated_details.credit_limit }

        if (updated_details.country) { response_data.country = updated_details.country }

        if (updated_details.email) { response_data.email = updated_details.email }

        if (updated_details.mobile_number) { response_data.mobileNumber = updated_details.mobile_number }

        if (updated_details.gst_status) { response_data.gstStatus = updated_details.gst_status }

        if (updated_details.trader_name) { response_data.traderName = updated_details.trader_name }

        if (buyer_working_crops.length > 0) { response_data.workingCrops = buyer_working_crops }

        return { status: HTTP_status_codes.ok, data: response_data };

    } catch (error) {
        error_log(error);
    }

}

module.exports = async (buyerData) => {
    try {

        const mobile_exist = await buyer_detail.findOne({
            where: {
                mobile_number: buyerData.mobileNumber || null,
                is_active: true
            }
        });

        if (mobile_exist && (buyerData.buyer_id && buyerData.buyer_id !== mobile_exist.dataValues.id)) {
            throw new ValidationError('mobile number already exist')
        } else if (mobile_exist && !buyerData.buyer_id) {
            throw new ValidationError('mobile number already exist')
        }

        let isGstExist = false
        let pan_no = ''
        let gst_no = ''

        for (let i = 0; i < buyerData.docs.length; i++) {
            const doc = buyerData.docs[i]
            if (doc.type === docType.pancard) { pan_no = doc.value }
            if (doc.type === docType.gst && buyerData.gst_treatment === 'business_gst') { gst_no = doc.value }
        }

        if (!is_valid_pan(pan_no)) { throw new ValidationError('Invalid PAN Number') }

        if (buyerData.gst_treatment === 'business_gst' && !is_valid_gst(gst_no, pan_no)) { throw new ValidationError('Invalid GST Number') }

        if (buyerData.gst_treatment === 'business_gst' && buyerData.docs) {
            for (let i = 0; i < buyerData.docs.length; i++) {
                const doc = buyerData.docs[i]
                const existingGstPan = await buyer_document.findOne({
                    where: {
                        is_active: 1,
                        value: doc.value,
                        type: doc.type
                    }
                })
                if (existingGstPan && existingGstPan.dataValues.type && existingGstPan.dataValues.type === docType.gst && buyerData.buyer_id !== existingGstPan.dataValues.buyer_id) { isGstExist = true }
            }
        }

        if (isGstExist) { throw new ValidationError('Duplicate GST Number') }

        const uniqueIdResult = await generate_unique_id({
            state: buyerData.state,
            district: buyerData.district,
            category: categories.Buyer
        })

        if (uniqueIdResult.status === HTTP_status_codes.internalServerError) {
            return uniqueIdResult;
        }

        const onboarded_by_data = await user_profile.findOne({
            where: {
                mobile_number: buyerData.onboardedBy?.mobileNumber || null,
                is_active: 1
            }
        });
        const state_data = await master_state.findOne({
            where: {
                name: buyerData.state || null,
                is_active: 1
            }
        });
        const district_data = await master_district.findOne({
            where: {
                name: buyerData.district || null,
                master_state_id: state_data?.id || null,
                is_active: 1
            }
        });

        if (buyerData.buyer_id) {
            const buyer_id = buyerData.buyer_id
            const user_role_id = buyerData.user_role_id
            const user_profile_id = buyerData.user_profile_id
            const response = await update_buyer_details({ buyer_id, buyerData, state_data, district_data, user_role_id, user_profile_id })
            return response
        }

        const addedBuyer = await buyer_detail.build({
            farmart_id: uniqueIdResult.data || null,
            email: buyerData.email || null,
            mobile_number: buyerData.mobileNumber || null,
            credit_limit: buyerData.creditLimit || 0,
            gst_status: buyerData.gstStatus || null,
            status: buyerData.status || BUYER_STATUS.CREATED,
            status_remark: buyerData.statusRemark || null,
            trader_name: buyerData.traderName || null,
            legal_name: buyerData.legalName || null,
            address: buyerData.address || null,
            country: buyerData.country || 'india',
            state_name: buyerData.state || null,
            state_id: state_data?.id || null,
            district_name: buyerData.district || null,
            district_id: district_data?.id || null,
            pincode: buyerData.pincode || null,
            annual_turnover: buyerData.annualTurnover || null,
            type: buyerData.type || null,
            product: buyerData.product || null,
            repayment_timeline: buyerData.repaymentTimeline || null,
            onboarded_by: onboarded_by_data?.id || null,
            is_active: 1,
            recommended_credit_limit: buyerData.recommended_credit_limit || 0,
            gst_treatment: buyerData.gst_treatment
        }).save();

        const buyer_working_crops = await add_buyer_working_crops(buyerData.workingCrops, addedBuyer.id);
        const buyer_docs = await add_buyer_documents(buyerData.docs, addedBuyer.id);

        const response_data = {
            creditLimit: addedBuyer.credit_limit,
            status: addedBuyer.status,
            country: addedBuyer.country,
            workingCrops: buyer_working_crops,
            orders: [],
            _id: addedBuyer.id,
            email: addedBuyer.email,
            mobileNumber: addedBuyer.mobile_number,
            docs: buyer_docs,
            gstStatus: addedBuyer.gst_status,
            traderName: addedBuyer.trader_name,
            legalName: addedBuyer.legal_name,
            address: addedBuyer.address,
            state: addedBuyer.state_name,
            district: addedBuyer.district_name,
            pincode: addedBuyer.pincode,
            annualTurnover: addedBuyer.annual_turnover,
            type: addedBuyer.type,
            product: addedBuyer.product,
            repaymentTimeline: addedBuyer.repayment_timeline,
            onboardedBy: {
                id: onboarded_by_data?.id,
                name: onboarded_by_data?.name,
                mobileNumber: onboarded_by_data?.mobile_number
            },
            farmartId: addedBuyer.farmart_id,
            createdAt: addedBuyer.createdAt,
            updatedAt: addedBuyer.updatedAt,
            recommended_credit_limit: addedBuyer.recommended_credit_limit,
            gst_treatment: addedBuyer.gst_treatment
        }

        return { status: HTTP_status_codes.ok, data: response_data };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: err.message,
                error: ''
            }
        };
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/buyer/services/get_buyer_by_id_service.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const buyer_detail = require("../../../../database/models_v2/buyer/buyer_detail");
const buyer_working_crop = require("../../../../database/models_v2/buyer/buyer_working_crop");
const buyer_document = require("../../../../database/models_v2/buyer/buyer_document");
const user_profile = require("../../../../database/models/user_profile");
const error_log = require("../../../../middelware/error_log");
const { BUYER_LOG_ACTION, BUYER_STATUS } = require("../../../../enums/market_linkage/enums/buyerEnum");
const buyer_logs = require("../../../../database/models_v2/buyer/buyer_logs");

module.exports = async function ({buyer_id}) {
  try {

    const buyer_data = await buyer_detail.findByPk(buyer_id,
            {
                include: [
                    {
                      model: buyer_working_crop,
                      as: "working_crops"
                    },
                    {
                      model: buyer_document,
                      as: "docs"
                    },
                    {
                      model: user_profile,
                      as: "onboarded_by_id"
                    }
                ],
                attributes: [
                                "id",
                                "legal_name",
                                "trader_name",
                                "email",
                                "mobile_number",
                                "address",
                                "district_name",
                                "state_name",
                                "pincode",
                                "annual_turnover",
                                "recommended_credit_limit",
                                "status",
                                "credit_limit",
                                "repayment_timeline",
                                "product",
                                "type",
                                "gst_status",
                                "gst_treatment"
                            ]
            }
        );
    
    if(!buyer_data)
      return {
        status: HTTP_status_codes.badRequest,
        data: {
          message: "Incorrect buyer id",
          error: err.message,
        },
      };

    const latestBuyerLog = await buyer_logs.findAll({
      where: {
          buyer_id: buyer_id,
          action_by_user: BUYER_LOG_ACTION.BUYER_STATUS_CHANGE,
          action_description: BUYER_STATUS.APPROVED
      },
      attributes: ["user_id"],
      limit: 1,
      order: [['createdAt','DESC']]
    })

    const approvedBy = latestBuyerLog && latestBuyerLog.length > 0 ? latestBuyerLog[0].dataValues.user_id : ""

    const buyer_response = {
        _id: buyer_data.id,
        email: buyer_data.email,
        mobileNumber: buyer_data.mobile_number,
        creditLimit: buyer_data.credit_limit,
        traderName: buyer_data.trader_name,
        legalName: buyer_data.legal_name,
        address: buyer_data.address,
        gstStatus: buyer_data.gst_status,
        state: buyer_data.state_name,
        district: buyer_data.district_name,
        pincode: buyer_data.pincode,
        annualTurnover: buyer_data.annual_turnover,
        workingCrops: buyer_data.working_crops?.map((crop) => crop.crop_name),
        type: buyer_data.type,
        product: buyer_data.product,
        repaymentTimeline: buyer_data.repayment_timeline,
        onboardedBy: {
          id: buyer_data.onboarded_by_id?.id,
          name: buyer_data.onboarded_by_id?.name,
          mobileNumber: buyer_data.onboarded_by_id?.mobile_number
        },
        approvedBy: approvedBy,
        docs: buyer_data.docs?.map((doc) => {
          return {
            status: doc.status,
            _id: doc.id,
            type: doc.type,
            value: doc.value,
            frontImage: doc.front_image,
            backImage: doc.back_image
          }
        }),
        status: buyer_data.status,
        recommended_credit_limit: buyer_data.recommended_credit_limit || 0,
        gst_treatment: buyer_data.gst_treatment
    }

    return { status: HTTP_status_codes.ok, data: buyer_response };
  } catch (err) {
    error_log(err);
    return {
      status: HTTP_status_codes.internalServerError,
      data: {
        message: "Internal Server Error",
        error: err.message,
      },
    };
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/buyer/services/detach_so_from_po_service.js
const purchase_crop_orders_model = require("../../../../database/models_v2/procurement_order/purchase_crop_orders");
const po_so_invoice_model = require("../../../../database/models_v2/po_so_invoicing/po_so_invoice");
const po_so_invoice_doc_model = require("../../../../database/models_v2/po_so_invoicing/po_so_invoice_doc");
const po_so_invoice_status_log_model = require("../../../../database/models_v2/po_so_invoicing/po_so_invoice_status_log");
const mandi_taxation_model = require("../../../../database/models_v2/mandi_taxation/mandi_taxation");
const { update_so_remaining_qty } = require("../../../../common_services/market_linkage/update_so_remaining_qty");
const { POStatus }=require("../../../../enums/market_linkage/enums/po")
const sequelize=require('../../../../database/db_connection_initializer');

const detach_so_from_po = async ({po_id, so_id}) => {
    return new Promise(async (resolve, reject)=>{
        try {
            const po_data = await purchase_crop_orders_model.findOne({
                where:{
                    id: po_id,
                    is_active: 1
                }
            });
            if(po_data && po_data.status<POStatus.ARRIVED_AT_BUYER){
                po_data.buyer_order_id = null;
                const po_so_invoice= await po_so_invoice_model.findOne({
                    where : {
                        buyer_order_detail_id:so_id,
                        purchase_crop_order_id:po_id,
                        is_active:true
                    }
                });
                await sequelize.transaction(async t=>{
                    if(po_so_invoice){
                        await po_so_invoice_doc_model.update({is_active:false},{
                            where:{
                                po_so_invoice_id:po_so_invoice.id,
                                is_active:true
                            },
                            transaction:t
                        });
                        await po_so_invoice_status_log_model.update({is_active:false},{
                            where:{
                                po_so_invoice_id:po_so_invoice.id,
                                is_active:true
                            },
                            transaction:t
                        })
                        po_so_invoice.is_active=false;
                        await po_so_invoice.save({transaction:t});
                    }
                    await mandi_taxation_model.update({is_active:false},{
                        where : {
                            buyer_order_detail_id:so_id,
                            purchase_crop_order_id:po_id,
                            is_active:true
                        },
                        transaction:t
                    })
                    await po_data.save({transaction:t});
                })
                await update_so_remaining_qty(so_id);    
            }
            else{
                throw Error('Can not detach SO from PO');
            }
            
            
            
            resolve();
        } catch (err) {
            return reject({message:err.message});
        }
    })
};

module.exports = detach_so_from_po



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/buyer/services/get_buyer_service.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const buyer_detail = require("../../../../database/models_v2/buyer/buyer_detail");
const buyer_working_crop = require("../../../../database/models_v2/buyer/buyer_working_crop");
const buyer_document = require("../../../../database/models_v2/buyer/buyer_document");
const buyer_order_detail = require("../../../../database/models_v2/buyer_order/buyer_order_detail");
const user_profile = require("../../../../database/models/user_profile");
const error_log = require("../../../../middelware/error_log");
const buyer_permission_enum = require("../../../../enums/market_linkage/enums/buyerEnum").PERMISSIONS;

module.exports = async function (buyer_status, buyer_id) {
  try {
    const filter = {};
    if (buyer_status)
      filter.status = buyer_status;
    if (buyer_id) {
      filter.id = buyer_id
    }

    const buyer_data = await buyer_detail.findAll({
      where: filter,
      include: [
        {
          model: buyer_working_crop,
          as: "working_crops"
        },
        {
          model: buyer_document,
          as: "docs"
        },
        {
          model: buyer_order_detail
        },
        {
          model: user_profile,
          as: "onboarded_by_id"
        }
      ],
      order: [['updated_at', 'DESC']]
    });

    const buyer_response = buyer_data.map((buyer) => {
      const permissions = {};
      Object.keys(buyer_permission_enum).forEach(ele => { permissions[buyer_permission_enum[ele]] = true })
      const restricted_permissions = buyer?.restricted_permissions?.split(",") || "";
      restricted_permissions.forEach((ele) => {
        if (Object.values(buyer_permission_enum).includes(+ele))
          permissions[ele] = false
      });
      return {
        permissions,
        _id: buyer.id,
        farmartId: buyer.farmart_id,
        email: buyer.email,
        mobileNumber: buyer.mobile_number,
        creditLimit: buyer.credit_limit,
        gstStatus: buyer.gst_status,
        status: buyer.status,
        statusRemark: buyer.status_remark,
        traderName: buyer.trader_name,
        legalName: buyer.legal_name,
        address: buyer.address,
        country: buyer.country,
        state: buyer.state_name,
        district: buyer.district_name,
        pincode: buyer.pincode,
        annualTurnover: buyer.annual_turnover,
        workingCrops: buyer.working_crops?.map((crop) => crop.crop_name),
        type: buyer.type,
        product: buyer.product,
        repaymentTimeline: buyer.repayment_timeline,
        onboardedBy: {
          id: buyer.onboarded_by_id?.id,
          name: buyer.onboarded_by_id?.name,
          mobileNumber: buyer.onboarded_by_id?.mobile_number
        },
        docs: buyer.docs?.map((doc) => {
          return {
            status: doc.status,
            _id: doc.id,
            type: doc.type,
            value: doc.value,
            frontImage: doc.front_image,
            backImage: doc.back_image
          }
        }),
        orders: buyer.buyer_order_details?.map((order) => order.id),
        createdAt: buyer.createdAt,
        updatedAt: buyer.updatedAt,
        recommendedCreditLimit: buyer.recommended_credit_limit,
        gst_treatment: buyer.gst_treatment,
        zohoId: buyer.zoho_id
      }
    })

    return { status: HTTP_status_codes.ok, data: buyer_response };
  } catch (err) {
    error_log(err);
    return {
      status: HTTP_status_codes.internalServerError,
      data: {
        message: "Something bad happened",
        error: err.message,
      },
    };
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/buyer/services/update_buyer_status_service.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const buyer_detail = require("../../../../database/models_v2/buyer/buyer_detail");
const error_log = require("../../../../middelware/error_log");
const { BUYER_LOG_ACTION } = require("../../../../enums/market_linkage/enums/buyerEnum");
const is_user_allowed_to_take_action = require("../utils/is_user_allowed_to_take_action");
const buyer_logs = require("../../../../database/models_v2/buyer/buyer_logs");

module.exports = async function ({buyer_id,buyer_status,gst_status,user_role_id,user_profile_id,recommended_credit_limit}) {
  try {

    if(buyer_status){

      const eligibility_check_object = {
        buyerId: buyer_id,
        user_role_id_for_next_action: user_role_id,
        action: BUYER_LOG_ACTION.BUYER_STATUS_CHANGE
      }

      const is_user_allowed_to_make_action = await is_user_allowed_to_take_action(eligibility_check_object)
      
      if(!is_user_allowed_to_make_action)
        return {
          status: HTTP_status_codes.badRequest,
          data: {
            message: "User not allowed to perform this action",
            error: "unauthorised"
          },
        };
  
    }

    const buyerUpdateObject = {}

    if(buyer_status){
      buyerUpdateObject.status = buyer_status
      const buyer_log_obj = {
        user_id: user_profile_id,
        buyer_id: buyer_id,
        action_by_user: BUYER_LOG_ACTION.BUYER_STATUS_CHANGE,
        action_description: buyer_status
      }
      await buyer_logs.create(buyer_log_obj)
    }
    
    if(gst_status){
      buyerUpdateObject.gst_status = gst_status
    }

    if(recommended_credit_limit && recommended_credit_limit > -1)
      buyerUpdateObject.recommended_credit_limit = recommended_credit_limit 
      
    await buyer_detail.update(buyerUpdateObject,{
      where: {
        id: buyer_id
      }
    })

    return { status: HTTP_status_codes.ok, data: {message: "Updated successfully"} };
  } catch (err) {
    error_log(err);
    return {
      status: HTTP_status_codes.internalServerError,
      data: {
        message: "Something bad happened",
        error: err.message,
      },
    };
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/buyer/services/get_so_for_mapping_service.js
const buyerOrderModel = require("../../../../database/mongoose/market_linkage_db/buyerOrder.model");
const purchaseOrderModel = require("../../../../database/mongoose/market_linkage_db/purchaseOrder.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");
const { orderStatus } = require("../../../../enums/market_linkage/enums/buyerEnum");
const get_sales_order_service = require("../../sales/services/get_sales_order_service");
const buyer_order_detail = require("../../../../database/models_v2/buyer_order/buyer_order_detail");
const buyer_order_crop_info = require("../../../../database/models_v2/buyer_order/buyer_order_crop_info");
const Op = require('sequelize').Op;
const sequelize = require('sequelize');
const crop_detail = require("../../../../database/models_v2/crop/crop_detail");
const crop_varieties_detail = require("../../../../database/models_v2/crop/crop_varieties_detail");
const cropModel = require("../../../../database/mongoose/market_linkage_db/crop.model");
const cropVarietyModel = require("../../../../database/mongoose/market_linkage_db/cropVariety.model");
const buyer_order_delivery_info = require("../../../../database/models_v2/buyer_order/buyer_order_delivery_info");
const buyer_order_quality_check = require("../../../../database/models_v2/buyer_order/buyer_order_quality_check");
const user_profile = require("../../../../database/models/user_profile");
const purchase_crop_orders = require("../../../../database/models_v2/procurement_order/purchase_crop_orders");
const qc_param_types = require("../../../../database/models_v2/procurement_order/qc_param_types");
const { get_po_quantity_for_mapping } = require("../../../v2/sales_order/services/fetch_so_for_mapping_service");

const get_so_for_mapping_service = async (po_id) => {
    try {
        const po_data = await purchase_crop_orders.findOne({
            where:{
                id: po_id,
                is_active: 1
            }
        });

        if (!po_data) {
            return {
                status: HTTP_status_codes.badRequest,
                data: {
                    message: "invalid po id"
                }
            }
        }

        if (po_data.buyer_order_id) {
            const response = await get_sales_order_service(null, po_data.buyer_order_id)
            return {
                status: HTTP_status_codes.ok,
                data: response.data
            }
        }

        const crop = await crop_detail.findOne({
            where: {
                id: po_data.crop_id || null,
                is_active: 1,
            }
        });
        // const variety = await crop_varieties_detail.findOne({
        //     where: {
        //         crop_id: crop?.id || null,
        //         id: po_data.crop_variety_id || null,
        //         is_active: 1,
        //     }
        // });

        const po_quantity = await get_po_quantity_for_mapping(po_data.quantity);

        const orderData = await buyer_order_detail.findAll({
            include: [
                {
                    model: buyer_order_crop_info,
                    as: "crop_info",
                    where: {
                        crop_id: crop?.id || null,
                        //variety_id: variety?.id || null
                    }
                },
                {
                    model: buyer_order_delivery_info,
                    as: "delivery_info",
                    required: false
                },
                {
                    model: buyer_order_quality_check,
                    include:[
                        {
                            model: qc_param_types
                        }
                    ],
                    as: "quality_checks",
                    required: false
                },
                {
                    model: user_profile,
                    as: "placed_by_user",
                    required: false
                }
            ],
            where: {
                remaining_quantity: { [Op.gte]: po_quantity },
                status: orderStatus.APPROVED_BY_CFO
            },
            order: [
                ['createdAt', 'ASC'],
                [sequelize.literal('(buyer_offering_price_quintal * order_quantity_in_ton)'), 'DESC'],
                ['remaining_quantity', 'ASC']
            ]
        });


        const buyer_orders = orderData.map((order) => {
            const expDeliveryInDate = new Date(order.createdAt);
            expDeliveryInDate.setDate(
                expDeliveryInDate.getDate() + order.exp_delivery_in
            );
            return {
                status: order.status,
                _id: order.id,
                buyerId: order.buyer_id,
                deliveryInfo: order.delivery_info ? {
                    address: order.delivery_info.address,
                    district: order.delivery_info.district_name,
                    pincode: order.delivery_info.pincode,
                    state: order.delivery_info.state_name
                } : null,
                orderQuantityInTon: order.order_quantity_in_ton,
                buyerOfferingPriceQuintal: order.buyer_offering_price_quintal,
                expDeliveryIn: expDeliveryInDate.toISOString(),
                packagingType: order.packaging_type,
                fullfillmentType: order.fullfillment_type,
                qualityChecks: order.quality_checks?.map((qc) => {
                    return {
                        id: qc.id,
                        qc_type_id: qc.qc_type_id,
                        name: qc.qc_param_type?.name,
                        requiredValue: qc.required_value
                    }
                }),
                placedBy: order.placed_by_user ? {
                    id: order.placed_by_user.id,
                    name: order.placed_by_user.name,
                    mobileNumber: order.placed_by_user.mobile_number
                } : null,
                licenceNumber: order.licence_number,
                buyerFacilityGst: order.buyer_facility_gst,
                cashDiscountPercent: order.cash_discount_percent,
                bagDeductionPercent: order.bag_deduction_percent,
                soRepaymentTimeline: order.so_repayment_timeline,
                isInvoiceOnGross: order.is_invoice_on_gross,
                invoiceSharing: order.invoice_sharing,
                farmartId: order.farmart_id,
                remainingQuantity: order.remaining_quantity,
                buyerName: order.buyer_name,
                cropInfo: order.crop_info ? {
                    cropId: order.crop_info.crop_id,
                    cropName: order.crop_info.crop_name,
                    varietyId: order.crop_info.variety_id,
                    varietyName: order.crop_info.variety_name
                } : null,
                createdAt: order.createdAt,
                updatedAt: order.updatedAt
            }
        })
        return {
            status: HTTP_status_codes.ok,
            data: buyer_orders
        };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

module.exports = {
    get_so_for_mapping_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/buyer/services/dashboard_data_service.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const buyer_detail = require("../../../../database/models_v2/buyer/buyer_detail");
const user_profile = require("../../../../database/models/user_profile");
const buyer_order_detail = require("../../../../database/models_v2/buyer_order/buyer_order_detail");
const error_log = require("../../../../middelware/error_log");
const sequelize = require("sequelize");
const { BUYER_STATUS, orderStatus } = require("../../../../enums/market_linkage/enums/buyerEnum");
const { Op } = require("sequelize");
const user_role = require("../../../../enums/user_profile/user_role");

const get_user_id_list = async function({user_filter}){

    try {
        const user_Ids = await user_profile.findAll({
            where: {
                reports_to: {
                    [Op.in]: user_filter
                },
                user_role_id: {
                    [Op.in] : [user_role.SALES_VP, user_role.SALES_ASSOCIATE, user_role.STATE_HEAD_SALES, user_role.REGIONAL_MANAGER_SALES]
                }
            },
            attributes: ["id"]
        })

        return user_Ids

    } catch (error) {
        error_log(error);
    }

}

module.exports = async function ({user_profile_id}) {
  try {

    let user_filter = [user_profile_id]

    const user_Ids_level_one = await get_user_id_list({user_filter})

    if(user_Ids_level_one && user_Ids_level_one.length > 0){
        user_Ids_level_one.forEach((user) => {
            user_filter.push(user.dataValues.id)
        })
    }

    const user_Ids_level_two = await get_user_id_list({user_filter})

    if(user_Ids_level_two && user_Ids_level_two.length > 0){
        user_Ids_level_two.forEach((user) => {
            user_filter.push(user.dataValues.id)
        })
    }

    const buyer_data = await buyer_detail.findAll({
        where: {
            onboarded_by: {
                [Op.in]: user_filter
            },
            is_active: 1
        },
        attributes: ["status",[sequelize.fn('COUNT', sequelize.col('status')), 'statusCount']],
        group: ["status"]
    })

    const buyer_order_data = await buyer_order_detail.findAll({
        where: {
            is_active: 1
        },
        attributes: ["status",[sequelize.fn('COUNT', sequelize.col('status')), 'statusCount']],
        group: ["status"]
    })
    let dashboard_data = {
        pending_buyers_count: 0,
        rejected_buyers_count: 0,
        pending_SO_count: 0,
        rejected_SO_count: 0
    }

    let pending_buyer_status_set = new Set([BUYER_STATUS.CREATED, BUYER_STATUS.PENDING])
    let rejected_buyer_status_set = new Set([BUYER_STATUS.REJECTED_INSUFFICIENT_DOC, BUYER_STATUS.REJECTED_POOR_REPAYMENT_HISTORY])

    let pending_SO_status_set = new Set([orderStatus.SO_CREATED])
    let rejected_SO_status_set = new Set([orderStatus.REJECTED_BAD_CREDIT, orderStatus.REJECTED_BY_CFO, orderStatus.REJECTED_CREDIT_OVERDUE, orderStatus.REJECTED_NO_CREDIT_LIMIT, orderStatus.REJECTED_PRICE_PARITY])

    

    buyer_data.forEach((data) => {

        if(data && data.dataValues.status && pending_buyer_status_set.has(data.dataValues.status))
            dashboard_data.pending_buyers_count += data.dataValues.statusCount

        else if(data && data.dataValues.status && rejected_buyer_status_set.has(data.dataValues.status))
            dashboard_data.rejected_buyers_count += data.dataValues.statusCount

    })

    buyer_order_data.forEach((data) => {

        if(data && data.dataValues.status && pending_SO_status_set.has(data.dataValues.status))
            dashboard_data.pending_SO_count += data.dataValues.statusCount

        else if(data && data.dataValues.status && rejected_SO_status_set.has(data.dataValues.status))
            dashboard_data.rejected_SO_count += data.dataValues.statusCount

    })


    return { status: HTTP_status_codes.ok, data: dashboard_data};
  } catch (err) {
    error_log(err);
    return {
      status: HTTP_status_codes.internalServerError,
      data: {
        message: "Internal Server Error",
        error: err.message,
      },
    };
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/buyer/services/fetch_mandi_and_invoicing_doc_service.js
const error_log = require('../../../../middelware/error_log');
const mandi_taxation_model = require('../../../../database/models_v2/mandi_taxation/mandi_taxation');
const po_so_invoice_model = require('../../../../database/models_v2/po_so_invoicing/po_so_invoice');
const po_so_invoice_doc_model = require('../../../../database/models_v2/po_so_invoicing/po_so_invoice_doc');
const po_so_doc_type_enum = require('../../../../enums/market_linkage/enums/po_so_doc_type_enum');


const fetch_mandi_and_invoicing_doc_service = (po_id, so_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            const doc_response = {
                mandi_taxation: {},
                invoicing_docs: {}
            }
            const [mandi_taxation_data, invoicing_data] = await Promise.all([
                mandi_taxation_model.findOne({
                    where: {
                        buyer_order_detail_id: so_id,
                        purchase_crop_order_id: po_id,
                        is_active: true
                    },
                    attributes: [
                        'url_6r',
                        'url_6r',
                        'name_6r',
                        'url_1st_9r',
                        'name_1st_9r',
                        'url_1st_9r_gate_pass',
                        'name_1st_9r_gate_pass',
                        'url_stock_transfer_9r',
                        'name_stock_transfer_9r',
                        'url_stock_transfer_9r_gate_pass',
                        'name_stock_transfer_9r_gate_pass',
                        'url_3rd_9r',
                        'name_3rd_9r',
                        'url_3rd_9r_gate_pass',
                        'name_3rd_9r_gate_pass'
                    ],
                    raw: true
                }),
                po_so_invoice_model.findOne({
                    where: {
                        buyer_order_detail_id: so_id,
                        purchase_crop_order_id: po_id,
                        is_active: true
                    },
                    include: [
                        {
                            model: po_so_invoice_doc_model,
                            where: {
                                is_active: true
                            },
                            attributes: [
                                'doc_type',
                                'doc_url',
                                'doc_name'
                            ],
                            required: true
                        }
                    ]
                })
            ]);
            if (mandi_taxation_data) {
                for (let key in mandi_taxation_data) {
                    doc_response.mandi_taxation[key] = mandi_taxation_data[key] || '';
                }
            }
            if (invoicing_data) {
                let invoicing_doc_data = invoicing_data.po_so_invoice_docs;
                for (let doc of invoicing_doc_data) {
                    let doc_type = Object.keys(po_so_doc_type_enum).find(key => po_so_doc_type_enum[key] === doc.doc_type);
                    doc_response.invoicing_docs['url_' + doc_type.toLowerCase()] = doc.doc_url || '';
                    doc_response.invoicing_docs['name_' + doc_type.toLowerCase()] = doc.doc_name || '';
                }
            }
            return resolve(doc_response);
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}
module.exports = fetch_mandi_and_invoicing_doc_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/buyer/services/edit_buyer_by_finance_service.js
const { Op } = require('sequelize')
const buyer_detail = require('../../../../database/models_v2/buyer/buyer_detail')
const buyer_document = require('../../../../database/models_v2/buyer/buyer_document')
const buyer_logs = require('../../../../database/models_v2/buyer/buyer_logs')
const buyer_working_crop = require('../../../../database/models_v2/buyer/buyer_working_crop')
const crop_detail = require('../../../../database/models_v2/crop/crop_detail')
const { is_gst_already_exist } = require('../../../../data_abstraction_layer/buyer/is_gst_no_exist')
const { docType, BUYER_LOG_ACTION } = require('../../../../enums/market_linkage/enums/buyerEnum')
const error_log = require('../../../../middelware/error_log')
const { is_valid_gst } = require('../utils/is_valid_gst')
const { is_valid_pan } = require('../utils/is_valid_pan')
const { ValidationError } = require('../../../../utilities/error/custom_error');

const update_buyer_docs = async (buyer_doc_data, buyer_id) => {

    const doc_values = {
        gst: {
            is_new_record: false,
            value: '',
            front_image: '',
            back_image: ''
        },
        pan: {
            is_new_record: false,
            value: '',
            front_image: '',
            back_image: ''
        }
    }

    for (let i = 0; i < buyer_doc_data.length; i++) {

        if (buyer_doc_data[i].type === docType.gst) {

            // eslint-disable-next-line no-unused-expressions
            doc_values.gst.is_new_record = true
            doc_values.gst.value = buyer_doc_data[i].value
            doc_values.gst.front_image = buyer_doc_data[i].frontImage
            doc_values.gst.back_image = buyer_doc_data[i].backImage

        } else if (buyer_doc_data[i].type === docType.pancard) {

            // eslint-disable-next-line no-unused-expressions
            doc_values.pan.is_new_record = true
            doc_values.pan.value = buyer_doc_data[i].value
            doc_values.pan.front_image = buyer_doc_data[i].frontImage
            doc_values.pan.back_image = buyer_doc_data[i].backImage

        }

    }

    if (doc_values.gst.is_new_record && doc_values.pan.is_new_record) {

        if (!is_valid_pan(doc_values.pan.value)) { throw new ValidationError('Invalid Pan Number') }

        if (!is_valid_gst(doc_values.gst.value, doc_values.pan.value)) { throw new ValidationError('Invalid GST Number') }

        const is_duplicate_gst = await is_gst_already_exist(doc_values.gst.value, buyer_id)

        if (is_duplicate_gst) { throw new ValidationError('Duplicate GST Number') }

        await buyer_document.update({
            value: doc_values.gst.value,
            front_image: doc_values.gst.front_image,
            back_image: doc_values.gst.back_image
        }, {
            where: {
                buyer_id,
                type: docType.gst
            }
        })

        await buyer_document.update({
            value: doc_values.pan.value,
            front_image: doc_values.pan.front_image,
            back_image: doc_values.pan.back_image
        }, {
            where: {
                buyer_id,
                type: docType.pancard
            }
        })

    } else if (doc_values.gst.is_new_record) {

        const buyer_pan_no = await buyer_document.findOne({
            where: {
                is_active: 1,
                buyer_id,
                type: docType.pancard
            }
        })

        if (buyer_pan_no && buyer_pan_no.dataValues.value && !is_valid_gst(doc_values.gst.value, buyer_pan_no.dataValues.value)) { throw new ValidationError('Invalid GST Number') }

        const is_duplicate_gst = await is_gst_already_exist(doc_values.gst.value, buyer_id)

        if (is_duplicate_gst) { throw new ValidationError('Duplicate GST Number') }

        await buyer_document.update({
            value: doc_values.gst.value,
            front_image: doc_values.gst.front_image,
            back_image: doc_values.gst.back_image
        }, {
            where: {
                buyer_id,
                type: docType.gst
            }
        })

    } else if (doc_values.pan.is_new_record) {

        if (!is_valid_pan(doc_values.pan.value)) { throw new ValidationError('Invalid Pan Number') }

        await buyer_document.update({
            value: doc_values.pan.value,
            front_image: doc_values.pan.front_image,
            back_image: doc_values.pan.back_image
        }, {
            where: {
                buyer_id,
                type: docType.pancard
            }
        })

    }

}

const edit_buyer_by_finance_service = async (data) => {

    try {

        const buyer_data = await buyer_detail.findOne({
            where: {
                id: data.buyer_id,
                is_active: 1
            }
        })

        if (!buyer_data) { return { status: false, message: `No buyer with buyer id ${data.buyer_id}` } }

        const buyer_detail_update_obj = {}

        if (data.email) { buyer_detail_update_obj.email = data.email }

        if (data.mobileNumber) {
            const mobile_exist = await buyer_detail.findOne({
                where: {
                    mobile_number: data.mobileNumber,
                    is_active: 1
                }
            });

            if (mobile_exist && data.buyer_id !== mobile_exist.dataValues.id) {
                throw new ValidationError('mobile number already exist')
            }

            buyer_detail_update_obj.mobile_number = data.mobileNumber
        }

        if (data.gstStatus) { buyer_detail_update_obj.gst_status = data.gstStatus }

        if (data.traderName) { buyer_detail_update_obj.trader_name = data.traderName }

        if (data.legalName) { buyer_detail_update_obj.legal_name = data.legalName }

        if (data.pincode) { buyer_detail_update_obj.pincode = data.pincode }

        if (data.type) { buyer_detail_update_obj.type = data.type }

        if (data.annualTurnover) { buyer_detail_update_obj.annual_turnover = data.annualTurnover }

        if (data.product) { buyer_detail_update_obj.product = data.product }

        if (data.repaymentTimeline) { buyer_detail_update_obj.repayment_timeline = data.repaymentTimeline }

        if (data.workingCrops) {
            const crop_details = await crop_detail.findAll({
                where: {
                    name: { [Op.in]: data.workingCrops },
                    is_active: 1
                },
                attributes: ['id', 'name']
            })

            if (!crop_details || crop_details.length !== data.workingCrops.length) { throw new ValidationError('Invalid Crop Name') }

            await buyer_working_crop.destroy({
                where: {
                    buyer_id: data.buyer_id,
                    is_active: 1
                }
            })

            const buyer_crops = []

            for (let i = 0; i < data.workingCrops.length; i++) {
                const new_buyer_crop = {
                    crop_name: data.workingCrops[i],
                    crop_id: crop_details.find(crop => crop.dataValues.name.toLowerCase() === data.workingCrops[i].toLowerCase()).id,
                    buyer_id: data.buyer_id,
                    is_active: 1
                }
                buyer_crops.push(new_buyer_crop)
            }
            await buyer_working_crop.bulkCreate(buyer_crops)
        }

        if (data.docs) {

            await update_buyer_docs(data.docs, data.buyer_id)

        }

        await buyer_data.update(buyer_detail_update_obj)
        const buyer_log_obj = {
            user_id: data.user_profile_id,
            buyer_id: data.buyer_id,
            action_by_user: BUYER_LOG_ACTION.EDIT
        }

        await buyer_logs.create(buyer_log_obj)
        return { status: true, message: data }

    } catch (error) {
        error_log(error)
        return { status: false, message: error.message }
    }

}

module.exports = {
    edit_buyer_by_finance_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/buyer/services/add_sales_order_service.js
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const { categories } = require('../../../../enums/market_linkage/enums/categories');
const { generate_unique_id } = require('../../../../common_services/unique_id_generation/generate_unique_id');
const buyer_detail = require('../../../../database/models_v2/buyer/buyer_detail');
const crop_detail = require('../../../../database/models_v2/crop/crop_detail');
const crop_varieties_detail = require('../../../../database/models_v2/crop/crop_varieties_detail');
const error_log = require('../../../../middelware/error_log');
const buyer_order_detail = require('../../../../database/models_v2/buyer_order/buyer_order_detail');
const user_profile = require('../../../../database/models/user_profile');
const master_state = require('../../../../database/models_v2/location/master_state');
const master_district = require('../../../../database/models_v2/location/master_district');
const buyer_order_delivery_info = require('../../../../database/models_v2/buyer_order/buyer_order_delivery_info');
const buyer_order_crop_info = require('../../../../database/models_v2/buyer_order/buyer_order_crop_info');
const buyer_order_quality_check = require('../../../../database/models_v2/buyer_order/buyer_order_quality_check');
const { orderStatus } = require('../../../../enums/market_linkage/enums/buyerEnum');
const qc_param_types = require('../../../../database/models_v2/procurement_order/qc_param_types');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const add_order_crop_info = async (crop_info, buyer_order_id) => {
    const order_crops_data = {
        crop_name: crop_info.cropName || null,
        crop_id: crop_info.cropId || null,
        buyer_order_id: buyer_order_id || null,
        variety_name: crop_info.varietyName || null,
        variety_id: crop_info.varietyId || null,
        is_active: 1
    }
    const added_order_crops = await buyer_order_crop_info.build(order_crops_data).save();
    return {
        cropName: added_order_crops.crop_name,
        cropId: added_order_crops.crop_id,
        varietyName: added_order_crops.variety_name,
        varietyId: added_order_crops.variety_id
    };
}

const add_quality_checks = async (quality_checks, buyer_order_id) => {
    const order_quality_check_data = await Promise.all(quality_checks.map(async (qc) => {
        const qc_param_type = await qc_param_types.findOne({
            where: {
                name: qc.name,
                is_active: 1
            }
        });
        return {
            qc_type_id: qc_param_type.id || null,
            buyer_order_id: buyer_order_id || null,
            required_value: qc.requiredValue || null,
            is_active: 1
        }
    }))
    await buyer_order_quality_check.bulkCreate(order_quality_check_data);
    const order_qc_data = await buyer_order_quality_check.findAll({
        where: {
            buyer_order_id: buyer_order_id || null,
            is_active: 1
        },
        include: [
            {
                model: qc_param_types,
                required: false
            }
        ]
    })
    const response = order_qc_data.map((qc) => {
        return {
            id: qc.id,
            name: qc.qc_param_type?.name,
            qc_type_id: qc.qc_type_id,
            requiredValue: qc.required_value
        }
    })
    return response;
}

const add_order_delivery_info = async (delivery_info, buyer_order_id) => {
    const state_data = await master_state.findOne({
        where: {
            name: delivery_info?.state || null,
            is_active: 1
        }
    });
    const district_data = await master_district.findOne({
        where: {
            name: delivery_info?.district || null,
            master_state_id: state_data?.id || null,
            is_active: 1
        }
    });
    const order_delivery_data = {
        address: delivery_info?.address || null,
        pincode: delivery_info?.pincode || null,
        buyer_order_id: buyer_order_id || null,
        state_name: delivery_info?.state || null,
        state_id: state_data?.id || null,
        district_name: delivery_info?.district || null,
        district_id: district_data?.id || null,
        image: delivery_info?.image || null,
        is_active: 1
    }
    await buyer_order_delivery_info.build(order_delivery_data).save();
    return delivery_info;
}

const add_sales_order_service = async (orderData) => {
    try {
        const uniqueIdResult = await generate_unique_id({
            state: orderData.deliveryInfo?.state,
            district: orderData.deliveryInfo?.district,
            category: categories.SalesOrder
        });

        if (uniqueIdResult.status === HTTP_status_codes.internalServerError) {
            return uniqueIdResult;
        }

        const [crop, variety, buyer] = await Promise.all([
            crop_detail.findOne({
                where: {
                    id: orderData.cropId,
                    is_active: 1
                }
            }),
            crop_varieties_detail.findOne({
                where: {
                    id: orderData.varietyId,
                    is_active: 1
                }
            }),
            buyer_detail.findOne({
                where: {
                    id: orderData.buyerId,
                    is_active: 1
                }
            })
        ]);
        if (!crop) throw new ValidationError('invalid crop id');
        if (!variety) throw new ValidationError('invalid variety id');
        if (!buyer) throw new ValidationError('invalid buyer id')

        const placed_by_data = await user_profile.findOne({
            where: {
                mobile_number: orderData.placedBy?.mobileNumber || null,
                is_active: 1
            }
        });

        const addedOrder = await buyer_order_detail.build({
            farmart_id: uniqueIdResult.data || null,
            buyer_name: buyer?.trader_name || null,
            order_quantity_in_ton: orderData.orderQuantityInTon || null,
            buyer_offering_price_quintal: orderData.buyerOfferingPriceQuintal || null,
            exp_delivery_in: orderData.expDeliveryIn || null,
            packaging_type: orderData.packagingType || null,
            fullfillment_type: orderData.fullfillmentType || null,
            remaining_quantity: orderData.orderQuantityInTon || null || null,
            licence_number: orderData.licenceNumber || null,
            buyer_facility_gst: orderData.buyerFacilityGst || null,
            cash_discount_percent: orderData.cashDiscountPercent || null,
            bag_deduction_percent: orderData.bagDeductionPercent || null,
            so_repayment_timeline: orderData.soRepaymentTimeline,
            is_invoice_on_gross: orderData.isInvoiceOnGross,
            invoice_sharing: orderData.invoiceSharing || null,
            buyer_id: orderData.buyerId || null,
            status: orderStatus.SO_CREATED,
            placed_by: placed_by_data?.id || null,
            is_active: true
        }).save();

        const added_crop_info = await add_order_crop_info({
            cropId: crop?.id || null,
            cropName: crop?.name,
            varietyId: variety?.id || null,
            varietyName: variety?.name
        }, addedOrder.id);

        const added_delivery_info = await add_order_delivery_info(orderData.deliveryInfo, addedOrder.id);
        const added_quality_checks = await add_quality_checks(orderData.qualityChecks, addedOrder.id);

        const response_data = {
            status: addedOrder.status,
            _id: addedOrder.id,
            buyerId: addedOrder.buyer_id,
            deliveryInfo: added_delivery_info,
            orderQuantityInTon: addedOrder.order_quantity_in_ton,
            buyerOfferingPriceQuintal: addedOrder.buyer_offering_price_quintal,
            expDeliveryIn: addedOrder.exp_delivery_in,
            packagingType: addedOrder.packaging_type,
            fullfillmentType: addedOrder.fullfillment_type,
            qualityChecks: added_quality_checks,
            placedBy: {
                id: placed_by_data?.id,
                name: placed_by_data?.name,
                mobileNumber: placed_by_data?.mobile_number
            },
            licenceNumber: addedOrder.licence_number,
            buyerFacilityGst: addedOrder.buyer_facility_gst,
            cashDiscountPercent: addedOrder.cash_discount_percent,
            bagDeductionPercent: addedOrder.bag_deduction_percent,
            soRepaymentTimeline: addedOrder.so_repayment_timeline,
            isInvoiceOnGross: addedOrder.is_invoice_on_gross,
            invoiceSharing: addedOrder.invoice_sharing,
            farmartId: addedOrder.farmart_id,
            remainingQuantity: addedOrder.remaining_quantity,
            buyerName: addedOrder.buyer_name,
            cropInfo: added_crop_info,
            createdAt: addedOrder.createdAt,
            updatedAt: addedOrder.updatedAt
        };

        return {
            status: HTTP_status_codes.ok,
            data: response_data
        };
    } catch (err) {
        error_log(err)
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: 'Error while creating new order',
                error: err.message
            }
        };
    }
};

module.exports = add_sales_order_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/buyer/services/modify_buyer_permission_service.js
const error_log = require("../../../../middelware/error_log");
const buyer_detail_model = require("../../../../database/models_v2/buyer/buyer_detail");
module.exports = async (buyer_detail_id, action_enum, action_permission) => {
    try {
        const buyer_detail = await buyer_detail_model.findOne({
            where: {
                is_active: 1,
                id: buyer_detail_id,
            },
            attributes: ["id", "restricted_permissions"]
        });
        let buyer_restricted_permissions = buyer_detail.restricted_permissions.split(",").filter(ele => ele);
        if (action_permission) {
            if (buyer_restricted_permissions.includes("" + action_enum))
                buyer_detail.restricted_permissions = "," + buyer_restricted_permissions.filter(ele => ele != action_enum).join(",");
        }
        else {
            if (!buyer_restricted_permissions.includes("" + action_enum))
                buyer_detail.restricted_permissions += action_enum + ",";
        }
        const buyer = await buyer_detail.save();
        console.log(buyer);
    }
    catch (err) {
        error_log(err);
        throw err;
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/buyer/services/get_target_price_service.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");
const so_fulfillment_target_detail_model = require("../../../../database/models_v2/buyer_order/so_fulfillment_target_detail");
const buyer_order_detail_model = require("../../../../database/models_v2/buyer_order/buyer_order_detail");
const buyer_order_delivery_info_model = require("../../../../database/models_v2/buyer_order/buyer_order_delivery_info");
const buyer_order_crop_info_model = require("../../../../database/models_v2/buyer_order/buyer_order_crop_info");
const buyer_order_quality_check_model = require("../../../../database/models_v2/buyer_order/buyer_order_quality_check");
const qc_param_types = require("../../../../database/models_v2/procurement_order/qc_param_types");

/**
 * @param {any[]} soTargets 
 * @returns {any[]}
 */
const transformResponse = (soTargets) => soTargets.map(soTarget => {
    const buyerOrder = soTarget.buyer_order_detail;
    const deliveryInfo = buyerOrder.delivery_info;
    const cropInfo = buyerOrder.crop_info;
    const qualityChecks = buyerOrder.quality_checks;
    const expDeliveryIn = buyerOrder.exp_delivery_in;
    const expDeliveryInDate = new Date(buyerOrder.createdAt);
    expDeliveryInDate.setDate(expDeliveryInDate.getDate() + expDeliveryIn);
    return {
        id: soTarget.id,
        createdAt: soTarget.createdAt,
        updatedAt: soTarget.updatedAt,
        targetPrice: soTarget.target_price,
        deliveryAddress: `${deliveryInfo.address}, ${deliveryInfo.district_name}, ${deliveryInfo.pincode}, ${deliveryInfo.state_name}`,
        qcList: qualityChecks.map(qc => ({
            id: qc.id,
            name: qc.qc_param_type?.name,
            qc_type_id: qc.qc_type_id,
            requiredValue: qc.required_value
        })),
        cropName: cropInfo.crop_name,
        varietyName: cropInfo.variety_name,
        totalQuantity: buyerOrder.order_quantity_in_ton,
        remainingQuantity: buyerOrder.remaining_quantity,
        expectedDate: expDeliveryInDate
    };
});

/**
 * returns the sales order target for the respected RPM's PA.
 * @param {number} reqUserId loggedin rpm user id.
 * @returns {Promise<{status: number, data: any}>}
 */
const get_target_price_service = async (reqUserId) => {
    try {
        // query the SO target to whome the current loggedin rpm reports.
        const targetsSalesOrders = await so_fulfillment_target_detail_model.findAll({
            where: {
                rpm_id: reqUserId,
                is_active:true
            },
            include: [
                {
                    model: buyer_order_detail_model,
                    include: [
                        {
                            model: buyer_order_quality_check_model,
                            include:[
                                {
                                    model: qc_param_types
                                }
                            ],
                            required: true,
                            as: "quality_checks",
                        },
                        {
                            model: buyer_order_delivery_info_model,
                            as: "delivery_info",
                            required: true
                        },
                        {
                            model: buyer_order_crop_info_model,
                            as: "crop_info",
                            required: true
                        }
                    ],
                    required: true
                }
            ]
        });
        return {
            status: HTTP_status_codes.ok,
            data: transformResponse(targetsSalesOrders)
        };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
}

module.exports = get_target_price_service

/**
 * return {
            status: HTTP_status_codes.ok,
            data: SoFulfillmentTargetResult.map((targetData) => {
                const expDeliveryInDate = new Date(targetData.createdAt);
                expDeliveryInDate.setDate(
                    expDeliveryInDate.getDate() + targetData.salesOrder[0]?.expDeliveryIn
                );
                return {
                    id: targetData._id,
                    createdAt: targetData.createdAt,
                    updatedAt: targetData.updatedAt,
                    targetPrice: targetData.targetPrice,
                    deliveryAddress: targetData.salesOrder[0]?.deliveryInfo?.address,
                    qcList: targetData.salesOrder[0]?.qualityChecks,
                    cropName: targetData.salesOrder[0]?.cropInfo?.cropName,
                    varietyName: targetData.salesOrder[0]?.cropInfo?.varietyName,
                    totalQuantity: targetData.salesOrder[0]?.orderQuantityInTon,
                    remainingQuantity: targetData.salesOrder[0]?.remainingQuantity,
                    expectedDate: expDeliveryInDate
                }
            })
        };
 */



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/buyer/validation/validation.js
const joi = require("joi");
const httpStatusCode = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const { docType, buyerType } = require("../../../../enums/market_linkage/enums/buyerEnum");
const appLogService = require("../../../../common_services/market_linkage/logging/app_log_service");

const docSchema = joi.object({
  value: joi.string().trim().required(),
  type: joi
    .number()
    .equal(...Object.values(docType))
    .required(),
  frontImage: joi
    .string()
    .trim()
    .uri({ scheme: ["http", "https"] }).allow(...[null,""]),
  backImage: joi
    .string()
    .trim()
    .uri({ scheme: ["http", "https"] }).allow(...[null,""]),
});

//------- Buyer Onboard Schema -------------------
const schema = joi.object({
  docs: joi.array().items(docSchema).default(null),
  gstStatus: joi.number().positive().default(null),
  email: joi.string().trim().email().default(null),
  mobileNumber: joi
    .string()
    .trim()
    .length(10)
    .regex(/^[0-9]+$/).default(null), // only allow numbers
  traderName: joi.string().trim().default(null),
  legalName: joi.string().trim().default(null),
  pincode: joi
    .string()
    .trim()
    .length(6)
    .regex(/^[0-9]+$/)
    .default(null), // only allow numbers
  annualTurnover: joi.number().default(null),
  workingCrops: joi.array().items(joi.string().trim()).default(null),
  type: joi
    .number()
    .equal(...Object.values(buyerType)).default(null),
  product: joi.string().trim().default(null),
  repaymentTimeline: joi.number().default(null),
  buyer_id: joi.number().positive().required()
});

//------------------ Validation Middleware ------------------
const validateBuyerEditDataByFinance = async (req, res, next) => {
  try {
    const result = schema.validate(req.body);
    if (result.error) throw new Error(result.error.message);
    req.body = result.value;
    next();
  } catch (err) { 
    appLogService({type:type.error,err});
    res.status(httpStatusCode.badRequest).json({
      message: err.message ?? "something went wrong.",
    });
  }
};

module.exports = validateBuyerEditDataByFinance;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/whatsapp/index.js
const router = require("express").Router();
const authorize = require("../../../middelware/authorized_routes");
const user_roles_enum = require("../../../entities/metadata/enums/user_roles");
const pending_whatsapp_controller = require("./controllers/pending_whatsapp_controller");
const whatsapp_respond_controller = require("./controllers/whatsapp_respond_controller");
const send_whatsapp_message_controller = require("./controllers/send_whatsapp");

router.get(
  "/pending",
  authorize([user_roles_enum.digital_marketing]),
  pending_whatsapp_controller
);
router.patch(
  "/respond",
  authorize([user_roles_enum.digital_marketing]),
  whatsapp_respond_controller
);
router.post(
  "/message",
  authorize([
    user_roles_enum.digital_marketing,
    user_roles_enum.Market_linkage_user,
  ]),
  send_whatsapp_message_controller
);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/whatsapp/controllers/pending_whatsapp_controller.js
const error_log=require('../../../../middelware/error_log');
const create_api_response=require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const pending_whatsapp_service=require('../services/pending_whatsapp_service')
module.exports=async (req,res)=>{
    try{
        let language_id = req.body.language_id;
        const page_no = +req.body.page_no||1;
        const limit = +req.body.limit||20;
        // corresponding service to be called below 👇🏻
        let pending_whatsapp_details = await pending_whatsapp_service(language_id, page_no, limit);
        let pending_whatsapp_response=create_api_response(true,"successful",pending_whatsapp_details);
        res.status(http_status_code_enum.ok).json(pending_whatsapp_response);
    }catch(ex){
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false,ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/whatsapp/controllers/whatsapp_respond_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const whatsapp_respond_service = require('../services/whatsapp_respond_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const whatsapp_message_id = +req.body.whatsapp_message_id;
        const label_id = +req.body.label_id;
        const status = +req.body.status;
        if (!whatsapp_message_id || !label_id || !status) {
            throw new ValidationError('whatsapp_message_id, status and label_id are mandatory parameter');
        }
        // corresponding service to be called below 👇🏻
        const whatsapp_respond_details = await whatsapp_respond_service(whatsapp_message_id, label_id, status);
        const whatsapp_respond_response = create_api_response(true, 'successful', whatsapp_respond_details);
        res.status(http_status_code_enum.ok).json(whatsapp_respond_response);
    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/whatsapp/controllers/send_whatsapp.js
const error_log = require("../../../../middelware/error_log");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const schedule_whatsapp_service = require("../services/schedule_whatsapp_service");
const whatsapp_queue_status_enum = require("../../../../enums/whatsapp/whatsapp_queue_status");
const whatsapp_message_status_enum = require("../../../../enums/whatsapp/whatsapp_message_status");
const send_ready_whatsapp_service = require("../../../../common_services/whatsapp/send_ready_whatsapp");

module.exports = async (req, res) => {
  try {
    const language_id = +req.headers.language;
    if (!language_id) {
      return res.json(
        create_api_response(false, "language_id is a mandatory param", null)
      );
    }

    const mobile_numbers = req.body.mobile_numbers || [];
    if (!mobile_numbers.length) {
      return res.json(
        create_api_response(false, "mobile_numbers is a mandatory param", null)
      );
    }

    const msg_type_id = req.body.msg_type_id;
    if (!msg_type_id) {
      return res.json(
        create_api_response(false, "msg_type_id is a mandatory param", null)
      );
    }

    const whatsapp_variables = req.body.whatsapp_variables;
    const { user_role_id, user_profile_id } = req.user;
    const response = await schedule_whatsapp_service(
      msg_type_id,
      language_id,
      mobile_numbers,
      whatsapp_variables,
      user_role_id,
      user_profile_id,
      whatsapp_queue_status_enum.ready_to_send,
      whatsapp_message_status_enum.approved
    );
    send_ready_whatsapp_service(response.whatsapp_message_id)
    .catch(err=>error_log(err));
    delete response.whatsapp.queue_ids;
    return res.json(create_api_response(true, "success", response));
  } catch (err) {
    error_log(err);
    return res.json(create_api_response(false, err.message, null));
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/whatsapp/services/whatsapp_respond_service.js
const error_log = require('../../../../middelware/error_log');
const whatsapp_messages_model = require('../../../../database/models_v2/whatsapp/whatsapp_messages');
const whatsapp_queue_model = require('../../../../database/models_v2/whatsapp/whatsapp_queue');
const whatsapp_message_status_enum = require('../../../../enums/whatsapp/whatsapp_message_status');
const whatsapp_queue_status_enum = require('../../../../enums/whatsapp/whatsapp_queue_status');
const send_ready_whatsapp_service = require('../../../../common_services/whatsapp/send_ready_whatsapp');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (whatsapp_message_id, label_id, status) => {
    return new Promise(async (resolve, reject) => {
        try {
            const whatsapp_messages_response = await whatsapp_messages_model.findOne({
                where: {
                    id: whatsapp_message_id,
                    is_active: 1
                }
            });
            if (!whatsapp_messages_response) {
                throw new ValidationError('no message with this message_id');
            }
            if (
                whatsapp_messages_response.status !==
        whatsapp_message_status_enum.pending
            ) {
                throw new ValidationError('already responded');
            }
            if (status === whatsapp_message_status_enum.approved) {
                const whatsapp_queue_responses = await whatsapp_queue_model.findAll({
                    where: {
                        whatsapp_message_id,
                        is_active: 1
                    }
                });
                for (let index = 0; index < whatsapp_queue_responses.length; index++) {
                    whatsapp_queue_responses[index].status =
            whatsapp_queue_status_enum.ready_to_send;
                    await whatsapp_queue_responses[index].save();
                }
            }
            whatsapp_messages_response.status = status;
            whatsapp_messages_response.msg_label_id = label_id;
            whatsapp_messages_response.review_time = Date.now();

            await whatsapp_messages_response.save();

            send_ready_whatsapp_service(whatsapp_message_id).catch((err) =>
                error_log(err)
            );
            return resolve(whatsapp_messages_response);
        } catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    });
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/whatsapp/services/save_whatsapp_message.js
const error_log = require("../../../../middelware/error_log");
const whatsapp_queue_model = require("../../../../database/models_v2/whatsapp/whatsapp_queue");
const whatsapp_variable_values_model = require("../../../../database/models_v2/whatsapp/whatsapp_variable_values");
const whatsapp_messages_model = require("../../../../database/models_v2/whatsapp/whatsapp_messages");
const whatsapp_variable_type_enum = require("../../../../enums/whatsapp/whatsapp_variable_type");
const whatsapp_variable_position_enum = require("../../../../enums/whatsapp/whatsapp_variable_position");

module.exports = async (
  mobile_numbers,
  whatsapp_template_id,
  dolphin_template_id,
  whatsapp_variables,
  queue_status,
  message_status,
  msg_sent_by_merchant_id,
  user_role_id,
  user_profile_id,
  submission_id
) => {
  return new Promise(async (resolve, reject) => {
    try {
      const whatsapp_message = await whatsapp_messages_model.create({
        is_active: 1,
        whatsapp_template_id,
        status: message_status,
      });
      let whatsapp_queues = mobile_numbers.map((mobile_number) => {
        const whatsapp_queue_obj = {
          recipent: mobile_number,
          schedule_on: new Date(),
          failure_count: 0,
          status: queue_status,
          dolphin_template_id,
          is_active: 1,
          whatsapp_message_id: whatsapp_message.id,
          user_role_id,
          user_profile_id,
          whatsapp_template_id,
        };
        if (submission_id) {
          whatsapp_queue_obj.submission_id = submission_id;
        }
        if (msg_sent_by_merchant_id) {
          whatsapp_queue_obj.msg_sent_by_merchant_id = msg_sent_by_merchant_id;
        }
        return whatsapp_queue_obj;
      });
      whatsapp_queues = await whatsapp_queue_model.bulkCreate(whatsapp_queues);

      await save_whastapp_variable_values(
        whatsapp_variables,
        whatsapp_message.id
      );
      return resolve({
        whatsapp_message_id: whatsapp_message.id,
        whatsapp_queue_ids: whatsapp_queues.map((ele) => ele.id),
      });
    } catch (err) {
      error_log(err);
      reject(err);
    }
  });
};

const save_whastapp_variable_values = async (
  whatsapp_variables,
  whatsapp_message_id
) => {
  return new Promise(async (resolve, reject) => {
    try {
      let whatsapp_variable_documents = [];
      whatsapp_variables.header_variables.forEach(
        (whatsapp_variable, index) => {
          whatsapp_variable_documents.push();
          let whatsapp_variable_document = {
            position: whatsapp_variable_position_enum.header,
            order: index + 1,
            is_active: 1,
            whatsapp_message_id,
          };
          switch (whatsapp_variable.type) {
            case "text": {
              whatsapp_variable_document.type =
                whatsapp_variable_type_enum.text;
              whatsapp_variable_document.variable_value =
                whatsapp_variable["text"];
              break;
            }
            case "image": {
              whatsapp_variable_document.type =
                whatsapp_variable_type_enum.image;
              whatsapp_variable_document.variable_value =
                whatsapp_variable["image"]["link"];
              break;
            }
            case "video": {
              whatsapp_variable_document.type =
                whatsapp_variable_type_enum.video;
              whatsapp_variable_document.variable_value =
                whatsapp_variable["video"]["link"];
              break;
            }
            case "document": {
              whatsapp_variable_document.type =
                whatsapp_variable_type_enum.document;
              whatsapp_variable_document.variable_value =
                whatsapp_variable["document"]["link"];
            }
          }
          whatsapp_variable_documents.push(whatsapp_variable_document);
        }
      );
      whatsapp_variables.body_variables.forEach((whatsapp_variable, index) => {
        whatsapp_variable_documents.push();
        let whatsapp_variable_document = {
          position: whatsapp_variable_position_enum.body,
          order: index + 1,
          is_active: 1,
          whatsapp_message_id,
        };
        switch (whatsapp_variable.type) {
          case "text": {
            whatsapp_variable_document.type = whatsapp_variable_type_enum.text;
            whatsapp_variable_document.variable_value =
              whatsapp_variable["text"];
            break;
          }
          case "image": {
            whatsapp_variable_document.type = whatsapp_variable_type_enum.image;
            whatsapp_variable_document.variable_value =
              whatsapp_variable["image"]["link"];
            break;
          }
          case "video": {
            whatsapp_variable_document.type = whatsapp_variable_type_enum.video;
            whatsapp_variable_document.variable_value =
              whatsapp_variable["video"]["link"];
            break;
          }
          case "document": {
            whatsapp_variable_document.type =
              whatsapp_variable_type_enum.document;
            whatsapp_variable_document.variable_value =
              whatsapp_variable["document"]["link"];
          }
        }
        whatsapp_variable_documents.push(whatsapp_variable_document);
      });
      if (whatsapp_variable_documents.length > 0) {
        whatsapp_variable_documents =
          await whatsapp_variable_values_model.bulkCreate(
            whatsapp_variable_documents
          );
      }
      return resolve(whatsapp_variable_documents);
    } catch (err) {
      error_log(err);
      reject(err);
    }
  });
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/whatsapp/services/disable_whatsapp_farmers_initialise.js
const error_log = require("../../../../middelware/error_log");
const farmer_detail_model = require("../../../../database/models/farmer_detail");
const Op = require("sequelize");

module.exports = async (farmer_mobile_numbers) => {
    try {
        const farmers = await farmer_detail_model.findAll({
            where: {
                mobile_number: {
                    [Op.in]: farmer_mobile_numbers
                },
                is_active: 1,
                whatsapp_enabled: null
            }
        });
        for (let index = 0; index < farmers.length; index++) {
            farmers[index].whatsapp_enabled = false;
            await farmers[index].save();
        }
    }
    catch (err) {
        error_log(err);
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/whatsapp/services/event_on_delivered_whatsapp_dlr.js
const error_log = require("../../../../middelware/error_log");
const enable_farmer_whatsapp_service = require("../../farmer/services/enable_farmer_whatsapp");

module.exports = async (recipent, submission_id) => {
    try {
        await enable_farmer_whatsapp_service([recipent]);
    }
    catch (err) {
        error_log(err);
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/whatsapp/services/add_merchant_whatsapp_variables.js
const error_log = require('../../../../middelware/error_log');
const merchant_detail_model = require('../../../../database/models/merchant_detail');
const shop_detail_model = require('../../../../database/models/shop_detail');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (merchant_detail_id, whatsapp_variables) => {
    return new Promise(async (resolve, reject) => {
        try {
            const merchant_detail = await merchant_detail_model.findOne({
                where: {
                    id: merchant_detail_id,
                    is_active: 1
                },
                attributes: ['name', 'mobile_number']
            });
            const shop_detail = await shop_detail_model.findOne({
                where: {
                    merchant_detail_id,
                    is_active: 1
                },
                attributes: ['shop_name']
            });
            if (!merchant_detail || !shop_detail_model) {
                throw new ValidationError('merchant not found');
            }
            whatsapp_variables.merchant_name = merchant_detail?.name + '' || '';
            whatsapp_variables.mobile_number =
        merchant_detail?.mobile_number + '' || '';
            whatsapp_variables.shop_name = shop_detail?.shop_name + '' || ' ';
            whatsapp_variables.na = ' - ';
            return resolve(whatsapp_variables);
        } catch (err) {
            error_log(err);
            return resolve(whatsapp_variables);
        }
    });
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/whatsapp/services/fetch_whatsapp_template.js
const error_log = require("../../../../middelware/error_log");
const whatsapp_template_model = require("../../../../database/models_v2/whatsapp/whatsapp_template");
const whatsapp_template_variable_mongoose_model = require("../../../../database/mongoose/mongoose_models/whatsapp/whatsapp_variables");

module.exports = async (msg_type_id, language_id) => {
  return new Promise(async (resolve, reject) => {
    try {
      const whatsapp_template = await whatsapp_template_model.findOne({
        where: {
          msg_type_id,
          language_id,
          is_active: 1,
        },
        attributes: ["id", "form_mongo_ref_id"],
      });
      if (whatsapp_template) {
        if (whatsapp_template.form_mongo_ref_id) {
          const whatsapp_variables =
            await whatsapp_template_variable_mongoose_model.findById(
              whatsapp_template.form_mongo_ref_id
            );
            let whatsapp_form_variables=[]
            if(whatsapp_variables){
           whatsapp_form_variables = [
            ...whatsapp_variables.header_variables,
            ...whatsapp_variables.body_variables,
          ];
        }
          return resolve({
            whatsapp_template_id: whatsapp_template?.id || "",
            whatsapp_variables: whatsapp_form_variables,
          });
        }
      } else {
        return resolve({
          whatsapp_template_id: "",
          whatsapp_variables: [],
        });
      }
    } catch (err) {
      error_log(err);
    }
  });
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/whatsapp/services/pending_whatsapp_service.js
const error_log = require("../../../../middelware/error_log");
const whatsapp_message_status_enum = require("../../../../enums/whatsapp/whatsapp_message_status");
const whatsapp_messages_model = require("../../../../database/models_v2/whatsapp/whatsapp_messages");
const whatsapp_templates_model = require("../../../../database/models_v2/whatsapp/whatsapp_template");
const whatsapp_variable_values_model = require("../../../../database/models_v2/whatsapp/whatsapp_variable_values");
const whatsapp_variable_position_enum = require("../../../../enums/whatsapp/whatsapp_variable_position");
const sms_generator_from_template = require("../../../../entities_v2/sms/service/meta/sms_generator_from_template");
const whatsapp_queue_model = require("../../../../database/models_v2/whatsapp/whatsapp_queue");
const merchant_detail_model = require("../../../../database/models/merchant_detail");

module.exports = async (language_id, page_no = 1, limit = 20) => {
  return new Promise(async (resolve, reject) => {
    try {
      const offset = (page_no - 1) * limit;
      let pending_message_count = await whatsapp_messages_model.count({
        where: {
          status: whatsapp_message_status_enum.pending,
          is_active: 1,
        },
      });
      let whatsapp_messages_response = await whatsapp_messages_model.findAll({
        where: {
          status: whatsapp_message_status_enum.pending,
          is_active: 1,
        },
        order: [["created_at", "desc"]],
        limit,
        offset,
        include: [
          {
            model: whatsapp_templates_model,
            where: {
              is_active: 1,
            },
            attributes: [
              "id",
              "header_type",
              "header_text",
              "body_text",
              "footer_text",
              "msg_type_id",
            ],
            required: true,
          },
          {
            model: whatsapp_variable_values_model,
            where: {
              is_active: 1,
            },
            order: ["order"],
          },
          {
            model: whatsapp_queue_model,
            where: {
              is_active: 1,
            },
            attributes: ["id", "user_profile_id"],
            required: true,
          },
        ],
      });
      let header = "",
        body = "",
        body_array = [],
        footer = [],
        message_body = [];
      for (let j = 0; j < whatsapp_messages_response.length; j++) {
        header = "";
        body_array = [];
        let whatsapp_variable_values_array =
          whatsapp_messages_response[j].whatsapp_variable_values;
        for (let i = 0; i < whatsapp_variable_values_array.length; i++) {
          switch (whatsapp_variable_values_array[i].position) {
            case whatsapp_variable_position_enum.header:
              header = whatsapp_variable_values_array[i].variable_value;
              break;
            case whatsapp_variable_position_enum.body:
              body_array.push(whatsapp_variable_values_array[i].variable_value);
              break;
            default:
              footer.push(whatsapp_variable_values_array[i]);
          }
        }
        let template =
          whatsapp_messages_response[j].whatsapp_template.body_text;
        body = await sms_generator_from_template(template, body_array);
        let merchant_detail_id =
          whatsapp_messages_response[j].whatsapp_queues[0].user_profile_id;
        let merchant = await merchant_detail_model.findOne({
          where: {
            id: merchant_detail_id,
            is_active: 1,
          },
          attributes: ["id", "mobile_number", "name"],
        });

        let msg_body = {
          message_id: whatsapp_messages_response[j].id,
          merchant_id: merchant_detail_id,
          mobile_number: merchant.mobile_number,
          merchant_name: merchant.name,
          message: {
            header,
            body,
            footer,
          },
          no_of_recipents: whatsapp_messages_response[j].whatsapp_queues.length,
          created_at: whatsapp_messages_response[j].dataValues.createdAt,
        };
        message_body.push(msg_body);
      }
      return resolve({
        rows: message_body,
        count: pending_message_count,
      });
    } catch (err) {
      error_log(err);
      return reject({ message: err.message });
    }
  });
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/whatsapp/services/prepare_whatsapp_payload.js
const error_log = require("../../../../middelware/error_log");
const whatsapp_variable_model = require("../../../../database/mongoose/mongoose_models/whatsapp/whatsapp_variables");
const whatsapp_variable_type = require("../../../../enums/whatsapp/whatsapp_variable_type");

module.exports = async (whatsapp_variable_id, whatsapp_variables) => {
  return new Promise(async (resolve, reject) => {
    try {
      const whatsapp_variable_document = await whatsapp_variable_model.findById(
        whatsapp_variable_id
      );
      const header_payload = [];
      whatsapp_variable_document.header_variables.forEach((variable) => {
        if (whatsapp_variables[variable.name]) {
          switch (variable.type) {
            case whatsapp_variable_type.text:
              {
                header_payload.push({
                  type: "text",
                  text: whatsapp_variables[variable.name] || "",
                });
              }
              break;
            case whatsapp_variable_type.image:
              {
                header_payload.push({
                  type: "image",
                  image: {
                    link: whatsapp_variables[variable.name] || "",
                  },
                });
              }
              break;
            case whatsapp_variable_type.video:
              {
                header_payload.push({
                  type: "video",
                  video: {
                    link: whatsapp_variables[variable.name] || "",
                  },
                });
              }
              break;
            case whatsapp_variable_type.document:
              {
                header_payload.push({
                  type: "document",
                  document: {
                    link: whatsapp_variables[variable.name] || "",
                  },
                });
              }
              break;
          }
        }
      });
      const body_payload = [];
      whatsapp_variable_document.body_variables.forEach((variable) => {
        switch (variable.type) {
          case whatsapp_variable_type.text:
            {
              body_payload.push({
                type: "text",
                text: whatsapp_variables[variable.name] || "",
              });
            }
            break;
          case whatsapp_variable_type.image:
            {
              body_payload.push({
                type: "image",
                image: {
                  link: whatsapp_variables[variable.name] || "",
                },
              });
            }
            break;
          case whatsapp_variable_type.video:
            {
              body_payload.push({
                type: "video",
                video: {
                  link: whatsapp_variables[variable.name] || "",
                },
              });
            }
            break;
          case whatsapp_variable_type.document:
            {
              body_payload.push({
                type: "document",
                document: {
                  link: whatsapp_variables[variable.name] || "",
                },
              });
            }
            break;
        }
      });
      return resolve({ header_payload, body_payload });
    } catch (err) {
      error_log(err);
      reject(err);
    }
  });
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/whatsapp/services/schedule_whatsapp_service.js
const error_log = require('../../../../middelware/error_log');
const whatsapp_template_model = require('../../../../database/models_v2/whatsapp/whatsapp_template');
const prepare_whatsapp_payload_service = require('./prepare_whatsapp_payload');
const add_merchant_whatsapp_variables = require('./add_merchant_whatsapp_variables');
const user_role_enum = require('../../../../enums/user_profile/user_role');
const save_whatsapp_messages_service = require('./save_whatsapp_message');
const whatsapp_queue_status_enum = require('../../../../enums/whatsapp/whatsapp_queue_status');
const whatsapp_message_status_enum = require('../../../../enums/whatsapp/whatsapp_message_status');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (
    msg_type_id,
    language_id,
    mobile_numbers,
    whatsapp_variables,
    user_role_id,
    user_profile_id,
    queue_status,
    message_status
) => {
    return new Promise(async (resolve, reject) => {
        try {
            const whatsapp_template = await whatsapp_template_model.findOne({
                where: {
                    msg_type_id,
                    language_id,
                    is_active: 1
                },
                attributes: ['dolphin_template_id', 'form_mongo_ref_id', 'id']
            });
            if (!whatsapp_template) {
                throw new ValidationError(
                    'Whatsapp Template not found for msg_type_id = ' +
            msg_type_id +
            ' and language_id = ' +
            language_id
                );
            }
            const whatsapp_variable_payload = {
                header_variables: [],
                body_variables: []
            };
            const msg_sent_by_merchant_id = null;
            let whatsapp_queue_status = queue_status;
            let whatsapp_message_status = message_status;
            if (user_role_id === user_role_enum.Merchant) {
                whatsapp_variables = await add_merchant_whatsapp_variables(
                    user_profile_id,
                    whatsapp_variables
                );
                whatsapp_queue_status = whatsapp_queue_status_enum.review_needed;
                whatsapp_message_status = whatsapp_message_status_enum.pending;
            }
            if (whatsapp_template?.form_mongo_ref_id) {
                const { header_payload = [], body_payload = [] } =
          await prepare_whatsapp_payload_service(
              whatsapp_template?.form_mongo_ref_id,
              whatsapp_variables
          );
                whatsapp_variable_payload.header_variables = header_payload;
                whatsapp_variable_payload.body_variables = body_payload;
            }
            const response = await save_whatsapp_messages_service(
                mobile_numbers,
                whatsapp_template.id,
                whatsapp_template.dolphin_template_id,
                whatsapp_variable_payload,
                whatsapp_queue_status,
                whatsapp_message_status,
                msg_sent_by_merchant_id,
                user_role_id,
                user_profile_id
            );
            return resolve(response);
        } catch (err) {
            error_log(err);
            reject(err);
        }
    });
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/mandi_taxation/swagger/index.js
module.exports = {
    tags: {
        name: 'mandi_taxation'
    },
    paths: {
        '/': {
            get: {
                tags: ['mandi_taxation'],
                summary: 'fetch mandi tax list',
                description: '',
                operationId: 'fetch_mandi_taxes',
                security: [{ Bearer: ['read'] }],
                parameters: [],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/update': {
            post: {
                tags: ['mandi_taxation'],
                summary: 'update mandi tax documents',
                description: '',
                operationId: 'update_doc_for_mandi_taxes',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        required: true,
                        schema: {
                            required: ['mandi_tax_id', 'status',
                                'url_6r', 'name_6r',
                                'url_1st_9r', 'name_1st_9r',
                                'url_1st_9r_gate_pass', 'name_1st_9r_gate_pass',
                                'url_stock_transfer_9r', 'name_stock_transfer_9r',
                                'url_stock_transfer_9r_gate_pass', 'name_stock_transfer_9r_gate_pass',
                                'url_3rd_9r', 'name_3rd_9r',
                                'url_3rd_9r_gate_pass', 'name_3rd_9r_gate_pass'],
                            properties: {
                                mandi_tax_id: {
                                    type: 'number'
                                },
                                status: {
                                    type: 'number'
                                },
                                url_6r: {
                                    type: 'string'
                                },
                                name_6r: {
                                    type: 'string'
                                },
                                url_1st_9r: {
                                    type: 'string'
                                },
                                name_1st_9r: {
                                    type: 'string'
                                },
                                url_1st_9r_gate_pass: {
                                    type: 'string'
                                },
                                name_1st_9r_gate_pass: {
                                    type: 'string'
                                },
                                url_stock_transfer_9r: {
                                    type: 'string'
                                },
                                name_stock_transfer_9r: {
                                    type: 'string'
                                },
                                url_stock_transfer_9r_gate_pass: {
                                    type: 'string'
                                },
                                name_stock_transfer_9r_gate_pass: {
                                    type: 'string'
                                },
                                url_3rd_9r: {
                                    type: 'string'
                                },
                                name_3rd_9r: {
                                    type: 'string'
                                },
                                url_3rd_9r_gate_pass: {
                                    type: 'string'
                                },
                                name_3rd_9r_gate_pass: {
                                    type: 'string'
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        }
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/mandi_taxation/index.js
const router = require('express').Router();
// const fetch_mandi_taxes_controller=require('./controllers/fetch_mandi_taxes_controller');
const update_doc_for_manxi_taxes_controller = require('./controllers/update_doc_for_manxi_taxes_controller');

/** @deprecated */
// router.get("/", fetch_mandi_taxes_controller); /** @deprecated */

router.post('/update', update_doc_for_manxi_taxes_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/mandi_taxation/controllers/fetch_mandi_taxes_controller.js
const error_log=require('../../../../middelware/error_log');
const fetch_mandi_taxes_service=require('../services/fetch_mandi_taxes_service')
const create_api_response=require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
module.exports=async (req, res)=>{

    try{
        let mandi_taxes_list=await fetch_mandi_taxes_service();
        let mandi_tax_response=create_api_response(true,"successfull",mandi_taxes_list);
        return res.status(http_status_code_enum.ok).json(mandi_tax_response);
    }
    catch(ex){
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false,ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/mandi_taxation/controllers/update_doc_for_manxi_taxes_controller.js
const error_log = require('../../../../middelware/error_log');
const update_doc_for_mandi_tax_service = require('../services/update_doc_for_mandi_tax_service');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        let {
            mandi_tax_id
            , status
            , url_6r, name_6r
            , url_1st_9r, name_1st_9r
            , url_1st_9r_gate_pass, name_1st_9r_gate_pass
            , url_stock_transfer_9r, name_stock_transfer_9r
            , url_stock_transfer_9r_gate_pass, name_stock_transfer_9r_gate_pass
            , url_3rd_9r, name_3rd_9r
            , url_3rd_9r_gate_pass, name_3rd_9r_gate_pass
        } = req.body;

        if ((url_6r && !name_6r) ||
            (name_6r && !url_6r)) {
            throw new ValidationError('6r name or url missing');
        }
        if ((url_1st_9r && !name_1st_9r) ||
            (name_1st_9r && !url_1st_9r)) {
            throw new ValidationError('1st 9r name or url missing');
        }
        if ((url_1st_9r_gate_pass && !name_1st_9r_gate_pass) ||
            (name_1st_9r_gate_pass && !url_1st_9r_gate_pass)) {
            throw new ValidationError('1st 9r gate pass name or url missing');
        }
        if ((url_stock_transfer_9r && !name_stock_transfer_9r) ||
            (name_stock_transfer_9r && !url_stock_transfer_9r)) {
            throw new ValidationError('stock transfer 9r name or url missing');
        }
        if ((url_stock_transfer_9r_gate_pass && !name_stock_transfer_9r_gate_pass) ||
            (name_stock_transfer_9r_gate_pass && !url_stock_transfer_9r_gate_pass)) {
            throw new ValidationError('stock transfer 9r gate pass name or url missing');
        }
        if ((url_3rd_9r && !name_3rd_9r) ||
            (name_3rd_9r && !url_3rd_9r)) {
            throw new ValidationError('6r name or url missing');
        }
        if ((url_3rd_9r_gate_pass && !name_3rd_9r_gate_pass) ||
            (name_3rd_9r_gate_pass && !url_3rd_9r_gate_pass)) {
            throw new ValidationError('6r name or url missing');
        }
        if (!mandi_tax_id) {
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false, 'please send mandi_tax_id'));
        }
        mandi_tax_id = +mandi_tax_id;
        await update_doc_for_mandi_tax_service({
            mandi_tax_id,
            status,
            url_6r,
            name_6r,
            url_1st_9r,
            name_1st_9r,
            url_1st_9r_gate_pass,
            name_1st_9r_gate_pass,
            url_stock_transfer_9r,
            name_stock_transfer_9r,
            url_stock_transfer_9r_gate_pass,
            name_stock_transfer_9r_gate_pass,
            url_3rd_9r,
            name_3rd_9r,
            url_3rd_9r_gate_pass,
            name_3rd_9r_gate_pass
        });
        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'mandi tax updated'));
    } catch (ex) {
        error_log(ex);
        // return reject({message:ex.message});
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/mandi_taxation/services/add_mandi_tax_service.js
const error_log = require('../../../../middelware/error_log');
const mandi_taxation_model = require('../../../../database/models_v2/mandi_taxation/mandi_taxation');
const mandi_taxation_status_enum = require('../../../../enums/market_linkage/enums/mandi_taxation_status_enum');


const add_mandi_tax_service = (purchase_crop_order_id, url_1st_9r, url_1st_9r_gate_pass, buyer_order_detail_id = null) => {
    return new Promise(async (resolve, reject) => {
        try {
            const mandi_taxation_list = await mandi_taxation_model.findAll({
                where: {
                    is_active: true,
                    purchase_crop_order_id
                }
            })
            let mandi_taxation_data;
            if (buyer_order_detail_id)
                mandi_taxation_data = mandi_taxation_list.find((doc) => doc.buyer_order_detail_id == buyer_order_detail_id);
            if (!mandi_taxation_data)
                mandi_taxation_data = mandi_taxation_list.find((doc) => !doc.buyer_order_detail_id);

            if (mandi_taxation_data) {
                mandi_taxation_data.buyer_order_detail_id = buyer_order_detail_id;
                if (url_1st_9r)
                    mandi_taxation_data.url_1st_9r = url_1st_9r;
                if (url_1st_9r_gate_pass)
                    mandi_taxation_data.url_1st_9r_gate_pass = url_1st_9r_gate_pass;
                await mandi_taxation_data.save();
            }
            else {
                const mandi_tax_obj = {
                    purchase_crop_order_id,
                    buyer_order_detail_id,
                    status: mandi_taxation_status_enum.pending,
                    is_active: true
                }
                if (url_1st_9r) {
                    mandi_tax_obj.url_1st_9r = url_1st_9r;
                }
                if (url_1st_9r_gate_pass) {
                    mandi_tax_obj.url_1st_9r_gate_pass = url_1st_9r_gate_pass
                }
                await mandi_taxation_model.build(mandi_tax_obj).save();
            }
            return resolve(true);
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}
module.exports = add_mandi_tax_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/mandi_taxation/services/update_doc_for_mandi_tax_service.js
const error_log=require('../../../../middelware/error_log');
const mandi_taxation_model=require('../../../../database/models_v2/mandi_taxation/mandi_taxation')
const purchase_crop_orders_model=require('../../../../database/models_v2/procurement_order/purchase_crop_orders')
const buyer_order_detail_model=require('../../../../database/models_v2/buyer_order/buyer_order_detail')


const update_mandi_taxes=(param)=>{
    return new Promise(async (resolve, reject)=>{
        try{
            let {mandi_tax_id
                ,status
                ,url_6r,name_6r
                ,url_1st_9r,name_1st_9r
                ,url_1st_9r_gate_pass,name_1st_9r_gate_pass
                ,url_stock_transfer_9r,name_stock_transfer_9r
                ,url_stock_transfer_9r_gate_pass,name_stock_transfer_9r_gate_pass
                ,url_3rd_9r,name_3rd_9r
                ,url_3rd_9r_gate_pass,name_3rd_9r_gate_pass}=param;

            let mandi_tax_exist=await mandi_taxation_model.findOne({
                where :{
                    id : mandi_tax_id,
                    is_active:true
                }
            });
            if(mandi_tax_exist){
                mandi_tax_exist.status=status;
                if(url_6r && name_6r){
                    mandi_tax_exist.url_6r=url_6r;
                    mandi_tax_exist.name_6r=name_6r;
                }
                if(url_1st_9r && name_1st_9r){
                    mandi_tax_exist.url_1st_9r=url_1st_9r;
                    mandi_tax_exist.name_1st_9r=name_1st_9r;
                }
                if(url_1st_9r_gate_pass && name_1st_9r_gate_pass){
                    mandi_tax_exist.url_1st_9r_gate_pass=url_1st_9r_gate_pass;
                    mandi_tax_exist.name_1st_9r_gate_pass=name_1st_9r_gate_pass;
                }
                if(url_stock_transfer_9r && name_stock_transfer_9r){
                    mandi_tax_exist.url_stock_transfer_9r=url_stock_transfer_9r;
                    mandi_tax_exist.name_stock_transfer_9r=name_stock_transfer_9r;
                }
                if(url_stock_transfer_9r_gate_pass && name_stock_transfer_9r_gate_pass){
                    mandi_tax_exist.url_stock_transfer_9r_gate_pass=url_stock_transfer_9r_gate_pass;
                    mandi_tax_exist.name_stock_transfer_9r_gate_pass=name_stock_transfer_9r_gate_pass;
                }
                if(url_3rd_9r && name_3rd_9r){
                    mandi_tax_exist.url_3rd_9r=url_3rd_9r;
                    mandi_tax_exist.name_3rd_9r=name_3rd_9r;
                }
                if(url_3rd_9r_gate_pass && name_3rd_9r_gate_pass){
                    mandi_tax_exist.url_3rd_9r_gate_pass=url_3rd_9r_gate_pass;
                    mandi_tax_exist.name_3rd_9r_gate_pass=name_3rd_9r_gate_pass;
                }
                await mandi_tax_exist.save();
                return resolve(true);
            }
            else{
                return reject({message:'mandi tax info not found.'});
            }
            
        }
        catch(ex){
            error_log(ex);
            return reject({message:ex.message});
        }
    })
}
module.exports=update_mandi_taxes;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/mandi_taxation/services/fetch_mandi_taxes_service.js
const { Op } = require("sequelize");
const error_log = require('../../../../middelware/error_log');
const mandi_taxation_model = require('../../../../database/models_v2/mandi_taxation/mandi_taxation');
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const procurment_crop_sample_model = require('../../../../database/models_v2/procurement_sample/procurment_crop_sample');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const order_delivery_documents_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_documents');
const procurement_bill_components_model = require('../../../../database/models_v2/procurement_payments/procurement_bill_components');
const buyer_order_detail_model = require('../../../../database/models_v2/buyer_order/buyer_order_detail');
const buyer_order_delivery_info_model = require('../../../../database/models_v2/buyer_order/buyer_order_delivery_info');
const master_merchant_detail_model = require('../../../../database/models_v2/merchant/master_merchant_detail');
const po_unloading_qty_detail_model = require('../../../../database/models_v2/po_unloading/po_unloading_qty_detail');
const po_unloading_docs_model = require('../../../../database/models_v2/po_unloading/po_unloading_docs');
const buyer_detail_model = require('../../../../database/models_v2/buyer/buyer_detail');
const purchase_crop_bill_component_enum = require('../../../../enums/market_linkage/enums/purchase_crop_bill_component_enum');
const { procurementTypeToName } = require('../../../../enums/market_linkage/enums/procurementSources');
const { UnloadingQuantityType } = require('../../../../enums/market_linkage/enums/unloading_quantity_enum');
const dispatch_doc_type = require("../../../../enums/market_linkage/enums/dispatch_doc_type");
const unloading_doc_type_enum = require("../../../../enums/market_linkage/enums/unloading_doc_type_enum");
const identify_file_type_from_url = require("../../../../common_services/url_to_file_type/identify_file_type_from_url");

const fetch_mandi_taxes = () => {
    return new Promise(async (resolve, reject) => {
        try {
            let resp = [];
            let mandi_taxes_list = await mandi_taxation_model.findAll({
                where: {
                    is_active: 1
                },
                include: [
                    {
                        model: purchase_crop_orders_model,
                        where: { is_active: 1 },
                        include: [
                            {
                                model: procurment_crop_sample_model,
                                attributes: ["id", "is_mandi_tax_paid"],
                                where: {
                                    is_active: 1
                                }
                            },
                            {
                                model: order_delivery_detail_model,
                                required: false,
                                where: { is_active: 1 },
                                include: {
                                    model: order_delivery_documents_model,
                                    required: false,
                                    where: {
                                        is_active: 1,
                                        order_delivery_document_type_id: dispatch_doc_type["handover document"]
                                    }
                                }
                            },
                            {
                                model: master_merchant_detail_model,
                                where: { is_active: 1 },
                                required: false
                            },
                            {
                                model: procurement_bill_components_model,
                                where: {
                                    order_bill_component_id: purchase_crop_bill_component_enum.mandi_tax,
                                    is_active: 1
                                },
                                required: false
                            }
                        ]
                    },
                    {
                        model: buyer_order_detail_model,
                        include: [
                            {
                                model: po_unloading_qty_detail_model,
                                required: false,
                                where: {
                                    is_active: 1,
                                    po_unloading_qty_type_id: {
                                        [Op.in]: [UnloadingQuantityType.ACCEPTED_WEIGHT, UnloadingQuantityType.DAMAGE_WEIGHT]
                                    }
                                }
                            },
                            {
                                model: po_unloading_docs_model,
                                required: false,
                                where: {
                                    is_active: 1,
                                    po_unloading_doc_type_id: unloading_doc_type_enum["UNLOADING RECEIPT"],
                                }
                            },
                            {
                                model: buyer_detail_model,
                                where: { is_active: 1 }
                            },
                            {
                                model: buyer_order_delivery_info_model,
                                as: 'delivery_info',
                                where: { is_active: 1 }
                            }
                        ],
                        required: false
                    }
                ],
                order: [['status', 'ASC'],['createdAt', 'ASC']]
            });
            if (mandi_taxes_list.length > 0) {
                resp = await generate_response(mandi_taxes_list);
            }
            return resolve(resp);
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}
module.exports = fetch_mandi_taxes;

async function generate_response(mandi_taxes_list) {
    try {
        let resp = [];
        for (let index = 0; index < mandi_taxes_list.length; index++) {
            const mandi_tax = mandi_taxes_list[index];
            const purchase_order = mandi_tax?.purchase_crop_order ?? {};
            const order_delivery_detail = purchase_order.order_delivery_detail ?? {};
            const order_delivery_docs = order_delivery_detail.order_delivery_documents ?? [];
            const sales_order = mandi_tax.buyer_order_detail ?? {};
            const buyer_accept_weight = (sales_order.po_unloading_qty_details || []).find(doc => doc.po_unloading_qty_type_id === UnloadingQuantityType.ACCEPTED_WEIGHT)?.value;
            const buyer_damage_weight = (sales_order.po_unloading_qty_details || []).find(doc => doc.po_unloading_qty_type_id === UnloadingQuantityType.DAMAGE_WEIGHT)?.value;
            const unloading_docs = sales_order.po_unloading_docs ?? [];
            const unloading_receipt_doc = unloading_docs?.find(doc => doc.purchase_crop_order_id === purchase_order.id) ?? {};
            const type_of_1st_9r = await identify_file_type_from_url(mandi_tax?.url_1st_9r);
            const type_of_1st_9r_gate_pass = await identify_file_type_from_url(mandi_tax?.url_1st_9r_gate_pass);
            const type_of_3rd_9r = await identify_file_type_from_url(mandi_tax?.url_3rd_9r);
            const type_of_3rd_9r_gate_pass = await identify_file_type_from_url(mandi_tax?.url_3rd_9r_gate_pass);
            const type_of_6r = await identify_file_type_from_url(mandi_tax?.url_6r);
            const type_of_stock_transfer_9r = await identify_file_type_from_url(mandi_tax?.url_stock_transfer_9r);
            const type_of_stock_transfer_9r_gate_pass = await identify_file_type_from_url(mandi_tax?.url_stock_transfer_9r_gate_pass);
            
            let _mandi_tax = {
                id: mandi_tax.id,
                source_state_name: purchase_order?.master_merchant_detail?.state_name ?? '',
                destination_state_name: sales_order?.buyer_detail?.state_name ?? '',
                po_id: purchase_order.id ?? 0,
                po_number: purchase_order?.farmart_id ?? '',
                so_Id: sales_order?.id ?? 0,
                so_number: sales_order?.farmart_id ?? "",
                status_of_po: purchase_order?.status ?? 0,
                mandi_tax_paid_at_source: purchase_order?.procurment_crop_sample?.is_mandi_tax_paid ?? false,
                po_type: procurementTypeToName[purchase_order?.master_merchant_detail?.profession_id ?? 0],
                handover_weight: order_delivery_detail?.gross_weight ?? 0,
                handover_document_url: order_delivery_docs[0]?.doc_url ?? "", // add handover doc from loading detail PO
                buyer_name: sales_order?.buyer_detail?.legal_name ?? '',
                delivery_location: sales_order?.delivery_info?.address ?? '',
                buyer_mandi_license: sales_order?.licence_number ?? "", // add buyer mandi licence SO
                unloading_weight: buyer_accept_weight + buyer_damage_weight, // add unloading weight from unloading detail A+R+D
                unloading_receipt: unloading_receipt_doc.doc_url ?? "", // add unloading receipt from unloading detail
                buyer_accept_weight: buyer_accept_weight, // add buyer accepted weight
                url_6r: mandi_tax?.url_6r ?? '',
                name_6r: mandi_tax?.name_6r ?? '',
                url_1st_9r: mandi_tax?.url_1st_9r ?? '',
                name_1st_9r: mandi_tax?.name_1st_9r ?? '',
                url_1st_9r_gate_pass: mandi_tax?.url_1st_9r_gate_pass ?? '',
                name_1st_9r_gate_pass: mandi_tax?.name_1st_9r_gate_pass ?? '',
                url_stock_transfer_9r: mandi_tax?.url_stock_transfer_9r ?? '',
                name_stock_transfer_9r: mandi_tax?.name_stock_transfer_9r ?? '',
                url_stock_transfer_9r_gate_pass: mandi_tax?.url_stock_transfer_9r_gate_pass ?? '',
                name_stock_transfer_9r_gate_pass: mandi_tax?.name_stock_transfer_9r_gate_pass ?? '',
                url_3rd_9r: mandi_tax?.url_3rd_9r ?? '',
                name_3rd_9r: mandi_tax?.name_3rd_9r ?? '',
                url_3rd_9r_gate_pass: mandi_tax?.url_3rd_9r_gate_pass ?? '',
                name_3rd_9r_gate_pass: mandi_tax?.name_3rd_9r_gate_pass ?? '',
                type_of_1st_9r,
                type_of_1st_9r_gate_pass,
                type_of_3rd_9r,
                type_of_3rd_9r_gate_pass,
                type_of_6r,
                type_of_stock_transfer_9r,
                type_of_stock_transfer_9r_gate_pass,
                status: mandi_tax?.status ?? 0
            };
            resp.push(_mandi_tax);
        }
        return resp;
    } catch (error) {
        error_log(error);
        return resp;
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/merchant/swagger/index.js
module.exports = {
  tags: {
    name: "merchant",
  },
  paths: {
    "/set_fcm_token": {
      post: {
        tags: ["merchant"],
        summary: "setting up fcm_token",
        description: "set_fcm_token",
        operationId: "set_fcm_token",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "formData",
            name: "fcm_token",
            description: "for firebase notification",
            required: true,
            type: "string",
          },
        ],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/referral_code": {
      get: {
        tags: ["merchant"],
        summary: "get unique referral code",
        description: "get_referral_code",
        operationId: "get_referral_code",
        security: [{ Bearer: ["read"] }],
        parameters: [],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/stats": {
      get: {
        tags: ["merchant"],
        summary: "get_stats",
        description:
          "properties- merchant_detail_id, credit_remaining, total_farmers, credit_farmer_count, sms_left, total_sms",
        operationId: "get_stats",
        security: [{ Bearer: ["read"] }],
        parameters: [],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/profile": {
      put: {
        tags: ["merchant"],
        summary: "for update merchant initial stage",
        description: "update the merchant on initial stage ",
        operationId: "update_merchant_profile_v4",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "formData",
            name: "merchant_name",
            description: "this is name of the merchant",
            required: false,
            type: "string",
          },
          {
            in: "formData",
            name: "shop_address",
            description: "this is the address of the shop",
            required: false,
            type: "string",
          },
          {
            in: "formData",
            name: "occupation_id",
            description:
              "1-Agri_Retailer\n 2-Agri_Distributor_Wholesaler\n 3-Farmer_Cooperative_Society\n 4-Farmer_Producer_Company\n 5-Farmer\n 6-other",
            required: false,
            type: "string",
            enum: [1, 2, 3, 4, 5, 6],
          },
          {
            in: "formData",
            name: "business_name",
            description: "this is the merchant's business name",
            required: false,
            type: "string",
          },
          {
            in: "formData",
            name: "other_description",
            description: "",
            required: false,
            type: "string",
          },
          {
            in: "formData",
            name: "deal_in_med",
            description: "boolean",
            required: false,
            type: "boolean",
          },
          {
            in: "formData",
            name: "deal_in_fert",
            description: "boolean",
            required: false,
            type: "boolean",
          },
          {
            in: "formData",
            name: "deal_in_seed",
            description: "boolean",
            required: false,
            type: "boolean",
          },
          {
            in: "formData",
            name: "merchant_prof_pic",
            description: "string",
            required: false,
            type: "string",
          },
          {
            name: "shop_pic_url",
            in: "formData",
            description: "string",
            required: false,
            type: "string",
          },
        ],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/market_linkage": {
      get: {
        tags: ["merchant"],
        summary: "get buyer list",
        description: "",
        operationId: "get_buyer_list",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "state_id",
            description: "state_id",
            required: true,
            type: "integer",
          },
          {
            in: "query",
            name: "district_id",
            description: "",
            required: true,
            type: "integer",
          },
          {
            in: "query",
            name: "page_no",
            description: "",
            required: false,
            type: "integer",
          },
          {
            in: "query",
            name: "limit",
            description: "",
            required: false,
            type: "integer",
          }
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/count_referrals": {
      get: {
        tags: ["merchant"],
        summary: "",
        description: "get_count_referrals",
        operationId: "get_count_referrals",
        security: [{ Bearer: ["read"] }],
        parameters: [],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/status": {
      put: {
        tags: ["merchant"],
        summary: "Blocking Unblocking merchant",
        description: "updating status of merchant",
        operationId: "put_status",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "formData",
            name: "merchant_detail_id",
            description: "merchant_detail_id",
            required: true,
            type: "number",
          },
          {
            in: "formData",
            name: "action",
            description: "1 for block and 2 for unblock",
            required: true,
            type: "number",
          }
        ],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/detail": {
      get: {
        tags: ["merchant"],
        summary: "fetching merchant details",
        description: "fetching merchant details",
        operationId: "get_merchant_details",
        security: [{ Bearer: ["read"] }],
        parameters: [{
          in: "query",
          name: "merchant_detail_id",
          description: "merchant_detail_id",
          required: true,
          type: "number",
        }],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/merchant_occupation": {
      put: {
        tags: ["merchant"],
        summary: "",
        description: "update merchant_occupation",
        operationId: "update_merchant_occupation",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "formData",
            name: "occupation_id",
            description: "occupation id to update occupation",
            required: true,
            type: "number",
          },
        ],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/alternate_mobile_number": {
      post: {
        tags: ["merchant"],
        summary: "",
        description: "add_alternate_number",
        operationId: "add_alternate_number",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "formData",
            name: "alternate_mobile_number",
            description: "",
            required: true,
            type: "string",
          },
          {
            in: "formData",
            name: "otp",
            description: "",
            required: true,
            type: "string",
          },
        ],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/business_account": {
      post: {
        tags: ["merchant"],
        summary: "",
        description: "business_account",
        operationId: "business_account",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "formData",
            name: "name",
            description: "",
            required: true,
            type: "string",
          },
          {
            in: "formData",
            name: "profession_id",
            description: "",
            required: true,
            type: "number",
          },
          {
            in: "formData",
            name: "mobile_number",
            description: "",
            required: true,
            type: "string",
          },
          {
            in: "formData",
            name: "full_address",
            description: "",
            required: true,
            type: "string",
          },{
            in: "formData",
            name: "state_id",
            description: "",
            required: true,
            type: "number",
          },
          {
            in: "formData",
            name: "district_id",
            description: "",
            required: true,
            type: "number",
          },{
            in: "formData",
            name: "taluk_id",
            description: "",
            required: true,
            type: "number",
          },
          {
            in: "formData",
            name: "pincode",
            description: "",
            required: true,
            type: "number",
          },{
            in: "formData",
            name: "lat",
            description: "",
            required: true,
            type: "number",
          },
          {
            in: "formData",
            name: "long",
            description: "",
            required: true,
            type: "number",
          },{
            in: "formData",
            name: "accuracy",
            description: "",
            required: true,
            type: "string",
          },
          {
            in: "formData",
            name: "category",
            description: "",
            required: true,
            type: "string",
          },
        ],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/location": {
      post: {
        tags: ["merchant"],
        summary: "",
        description: "add_merchant_location",
        operationId: "add_merchant_location",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "formData",
            name: "pincode",
            description: "",
            required: true,
            type: "string",
          },
          {
            in: "formData",
            name: "master_taluk_id",
            description: "",
            required: true,
            type: "number",
          },
          {
            in: "formData",
            name: "master_district_id",
            description: "",
            required: true,
            type: "number",
          },
          {
            in: "formData",
            name: "master_state_id",
            description: "",
            required: true,
            type: "number",
          },
        ],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
      get: {
        tags: ["merchant"],
        summary: "",
        description: "get_merchant_location",
        operationId: "get_merchant_location",
        security: [{ Bearer: ["read"] }],
        parameters: [],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/all_types":{
      get: {
        tags: ["merchant"],
        summary: "fetching live or blocked users of all type",
        description: "fetching live or blocked users of all type",
        operationId: "get_app_users",
        security: [{ Bearer: ["read"] }],
        parameters: [{
          in: "query",
          name: "merchant_occupation_id",
          description: "merchant_occupation_id",
          required: false,
          type: "number",
        },
        {
          in: "query",
          name: "status",
          description: "1 for blocked user 2 for live users",
          required: true,
          type: "number",
        },
        {
          in: "query",
          name: "search_param",
          description: "search on the basis of name ",
          required: false,
          type: "string",
        },
        {
          in: "query",
          name: "page_no",
          required: false,
          type: "number",
          default: 1,
        },
        {
          in: "query",
          name: "limit",
          required: false,
          type: "number",
          default: 10,
        },
      ],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/occupation_list":{
      get: {
        tags: ["merchant"],
        summary: "fetching user persona",
        description: "fetching user persona",
        operationId: "get_user_persona",
        security: [{ Bearer: ["read"] }],
        parameters: [],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    }
  },
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/merchant/index.js
const router = require("express").Router();
const authorize = require("../../../middelware/authorized_routes");
const user_roles_enum = require("../../../enums/user_profile/user_role");

const set_fcm_token_controller = require("./controllers/set_fcm_token_controller");
const get_stats_controller = require("./controllers/get_stats_controller");
const update_merchant_profile_controller = require("./controllers/update_merchant_profile_controller");
const get_buyer_list_controller = require("./controllers/get_buyer_list_controller");
const get_referral_code_controller = require("./controllers/get_referral_code_controller.js");
const get_referral_count_controller = require("./controllers/get_referral_count_controller.js");
const update_merchant_status_controller = require("./controllers/update_merchant_status_controller");
const get_merchant_details_controller = require("./controllers/get_merchant_details_controller");
const update_merchant_occupation_controller = require("./controllers/update_merchant_occupation_controller.js");
const add_alternate_mobile_number_controller = require("./controllers/add_alternate_mobile_number_controller.js");
const add_business_account_controller = require("./controllers/add_business_account_controller.js");
const alternate_number_initiate_otp_controller = require("./controllers/alternate_number_initiate_otp_controller");
const add_merchant_location_controller = require("./controllers/add_merchant_location_controller");
const get_merchant_location_controller = require("./controllers/get_merchant_location_controller");
const get_all_types_of_app_user_controller = require("./controllers/get_all_types_of_app_user_controller");
const get_occupation_list_controller = require("./controllers/get_occupation_list_controller");

router.post("/set_fcm_token", authorize([user_roles_enum.Merchant]), set_fcm_token_controller);
router.get("/stats", authorize([user_roles_enum.Merchant]), get_stats_controller);
router.put("/profile", authorize([user_roles_enum.Merchant]), update_merchant_profile_controller);
router.get("/market_linkage", authorize([user_roles_enum.Merchant]), get_buyer_list_controller);
router.get("/referral_code", authorize([user_roles_enum.Merchant]), get_referral_code_controller);
router.get("/count_referrals", authorize([user_roles_enum.Merchant]), get_referral_count_controller);
router.put("/status", authorize([user_roles_enum.digital_marketing]), update_merchant_status_controller);
router.get("/detail", authorize([user_roles_enum.digital_marketing]), get_merchant_details_controller);
router.put("/merchant_occupation", authorize([user_roles_enum.Merchant]), update_merchant_occupation_controller);
router.post("/alternate_mobile_number", authorize([user_roles_enum.Merchant]), add_alternate_mobile_number_controller);
router.post("/alternate_mobile_number_otp", authorize([user_roles_enum.Merchant]), alternate_number_initiate_otp_controller);
router.post("/business_account", authorize([user_roles_enum.Merchant]), add_business_account_controller);
router.post("/location", authorize([user_roles_enum.Merchant]), add_merchant_location_controller);
router.get("/location", authorize([user_roles_enum.Merchant]), get_merchant_location_controller);
router.get("/all_types", authorize([user_roles_enum.digital_marketing]), get_all_types_of_app_user_controller);
router.get("/occupation_list", authorize([user_roles_enum.digital_marketing]), get_occupation_list_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/merchant/controllers/update_merchant_occupation_controller.js
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../enums/global/http_status_codes");
const update_merchant_occupation_service = require("../services/update_merchant_occupation_service")
const store_sign_up_log_service = require("../../../../common_services/sign_up/sign_up_logs");
const http_headers_enums = require("../../../../enums/global/http_headers");
const signup_log_stage_enum = require('../../../../enums/signup_log/signup_log_stage_enum');

module.exports = async (req, res) => {
    try {
        const installation_id = req.headers[http_headers_enums['fmt-installation-id']];
        const device_id = req.headers[http_headers_enums['fmt-device-id']];
        const merchant_detail_id = req.user.user_profile_id;
        const occupation_id = +req.body.occupation_id;
        let current_app_version = req.headers.appversion;
        if (!occupation_id) {
            return res.status(http_status_code_enum.ok).json(create_api_response(false, "not valid parameter"));
        }
        const updated_occupation = await update_merchant_occupation_service(merchant_detail_id, occupation_id);
        let profile_selected_at = new Date();
        store_sign_up_log_service({ signup_log_stage: signup_log_stage_enum.profile_select, installation_id, device_id, merchant_detail_id, profile_selected_at, current_app_version })
            .catch(err => {
                error_log(err);
            });
        return res.status(http_status_code_enum.ok).json(create_api_response(true, "success", {
            updated_occupation
        }));
    } catch (ex) {
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message, null));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/merchant/controllers/alternate_number_initiate_otp_controller.js
const error_log = require('../../../../middelware/error_log');
const send_otp_via_text_service = require('../../../../entities/auth/service/send_otp_via_text');
const send_otp_via_whatsapp_service = require('../../../../entities_v2/auth/service/otp/send_otp_via_whatsapp');
const otp_send_medium_enum = require('../../../../entities_v2/metadata/enums/auth/otp_send_medium_enum');
const language_enum = require('../../../../entities_v2/metadata/enums/global/langauge');
const country_code_enum = require('../../../../enums/global/country_code');
const { generate_otp } = require('../../../../entities/auth/service/auth_service');
const DEFAULT_MESSAGE_ID = 'u6o+RJnCqoX';
// const BLACK_LISTED = [9825031150];
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
// const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const check_mobile_number_for_merge = require('../services/check_mobile_number_for_merge');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const primary_merchant_mobile_number = req.user.mobile_number;
        const mobile_number_hash = req.body.mobile_number;
        if (!mobile_number_hash) { throw new ValidationError('mandatory param missing'); }
        let secondary_mobile_number = await extract_mobile_number(mobile_number_hash);
        secondary_mobile_number = +secondary_mobile_number;
        if (!secondary_mobile_number) {
            return res.status(http_status_code_enum.ok).json({
                message: 'Message not sent'
            });
        }

        const country_code = +req.user.country.country_code || country_code_enum.india;
        const send_over_medium = req.body.send_over_medium ?? otp_send_medium_enum.all;
        const language_id = +req.headers.language || language_enum.hindi;
        // have to call is_mobile_number function
        if (typeof secondary_mobile_number !== 'number' || secondary_mobile_number < 1000000000) {
            throw new ValidationError('Invalid mobile_number');
        }

        const merge_possible = await check_mobile_number_for_merge(primary_merchant_mobile_number, secondary_mobile_number);
        if (!merge_possible || (primary_merchant_mobile_number === secondary_mobile_number)) { throw new ValidationError('Merge not possible'); }

        const message_id = DEFAULT_MESSAGE_ID;
        if (secondary_mobile_number) {
            const { otp } = await generate_otp(secondary_mobile_number, country_code);
            if (secondary_mobile_number !== 9896111054) {
                if (send_over_medium === otp_send_medium_enum.whatsapp) {
                    send_otp_via_whatsapp_service(secondary_mobile_number, otp, language_id, country_code)
                        .catch(err => {
                            error_log(err);
                        });
                } else if (send_over_medium === otp_send_medium_enum.all) {
                    send_otp_via_whatsapp_service(secondary_mobile_number, otp, language_id, country_code)
                        .catch(err => {
                            error_log(err);
                        });
                    send_otp_via_text_service(secondary_mobile_number, message_id, otp, language_id, country_code)
                        .catch(err => {
                            error_log(err);
                        });
                } else {
                    send_otp_via_text_service(secondary_mobile_number, message_id, otp, language_id, country_code)
                        .catch(err => {
                            error_log(err);
                        });
                }
            }
            res.json({
                status: true,
                message: 'OTP send to ' + secondary_mobile_number
            })
        } else {
            res.json({
                status: false,
                message: 'send mobile number',
                error_code: error_code.EMPTY_MOBILE
            })
        }
    } catch (ex) {
        /** logging */
        error_log(ex);
        res.json({
            status: false,
            message: ex.message,
            error_code: error_code.EX_MESSAGE
        })
    }
}

const extract_mobile_number = async (mobile_number_hash) => {
    try {
        const { OTP_KEY } = require('../../../../constants/config');
        const decrypt_service = require('../../../../utilities/decrypt');

        const mobile_number_checksum = await decrypt_service(mobile_number_hash, OTP_KEY);
        const today = new Date();
        if (mobile_number_checksum.slice(0, 2) === today.getDate() && mobile_number_checksum.slice(-2) === today.getMonth()) {
            return +mobile_number_checksum.slice(2, -2);
        }
        return null;
    } catch (err) {
        error_log(err);
        throw err;
    }
}

const error_code = {
    EMPTY_MOBILE: 111,
    EX_MESSAGE: 112
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/merchant/controllers/get_stats_controller.js
const error_log=require('../../../../middelware/error_log');
const create_api_response=require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");

const get_stats_service=require('../../../../entities/merchant/service/v5/get_stats_service');

module.exports=async (req,res)=>{
    try{
        let user_profile_id =req.user.user_profile_id;
        if(user_profile_id){
            let merchant_data = await get_stats_service(user_profile_id);
            return res.status(http_status_code_enum.ok).json(create_api_response(true, 'Stats Found',merchant_data));
        }
        else{
            return res.json(create_api_response(true,'user_profile_id not supplied.'));
        }
        
    }catch(ex){
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message,null));
    }
    
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/merchant/controllers/get_referral_count_controller.js
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../enums/global/http_status_codes");
const get_referral_count_service = require("../services/get_referral_count_service")

module.exports = async (req, res) => {
    try {
        const merchant_detail_id = req.user.user_profile_id;
        const referral_count = await get_referral_count_service(merchant_detail_id);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, "success", {
            referral_count
        }));
    } catch (ex) {
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message, null));
    }

}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/merchant/controllers/get_referral_code_controller.js
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../enums/global/http_status_codes");
const get_merchant_referral_link_service = require("../services/get_merchant_referral_link")

module.exports = async (req, res) => {
    try {
        const merchant_detail_id = req.user.user_profile_id;
        const referral_code = await get_merchant_referral_link_service(merchant_detail_id);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, "success", {
            referral_code
        }));
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message, null));
    }

}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/merchant/controllers/set_fcm_token_controller.js
const error_log=require('../../../../middelware/error_log');
const create_api_response=require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");

const fcm_token_service=require('../../../../entities/merchant/service/v4/fcm_token_service');

module.exports=async (req,res)=>{
    try{
        let user_profile_id =req.user.user_profile_id;
        let fcm_token =req.body.fcm_token;
        if(fcm_token){
            let result = await fcm_token_service(user_profile_id,fcm_token);
            return res.status(http_status_code_enum.ok).json(create_api_response(true, result.message));
        }
        else{
            return res.json(create_api_response(false, 'fcm_token not supplied.'));
        }
        
    }catch(err){
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
    
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/merchant/controllers/get_all_types_of_app_user_controller.js
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../enums/global/http_status_codes");
const get_all_types_of_app_user_service = require('../services/get_all_types_of_app_user_service');
const merchant_status_enum = require('../../../../enums/merchant/merchant_status');

module.exports = async (req, res) => {
    try {
        const merchant_occupation_id = +req.query.merchant_occupation_id || 0,
        status=+req.query.status || merchant_status_enum.Unblock,
        search_param=req.query.search_param || '',
        page_no=+req.query.page_no || 1,
        limit=+req.query.limit || 10;
        const users = await get_all_types_of_app_user_service(merchant_occupation_id,status,search_param,page_no,limit);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, "success",users));
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message, null));
    }

}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/merchant/controllers/get_occupation_list_controller.js
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../enums/global/http_status_codes");
const get_occupation_list_service = require('../services/get_occupation_list_service');

module.exports = async (req, res) => {
    try {
        const occupation_lists = await get_occupation_list_service();
        return res.status(http_status_code_enum.ok).json(create_api_response(true, "success",occupation_lists));
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message, null));
    }

}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/merchant/controllers/get_merchant_details_controller.js
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const get_merchant_details = require('../services/get_merchant_details_service');
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const merchant_id = req.query.merchant_detail_id;
        if (!merchant_id) {
            throw new ValidationError('merchant_detail_id is a mandatory parameter!');
        }
        const merchant_details = await get_merchant_details(merchant_id);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'success', {
            merchant_details
        }));
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message, null));
    }

}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/merchant/controllers/add_merchant_location_controller.js
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const http_status_code_enum = require("../../../../enums/global/http_status_codes");
const add_merchant_location_service = require("../services/add_merchant_location_service");

module.exports = async (req, res) => {
  try {
    const pincode = req.body.pincode;
    const master_taluk_id = +req.body.master_taluk_id;
    const master_district_id = +req.body.master_district_id;
    const master_state_id = +req.body.master_state_id;
    const merchant_detail_id = req.user.user_profile_id;
    if(!pincode || !master_taluk_id || !master_district_id || !master_state_id)
    {
        let message = "pincode, master_taluk_id,master_state_id and master_district_id are mandatory"
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, message));
    }
    const merchant_recent_location = await add_merchant_location_service(
      pincode,
      master_taluk_id,
      master_district_id,
      master_state_id,
      merchant_detail_id
    );
    return res
      .status(http_status_code_enum.ok)
      .json(create_api_response(true, "success", merchant_recent_location));
  } catch (ex) {
    return res
      .status(http_status_code_enum.bad_request)
      .json(create_api_response(false, ex.message, null));
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/merchant/controllers/get_buyer_list_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const get_buyer_list_service = require('../services/get_buyer_list_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const state_id = +req.query.state_id || 0;
        const district_id = +req.query.district_id || 0;
        const page_no = +req.query.page_no || 1;
        const limit = +req.query.limit || 20;
        if (!state_id || !district_id) {
            throw new ValidationError('state and district id are compulsory params ');
        }
        const buyers = await get_buyer_list_service(state_id, district_id, page_no, limit);
        const get_buyer_response = create_api_response(true, 'successfull', buyers);
        res.status(http_status_code_enum.ok).json(get_buyer_response);

    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/merchant/controllers/add_business_account_controller.js
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const http_status_code_enum = require("../../../../enums/global/http_status_codes");
const add_business_account_service = require("../services/add_business_account_service");

module.exports = async (req, res) => {
  try {
    const name = req.body.name;
    const profession_id = +req.body.profession_id;
    const mobile_number = req.body.mobile_number;
    const full_address = req.body.full_address;
    const state_id = +req.body.state_id;
    const district_id = +req.body.district_id;
    const taluk_id = +req.body.taluk_id;
    const pincode = req.body.pincode;
    const lat = req.body.lat;
    const long = req.body.long;
    const accuracy = +req.body.accuracy;
    const category = +req.body.category;
   
    const business_account_added = await add_business_account_service(
      name,
      profession_id,
      mobile_number,
      full_address,
      state_id,
      district_id,
      taluk_id,
      pincode,
      lat,
      long,
      accuracy,
      category
    );
    return res
      .status(http_status_code_enum.ok)
      .json(create_api_response(true, "success",{business_account_added}));
  } catch (ex) {
    return res
      .status(http_status_code_enum.bad_request)
      .json(create_api_response(false, ex.message, null));
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/merchant/controllers/update_merchant_profile_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");

const update_merchant_profile_v4_service = require('../../../../entities/merchant/service/v4/update_merchant_profile_v4');
const add_occupation_of_merchant_service = require('../../../../entities/merchant/service/v4/add_occupation_of_merchant');
const language_enum = require("../../../../entities_v2/metadata/enums/global/langauge");
const country_code_enum = require("../../../../enums/global/country_code")

module.exports = async (req, res) => {
    try {
        const country_code = req.user?.country?.country_code || country_code_enum.india;
        let user_profile_id = req.user.user_profile_id;
        let business_name = req.body.business_name || "";
        let merchant_name = req.body.merchant_name || "";
        let shop_address = req.body.shop_address;
        let occupation_id = req.body.occupation_id;
        let other_description = req.body.other_description;
        let deal_in_med = req.body.deal_in_med || false;
        let deal_in_fert = req.body.deal_in_fert || false;
        let deal_in_seed = req.body.deal_in_seed || false;
        let merchant_prof_pic = req.body.merchant_prof_pic;
        let shop_pic_url = req.body.shop_pic_url;
        const language_id = +req.headers.language || language_enum.default;

        if (user_profile_id && merchant_name.trim() && business_name.trim()) {
            let merchant_data = await update_merchant_profile_v4_service(user_profile_id, business_name, merchant_name, shop_address, deal_in_med, deal_in_fert, deal_in_seed, merchant_prof_pic, shop_pic_url, occupation_id, language_id, country_code);
            await add_occupation_of_merchant_service(user_profile_id, occupation_id, other_description);
            return res.json(create_api_response(true, merchant_data.message));
        }
        else {
            return res.json(create_api_response(false, 'user_profile_id or merchant_name or business_name not supplied.'));
        }

    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message, null));
    }

}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/merchant/controllers/get_merchant_location_controller.js
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const http_status_code_enum = require("../../../../enums/global/http_status_codes");
const get_merchant_location_service = require("../services/get_merchant_location_service");

module.exports = async (req, res) => {
  try {
    const merchant_detail_id = req.user.user_profile_id;
    
    const merchant_recent_location = await get_merchant_location_service(
      merchant_detail_id
    );
    return res
      .status(http_status_code_enum.ok)
      .json(create_api_response(true, "success", merchant_recent_location));
  } catch (ex) {
    return res
      .status(http_status_code_enum.bad_request)
      .json(create_api_response(false, ex.message, null));
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/merchant/controllers/add_alternate_mobile_number_controller.js
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../enums/global/http_status_codes");
const add_alternate_mobile_number_service = require("../services/add_alternate_mobile_number_service")

module.exports = async (req, res) => {
    try {
        const merchant_detail_id=req.user.user_profile_id
        const alternate_mobile_number=req.body.alternate_mobile_number || null;
        const otp=req.body.otp || null;
        const mobile_number = req.user.mobile_number;
        const master_merchant_id = req.user.master_merchant_id || null;
        const language_id = req.user.country?.default_language || null;
        if(!alternate_mobile_number || !otp)
        {
            return res.status(http_status_code_enum.ok).json(create_api_response(false, "not valid parameter")); 
        }
        const added_alternate_mobile_number = await add_alternate_mobile_number_service(merchant_detail_id,master_merchant_id,alternate_mobile_number,otp,mobile_number,language_id);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, "success"));
    } catch (ex) {
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message, null));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/merchant/controllers/update_merchant_status_controller.js
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const update_merchant_status_service = require('../services/update_merchant_status_service');
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const error_log = require('../../../../middelware/error_log');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const merchant_id = req.body.merchant_detail_id;
        const status = +req.body.action;
        const user_profile_id = +req.user.user_profile_id;
        if (!merchant_id || !status) {
            throw new ValidationError('merchant_detail_id and status are mandatory parameters!');
        }
        const status_update = await update_merchant_status_service(merchant_id, status, user_profile_id);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'success', {
            status_update
        }));
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message, null));
    }

}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/merchant/services/get_buyer_list_service.js
const error_log = require("../../../../middelware/error_log");
const {get_merchants}=require('../../../../data_abstraction_layer/merchant/merchant_details')
const {get_merchant_ids}=require('../../../../data_abstraction_layer/merchant/merchant_details')
const {get_shop_details}=require('../../../../data_abstraction_layer/merchant/shop_details')
const {get_master_merchant_merchant_ids}=require('../../../../data_abstraction_layer/merchant/master_merchant_details')
const get_buyer_list = async(state_id, district_id,page_no=1,limit=20) => {
    try {
      let offset = (page_no - 1) * limit;
      let merchant_detail_ids=await get_merchant_ids({state_id,district_id})
      merchant_detail_ids=get_only_merchant_ids(merchant_detail_ids.rows,"id")
      merchant_detail_ids=await get_master_merchant_merchant_ids({merchant_detail_ids})
      merchant_detail_ids=get_only_merchant_ids(merchant_detail_ids.rows,"merchant_detail_id")
      let merchant_buyer_list=[];
      let response;
      if(merchant_detail_ids.length>0)
      {
      const merchant_detail=await get_merchants({merchant_detail_ids,limit,offset})
      for(let i=0;i<merchant_detail.rows.length;i++)
      {
        let merchant_id=merchant_detail.rows[i].id;
        const shop_details=await get_shop_details({merchant_detail_id:merchant_id})
        let merchant_buyer_detail=format_response(merchant_detail.rows[i],shop_details)
        merchant_buyer_list.push(merchant_buyer_detail)
      }
      response={merchants:merchant_buyer_list,merchant_count:merchant_detail.count}
      }
      return response;
    } catch (ex) {
      error_log(ex);
      return({ message: ex.message });
    }
};
const get_only_merchant_ids=(merchant_detail_ids,param)=>{
  let merchant_ids=[]
  for(let i=0;i<merchant_detail_ids.length;i++)
  {
    merchant_ids.push(merchant_detail_ids[i][param])
  }
  return merchant_ids;
}
const format_response=(merchant_detail,shop_details)=>{
      let data={}
      data.merchant_detail_id=merchant_detail.id
      data.merchant_name=merchant_detail.name
      data.merchant_mobile_number=merchant_detail.mobile_number
      data.shop_name=shop_details.rows[0].shop_name
      data.address=merchant_detail.full_address
  return data;
}

module.exports = get_buyer_list;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/merchant/services/update_merchant_status_service.js
const error_log = require('../../../../middelware/error_log');
const { get_active_or_inactive_merchant_details } = require('../../../../data_abstraction_layer/merchant/merchant_details');
const merchant_status_enum = require('../../../../enums/merchant/merchant_status');
const save_content_moderation_logs_service = require('../../../../common_services/content_moderation/save_content_moderation_logs_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (merchant_id, status, user_profile_id) => {
    try {
        const merchant_details = await get_active_or_inactive_merchant_details({ merchant_id });
        if (!merchant_details) { throw new ValidationError('merchant not found with id = ' + merchant_id); }
        const merchant_data = {
            merchant_detail_id: merchant_details.id
        }
        if (status === merchant_status_enum.Block) {
            merchant_details.is_blocked = status;
            await merchant_details.save();
            merchant_data.is_active = merchant_details.is_active
            merchant_data.is_blocked = merchant_details.is_blocked
        } else if (status === merchant_status_enum.Unblock) {
            merchant_details.is_blocked = status;
            merchant_details.save();
            merchant_data.is_active = merchant_details.is_active
            merchant_data.is_blocked = merchant_details.is_blocked

        }
        await save_content_moderation_logs_service({ user_profile_id, merchant_detail_id: merchant_id, merchant_detail_status: status })
        return merchant_data
    } catch (err) {
        error_log(err);
        return { merchant_data: null };
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/merchant/services/add_business_account_service.js
const error_log = require('../../../../middelware/error_log');
const post_request_service = require('../../../../utilities/external_API_calls/post_request');
const global_config = require('../../../../config/global_config');

const add_business_account_service = async (name,
    profession_id,
    mobile_number,
    full_address,
    state_id,
    district_id,
    taluk_id,
    pincode,
    lat,
    long,
    accuracy,
    category) => {
    try {
        const url = global_config.market_linkage_system_url;
        const token = global_config.retailer_token;
        const endpoint = '/v3/retailer/retailer_app';
        const body = {
            name,
            profession_id,
            mobile_number,
            full_address,
            state_id,
            district_id,
            taluk_id,
            pincode,
            lat,
            long,
            accuracy,
            category
        };
        let business_account_details;
        // eslint-disable-next-line no-useless-catch
        try {
            business_account_details = await post_request_service(url + endpoint, body, {
                Authorization: token
            });
        } catch (err) {
            throw err;
        }
        return business_account_details?.data?.data;
    } catch (err) {
        error_log(err);
        return null;
    }
};
module.exports = add_business_account_service



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/merchant/services/add_merchant_location_service.js
const error_log = require('../../../../middelware/error_log');
const get_master_taluk_by_id = require('../../../../data_abstraction_layer/location/get_master_taluk_by_id');
const get_master_district_by_id = require('../../../../data_abstraction_layer/location/get_master_district_by_id');
const get_master_state_by_id = require('../../../../data_abstraction_layer/location/get_master_state_by_id');
const merchant_recent_location_model = require('../../../../database/models_v2/merchant/merchant_recent_location');
const { get_merchant_recent_location } = require('../../../../data_abstraction_layer/merchant/merchant_recent_location');
const geocode_by_pincode_service = require('../../location/services/geocode_by_pincode_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const add_merchant_location_service = async (
    pincode,
    master_taluk_id,
    master_district_id,
    master_state_id,
    merchant_detail_id
) => {
    try {
    // check if exist then make it inactive inorder to maintain history
        const merchant_recent_locations = await get_merchant_recent_location({ merchant_detail_id })
        if (merchant_recent_locations.count > 0) {
            for (let i = 0; i < merchant_recent_locations.rows.length; i++) {
                merchant_recent_locations.rows[i].is_active = 0;
                merchant_recent_locations.rows[i].save();
            }
        }
        // to save state name ,district name taluk name we need to hit the db for this
        // get master_taluk_name
        const taluk_details = await get_master_taluk_by_id(master_state_id, master_district_id, master_taluk_id);
        if (!taluk_details) { throw new ValidationError('taluk not found'); }
        // get master_district_name
        const district_details = await get_master_district_by_id(master_state_id, master_district_id);
        if (!district_details) { throw new ValidationError('master district not found'); }
        // get master_state_name
        const state_details = await get_master_state_by_id(master_state_id);
        if (!state_details) { throw new ValidationError('master state not found'); }
        // save the above details
        const location_to_save = {
            pincode,
            state_name: state_details?.name,
            district_name: district_details?.name,
            taluk_name: taluk_details?.name,
            master_district_id,
            master_state_id,
            master_taluk_id,
            is_active: 1,
            merchant_detail_id
        }
        const merchant_location = await merchant_recent_location_model.create(location_to_save);
        // add lat long on the bases of pincode
        const location_obj = await geocode_by_pincode_service(pincode);
        const formatted_response = {
            pincode: merchant_location.pincode,
            master_taluk_name: merchant_location.taluk_name,
            master_state_name: merchant_location.state_name,
            master_district_name: merchant_location.district_name,
            master_taluk_id: merchant_location.master_taluk_id,
            master_state_id: merchant_location.master_state_id,
            master_district_id: merchant_location.master_district_id,
            lat: location_obj?.lat,
            long: location_obj?.lng
        }
        return formatted_response;
    } catch (err) {
        error_log(err);
        return null;
    }
};
module.exports = add_merchant_location_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/merchant/services/get_all_types_of_app_user_service.js
const error_log = require("../../../../middelware/error_log");
const {get_all_types_of_app_users} = require("../../../../data_abstraction_layer/merchant/merchant_details");

module.exports = async (merchant_occupation_id,status,search_param,page_no,limit) => {
    try {
        const offset = (page_no - 1) * limit;
        //fetching all the users with or without filter
        let merchant_details = await get_all_types_of_app_users({merchant_occupation_id,status,search_param,offset,limit,attributes:["name","mobile_number"]});
        let response={users:[],count:merchant_details?.count};
        // formatting the response
        for(let i=0;i<merchant_details?.rows?.length;i++){
            let {id,name,mobile_number}=merchant_details?.rows[i];
            response.users.push({
                merchant_detail_id:id,
                name,
                mobile_number:"XXXXX"+mobile_number.toString().slice(-5),
                merchant_occupation_id:merchant_details?.rows[i]?.merchant_occupation?.occupation_id
            })
        }
        return response
    }
    catch (err) {
        error_log(err);
        return {users:[],count:0};
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/merchant/services/update_merchant_occupation_service.js
const add_merchant_occupation_service = require("../../../../entities_v2/merchant/services/add_merchant_occupation_service");
const get_merchant_occupation = require("../../../../data_abstraction_layer/merchant/get_merchant_occupation");
const error_log = require("../../../../middelware/error_log");

const update_merchant_occupation_service = async (
  merchant_detail_id,
  occupation_id
) => {
  try {
    let occupation_record = await add_merchant_occupation_service(
      merchant_detail_id,
      occupation_id
    );
    return occupation_record;
  } catch (err) {
    error_log(err);
    return null;
  }
};
module.exports = update_merchant_occupation_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/merchant/services/get_occupation_list_service.js
const error_log = require("../../../../middelware/error_log");
const {
  get_merchant_occupation_enums_list,
} = require("../../../../data_abstraction_layer/merchant/get_merchant_occupation_enums");

module.exports = async () => {
  try {
    let merchant_details = await get_merchant_occupation_enums_list({attributes:["occupation"]});
    return merchant_details;
  } catch (err) {
    error_log(err);
    return [];
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/merchant/services/get_merchant_referral_link.js
const error_log = require("../../../../middelware/error_log");
const { get_merchant_referral_code } = require('../../../../data_abstraction_layer/merchant/merchant_referral');
const generate_deep_link = require("../../../../common_services/deep_link/branch_io");
module.exports = async (merchant_detail_id) => {
    try {
        let merchant_referral_code = await get_merchant_referral_code(merchant_detail_id);
        if (!merchant_referral_code.referral_code) {
            merchant_referral_code.referral_code = `FMT_REF_${merchant_referral_code.id}`;
            await merchant_referral_code.save();
        }
        if (!merchant_referral_code.referral_link) {
            const referral_link = await generate_deep_link({
                title: "Referral",
                payload: {
                    referral_code: merchant_referral_code.referral_code
                },
                description: "Referral"
            });
            merchant_referral_code.referral_link = referral_link["branchUrl"];
            await merchant_referral_code.save();
        }
        return {
            referral_code: merchant_referral_code.referral_code,
            referral_link: merchant_referral_code.referral_link
        };
    }
    catch (err) {
        error_log(err);
        return { referral_code: null };
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/merchant/services/get_merchant_location_service.js
const error_log = require('../../../../middelware/error_log');
const {
    get_merchant_recent_location
} = require('../../../../data_abstraction_layer/merchant/merchant_recent_location');
const geocode_by_pincode_service = require('../../location/services/geocode_by_pincode_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const get_merchant_location_service = async (merchant_detail_id) => {
    try {
    // fetching merchant recent location
        const merchant_recent_locations = await get_merchant_recent_location({
            merchant_detail_id
        });
        if (merchant_recent_locations.count <= 0) {
            throw new ValidationError("merchant doesn't have any saved location");
        }
        // fetching lat long on the bases of pincode to append in response
        const lat_long = await geocode_by_pincode_service(merchant_recent_locations.rows[0].pincode);
        // formatting response
        const location_obj = {
            pincode: merchant_recent_locations.rows[0].pincode,
            master_taluk_name: merchant_recent_locations.rows[0].taluk_name,
            master_state_name: merchant_recent_locations.rows[0].state_name,
            master_district_name: merchant_recent_locations.rows[0].district_name,
            master_taluk_id: merchant_recent_locations.rows[0].master_taluk_id,
            master_state_id: merchant_recent_locations.rows[0].master_state_id,
            master_district_id: merchant_recent_locations.rows[0].master_district_id,
            lat: lat_long?.lat,
            long: lat_long?.lng
        };
        return location_obj;
    } catch (err) {
        error_log(err);
        return null;
    }
};
module.exports = get_merchant_location_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/merchant/services/merge_two_numbers_for_ml.js
const error_log = require('../../../../middelware/error_log');
const post_request_service = require('../../../../utilities/external_API_calls/post_request');
const global_config = require('../../../../config/global_config');

const merge_two_numbers_for_ml = async (retailer_mobile_number, alternate_mobile_number) => {
    try {
        const url = global_config.market_linkage_system_url;
        const token = global_config.retailer_token;
        const endpoint = '/v1/procurement_sources/alternate_mobile_number';
        const body = {
            retailer_mobile_number,
            alternate_mobile_number
        };
        let master_merchant_details;
        // eslint-disable-next-line no-useless-catch
        try {
            master_merchant_details = await post_request_service(url + endpoint, body, {
                Authorization: token
            });
        } catch (err) {
            throw err;
        }
        return master_merchant_details?.data?.data?.master_merchant_id;
    } catch (err) {
        error_log(err);
        return null;
    }
};
module.exports = merge_two_numbers_for_ml



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/merchant/services/check_mobile_number_for_merge.js
const error_log = require('../../../../middelware/error_log');
const get_request_service = require('../../../../utilities/external_API_calls/get_request');
const global_config = require('../../../../config/global_config');
const retailer_status_enum = require('../../../../enums/market_linkage/enums/procurementSources').userStatus;
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (retailer_mobile_number, alternate_mobile_number) => {
    try {
        const url = global_config.market_linkage_system_url;
        const token = global_config.retailer_token;
        const endpoint = '/v1/procurement_sources/status';

        let primary_retailer_status = await get_request_service(url + endpoint, {
            Authorization: token
        }, 'Market linkage', undefined, {
            retailer_mobile_number
        });
        primary_retailer_status = primary_retailer_status.data.data;

        let secondary_retailer_status = await get_request_service(url + endpoint, {
            Authorization: token
        }, 'Market linkage', undefined, {
            retailer_mobile_number: alternate_mobile_number
        });
        secondary_retailer_status = secondary_retailer_status.data.data;

        if (!primary_retailer_status) { throw new ValidationError('no business account linked with number = ' + retailer_mobile_number); }

        if (primary_retailer_status.primary_master_merchant_id) { throw new ValidationError('Primary number is already a secondary number for another number'); }

        if (secondary_retailer_status?.primary_master_merchant_id) { throw new ValidationError('Alternate number is already a secondary number for another number'); }

        if (primary_retailer_status?.status === retailer_status_enum.APPROVED && secondary_retailer_status?.status === retailer_status_enum.APPROVED) { throw new ValidationError('Both accounts verified, can not be merged'); }

        return true;
    } catch (err) {
        error_log(err);
        return false;
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/merchant/services/get_referral_count_service.js
const error_log = require("../../../../middelware/error_log");
const { get_referrals_of_merchant } = require('../../../../data_abstraction_layer/merchant/merchant_referral');
const { get_referral_count } = require('../../../../data_abstraction_layer/merchant/merchant_details');
module.exports = async (merchant_detail_id) => {
    try {
        let referral_counts=0
        //get referral of a particular merchant
        let merchant_referrals = await get_referrals_of_merchant(merchant_detail_id);
        if(merchant_referrals.rows.length == 0)
        {
            return referral_counts;
        }
        //array to store referral code of a particular merchant
        let referral_code_of_merchant=[]
        for(let i=0;i<merchant_referrals.rows.length;i++)
        {
            let referral_code=merchant_referrals.rows[i].referral_code;
            referral_code_of_merchant.push(referral_code)
        }
        // will count referral for referral_code_of_merchant array
         referral_counts = await get_referral_count({referral_code:referral_code_of_merchant});
        return referral_counts
    }
    catch (err) {
        error_log(err);
        return { referral_counts: 0 };
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/merchant/services/add_alternate_mobile_number_service.js
// const get_merchant_by_mobile_number = require('../../../../data_abstraction_layer/merchant/get_merchant_by_mobile_number');
const error_log = require('../../../../middelware/error_log');
const validate_otp_service = require('../../../v2/auth/services/validate_otp_service');
const user_roles_enum = require('../../../../enums/authorization/user_roles');
const country_code_enum = require('../../../../enums/global/country_code');
const merge_two_numbers_for_ml = require('../services/merge_two_numbers_for_ml');
const { get_merchants, get_merchant_detail_by_number } = require('../../../../data_abstraction_layer/merchant/merchant_details');
const { get_shop_detail_by_merchant_id } = require('../../../../data_abstraction_layer/merchant/shop_details');
const get_merchant_profile_v4_service = require('../../../../entities/merchant/service/v4/get_merchant_profile_v4');
const update_merchant_profile_v4_service = require('../../../../entities/merchant/service/v4/update_merchant_profile_v4');
const add_occupation_of_merchant_service = require('../../../../entities/merchant/service/v4/add_occupation_of_merchant');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const add_alternate_mobile_number_service = async (merchant_detail_id,
    master_merchant_id,
    alternate_mobile_number,
    otp,
    mobile_number,
    language_id
) => {
    try {
        if (master_merchant_id) {
            const merchant_exist = await get_merchant_detail_by_number({
                mobile_number: alternate_mobile_number
            });
            if (!merchant_exist) {
                // if merchant not exists in merchant details
                // validate otp
                await validate_otp_service(alternate_mobile_number, otp, user_roles_enum.Merchant, country_code_enum.india, null)
                // profile created
                // replication data from new user
                await replicate_data_for_new_user(merchant_detail_id, language_id, alternate_mobile_number)
            }
            const mm_id = await merge_two_numbers_for_ml(
                mobile_number,
                alternate_mobile_number
            );
            if (!mm_id) throw new ValidationError('cannot merge these numbers ')
            // copy this master_merchant_id in both
            await copy_two_number_for_same_merchant(
                mm_id,
                mobile_number,
                alternate_mobile_number
            );
            // map primary merchant id
            if (merchant_exist) {
                merchant_exist.primary_merchant_id = merchant_detail_id;
                await merchant_exist.save();
            } else {
                const merchant_exist = await get_merchant_detail_by_number({
                    mobile_number: alternate_mobile_number
                });
                merchant_exist.primary_merchant_id = merchant_detail_id;
                await merchant_exist.save();
            }
        } else {
            throw new ValidationError('retailer not onboarded on market linkage');
        }
        return '';
    } catch (err) {
        error_log(err);
        throw new ValidationError(err.message);
    }
};
const copy_two_number_for_same_merchant = async (
    mm_id,
    mobile_number,
    alternate_mobile_number
) => {
    const merchant_details = await get_merchants({
        mobile_numbers: [alternate_mobile_number, mobile_number]
    });
    for (let i = 0; i < merchant_details.rows?.length; i++) {
        const shop_details = await get_shop_detail_by_merchant_id({ merchant_detail_id: merchant_details.rows[i].id })
        shop_details.master_merchant_detail_id = mm_id;
        await shop_details.save();
    }
};

const replicate_data_for_new_user = async (
    primary_merchant_detail_id, language_id, alternate_mobile_number
) => {
    // get primary merchant profile
    const primary_merchant_details = await get_merchant_profile_v4_service(primary_merchant_detail_id);
    // get id of alternate number
    const alternate_merchant_data = await get_merchant_detail_by_number({
        mobile_number: alternate_mobile_number
    });
    const { country_code, business_name, merchant_name, shop_address, merchant_occupation_id, deal_in_med, deal_in_fert, deal_in_seed, shop_pic_url, profile_pic_url, other_description } = primary_merchant_details
    // update merchant_profile info
    await update_merchant_profile_v4_service(alternate_merchant_data.id, business_name, merchant_name, shop_address, deal_in_med, deal_in_fert, deal_in_seed, profile_pic_url, shop_pic_url, merchant_occupation_id, language_id, country_code);
    // update merchant occupation
    await add_occupation_of_merchant_service(alternate_merchant_data.id, merchant_occupation_id, other_description);

};
module.exports = add_alternate_mobile_number_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/merchant/services/get_merchant_details_service.js
const error_log = require('../../../../middelware/error_log');
const { get_active_or_inactive_merchant_details } = require('../../../../data_abstraction_layer/merchant/merchant_details');
const { get_news_feed_count } = require('../../../../data_abstraction_layer/news_feed/get_news_feed');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (merchant_id) => {
    try {
        const merchant_details = await get_active_or_inactive_merchant_details({ merchant_id });
        if (!merchant_details) { throw new ValidationError('merchant not found with id = ' + merchant_id); }
        const merchant_data = {
            merchant_detail_id: merchant_details.id,
            merchant_name: merchant_details.name,
            mobile_number: merchant_details.mobile_number,
            state_id: merchant_details.state_id,
            district_id: merchant_details.district_id,
            address: merchant_details.full_address,
            profile_image_url: merchant_details.profile_pic_url,
            is_active: merchant_details.is_active
        }
        let total_news_feed_created = await get_news_feed_count({ merchant_id });
        if (!total_news_feed_created) { total_news_feed_created = 0; }
        merchant_data.total_news_feed_created = total_news_feed_created;
        return merchant_data
    } catch (err) {
        error_log(err);
        return { merchant_data: null };
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/utm/swagger/index.js
module.exports = {
    tags: {
        name: "utm",
      },
    paths: {
        "/": {
            post: {
              tags: ["utm"],
              summary: "for saving utm details to db",
              description: "for saving utm details to db",
              operationId: "post_utm",
              security: [],
              parameters: [
                {
                  in: "formData",
                  name: "feature",
                  description: "feature",
                  required: false,
                  type: "string",
                },
                {
                  in: "formData",
                  name: "channel",
                  description: "channel",
                  required: false,
                  type: "string",
                },
                {
                    in: "formData",
                    name: "campaign",
                    description: "campaign",
                    required: false,
                    type: "string",
                },
                {
                    in: "formData",
                    name: "tags",
                    description: "tags",
                    required: false,
                    type: "array",
                },
                {
                    in: "header",
                    name: "fmt-device-id",
                    description: "device_id",
                    required: true,
                    type: "string"
                }
              ],
              responses: {
                405: {
                  description: "Invalid input",
                },
                200: {
                  description: "success",
                },
              },
            },
          }
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/utm/index.js
const router = require("express").Router();
const save_utm_details_controller = require("./controllers/save_utm_details_controller");

router.post("/", save_utm_details_controller);
module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/utm/controllers/save_utm_details_controller.js
const error_log = require('../../../../middelware/error_log');
const post_utm_service = require('../services/save_utm_details_service');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const http_headers_enums = require('../../../../enums/global/http_headers');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const device_id = req.headers[http_headers_enums['fmt-device-id']];
        const feature = req.body.feature;
        const channel = req.body.channel;
        const campaign = req.body.campaign;
        let tags = req.body.tags || [];

        tags = tags?.join(',') || '';

        if (!device_id) {
            throw new ValidationError('device_id is a mandatory parameter !')
        }

        await post_utm_service(device_id, feature, channel, campaign, tags);

        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'Success'));

    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/utm/services/save_utm_details_service.js
const error_log = require('../../../../middelware/error_log');
const save_utm_details = require('../../../../data_abstraction_layer/utm/save_utm_details');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const post_utm_service = async (device_id, feature, channel, campaign, tags) => {
    try {
        const utm_detail = await save_utm_details(device_id, feature, channel, campaign, tags);
        if (!utm_detail.utm_created) {
            throw new ValidationError('the device_id already exists !');
        }
        return utm_detail;
    } catch (err) {
        error_log(err);
        throw err;
    }
}

module.exports = post_utm_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/swagger/index.js
module.exports = {
    tags: {
        name: "crop",
    },
    paths: {
        "/variety": {
            post: {
                tags: ["crop"],
                summary: "create new variety",
                description: "",
                operationId: "create_variety",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "schema": {
                            "type": "object",
                            "required": ["name", "qualityCheckGuideURL", "cropId", "qcData", "samplingData", "docData"],
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "qualityCheckGuideURL": {
                                    "type": "string"
                                },
                                "cropId": {
                                    "type": "string"
                                },
                                "qcData": {
                                    "type": "array",
                                    "items": {
                                        "required": ["name", "value", "condition", "imageRequired"],
                                        "properties": {
                                            "name": {
                                                "type": "string"
                                            },
                                            "value": {
                                                "type": "string"
                                            },
                                            "condition": {
                                                "type": "string"
                                            },
                                            "imageRequired": {
                                                "type": "boolean"
                                            }
                                        }
                                    }
                                },
                                "samplingData": {
                                    "type": "array",
                                    "items": {
                                        "required": ["weightFrom", "weightTo", "minimumImages", "sampleCount"],
                                        "properties": {
                                            "weightFrom": {
                                                "type": "number"
                                            },
                                            "weightTo": {
                                                "type": "number"
                                            },
                                            "minimumImages": {
                                                "type": "number"
                                            },
                                            "sampleCount": {
                                                "type": "number"
                                            }
                                        }
                                    }
                                },
                                "docData": {
                                    "type": "array",
                                    "items": {
                                        "required": ["name", "mendatory", "imageRequired"],
                                        "properties": {
                                            "name": {
                                                "type": "string"
                                            },
                                            "mendatory": {
                                                "type": "boolean"
                                            },
                                            "imageRequired": {
                                                "type": "boolean"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    }
                }
            },
            get: {
                tags: ["crop"],
                summary: "fetch crop varieties",
                description: "",
                operationId: "fetch_varieties_details",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "query",
                        name: "crop_id",
                        description: "",
                        required: true,
                        type: "number"
                    },
                    {
                        in: "query",
                        name: "search_param",
                        description: "",
                        required: false,
                        type: "string"
                    },
                    {
                        in: "query",
                        name: "is_qc_required",
                        description: "",
                        required: false,
                        type: "boolean"
                    },
                    {
                        in: "query",
                        name: "is_sampling_required",
                        description: "",
                        required: false,
                        type: "boolean"
                    },
                    {
                        in: "query",
                        name: "is_doc_required",
                        description: "",
                        required: false,
                        type: "boolean"
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        },
        "/variety/{variety_id}": {
            put: {
                tags: ["crop"],
                summary: "update variety",
                description: "",
                operationId: "update_variety",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        "in": "path",
                        "name": "variety_id",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "schema": {
                            "type": "object",
                            "required": ["varietyData"],
                            "properties": {
                                "varietyData": {
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string"
                                        },
                                        "qualityCheckGuideURL": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    }
                }
            },
            delete: {
                tags: ["crop"],
                summary: "delete variety",
                description: "",
                operationId: "delete_variety",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        "in": "path",
                        "name": "variety_id",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    }
                }
            }
        },
        "/variety/qc_checklist": {
            post: {
                tags: ["crop"],
                summary: "create new qc checklist",
                description: "",
                operationId: "create_qc_checklist",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "schema": {
                            "type": "object",
                            "required": ["qcData", "varietyId"],
                            "properties": {
                                "varietyId": {
                                    "type": "string"
                                },
                                "qcData": {
                                    "type": "object",
                                    "required": ["name", "value", "condition", "imageRequired"],
                                    "properties": {
                                        "name": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "string"
                                        },
                                        "condition": {
                                            "type": "string"
                                        },
                                        "imageRequired": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    }
                }
            },
            get: {
                tags: ["crop"],
                summary: "fetch qc checklist for variety",
                description: "",
                operationId: "fetch_qc_checklist",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "query",
                        name: "crop_variety_id",
                        description: "",
                        required: true,
                        type: "number"
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        },
        "/variety/sampling": {
            post: {
                tags: ["crop"],
                summary: "create new sampling condition",
                description: "",
                operationId: "create_sampling",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "schema": {
                            "type": "object",
                            "required": ["samplingData", "varietyId"],
                            "properties": {
                                "varietyId": {
                                    "type": "string"
                                },
                                "samplingData": {
                                    "type": "object",
                                    "required": ["weightFrom", "weightTo", "minimumImages", "sampleCount"],
                                    "properties": {
                                        "weightFrom": {
                                            "type": "number"
                                        },
                                        "weightTo": {
                                            "type": "number"
                                        },
                                        "minimumImages": {
                                            "type": "number"
                                        },
                                        "sampleCount": {
                                            "type": "number"
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    }
                }
            },
            get: {
                tags: ["crop"],
                summary: "fetch sampling condition for variety",
                description: "",
                operationId: "fetch_sampling",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "query",
                        name: "crop_variety_id",
                        description: "",
                        required: true,
                        type: "number"
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        },
        "/variety/dispatch_doc": {
            post: {
                tags: ["crop"],
                summary: "create new dispatch document",
                description: "",
                operationId: "create_dispatch_doc",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "schema": {
                            "type": "object",
                            "required": ["docData", "varietyId"],
                            "properties": {
                                "varietyId": {
                                    "type": "string"
                                },
                                "docData": {
                                    "type": "object",
                                    "required": ["name", "mendatory", "imageRequired"],
                                    "properties": {
                                        "name": {
                                            "type": "string"
                                        },
                                        "mendatory": {
                                            "type": "boolean"
                                        },
                                        "imageRequired": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    }
                }
            },
            get: {
                tags: ["crop"],
                summary: "fetch dispatch doc for variety",
                description: "",
                operationId: "fetch_dispatch_doc",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "query",
                        name: "crop_variety_id",
                        description: "",
                        required: true,
                        type: "number"
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        },
        "/variety/qc_checklist/{qc_id}": {
            put: {
                tags: ["crop"],
                summary: "update qc checklist",
                description: "",
                operationId: "update_qc_checklist",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        "in": "path",
                        "name": "qc_id",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "schema": {
                            "type": "object",
                            "required": ["qcData", "varietyId"],
                            "properties": {
                                "varietyId": {
                                    "type": "string"
                                },
                                "qcData": {
                                    "type": "object",
                                    "required": ["name", "value", "condition", "imageRequired"],
                                    "properties": {
                                        "name": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "string"
                                        },
                                        "condition": {
                                            "type": "string"
                                        },
                                        "imageRequired": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    }
                }
            },
        },
        "/variety/sampling/{sampling_id}": {
            put: {
                tags: ["crop"],
                summary: "update sampling condition",
                description: "",
                operationId: "update_sampling",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        "in": "path",
                        "name": "sampling_id",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "schema": {
                            "type": "object",
                            "required": ["samplingData", "varietyId"],
                            "properties": {
                                "varietyId": {
                                    "type": "string"
                                },
                                "samplingData": {
                                    "type": "object",
                                    "required": ["weightFrom", "weightTo", "minimumImages", "sampleCount"],
                                    "properties": {
                                        "weightFrom": {
                                            "type": "number"
                                        },
                                        "weightTo": {
                                            "type": "number"
                                        },
                                        "minimumImages": {
                                            "type": "number"
                                        },
                                        "sampleCount": {
                                            "type": "number"
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    }
                }
            }
        },
        "/variety/dispatch_doc/{doc_id}": {
            put: {
                tags: ["crop"],
                summary: "update dispatch document",
                description: "",
                operationId: "update_dispatch_doc",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        "in": "path",
                        "name": "doc_id",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "schema": {
                            "type": "object",
                            "required": ["docData", "varietyId"],
                            "properties": {
                                "varietyId": {
                                    "type": "string"
                                },
                                "docData": {
                                    "type": "object",
                                    "required": ["name", "mendatory", "imageRequired"],
                                    "properties": {
                                        "name": {
                                            "type": "string"
                                        },
                                        "mendatory": {
                                            "type": "boolean"
                                        },
                                        "imageRequired": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    }
                }
            }
        },
        "/variety/qc_checklist/{qc_id}/{variety_id}": {
            delete: {
                tags: ["crop"],
                summary: "delete qc checklist",
                description: "",
                operationId: "delete_qc_checklist",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        "in": "path",
                        "name": "qc_id",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "variety_id",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    }
                }
            },
        },
        "/variety/sampling/{sampling_id}/{variety_id}": {
            delete: {
                tags: ["crop"],
                summary: "delete sampling condition",
                description: "",
                operationId: "delete_sampling",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        "in": "path",
                        "name": "sampling_id",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "variety_id",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    }
                }
            }
        },
        "/variety/dispatch_doc/{doc_id}/{variety_id}": {
            delete: {
                tags: ["crop"],
                summary: "delete dispatch document",
                description: "",
                operationId: "delete_dispatch_doc",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        "in": "path",
                        "name": "doc_id",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "variety_id",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    }
                }
            }
        },
        "/variety/gst_details": {
            post: {
                tags: ["crop"],
                summary: "add gst details for crop variety",
                description: "",
                operationId: "add_gst_details",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "body",
                        name: "body",
                        description: "",
                        schema: {
                            type: "object",
                            required: ["crop_variety_id", "is_gst_applicable"],
                            properties: {
                                crop_variety_id: {
                                    type: "number"
                                },
                                is_gst_applicable: {
                                    type: "boolean"
                                },
                                hsn_code: {
                                    type: "string"
                                },
                                inter_state_tax_rate: {
                                    type: "number"
                                },
                                intra_state_tax_rate: {
                                    type: "number"
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    }
                }
            },
            get: {
                tags: ["crop"],
                summary: "fetch gst details for crop variety",
                description: "",
                operationId: "fetch_gst_details",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "query",
                        name: "crop_variety_id",
                        description: "",
                        required: true,
                        type: "number",
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    }
                }
            },
        },
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/index.js
const add_gst_details_controller = require("./controllers/add_gst_details_controller");
const create_dispatch_doc_controller = require("./controllers/create_dispatch_doc_controller");
const create_qc_checklist_controller = require("./controllers/create_qc_checklist_controller");
const create_sampling_controller = require("./controllers/create_sampling_controller");
const create_variety_controller = require("./controllers/create_variety_controller");
const delete_dispatch_doc_controller = require("./controllers/delete_dispatch_doc_controller");
const delete_qc_checklist_controller = require("./controllers/delete_qc_checklist_controller");
const delete_sampling_controller = require("./controllers/delete_sampling_controller");
const delete_variety_controller = require("./controllers/delete_variety_controller");
const fetch_gst_details_controller = require("./controllers/fetch_gst_details_controller");
const fetch_qc_checklist_controller = require("./controllers/fetch_qc_checklist_controller");
const fetch_sampling_controller = require("./controllers/fetch_sampling_controller");
const fetch_varieties_controller = require("./controllers/fetch_varieties_controller");
const fetch_dispatch_doc_controller = require("./controllers/fetch_dispatch_doc_controller");
const update_dispatch_doc_controller = require("./controllers/update_dispatch_doc_controller");
const update_qc_checklist_controller = require("./controllers/update_qc_checklist_controller");
const update_sampling_controller = require("./controllers/update_sampling_controller");
const update_variety_controller = require("./controllers/update_variety_controller");

const router = require("express").Router();

router.post("/variety", create_variety_controller);
router.put("/variety/:variety_id", update_variety_controller);
router.delete("/variety/:variety_id", delete_variety_controller);
router.post("/variety/qc_checklist", create_qc_checklist_controller);
router.post("/variety/sampling", create_sampling_controller);
router.post("/variety/dispatch_doc", create_dispatch_doc_controller);
router.put("/variety/qc_checklist/:qc_id", update_qc_checklist_controller);
router.put("/variety/sampling/:sampling_id", update_sampling_controller);
router.put("/variety/dispatch_doc/:doc_id", update_dispatch_doc_controller);
router.delete("/variety/qc_checklist/:qc_id/:variety_id", delete_qc_checklist_controller);
router.delete("/variety/sampling/:sampling_id/:variety_id", delete_sampling_controller);
router.delete("/variety/dispatch_doc/:doc_id/:variety_id", delete_dispatch_doc_controller);
router.post("/variety/gst_details", add_gst_details_controller);
router.get("/variety/gst_details", fetch_gst_details_controller);
router.get("/variety", fetch_varieties_controller);
router.get("/variety/qc_checklist", fetch_qc_checklist_controller);
router.get("/variety/sampling", fetch_sampling_controller);
router.get("/variety/dispatch_doc", fetch_dispatch_doc_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/_services/update_variety_service.js
const crop_variety_model = require("../../../../database/models_v2/crop/crop_varieties_detail");
const error_log = require("../../../../middelware/error_log");

const update_variety_service = async ({ varietyData, variety_id }) => {
    try {
        const crop_variety = await crop_variety_model.findOne({
            where: {
                is_active: 1,
                id: variety_id
            }
        });
        if (crop_variety) {
            crop_variety.name = varietyData.name;
            crop_variety.quality_check_guide_url = varietyData.qualityCheckGuideURL;
            await crop_variety.save();
        }
        else {
            throw new Error("invalid variety_id")
        }

        return { data: true };
    } catch (err) {
        error_log(err);
        return { data: false };
    }
};

module.exports = {
    update_variety_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/_services/delete_qc_checklist_service.js
const crop_qc_param_map_model = require("../../../../database/models_v2/procurement_order/crop_variety_qc_param_maps");
const error_log = require("../../../../middelware/error_log");

const delete_qc_checklist_service = async ({ qc_id, variety_id }) => {
    try {
        const crop_variety_qc_param_maps = await crop_qc_param_map_model.findOne({
            where: {
                is_active: 1,
                id: qc_id
            }
        });
        if (crop_variety_qc_param_maps) {
            crop_variety_qc_param_maps.is_active = 0;
            await crop_variety_qc_param_maps.save();
        }
        else {
            throw new Error("invalid qc_id or variety_id");
        }

        return { data: true };
    } catch (err) {
        error_log(err);
        return { data: false }
    }
};

module.exports = {
    delete_qc_checklist_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/_services/fetch_dispatch_doc_service.js
const crop_variety_procurement_dispatch_document_map = require("../../../../database/models_v2/procurement_order/crop_variety_procurement_document_dispatch_map");
const procurement_dispatch_document_model = require("../../../../database/models_v2/procurement_order/procurement_dispatch_document");
const qc_condition = require("../../../../enums/crop/qc_condition");
const error_log = require("../../../../middelware/error_log");

const fetch_dispatch_doc_service = async ({ crop_variety_id }) => {
    return new Promise(async (resolve, reject) => {
        try {
            const dispatch_docs = await crop_variety_procurement_dispatch_document_map.findAll({
                where: {
                    crop_variety_id,
                    is_active: true
                },
                include: [
                    {
                        model: procurement_dispatch_document_model,
                        where: {
                            is_active: true
                        },
                        required: true
                    }
                ]
            })
            let response = generate_response(dispatch_docs);
            return resolve(response);
        }
        catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    })
}

const generate_response = (dispatch_docs) => {
    try {
        let response = {
            dispatch_docs: []
        }
        for (let index = 0; index < dispatch_docs.length; index++) {
            const doc = dispatch_docs[index];
            response.dispatch_docs.push({
                id: doc.id,
                dispatch_doc_id: doc.procurement_document_dispatch_id,
                doc_name: doc.procurement_dispatch_document.name,
                is_mandatory: doc.mandatory,
                is_image_required: doc.image_required
            })
        }
        return response;
    }
    catch (err) {
        throw new Error(err.message);
    }
}

module.exports = {
    fetch_dispatch_doc_service,
    generate_response
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/_services/update_sampling_service.js
const crop_variety_sampling_condition_model = require("../../../../database/models_v2/procurement_order/crop_variety_sampling_condition");
const error_log = require("../../../../middelware/error_log");

const update_sampling_service = async ({ samplingData, varietyId, sampling_id }) => {
    try {
        const sampling_condition = await crop_variety_sampling_condition_model.findOne({
            where: {
                id: sampling_id,
                crop_variety_id: varietyId,
                is_active: 1
            }
        })
        if (sampling_condition) {
            sampling_condition.weight_from = samplingData.weightFrom;
            sampling_condition.weight_to = samplingData.weightTo;
            sampling_condition.minimum_images = samplingData.minimumImages;
            sampling_condition.sampling_count = samplingData.sampleCount;
            await sampling_condition.save();
        }
        if (!sampling_condition) {
            return {
                status: HTTP_status_codes.badRequest,
                data: {
                    message: "invalid sampling_id or varietyId"
                },
            }
        }

        return { data: true };
    } catch (err) {
        error_log(err);
        return {
            data: {
                message: "Something bad happened",
                error: err.message,
            }
        };
    }
};

module.exports = {
    update_sampling_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/_services/fetch_sampling_service.js
const crop_variety_sampling_condition_model = require("../../../../database/models_v2/procurement_order/crop_variety_sampling_condition");
const error_log = require("../../../../middelware/error_log");

const fetch_sampling_service = async ({ crop_variety_id }) => {
    return new Promise(async (resolve, reject) => {
        try {
            const sampling_conditions = await crop_variety_sampling_condition_model.findAll({
                where: {
                    crop_variety_id,
                    is_active: true
                }
            })
            let response = generate_response(sampling_conditions);
            return resolve(response);
        }
        catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    })
}

const generate_response = (sampling_conditions) => {
    try {
        let response = {
            qc_sampling_conditions: []
        }
        for (let index = 0; index < sampling_conditions.length; index++) {
            const sampling = sampling_conditions[index];
            response.qc_sampling_conditions.push({
                id: sampling.id,
                weight_from: sampling.weight_from,
                weight_to: sampling.weight_to,
                minimum_images: sampling.minimum_images,
                sample_count: sampling.sampling_count
            })
        }
        return response;
    }
    catch (err) {
        throw new Error(err.message);
    }
}

module.exports = {
    fetch_sampling_service,
    generate_response
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/_services/delete_dispatch_doc_service.js
const crop_variety_procurement_dispatch_document_maps_model = require("../../../../database/models_v2/procurement_order/crop_variety_procurement_document_dispatch_map");
const error_log = require("../../../../middelware/error_log");

const delete_dispatch_doc_service = async ({ doc_id, variety_id }) => {
    try {
        const crop_variety_procurement_dispatch_document_maps = await crop_variety_procurement_dispatch_document_maps_model.findOne({
            where: {
                crop_variety_id: variety_id,
                id: doc_id,
                is_active: 1
            }
        });
        if (crop_variety_procurement_dispatch_document_maps) {
            crop_variety_procurement_dispatch_document_maps.is_active = 0;
            await crop_variety_procurement_dispatch_document_maps.save();
        }
        else {
            throw new Error("invalid variety_id or doc_id")
        };
        return { data: true };
    } catch (err) {
        error_log(err);
        return { data: false };
    }
};

module.exports = {
    delete_dispatch_doc_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/_services/delete_sampling_service.js
const crop_variety_sampling_condition_model = require("../../../../database/models_v2/procurement_order/crop_variety_sampling_condition")
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");

const delete_sampling_service = async ({ sampling_id, variety_id }) => {
    try {
        const sampling_condition = await crop_variety_sampling_condition_model.findOne({
            where: {
                id: sampling_id,
                crop_variety_id: variety_id,
                is_active: 1
            }
        });
        if (sampling_condition) {
            sampling_condition.is_active = 0;
            await sampling_condition.save();
        }
        else {
            throw new Error("invalid sampling_id or variety_id");
        }
        return { data: true };
    } catch (err) {
        error_log(err);
        return { data: false }
    }
};

module.exports = {
    delete_sampling_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/_services/fetch_qc_checklist_service.js
const crop_variety_qc_param_maps_model = require("../../../../database/models_v2/procurement_order/crop_variety_qc_param_maps");
const qc_param_types_model = require("../../../../database/models_v2/procurement_order/qc_param_types");
const qc_condition = require("../../../../enums/crop/qc_condition");
const error_log = require("../../../../middelware/error_log");

const fetch_qc_checklist_service = async ({ crop_variety_id }) => {
    return new Promise(async (resolve, reject) => {
        try {
            const qc_checklists = await crop_variety_qc_param_maps_model.findAll({
                where: {
                    crop_variety_id,
                    is_active: true
                },
                include: [
                    {
                        model: qc_param_types_model,
                        where: {
                            is_active: true
                        },
                        required: true
                    }
                ]
            })
            let response = generate_response(qc_checklists);
            return resolve(response);
        }
        catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    })
}

const generate_response = (qc_checklists) => {
    try {
        let response = {
            qc_checklists: []
        }
        for (let index = 0; index < qc_checklists.length; index++) {
            const qc = qc_checklists[index];
            response.qc_checklists.push({
                id: qc.id,
                qc_type_id: qc.qc_param_type_id,
                qc_name: qc.qc_param_type.name,
                value: qc.threshold_value,
                condition: Object.keys(qc_condition).find((key) => qc_condition[key] === qc.condition),
                is_image_required: qc.image_required ? true : false
            })
        }
        return response;
    }
    catch (err) {
        throw new Error(err.message);
    }
}

module.exports = {
    fetch_qc_checklist_service,
    generate_response
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/_services/create_sampling_service.js
const crop_variety_detail_model = require("../../../../database/models_v2/crop/crop_varieties_detail");
const crop_variety_sampling_model = require("../../../../database/models_v2/procurement_order/crop_variety_sampling_condition");
const error_log = require("../../../../middelware/error_log");
const { get_crop_variety_data_service } = require("./get_crop_variety_data");

const create_sampling_service = async (crop_sampling_data, crop_variety_id) => {
  try {
    const crop_variety = await crop_variety_detail_model.findOne({
      id: crop_variety_id,
      is_active: 1
    });
    if (!crop_variety) {
      throw new Error("crop_variety not present");
    }

    const response = await Promise.all(crop_sampling_data.map(async (crop_sampling) => {
      try {
        const [crop_variety_sampling, created] = await crop_variety_sampling_model.findOrCreate({
          where: {
            crop_variety_id: crop_variety_id,
            sampling_count: crop_sampling["sampleCount"],
            minimum_images: crop_sampling["minimumImages"],
            weight_from: crop_sampling["weightFrom"],
            weight_to: crop_sampling["weightTo"],
            is_active: 1
          }
        });
        const data = await get_crop_variety_data_service(crop_variety_id);
        return { data };
      }
      catch (err) {
        console.log(err.message);
      }
    }));


    return { crop_variety_sampling: response };

  } catch (err) {
    error_log(err);
    return null;
  }
};


module.exports = {
  create_sampling_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/_services/update_qc_checklist_service.js
const crop_variety_qc_param_maps_model = require("../../../../database/models_v2/procurement_order/crop_variety_qc_param_maps");
const error_log = require("../../../../middelware/error_log");
const qc_condition_enum = require("../../../../enums/crop/qc_condition");

const update_qc_checklist_service = async ({ qcData, qc_id }) => {
  try {
    const crop_variety_qc_param_map = await crop_variety_qc_param_maps_model.findOne({
      where: {
        id: qc_id,
        is_active: 1
      }
    });
    if (crop_variety_qc_param_map) {
      crop_variety_qc_param_map.threshold_value = qcData["value"];
      crop_variety_qc_param_map.condition = qc_condition_enum[qcData.condition];
      crop_variety_qc_param_map.image_required = qcData["imageRequired"];
      await crop_variety_qc_param_map.save();
    }
    else {
      throw new Error("invalid qc_id ");
    }
    return { data: true };
  } catch (err) {
    error_log(err);
    throw new Error(err.message);
  }
};

module.exports = {
  update_qc_checklist_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/_services/delete_variety_service.js
const crop_variety_model = require("../../../../database/models_v2/crop/crop_varieties_detail");
const error_log = require("../../../../middelware/error_log");

const delete_variety_service = async ({ variety_id }) => {
    try {
        const crop_variety = await crop_variety_model.findOne({
            where: {
                id: variety_id,
                is_active: 1
            }
        });

        if (crop_variety) {
            crop_variety.is_active = 0;
            await crop_variety.save();
        }
        else {
            throw new Error("invalid variety_id");
        }
        return { data: true };

    } catch (err) {
        error_log(err);
        return { data: false };
    }
};

module.exports = {
    delete_variety_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/_services/create_variety_service.js
const crop_detail_model = require("../../../../database/models_v2/crop/crop_detail");
const crop_variety_detail_model = require("../../../../database/models_v2/crop/crop_varieties_detail");
const error_log = require("../../../../middelware/error_log");
const { add_gst_details_service } = require("./add_gst_details_service");

const create_variety_service = async ({ name, crop_id, qualityCheckGuideURL }) => {
    try {
        const crop_detail = await crop_detail_model.findOne({
            where: {
                id: crop_id,
                is_active: 1
            }
        });

        if (!crop_detail) {
            throw new Error("crop_detail not found");
        }
        const variety_exist = await crop_variety_detail_model.findOne({
            where: {
                is_active: 1,
                name: name,
                crop_id: crop_id
            }
        })
        if(variety_exist){
            throw new Error("crop variety already exist");
        }
        const crop_variety_detail = await crop_variety_detail_model.create({
            quality_check_guide_url: qualityCheckGuideURL,
            is_active: 1,
            name: name,
            crop_id: crop_id
        });

        // add gst details for this variety
        add_gst_details_service({
            crop_variety_id: crop_variety_detail.id,
            is_gst_applicable: false
        })
        .then((data)=>{
            console.log(data);
        })
        .catch((err) => {
            error_log(err)
        })

        return crop_variety_detail;
    } catch (err) {
        error_log(err);
        throw err;
    }
};

module.exports = {
    create_variety_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/_services/fetch_gst_details_service.js
const crop_variety_gst_detail = require("../../../../database/models_v2/crop/crop_variety_gst_detail");
const error_log = require("../../../../middelware/error_log");

const fetch_gst_details_service = async ({ crop_variety_id }) => {
    return new Promise(async (resolve, reject) => {
        try {
            let response = {}
            const variety_gst_details = await crop_variety_gst_detail.findOne({
                where: {
                    crop_variety_id,
                    is_active: true
                }
            })
            if (variety_gst_details){
                response.is_gst_applicable = variety_gst_details.is_gst_applicable,
                response.hsn_code = variety_gst_details.hsn_code,
                response.inter_state_tax_rate = variety_gst_details.inter_state_tax_rate,
                response.intra_state_tax_rate = variety_gst_details.intra_state_tax_rate
            }
            return resolve(response);
        }
        catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    })
}

module.exports = {
    fetch_gst_details_service
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/_services/create_dispatch_doc_service.js
const crop_variety_model = require("../../../../database/models_v2/crop/crop_varieties_detail");
const crop_variety_dispatch_document_type_model = require("../../../../database/models_v2/procurement_order/procurement_dispatch_document");
const crop_variety_procurement_dispatch_document_map_model = require("../../../../database/models_v2/procurement_order/crop_variety_procurement_document_dispatch_map");
const { get_crop_variety_data_service } = require("./get_crop_variety_data");
const error_log = require("../../../../middelware/error_log");

const create_dispatch_doc_service = async (crop_variety_id, crop_dispatch_document_data) => {
    try {
        const crop_variety = await crop_variety_model.findOne({
            id: crop_variety_id,
            is_active: 1
        });
        if (!crop_variety) {
            throw new Error("crop_variety not present");
        }

        const response = await Promise.all(crop_dispatch_document_data.map(async (dispatch_doc_data) => {
            try {
                const [crop_dispatch_doc_data, created] = await crop_variety_dispatch_document_type_model.findOrCreate({
                    where: {
                        name: dispatch_doc_data["name"],
                        is_active: 1
                    }
                });
                const [crop_dispatch_doc_maps, crop_dispatch_doc_maps_created] = await crop_variety_procurement_dispatch_document_map_model.findOrCreate({
                    where: {
                        procurement_document_dispatch_id: crop_dispatch_doc_data.id,
                        is_active: 1,
                        image_required: dispatch_doc_data["imageRequired"],
                        mandatory: dispatch_doc_data["mendatory"],
                        crop_variety_id
                    }
                });
                const data = await get_crop_variety_data_service(crop_variety_id);
                return { data };
            }
            catch (err) {
                console.log(err.message);
                return { data: null }
            }
        }));

        return { crop_dispatch_doc_maps: response };
    }
    catch (err) {
        error_log(err);
        return null;
    }
};

module.exports = {
    create_dispatch_doc_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/_services/fetch_varieties_service.js
const Op = require("sequelize").Op;
const crop_varieties_detail = require("../../../../database/models_v2/crop/crop_varieties_detail");
const crop_variety_gst_detail_model = require("../../../../database/models_v2/crop/crop_variety_gst_detail");
const crop_variety_procurement_dispatch_document_map_model = require("../../../../database/models_v2/procurement_order/crop_variety_procurement_document_dispatch_map");
const crop_variety_qc_param_maps_model = require("../../../../database/models_v2/procurement_order/crop_variety_qc_param_maps");
const crop_variety_sampling_condition_model = require("../../../../database/models_v2/procurement_order/crop_variety_sampling_condition");
const error_log = require("../../../../middelware/error_log");

const fetch_varieties_service = async ({
    crop_id,
    search_param,
    is_qc_required,
    is_sampling_required,
    is_doc_required
}) => {
    return new Promise(async (resolve, reject) => {
        try {
            let query = {
                is_active: true,
                crop_id
            }
            if (search_param) {
                query.name = {
                    [Op.like]: '%' + search_param + '%'
                }
            }
            const crop_varieties = await crop_varieties_detail.findAll({
                where: query,
                include: [
                    {
                        model: crop_variety_qc_param_maps_model,
                        attributes: ['id','image_required'],
                        where: {
                            is_active: true
                        },
                        required: (is_qc_required == 'true') ? true : false
                    },
                    {
                        model: crop_variety_sampling_condition_model,
                        attributes: ['id'],
                        where: {
                            is_active: true
                        },
                        required: (is_sampling_required == 'true') ? true : false
                    },
                    {
                        model: crop_variety_procurement_dispatch_document_map_model,
                        attributes: ['id'],
                        where: {
                            is_active: true
                        },
                        required: (is_doc_required == 'true') ? true : false
                    },
                    {
                        model: crop_variety_gst_detail_model,
                        attributes: ['id', 'inter_state_tax_rate', 'intra_state_tax_rate'],
                        where: {
                            is_active: true
                        },
                        required: false
                    },
                ],
                order: [["updated_at", "DESC"]],
            })
            let response = generate_response(crop_varieties);
            return resolve(response);
        }
        catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    })
}

const generate_response = (crop_varieties) => {
    try {
        let response = {
            crop_varieties: []
        }
        for (let index = 0; index < crop_varieties.length; index++) {
            const crop_variety = crop_varieties[index];
            let gst_perc = null;
            if (crop_variety.crop_variety_gst_details?.length) {
                gst_perc = (crop_variety.crop_variety_gst_details[0].inter_state_tax_rate || 0)
                    + (crop_variety.crop_variety_gst_details[0].intra_state_tax_rate || 0)
            }
            response.crop_varieties.push({
                id: crop_variety.id,
                crop_variety_name: crop_variety.name,
                no_of_qc_check: crop_variety.crop_variety_qc_param_maps?.length || 0,
                no_of_image_required: crop_variety.crop_variety_qc_param_maps?.filter((qc) => qc.image_required)?.length || 0,
                no_of_documents: crop_variety.crop_variety_procurement_dispatch_document_maps?.length || 0,
                gst_perc
            })
        }
        return response;
    }
    catch (err) {
        throw new Error(err.message);
    }
}

module.exports = {
    fetch_varieties_service,
    generate_response
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/_services/update_dispatch_doc_service.js
const crop_variety_procurement_dispatch_document_maps_model = require("../../../../database/models_v2/procurement_order/crop_variety_procurement_document_dispatch_map");
const error_log = require("../../../../middelware/error_log");

const update_dispatch_doc_service = async ({ docData, varietyId, doc_id }) => {
  try {
    const crop_variety_procurement_dispatch_document_map = await crop_variety_procurement_dispatch_document_maps_model.findOne({
      where: {
        id: doc_id,
        is_active: 1
      }
    });
    if (crop_variety_procurement_dispatch_document_map) {
      crop_variety_procurement_dispatch_document_map.image_required = docData["imageRequired"];
      crop_variety_procurement_dispatch_document_map.mandatory = docData["mendatory"];
      await crop_variety_procurement_dispatch_document_map.save();
    }
    else {
      throw new Error("invalid doc id")
    }
    return { data: true };
  } catch (err) {
    error_log(err);
    throw new Error(err.message);
  }
};

module.exports = {
  update_dispatch_doc_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/_services/get_crop_variety_data.js
const cropVarietiesModel = require("../../../../database/models_v2/crop/crop_varieties_detail");
const cropVarietiesQcParamsMapsModel = require("../../../../database/models_v2/procurement_order/crop_variety_qc_param_maps");
const cropVarietiesQcParamsTypesModel = require("../../../../database/models_v2/procurement_order/qc_param_types");
const cropVarietiesSamplingConditionModel = require("../../../../database/models_v2/procurement_order/crop_variety_sampling_condition");
const cropVarietiesDispatchDocumentMapModel = require("../../../../database/models_v2/procurement_order/crop_variety_procurement_document_dispatch_map");
const cropVarietiesDispatchDocumentModel = require("../../../../database/models_v2/procurement_order/procurement_dispatch_document");

const cropQcConditionEnums = require("../../../../enums/crop/qc_condition");

const error_log = require("../../../../middelware/error_log");

const get_crop_variety_data_service = async (crop_variety_id) => {
  try {
    const crop_variety_result = await cropVarietiesModel.findOne({
      where: {
        id: crop_variety_id,
        is_active: 1
      },
      require: true,
      include: [
        {
          model: cropVarietiesQcParamsMapsModel,
          where: {
            is_active: 1,
          },
          require: true,
          include: {
            model: cropVarietiesQcParamsTypesModel,
            where: {
              is_active: 1,
            },
            require: true,
          },
        },
        {
          model: cropVarietiesSamplingConditionModel,
          where: {
            is_active: 1,
          },
          require: true,
        },
        {
          model: cropVarietiesDispatchDocumentMapModel,
          where: {
            is_active: 1,
          },
          require: true,
          include: {
            model: cropVarietiesDispatchDocumentModel,
            require: true,
            where: { is_active: 1 },
          },
        },
      ],
    })
    let cropResultOldServiceFormat;
    if (crop_variety_result)
      cropResultOldServiceFormat =
        createResponseAsOldServiceFormat(crop_variety_result);
    else
      return null;
    return cropResultOldServiceFormat;
  } catch (err) {
    error_log(err);
    return { message: err.message };
  }
};

module.exports = {
  get_crop_variety_data_service,
};

function createResponseAsOldServiceFormat(cropResult) {
  let crop_varieties = [];
  [cropResult].forEach((variety) => {
    let varietyOldServiceFormat = {
      _id: variety.id,
      isActive: true,
      name: variety.name,
      qualityCheckGuideURL: variety.quality_check_guide_url,
      crop: variety.crop_id,
      qcCheckListParameter: [],
      samplingCondition: [],
      documentAtDispatch: [],
      createdAt: variety.createdAt,
      updatedAt: variety.updatedAt,
    };

    variety.crop_variety_qc_param_maps.forEach((qc) => {
      let qcOldServiceFormat = {
        isActive: true,
        qcTypeId: qc.qc_param_type.id,
        _id: qc.id,
        name: qc.qc_param_type.name,
        value: qc.threshold_value,
        condition: getCropQcConditionValueFromEnum(
          cropQcConditionEnums,
          qc.condition
        ),
        imageRequired: qc.image_required ? true : false,
      };
      varietyOldServiceFormat.qcCheckListParameter.push(qcOldServiceFormat);
    });

    variety.crop_variety_sampling_conditions.forEach((sampling) => {
      let samplingOldServiceFormat = {
        isActive: true,
        weightFrom: sampling.weight_from,
        weightTo: sampling.weight_to,
        minimumImages: sampling.minimum_images,
        sampleCount: sampling.sampling_count,
        _id: sampling.id,
      };
      varietyOldServiceFormat.samplingCondition.push(
        samplingOldServiceFormat
      );
    });

    variety.crop_variety_procurement_dispatch_document_maps.forEach((doc) => {
      let docOldServiceFormat = {
        isActive: true,
        dispatchDocTypeId: doc.procurement_dispatch_document.id,
        name: doc.procurement_dispatch_document.name,
        mendatory: true,
        imageRequired: true,
        _id: doc.id,
      };
      varietyOldServiceFormat.documentAtDispatch.push(docOldServiceFormat);
    });
    crop_varieties.push(varietyOldServiceFormat);
  });

  return crop_varieties;
}

function getCropQcConditionValueFromEnum(enums, condition) {
  for (let key in enums) {
    if (enums[key] === condition) {
      return key;
    }
  }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/_services/add_gst_details_service.js
const crop_variety_gst_detail = require("../../../../database/models_v2/crop/crop_variety_gst_detail");
const error_log = require("../../../../middelware/error_log");
const sequelize = require("../../../../database/db_connection_initializer");
const { fetch_gst_details_service } = require("./fetch_gst_details_service");

const add_gst_details_service = async ({
    crop_variety_id,
    is_gst_applicable,
    hsn_code,
    inter_state_tax_rate,
    intra_state_tax_rate
}) => {
    return new Promise(async (resolve, reject) => {
        try {
            let response = {};
            await sequelize.transaction(async (t) => {
                const variety_gst_details = await crop_variety_gst_detail.findOne({
                    where: {
                        crop_variety_id,
                        is_active: true
                    }
                })
                if (variety_gst_details)
                    variety_gst_details.is_active = 0;
                [, gst_details] = await Promise.all([
                    variety_gst_details?.save({ transaction: t }),
                    crop_variety_gst_detail.build({
                        crop_variety_id,
                        is_gst_applicable,
                        hsn_code,
                        inter_state_tax_rate,
                        intra_state_tax_rate,
                        is_active: true
                    }).save({ transaction: t })
                ]);
            });
            response = await fetch_gst_details_service({ crop_variety_id: gst_details.crop_variety_id });
            return resolve(response);
        }
        catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    })
}

module.exports = {
    add_gst_details_service
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/_services/create_qc_checklist_service.js
const crop_varieties_detail_model = require("../../../../database/models_v2/crop/crop_varieties_detail");
const qc_param_type_model = require("../../../../database/models_v2/procurement_order/qc_param_types");
const crop_variety_qc_param_maps_model = require("../../../../database/models_v2/procurement_order/crop_variety_qc_param_maps");
const error_log = require("../../../../middelware/error_log");
const { get_crop_variety_data_service } = require("../_services/get_crop_variety_data");
const qc_condition_enum = require("../../../../enums/crop/qc_condition");

const create_qc_checklist_service = async (crop_qc_data, crop_variety_id) => {
    try {

        const crop_variety = await crop_varieties_detail_model.findOne({
            id: crop_variety_id,
            is_active: 1
        });
        if (!crop_variety) {
            throw new Error("crop_variety not present");
        }

        const response = await Promise.all(crop_qc_data.map(async (crop_qc) => {
            try {
                const [qc_param_type, created] = await qc_param_type_model.findOrCreate({
                    where: {
                        name: crop_qc["name"],
                        is_active: 1
                    }
                });
                const [crop_variety_qc_param_maps, crop_variety_qc_param_maps_created] = await crop_variety_qc_param_maps_model.findOrCreate({
                    where: {
                        qc_param_type_id: qc_param_type.id,
                        is_active: 1,
                        image_required: crop_qc["imageRequired"],
                        condition: qc_condition_enum[crop_qc.condition],
                        threshold_value: crop_qc["value"],
                        crop_variety_id
                    }
                });
                const data = await get_crop_variety_data_service(crop_variety_id);
                return { data };
            }
            catch (err) {
                console.log(err.message);
            }
        }));


        return { crop_qc_checlist: response };
    } catch (err) {
        error_log(err);
        return null;
    }
};

module.exports = {
    create_qc_checklist_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/controllers/fetch_gst_details_controller.js
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const { fetch_gst_details_service } = require('../_services/fetch_gst_details_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { crop_variety_id } = req.query;
        if (!crop_variety_id) throw new ValidationError('crop_variety_id is mandatory param');
        const gst_details = await fetch_gst_details_service({ crop_variety_id })
        const response = create_api_response(true, 'success', gst_details);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/controllers/create_variety_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const add_all_crop_details_service = require('../../crop/_services/add_all_crop_details_service');
const { get_crop_variety_data_service } = require('../_services/get_crop_variety_data');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        let { name: crop_variety_name, qualityCheckGuideURL: quality_check_guide_url, cropId: crop_id, qcData: qc_data, samplingData: sampling_data, docData: doc_data } = req.body;

        crop_variety_name = crop_variety_name.trim();
        quality_check_guide_url = quality_check_guide_url.trim();
        qc_data = qc_data.map(qc => {
            return { ...qc, name: qc.name.trim(), value: qc.value.trim(), condition: qc.condition.trim() }
        });
        sampling_data = sampling_data.map(sampling => {
            return { weightFrom: sampling.weightFrom.trim(), weightTo: sampling.weightTo.trim(), minimumImages: sampling.minimumImages.trim(), sampleCount: sampling.sampleCount.trim() }
        });
        doc_data = doc_data.map(doc_element => {
            return { ...doc_element, dispatchDocTypeId: doc_element.dispatchDocTypeId, name: doc_element.name }
        });

        if (!crop_variety_name) {
            throw new ValidationError('name is missing');
        }

        if (!crop_id) {
            throw new ValidationError('crop id missing');
        }

        if (!quality_check_guide_url) {
            throw new ValidationError('qualityCheck guide url missing');
        }

        if (!qc_data) {
            throw new ValidationError('qc details missing');
        }

        if (!sampling_data) {
            throw new ValidationError('sampling details missing');
        }

        if (!doc_data) {
            throw new ValidationError('doc details missing');
        }

        qc_data.forEach(qc => {
            if (!qc.name || !qc.value ||
                !qc.condition || qc.imageRequired === undefined) {
                throw new ValidationError('qc details missing');
            }
        });

        sampling_data.forEach(sampling => {
            if (sampling.weightFrom === undefined || sampling.weightTo === undefined ||
                sampling.minimumImages === undefined || sampling.sampleCount === undefined) {
                throw new ValidationError('sampling details missing');
            }
        });

        doc_data.forEach(doc => {
            if (!doc.name || doc.mendatory === undefined ||
                doc.imageRequired === undefined) {
                throw new ValidationError('doc details missing');
            }
        });

        // For Variety Data

        const variety_data = { name: crop_variety_name, qualityCheckGuideURL: quality_check_guide_url, crop_id };
        const crop_variety = await add_all_crop_details_service(null, variety_data, qc_data, sampling_data, doc_data, crop_id);

        const varietyResult = await get_crop_variety_data_service(crop_variety.id);
        return res.status(http_status_code_enum.ok).json(varietyResult);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({ message: err.message });
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/controllers/fetch_varieties_controller.js
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const { fetch_varieties_service } = require('../_services/fetch_varieties_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const {
            crop_id,
            search_param,
            is_qc_required,
            is_sampling_required,
            is_doc_required
        } = req.query;

        if (!crop_id) throw new ValidationError('crop_id is mandatory param');
        const crop_varieties = await fetch_varieties_service({
            crop_id,
            search_param,
            is_qc_required,
            is_sampling_required,
            is_doc_required
        })
        const response = create_api_response(true, 'success', crop_varieties);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/controllers/fetch_dispatch_doc_controller.js
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const { fetch_dispatch_doc_service } = require('../_services/fetch_dispatch_doc_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { crop_variety_id } = req.query;
        if (!crop_variety_id) throw new ValidationError('crop_variety_id is mandatory param');
        const dispatch_doc = await fetch_dispatch_doc_service({ crop_variety_id })
        const response = create_api_response(true, 'success', dispatch_doc);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/controllers/create_dispatch_doc_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const { create_dispatch_doc_service } = require('../_services/create_dispatch_doc_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { docData, varietyId } = req.body;

        const { name, mendatory, imageRequired } = docData;

        if (!name) {
            throw new ValidationError('name is missing');
        }

        if (mendatory === undefined) {
            throw new ValidationError('mendatory is missing');
        }

        if (imageRequired === undefined) {
            throw new ValidationError('imageRequired is missing');
        }

        if (!varietyId) {
            throw new ValidationError('varietyId is missing');
        }

        const addedDocAtDispatchResult = await create_dispatch_doc_service(varietyId, [docData]);

        return res.status(http_status_code_enum.ok).json(addedDocAtDispatchResult.data);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({ message: err.message });
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/controllers/update_qc_checklist_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const { update_qc_checklist_service } = require('../_services/update_qc_checklist_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const {
            qcData,
            varietyId
        } = req.body;

        const { qc_id } = req.params;

        const { name, value, condition, imageRequired } = qcData

        if (!name) {
            throw new ValidationError('name is missing');
        }

        if (!value) {
            throw new ValidationError('value is missing');
        }

        if (!condition) {
            throw new ValidationError('condition is missing');
        }

        if (imageRequired === undefined) {
            throw new ValidationError('imageRequired is missing');
        }

        if (!varietyId) {
            throw new ValidationError('varietyId is missing');
        }

        if (!qc_id) {
            throw new ValidationError('qc_id is missing');
        }

        const updatedQCResult = await update_qc_checklist_service({
            qcData,
            varietyId,
            qc_id
        });

        return res.status(http_status_code_enum.ok).json(updatedQCResult.data);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({ message: err.message });
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/controllers/delete_dispatch_doc_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const { delete_dispatch_doc_service } = require("../_services/delete_dispatch_doc_service");

module.exports = async (req, res) => {
    try {
        const { doc_id, variety_id } = req.params;

        if (!doc_id || !variety_id) {
            return res.status(http_status_code_enum.bad_request).json({
                message: "array or prop or data or Id missing",
                error: "Missing params",
            });
        }

        const getSampleResult = await delete_dispatch_doc_service({
            doc_id,
            variety_id
        });

        return res.status(http_status_code_enum.ok).json(getSampleResult.data);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({ message: err.message });
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/controllers/update_variety_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const { update_variety_service } = require('../_services/update_variety_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { varietyData } = req.body;

        const { variety_id } = req.params;

        const { name, qualityCheckGuideURL } = varietyData;

        if (!name) {
            throw new ValidationError('name is missing');
        }

        if (!qualityCheckGuideURL) {
            throw new ValidationError('qualityCheck guide url missing');
        }

        if (!variety_id) {
            throw new ValidationError('varietyId is missing');
        }

        const updatedVarietyResult = await update_variety_service({
            varietyData,
            variety_id
        });
        return res.status(http_status_code_enum.ok).json(updatedVarietyResult.data);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({ message: err.message });
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/controllers/delete_qc_checklist_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const { delete_qc_checklist_service } = require("../_services/delete_qc_checklist_service");

module.exports = async (req, res) => {
    try {
        const { qc_id, variety_id } = req.params;

        if (!qc_id || !variety_id) {
            return res.status(http_status_code_enum.bad_request).json({
                message: "array or prop or data or Id missing",
                error: "Missing params",
            });
        }

        const getSampleResult = await delete_qc_checklist_service({
            qc_id,
            variety_id
        });

        return res.status(http_status_code_enum.ok).json(getSampleResult.data);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({ message: err.message });
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/controllers/update_sampling_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const { update_sampling_service } = require('../_services/update_sampling_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const {
            samplingData,
            varietyId
        } = req.body;

        const { sampling_id } = req.params;

        const { weightFrom, weightTo, minimumImages, sampleCount } = samplingData

        if (weightFrom === undefined) {
            throw new ValidationError('weightFrom is missing');
        }

        if (weightTo === undefined) {
            throw new ValidationError('weightTo is missing');
        }

        if (minimumImages === undefined) {
            throw new ValidationError('minimumImages is missing');
        }

        if (sampleCount === undefined) {
            throw new ValidationError('sampleCount is missing');
        }

        if (!varietyId) {
            throw new ValidationError('varietyId is missing');
        }

        if (!sampling_id) {
            throw new ValidationError('sampling_id is missing');
        }

        const updatedSamplingResult = await update_sampling_service({
            samplingData,
            varietyId,
            sampling_id
        });

        return res.status(http_status_code_enum.ok).json(updatedSamplingResult.data);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({ message: err.message });
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/controllers/fetch_sampling_controller.js
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const { fetch_sampling_service } = require('../_services/fetch_sampling_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { crop_variety_id } = req.query;
        if (!crop_variety_id) throw new ValidationError('crop_variety_id is mandatory param');
        const sampling = await fetch_sampling_service({ crop_variety_id })
        const response = create_api_response(true, 'success', sampling);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/controllers/create_qc_checklist_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const { create_qc_checklist_service } = require('../_services/create_qc_checklist_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const {
            qcData,
            varietyId
        } = req.body;

        let { name, value, condition, imageRequired } = qcData
        name = name.trim();
        qcData.name = name;
        if (!name) {
            throw new ValidationError('name is missing');
        }

        if (!value) {
            throw new ValidationError('value is missing');
        }

        if (!condition) {
            throw new ValidationError('condition is missing');
        }

        if (imageRequired === undefined) {
            throw new ValidationError('imageRequired is missing');
        }

        if (!varietyId) {
            throw new ValidationError('varietyId is missing');
        }

        const addedQCResult = await create_qc_checklist_service([qcData], varietyId);

        return res.status(http_status_code_enum.ok).json(addedQCResult.data);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({ message: err.message });
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/controllers/fetch_qc_checklist_controller.js
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const { fetch_qc_checklist_service } = require('../_services/fetch_qc_checklist_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { crop_variety_id } = req.query;
        if (!crop_variety_id) throw new ValidationError('crop_variety_id is mandatory param');
        const qc_checklist = await fetch_qc_checklist_service({ crop_variety_id })
        const response = create_api_response(true, 'success', qc_checklist);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/controllers/update_dispatch_doc_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const { update_dispatch_doc_service } = require('../_services/update_dispatch_doc_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const {
            docData,
            varietyId
        } = req.body;

        const { doc_id } = req.params;

        const { name, mendatory, imageRequired } = docData;

        if (!name) {
            throw new ValidationError('name is missing');
        }

        if (mendatory === undefined) {
            throw new ValidationError('mendatory is missing');
        }

        if (imageRequired === undefined) {
            throw new ValidationError('imageRequired is missing');
        }

        if (!varietyId) {
            throw new ValidationError('varietyId is missing');
        }

        if (!doc_id) {
            throw new ValidationError('doc_id is missing');
        }

        const updatedDocResult = await update_dispatch_doc_service({
            docData,
            varietyId,
            doc_id
        });

        return res.status(http_status_code_enum.ok).json(updatedDocResult.data);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({ message: err.message });
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/controllers/add_gst_details_controller.js
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const joi = require('joi');
const { add_gst_details_service } = require('../_services/add_gst_details_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const validation_result = gst_detail_schema.validate(req.body);
        if (validation_result.error) throw new ValidationError(validation_result.error.message);
        const {
            crop_variety_id,
            is_gst_applicable,
            hsn_code,
            inter_state_tax_rate,
            intra_state_tax_rate
        } = validation_result.value;

        const gst_details = await add_gst_details_service({
            crop_variety_id,
            is_gst_applicable,
            hsn_code,
            inter_state_tax_rate,
            intra_state_tax_rate
        })
        const response = create_api_response(true, 'success', gst_details);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}

const gst_detail_schema = joi.object({
    crop_variety_id: joi.number().required(),
    is_gst_applicable: joi.boolean().required(),
    hsn_code: joi.alternatives().conditional('is_gst_applicable', {
        is: true,
        then: joi.string().required(),
        otherwise: joi.forbidden()
    }),
    inter_state_tax_rate: joi.alternatives().conditional('is_gst_applicable', {
        is: true,
        then: joi.number().required(),
        otherwise: joi.forbidden()
    }),
    intra_state_tax_rate: joi.alternatives().conditional('is_gst_applicable', {
        is: true,
        then: joi.number().required(),
        otherwise: joi.forbidden()
    })
});



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/controllers/delete_sampling_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const { delete_sampling_service } = require("../_services/delete_sampling_service");

module.exports = async (req, res) => {
    try {
        const { sampling_id, variety_id } = req.params;

        if (!sampling_id || !variety_id) {
            return res.status(http_status_code_enum.bad_request).json({
                message: "array or prop or data or Id missing",
                error: "Missing params",
            });
        }

        const getSampleResult = await delete_sampling_service({
            sampling_id,
            variety_id
        });

        return res.status(http_status_code_enum.ok).json(getSampleResult.data);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({ message: err.message });
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/controllers/delete_variety_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const { delete_variety_service } = require('../_services/delete_variety_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { variety_id } = req.params;

        if (!variety_id) {
            throw new ValidationError('array or prop or data or Id missing');
        }

        const updatedVarietyResult = await delete_variety_service({ variety_id });
        return res.status(http_status_code_enum.ok).json(updatedVarietyResult.data);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({ message: err.message });
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/controllers/create_sampling_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const { create_sampling_service } = require('../_services/create_sampling_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const {
            samplingData,
            varietyId
        } = req.body;
        const { weightFrom, weightTo, minimumImages, sampleCount } = samplingData

        if (weightFrom === undefined) {
            throw new ValidationError('weightFrom is missing');
        }

        if (weightTo === undefined) {
            throw new ValidationError('weightTo is missing');
        }

        if (minimumImages === undefined) {
            throw new ValidationError('minimumImages is missing');
        }

        if (sampleCount === undefined) {
            throw new ValidationError('sampleCount is missing');
        }

        if (!varietyId) {
            throw new ValidationError('varietyId is missing');
        }
        const addedSamplingResult = await create_sampling_service([samplingData], varietyId);

        return res.status(http_status_code_enum.ok).json(addedSamplingResult.data);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({ message: err.message });
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/services/update_variety_service.js
const cropVarietyModel = require("../../../../database/mongoose/market_linkage_db/cropVariety.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");

const update_variety_service = async (params) => {
    try {
        const { varietyData, variety_id } = params;

        const varietyUpdateResult = await cropVarietyModel.findOneAndUpdate(
            {
                '_id': variety_id,
                'isActive': true
            },
            varietyData)

        if (!varietyUpdateResult) {
            return {
                status: HTTP_status_codes.badRequest,
                data: {
                    message: "invalid variety_id"
                },
            }
        }

        return { status: HTTP_status_codes.ok, data: true };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

module.exports = {
    update_variety_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/services/delete_qc_checklist_service.js
const cropVarietyModel = require("../../../../database/mongoose/market_linkage_db/cropVariety.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");

const delete_qc_checklist_service = async (params) => {
    try {

        const { qc_id, variety_id } = params;

        const qcDeleteResult = await cropVarietyModel.findOneAndUpdate(
            {
                '_id': variety_id,
                'qcCheckListParameter._id': qc_id,
                'isActive': true
            },
            { 'qcCheckListParameter.$.isActive': false });

        if (!qcDeleteResult) {
            return {
                status: HTTP_status_codes.badRequest,
                data: {
                    message: "invalid qc_id or variety_id"
                },
            }
        }

        return { status: HTTP_status_codes.ok, data: true };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

module.exports = {
    delete_qc_checklist_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/services/update_sampling_service.js
const cropVarietyModel = require("../../../../database/mongoose/market_linkage_db/cropVariety.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");

const update_sampling_service = async (params) => {
    try {

        const { samplingData, varietyId, sampling_id } = params;

        const updateData = {};

        for (const property in samplingData) {
            updateData["samplingCondition.$." + property] = samplingData[property];
        }

        const samplingUpdateResult = await cropVarietyModel.findOneAndUpdate(
            {
                '_id': varietyId,
                'isActive': true,
                'samplingCondition._id': sampling_id
            },
            updateData);

        if (!samplingUpdateResult) {
            return {
                status: HTTP_status_codes.badRequest,
                data: {
                    message: "invalid sampling_id or varietyId"
                },
            }
        }

        return { status: HTTP_status_codes.ok, data: true };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

module.exports = {
    update_sampling_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/services/delete_dispatch_doc_service.js
const cropVarietyModel = require("../../../../database/mongoose/market_linkage_db/cropVariety.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");

const delete_dispatch_doc_service = async (params) => {
    try {

        const { doc_id, variety_id } = params;

        const docDeleteResult = await cropVarietyModel.findOneAndUpdate(
            {
                '_id': variety_id,
                'documentAtDispatch._id': doc_id,
                'isActive': true
            },
            { 'documentAtDispatch.$.isActive': false });

        if (!docDeleteResult) {
            return {
                status: HTTP_status_codes.badRequest,
                data: {
                    message: "invalid variety_id or doc_id"
                },
            }
        }

        return { status: HTTP_status_codes.ok, data: true };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

module.exports = {
    delete_dispatch_doc_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/services/delete_sampling_service.js
const cropVarietyModel = require("../../../../database/mongoose/market_linkage_db/cropVariety.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");

const delete_sampling_service = async (params) => {
    try {

        const { sampling_id, variety_id } = params;

        const samplingDeleteResult = await cropVarietyModel.findOneAndUpdate(
            {
                '_id': variety_id,
                'samplingCondition._id': sampling_id,
                'isActive': true
            },
            { 'samplingCondition.$.isActive': false });

        if (!samplingDeleteResult) {
            return {
                status: HTTP_status_codes.badRequest,
                data: {
                    message: "invalid sampling_id or variety_id"
                },
            }
        }
        return { status: HTTP_status_codes.ok, data: true };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

module.exports = {
    delete_sampling_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/services/get_variety_service.js
const cropVarietyModel = require("../../../../database/mongoose/market_linkage_db/cropVariety.model");
const error_log = require("../../../../middelware/error_log");

const get_variety_service = async (params) => {
    return new Promise(async (resolve, reject) => {
        try {
            const { cropId, varietyId } = params;

            const filter = {
                crop: cropId,
                isActive: true
            }

            if (varietyId) {
                filter["_id"] = varietyId;
            }

            const varietyResult = await cropVarietyModel.find(filter);

            varietyResult.forEach(variety => {
                if (variety.qcCheckListParameter) {
                    let qcs = variety.qcCheckListParameter;
                    let newQcs = [];
                    qcs.forEach(qc => {
                        if (qc.isActive) {
                            newQcs.push(qc);
                        }
                    });
                    variety.qcCheckListParameter = newQcs;
                }
                if (variety.samplingCondition) {
                    let samplings = variety.samplingCondition;
                    let newSamplings = [];
                    samplings.forEach(sampling => {
                        if (sampling.isActive) {
                            newSamplings.push(sampling);
                        }
                    });
                    variety.samplingCondition = newSamplings;
                }
                if (variety.documentAtDispatch) {
                    let docs = variety.documentAtDispatch;
                    let newDocs = [];
                    docs.forEach(doc => {
                        if (doc.isActive) {
                            newDocs.push(doc);
                        }
                    });
                    variety.documentAtDispatch = newDocs;
                }
            });
            return resolve(varietyResult);
        } catch (err) {
            error_log(err);
            return resolve({ message: err.message });
        }
    });
};

module.exports = {
    get_variety_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/services/create_sampling_service.js
const cropVarietyModel = require("../../../../database/mongoose/market_linkage_db/cropVariety.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");

const create_sampling_service = async (newSamplingData) => {
    try {
        const { samplingData, varietyId } = newSamplingData;
        let samplingCondData = []
        Array.isArray(samplingData) ? samplingCondData = samplingData : samplingCondData.push(samplingData);

        const updatedVariety = await cropVarietyModel.findOneAndUpdate(
            {
              _id:varietyId,
              isActive:true
            }, 
            {
              $push:{
                "samplingCondition": { $each: samplingCondData }
              }
            }, {new:true});

        if (!updatedVariety) {
            return {
                status: HTTP_status_codes.badRequest,
                data: {
                    message: "invalid varietyId"
                },
            }
        }
    
        return { status: HTTP_status_codes.ok, data: updatedVariety};
      } catch (err) {
        error_log(err);
        return {
          status: HTTP_status_codes.internalServerError,
          data: {
            message: "Something bad happened",
            error: err.message,
          },
        };
      }
    };
    

module.exports = {
    create_sampling_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/services/update_qc_checklist_service.js
const cropVarietyModel = require("../../../../database/mongoose/market_linkage_db/cropVariety.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");

const update_qc_checklist_service = async (params) => {
    try {

        const { qcData, varietyId, qc_id } = params;

        const updateData = {};
    
        for (const property in qcData) {
          updateData["qcCheckListParameter.$."+property] = qcData[property];
        }
    
        const qcUpdateResult = await cropVarietyModel.findOneAndUpdate(
          {
            '_id': varietyId,
            'qcCheckListParameter._id': qc_id,
            'isActive': true
          },
          updateData)
         console.log(qcUpdateResult);
    
        if(!qcUpdateResult){
          return{
            status: HTTP_status_codes.badRequest,
            data: {
              message: "invalid qc_id or varietyId"
            },
          }
        }
    
        return { status: HTTP_status_codes.ok, data: true };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

module.exports = {
    update_qc_checklist_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/services/delete_variety_service.js
const cropVarietyModel = require("../../../../database/mongoose/market_linkage_db/cropVariety.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");

const delete_variety_service = async (params) => {
    try {
        const { variety_id } = params;

        const varietyDeleteResult = await cropVarietyModel.findOneAndUpdate(
            {
                '_id': variety_id,
                'isActive': true
            },
            {
                isActive: false
            });

        if (!varietyDeleteResult) {
            return {
                status: HTTP_status_codes.badRequest,
                data: {
                    message: "invalid variety_id"
                },
            }
        }

        return { status: HTTP_status_codes.ok, data: true };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

module.exports = {
    delete_variety_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/services/create_variety_service.js
const cropModel = require("../../../../database/mongoose/market_linkage_db/crop.model");
const cropVarietyModel = require("../../../../database/mongoose/market_linkage_db/cropVariety.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");

const create_variety_service = async (newVarietyData) => {
    try {
        const { varietyData } = newVarietyData

        const findCropResult = await cropModel.findOne(
            {
                '_id': varietyData.crop,
                'isActive': true
            });

        if (!findCropResult) {
            return {
                status: HTTP_status_codes.badRequest,
                data: {
                    message: "invalid cropId"
                },
            }
        }

        const varietyAddedData = await cropVarietyModel.create(varietyData);

        await cropModel.findByIdAndUpdate(varietyData.crop, { $push: { "varieties": varietyAddedData._id } }, { new: true });

        return { status: HTTP_status_codes.ok, data: varietyAddedData };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

module.exports = {
    create_variety_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/services/create_dispatch_doc_service.js
const cropVarietyModel = require("../../../../database/mongoose/market_linkage_db/cropVariety.model");
const dispatchDocTypeModel = require("../../../../database/mongoose/market_linkage_db/dispatchDocType.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");

const create_dispatch_doc_service = async (newDocData) => {
    try {

        const { docData, varietyId } = newDocData;
        let dispatchDocData = []
        Array.isArray(docData) ? dispatchDocData = docData : dispatchDocData.push(docData);

        for (let doc of dispatchDocData) {
            if (!doc.dispatchDocTypeId) {
                let docType = await dispatchDocTypeModel.findOneAndUpdate(
                    { "name": doc.name },
                    {
                        $set: { "name": doc.name }
                    },
                    {
                        upsert: true,
                        new: true
                    });
                doc.dispatchDocTypeId = docType._id;
            }
        }

        const updatedVariety = await cropVarietyModel.findOneAndUpdate(
            {
                _id: varietyId,
                isActive: true
            },
            {
                $push: {
                    "documentAtDispatch": { $each: dispatchDocData }
                }
            }, { new: true });

        if (!updatedVariety) {
            return {
                status: HTTP_status_codes.badRequest,
                data: {
                    message: "invalid varietyId"
                },
            }
        }

        return { status: HTTP_status_codes.ok, data: updatedVariety };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

module.exports = {
    create_dispatch_doc_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/services/update_dispatch_doc_service.js
const cropVarietyModel = require("../../../../database/mongoose/market_linkage_db/cropVariety.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");

const update_dispatch_doc_service = async (params) => {
    try {

        const { docData, varietyId, doc_id } = params;

        const updateData = {};
    
        for (const property in docData) {
          updateData["documentAtDispatch.$."+property] = docData[property];
        }
    
        const docUpdateResult = await cropVarietyModel.findOneAndUpdate(
          {
            '_id':varietyId,
            'documentAtDispatch._id': doc_id,
            'isActive': true
          },
          updateData);
    
        if(!docUpdateResult){
          return{
            status: HTTP_status_codes.badRequest,
            data: {
              message: "invalid varietyId or doc_id"
            },
          }
        }
    
        return { status: HTTP_status_codes.ok, data: true };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

module.exports = {
    update_dispatch_doc_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v1/variety/services/create_qc_checklist_service.js
const cropVarietyModel = require("../../../../database/mongoose/market_linkage_db/cropVariety.model");
const qcTypeModel = require("../../../../database/mongoose/market_linkage_db/qcType.model");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");

const create_qc_checklist_service = async (newQCData) => {
    try {
        const { qcData, varietyId } = newQCData;
        let qcChecklistData = []
        Array.isArray(qcData) ? qcChecklistData = qcData : qcChecklistData.push(qcData);

        for (let qc of qcChecklistData) {
            if (!qc.qcTypeId) {
                let qcType = await qcTypeModel.findOneAndUpdate(
                    { "name": qc.name },
                    {
                        $set: { "name": qc.name }
                    },
                    {
                        upsert: true,
                        new: true
                    });
                qc.qcTypeId = qcType._id;
            }
        }

        const updatedVariety = await cropVarietyModel.findOneAndUpdate(
            {
                _id: varietyId,
                isActive: true
            },
            {
                $push: {
                    "qcCheckListParameter": { $each: qcChecklistData }
                }
            }, { new: true });

        if (!updatedVariety) {
            return {
                status: HTTP_status_codes.badReques,
                data: {
                    message: "invalid varietyId"
                },
            }
        }

        return { status: HTTP_status_codes.ok, data: updatedVariety };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

module.exports = {
    create_qc_checklist_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/index.js
const v1_routes = require("./v1");
const v2_routes = require("./v2");
const v3_routes = require("./v3");
const v4_routes = require("./v4");

const applicationRoutes = (app) => {
    app.use("/v1", v1_routes);
    app.use("/v2", v2_routes);
    app.use("/v3", v3_routes);
    app.use("/v4", v4_routes);
}

module.exports = applicationRoutes;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/crop_advisory/swagger/index.js
module.exports = {
  tags: {
    name: "crop_advisory",
  },
  paths: {
    "/crop_details": {
      get: {
        tags: ["crop_advisory"],
        summary: "",
        description: "",
        operationId: "get_crop_details_app",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "header",
            name: "language",
            description: "",
            required: false,
            type: "number",
            default: 2
          },
          {
            in: "query",
            name: "page_no",
            description: "",
            required: false,
            type: "number",
            default: 1
          },
          {
            in: "query",
            name: "limit",
            description: "",
            required: false,
            type: "number",
            default: 10
          },
          {
            in: "query",
            name: "subscribed",
            description: "",
            required: false,
            type: Boolean
          },
        ],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
  },
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/crop_advisory/index.js
const router = require("express").Router();
const authorize = require("../../../middelware/authorized_routes");
const user_roles_enum = require("../../../entities/metadata/enums/user_roles");

const get_crop_details_app_controller = require("./controllers/get_crop_details_app_controller");

router.get("/crop_details", authorize([user_roles_enum.Merchant]), get_crop_details_app_controller);
module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/crop_advisory/controllers/get_crop_details_app_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const get_crop_details_app_service = require("../services/get_crop_list");
const language_enum = require("../../../../enums/global/language");
module.exports = async (req, res) => {
  try {
    let page_no = +req.query.page_no || 1, limit = +req.query.limit || 10;
    const language_id = +req.headers.language || language_enum.default;
    let subscribed = req.query.subscribed || false;
    const merchant_detail_id = +req.user.user_profile_id;
    if (subscribed == 'false' || subscribed == false)
      subscribed = false;
    else
      subscribed = true
    let crop_data = await get_crop_details_app_service(page_no, limit, merchant_detail_id, language_id, subscribed);
    return res.status(http_status_code_enum.ok).json(create_api_response(true, "successfull", crop_data));

  } catch (err) {
    return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/crop_advisory/services/get_crop_details_app_service.js
const error_log = require("../../../../middelware/error_log");
const { get_crop_details } = require("../../../../data_abstraction_layer/crop/crop_details");
const { get_crop_vernacular_metadata } = require("../../../../data_abstraction_layer/crop/crop_vernacular_metadata");
const { get_crop_advisory_logs } = require("../../../../data_abstraction_layer/crop_advisory/crop_advisory_logs");
const { get_step_details } = require("../../../../data_abstraction_layer/crop_advisory/get_step_details");
const get_crop_detail_by_id = require("../../../../data_abstraction_layer/crop/get_crop_detail_by_id");
const get_crop_details_service = async (
  page_no,
  limit,
  merchant_detail_id,
  language_id,
  subscribed
) => {
  try {
    let offset = (page_no - 1) * limit;
    let order = [['created_at', 'ASC']]
    let attributes = ['name', 'advisory_image_url'];
    let crops = [], count = 0;
    // flow -> if subscribe then we will show all the crop(with vernacular name acc. to language_id) mapped with the user
    // else we will show crops(with vernacular name acc. to language_id) which are available for crop advisory but not subscribed
    if (subscribed) {
      let crop_advisory_logs = await get_crop_advisory_logs({ merchant_detail_id, order, offset, limit });
      let crop_ids = get_crop_ids(crop_advisory_logs.rows)
      let crop_details = { count: crop_advisory_logs.count, rows: [] }
      if (crop_ids.length > 0) {
        for (let i = 0; i < crop_ids.length; i++) {
          let crop_detail = await get_crop_detail_by_id({ for_advisory: true, attributes, crop_detail_id: crop_ids[i] })
          if (crop_detail)
            crop_details.rows.push(crop_detail);
        }
        crops = await add_vernacular_name_for_resposne(crop_details.rows, crop_advisory_logs.rows, language_id);
        count = crop_advisory_logs.count
      }
    }
    else {
      let crop_advisory_logs = await get_crop_advisory_logs({ merchant_detail_id });
      let crop_ids = get_crop_ids(crop_advisory_logs.rows)
      let crop_details = await get_crop_details({ for_advisory: true, excluded_crop_ids: crop_ids, attributes, offset, limit });
      crops = await add_vernacular_name_for_resposne(crop_details.rows, crop_advisory_logs.rows, language_id);
      count = crop_details.count;
    }
    return { crops, count };
  } catch (err) {
    error_log(err);
    return null;
  }
};

const get_crop_ids = (crop_advisory_logs = []) => {
  let ids = []
  for (let i = 0; i < crop_advisory_logs.length; i++) {
    ids.push(crop_advisory_logs[i].crop_id)
  }
  return ids
}
const add_vernacular_name_for_resposne = async (crop_details = [], crop_advisory_logs = [], language_id) => {
  let crops = [];
  let sowing_date_crops = {};
  crop_advisory_logs.forEach(crop => {
    sowing_date_crops[crop.crop_id] = crop.sowing_date;
  })
  let attributes = ['name']
  for (let i = 0; i < crop_details.length; i++) {
    let vernacular_name = await get_crop_vernacular_metadata({ crop_id: crop_details[i].id, attributes, language_id })
    if (vernacular_name.rows.length > 0) {
      let obj = {
        crop_id: crop_details[i].id,
        crop_image_url: crop_details[i].advisory_image_url,
        crop_name: vernacular_name.rows[0].name,
      }
      if (sowing_date_crops[obj.crop_id]) {
        obj.sowing_date = sowing_date_crops[obj.crop_id];
        let step_obj = await find_recent_activity(crop_details[i].id, language_id, obj.sowing_date);
        obj.recent_heading = step_obj?.heading
        obj.duration_days = step_obj?.duration_days
        obj.gap_days = step_obj?.gap_days
        obj.starting_day = step_obj?.starting_day
      }
      crops.push(obj)
    }
  }
  return crops
}
// finding recent activity of a crop according to the sowing date
const find_recent_activity = async (crop_id, language_id, sowing_date) => {
  let order = 'starting_day', step_obj = {heading:null,duration_days:-1,gap_days:-1,starting_day:-1};
  let current_day_difference = getDaysDiffBetweenDates(new Date(), sowing_date);
  let step_details = await get_step_details({ crop_id, language_id, order })
if(step_details.crop_advisory_step_detail.length==0)return step_obj
  for (let i = 0; i < step_details.crop_advisory_step_detail.length; i++) {
    let duration_of_single_step = step_details.crop_advisory_step_detail[i].starting_day + step_details.crop_advisory_step_detail[i].duration_days;
    if (duration_of_single_step >= current_day_difference) {
      step_obj.heading = step_details.crop_advisory_step_detail[i].heading;
      step_obj.duration_days = step_details.crop_advisory_step_detail[i].duration_days;
      step_obj.gap_days = step_details.crop_advisory_step_detail[i].gap_days;
      step_obj.starting_day = step_details.crop_advisory_step_detail[i]?.starting_day;
      break;
    }
  }
  if (!step_obj || step_obj?.heading==null || step_obj?.duration_days < 0 || step_obj?.gap_days < 0 || step_obj?.starting_day < 0) {
    let last_step = step_details.crop_advisory_step_detail.length - 1;
    step_obj.heading = step_details.crop_advisory_step_detail[last_step].heading
    step_obj.duration_days = step_details.crop_advisory_step_detail[last_step].duration_days
    step_obj.gap_days = step_details.crop_advisory_step_detail[last_step].gap_days
    step_obj.starting_day = step_details.crop_advisory_step_detail[last_step].starting_day
  }
  return step_obj;
}
// difference of days when two times are given
const getDaysDiffBetweenDates = (dateFinal, dateInitial) =>
  Math.floor((dateFinal - dateInitial) / (1000 * 3600 * 24));

module.exports = get_crop_details_service



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/crop_advisory/services/get_crop_list.js
const { get_crop_advisory_logs } = require("../../../../data_abstraction_layer/crop_advisory/crop_advisory_logs");
const { get_step_details, get_last_step_details } = require("../../../../data_abstraction_layer/crop_advisory/get_step_details");
const get_crop_detail_by_id = require("../../../../data_abstraction_layer/crop/get_crop_detail_by_id");
const { get_crop_vernacular_metadata } = require("../../../../data_abstraction_layer/crop/crop_vernacular_metadata");
const { get_crop_details } = require("../../../../data_abstraction_layer/crop/crop_details");
const redis_key_entities = require("../../../../database/redis/redis_key_entities");
const { write_string, key_gen_redis, read_string } = require('../../../../database/redis/helper_redis_methods');
const error_log = require("../../../../middelware/error_log");

const get_crop_list = async (
  page_no,
  limit,
  merchant_detail_id,
  language_id,
  subscribed
) => {
  try {
    // redis needs to be implemented 
    let crops = [], count = 0;
    let offset = (page_no - 1) * limit;
    let order = [['created_at', 'ASC']]
    let crop_advisory_logs = await get_crop_advisory_logs({ merchant_detail_id, order });
    // fetching subscribed crops 
    if (subscribed) {
      let crop_obj = await get_subscribed_crops({ crop_advisory_logs, language_id, merchant_detail_id });
      crops = crop_obj.crops.slice(offset, page_no * limit);
      count = crop_obj.count;
    }
    // fetching unsubscribed crops 
    else {
      let crop_obj = await get_unsubscribed_crops({ crop_advisory_logs, offset, limit, language_id });
      crops = crop_obj.crops;
      count = crop_obj.count;
    }
    return { crops, count };
  } catch (err) {
    error_log(err);
    return { crops: [], count: 0 };
  }
};

let get_subscribed_crops = async ({ crop_advisory_logs, language_id, merchant_detail_id }) => {
  let attributes = ['name', 'advisory_image_url'], crops = [], count = 0;
  let crop_details = { count: crop_advisory_logs.count, rows: [] }
  // sorting crops on the bases that if the crop steps are completed then it should come below the inprocess crops
  //add redis here
  let sorted_crops = []
  let crop_advisory_key = await key_gen_redis(redis_key_entities.CROP_ADVISORY, merchant_detail_id, language_id);
  let crop_advisory_redis_response = await read_string(crop_advisory_key);
  if (crop_advisory_redis_response) {
    sorted_crops = JSON.parse(crop_advisory_redis_response);
  }
  else {
    sorted_crops = await crop_with_priority(crop_advisory_logs.rows, language_id);
    crop_advisory_redis_response = JSON.stringify(sorted_crops);
    let expires_in_a_day = 60 * 60 * 24 * 1000;
    write_string(crop_advisory_key, crop_advisory_redis_response, expires_in_a_day)
      .catch(err => {
        error_log(err);
      });
  }
  // making crop objects for rendering
  if (sorted_crops.length > 0) {
    for (let i = 0; i < sorted_crops.length; i++) {
      let crop_detail = await get_crop_detail_by_id({ for_advisory: true, attributes, crop_detail_id: sorted_crops[i].crop_id })
      if (crop_detail)
        crop_details.rows.push(crop_detail);
    }
    crops = await add_vernacular_name_for_resposne(crop_details.rows, crop_advisory_logs.rows, language_id);
    count = sorted_crops.length
  }
  return { crops, count };
}
let get_unsubscribed_crops = async ({ crop_advisory_logs, offset, limit, language_id }) => {
  let crop_ids = get_crop_ids(crop_advisory_logs.rows)
  let crop_details = await get_crop_details({ for_advisory: true, excluded_crop_ids: crop_ids, attributes: ['name', 'advisory_image_url'] });
  let crops = await add_vernacular_name_for_resposne(crop_details.rows, crop_advisory_logs.rows, language_id);
  let count = crops.length;
  crops = crops.slice(offset, offset + limit)

  return { crops, count };
}
const get_crop_ids = (crop_advisory_logs = []) => {
  let ids = []
  for (let i = 0; i < crop_advisory_logs.length; i++) {
    ids.push(crop_advisory_logs[i].crop_id)
  }
  return ids
}
let crop_with_priority = async (crop_advisory_logs, language_id) => {
  //crop_advisory_logs is an array containing crop_id and sowing_date
  let order = 'starting_day', finished = [], unfinished = [];
  for (let i = 0; i < crop_advisory_logs.length; i++) {
    let step_details = await get_last_step_details({ crop_id: crop_advisory_logs[i].crop_id, language_id, order });
    step_details = step_details.crop_advisory_step_detail[0];
    if (!step_details) {
      error_log("last step not found")
      continue;
    };
    let current_day_difference = getDaysDiffBetweenDates(new Date(), crop_advisory_logs[i].sowing_date);
    let end_day = step_details.duration_days + step_details.starting_day;
    if (end_day < current_day_difference)//finish
    {
      finished.push({ crop_id: crop_advisory_logs[i].crop_id, sowing_date: crop_advisory_logs[i].sowing_date })
    }
    else// not finished
    {
      unfinished.push({ crop_id: crop_advisory_logs[i].crop_id, sowing_date: crop_advisory_logs[i].sowing_date })
    }
  }
  return [...unfinished, ...finished];
}

const getDaysDiffBetweenDates = (dateInitial, dateFinal) =>
  Math.floor(Math.abs((dateFinal - dateInitial) / (1000 * 3600 * 24)));

const add_vernacular_name_for_resposne = async (crop_details = [], crop_advisory_logs = [], language_id) => {
  let crops = [];
  let sowing_date_crops = {};
  crop_advisory_logs.forEach(crop => {
    sowing_date_crops[crop.crop_id] = crop.sowing_date;
  })
  let attributes = ['name']
  for (let i = 0; i < crop_details.length; i++) {
    let vernacular_name = await get_crop_vernacular_metadata({ crop_id: crop_details[i].id, attributes, language_id })
    if (vernacular_name.rows.length > 0) {
      let obj = {
        crop_id: crop_details[i].id,
        crop_image_url: crop_details[i].advisory_image_url,
        crop_name: vernacular_name.rows[0].name,
      }
      if (sowing_date_crops[obj.crop_id]) {
        obj.sowing_date = sowing_date_crops[obj.crop_id];
        let step_obj = await find_recent_activity(crop_details[i].id, language_id, obj.sowing_date);
        obj.recent_heading = step_obj?.heading
        obj.duration_days = step_obj?.duration_days
        obj.gap_days = step_obj?.gap_days
        obj.starting_day = step_obj?.starting_day
      }
      crops.push(obj)
    }
  }
  return crops
}

const find_recent_activity = async (crop_id, language_id, sowing_date) => {
  let order = 'starting_day', step_obj = { heading: null, duration_days: -1, gap_days: -1, starting_day: -1 };
  let current_day_difference = getDaysDiffBetweenDates(new Date(), sowing_date);
  let step_details = await get_step_details({ crop_id, language_id, order })
  if (step_details.crop_advisory_step_detail.length == 0) return step_obj
  for (let i = 0; i < step_details.crop_advisory_step_detail.length; i++) {
    let duration_of_single_step = step_details.crop_advisory_step_detail[i].starting_day + step_details.crop_advisory_step_detail[i].duration_days;
    if (duration_of_single_step >= current_day_difference) {
      step_obj.heading = step_details.crop_advisory_step_detail[i].heading;
      step_obj.duration_days = step_details.crop_advisory_step_detail[i].duration_days;
      step_obj.gap_days = step_details.crop_advisory_step_detail[i].gap_days;
      step_obj.starting_day = step_details.crop_advisory_step_detail[i]?.starting_day;
      break;
    }
  }
  if (!step_obj || step_obj?.heading == null || step_obj?.duration_days < 0 || step_obj?.gap_days < 0 || step_obj?.starting_day < 0) {
    let last_step = step_details.crop_advisory_step_detail.length - 1;
    step_obj.heading = step_details.crop_advisory_step_detail[last_step].heading
    step_obj.duration_days = step_details.crop_advisory_step_detail[last_step].duration_days
    step_obj.gap_days = step_details.crop_advisory_step_detail[last_step].gap_days
    step_obj.starting_day = step_details.crop_advisory_step_detail[last_step].starting_day
  }
  return step_obj;
}

module.exports = get_crop_list



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/crop_advisory/services/clear_crop_advisory_redis.js
const error_log = require("../../../../middelware/error_log");
const redis_delete_service = require("../../../../database/redis/helper_redis_methods").delete_key;
const redis_key_entities = require("../../../../database/redis/redis_key_entities");
const { key_gen_redis,read_string } = require('../../../../database/redis/helper_redis_methods');
const language_enum = require("../../../../enums/global/language");

const clear_crop_advisory_redis=async(merchant_detail_id)=>{
        try{
            let language_arr=Object.values(language_enum);
            for(let i=0;i<language_arr.length;i++)
            {
                let crop_advisory_cache_key = await key_gen_redis(redis_key_entities.CROP_ADVISORY,merchant_detail_id,language_arr[i]);
                let crop_advisory_cache_response = await read_string(crop_advisory_cache_key);
                if(crop_advisory_cache_response)
                {
                    await redis_delete_service(crop_advisory_cache_key)
                }
            }
        return "clear"    
        }
        catch(ex){
            error_log(ex);
            return({message:ex.message});
        }
}
module.exports=clear_crop_advisory_redis;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/auth/swagger/index.js
module.exports = {
    tags: {
      name: "auth",
    },
    paths: {
      "/verify_otp":{
        "post": {
          "tags": ["auth"],
          "summary": "validate otp and generate token",
          "description": "validate otp send to the merchant mobile number and provide token to them",
          "operationId": "validate_otp",
          "security": [],
          "parameters": [
            {
              "in": "formData",
              "name": "mobile_number",
              "description": "mandatory",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "in": "formData",
              "name": "otp",
              "description": "mandatory only if one_tap_token not available",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "formData",
              "name": "role_id",
              "description": "1->Super_Admin\n2->Op_Manager\n3->Call_Center_Agent\n4->Finance_Manager \n5->Tiktok_Agent\n6->Merchant\n7->accounts\n8->digital_marketing\n9->District_Manager",
              "required": false,
              "type": "string",
              "enum": [1, 2, 3, 4, 5, 6, 7, 8, 9]
            },
            {
              "in": "formData",
              "name": "referral_code",
              "description": "",
              "required": false,
              "type": "string"
            },
          ],
          "responses": {
            "405": {
              "description": "Invalid input"
            },
            "200": {
              "description": "success"
            }
          }
        }
      }
    }
  };
  


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/auth/index.js
const router = require('express').Router();

const validate_otp = require('./controllers/validate_otp');
const initiate_otp_controller = require("./controllers/initialize_otp");

router.post('/verify_otp', validate_otp);
router.post('/EcMHB9bZkwy8Njhabdkanskkqpek', initiate_otp_controller);

module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/auth/controllers/initialize_otp.js
const error_log = require('../../../../middelware/error_log');
const send_otp_via_text_service = require("../../../../entities/auth/service/send_otp_via_text");
const send_otp_via_whatsapp_service = require("../../../../entities_v2/auth/service/otp/send_otp_via_whatsapp");
const otp_send_medium_enum = require("../../../../entities_v2/metadata/enums/auth/otp_send_medium_enum");
const language_enum = require("../../../../entities_v2/metadata/enums/global/langauge");
const country_code_enum = require("../../../../enums/global/country_code");
const { generate_otp } = require("../../../../entities/auth/service/auth_service");
const DEFAULT_MESSAGE_ID = "u6o+RJnCqoX";
const BLACK_LISTED = [9825031150];
const http_status_code_enum = require("../../../../enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const store_sign_up_log_service = require("../../../../common_services/sign_up/sign_up_logs");
const http_headers_enums = require("../../../../enums/global/http_headers");
const update_utm_detail = require("../../../../common_services/utm/update_utm_detail_service");
const signup_log_stage_enum = require('../../../../enums/signup_log/signup_log_stage_enum');
const { check_merchant_status } = require('../../../../data_abstraction_layer/merchant/merchant_details');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        let installation_id = req.headers[http_headers_enums['fmt-installation-id']];
        let device_id = req.headers[http_headers_enums['fmt-device-id']];
        let mobile_number_hash = req.body.mobile_number;
        let current_app_version = req.headers.appversion;
        let otp_last_requested_at = new Date();

        if (!mobile_number_hash)
            throw new ValidationError("mandatory param missing");
        let mobile_number = await extract_mobile_number(mobile_number_hash);
        mobile_number = +mobile_number;
        if (!mobile_number) {
            return res.status(http_status_code_enum.bad_request).json({
                message: "Message not sent"
            });
        }
        //checking for if the user is blocked or not 
        let is_user_blocked=await check_merchant_status({mobile_number});
        if(is_user_blocked)
        {
            return res.status(http_status_code_enum.not_found).json({
                message: "user is blocked"
            });  
        }
        if (BLACK_LISTED.indexOf(mobile_number) >= 0) {
            let err_message = "Mobile number black listed";
            store_sign_up_log_service({ signup_log_stage: signup_log_stage_enum.otp_request, installation_id, device_id, mobile_number, otp_last_requested_at, current_app_version })
                .catch(err => {
                    error_log(err);
                });
            return res.status(http_status_code_enum.bad_request)
                .json(create_api_response(false, err_message, null));
        }
        let country_code = +req.body.country_code || country_code_enum.india;
        let send_over_medium = req.body.send_over_medium ?? otp_send_medium_enum.all;
        const language_id = +req.headers.language || language_enum.hindi;
        //have to call is_mobile_number function
        if (typeof mobile_number !== "number" || mobile_number < 1000000000) {
            throw new ValidationError("Invalid mobile_number");
        }
        let message_id = DEFAULT_MESSAGE_ID;
        if (mobile_number) {
            const { otp } = await generate_otp(mobile_number, country_code);
            if (mobile_number !== 9896111054) {
                if (send_over_medium == otp_send_medium_enum.whatsapp) {
                    send_otp_via_whatsapp_service(mobile_number, otp, language_id, country_code)
                        .catch(err => {
                            error_log(err);
                        });
                }
                else if (send_over_medium == otp_send_medium_enum.all) {
                    send_otp_via_whatsapp_service(mobile_number, otp, language_id, country_code)
                        .catch(err => {
                            error_log(err);
                        });
                    send_otp_via_text_service(mobile_number, message_id, otp, language_id, country_code)
                        .catch(err => {
                            error_log(err);
                        });
                }
                else {
                    send_otp_via_text_service(mobile_number, message_id, otp, language_id, country_code)
                        .catch(err => {
                            error_log(err);
                        });
                }
                store_sign_up_log_service({ signup_log_stage: signup_log_stage_enum.otp_request, installation_id, device_id, mobile_number, otp_last_requested_at, current_app_version })
                    .catch(err => {
                        error_log(err);
                    });
            }
            else {
                store_sign_up_log_service({ signup_log_stage: signup_log_stage_enum.otp_request, installation_id, device_id, mobile_number, otp_last_requested_at, current_app_version })
                    .catch(err => {
                        error_log(err);
                    });
                update_utm_detail(device_id, mobile_number)
                .catch(err => {
                    error_log(err);
                });
            }
            res.json({
                status: true,
                message: 'OTP send to ' + mobile_number
            })
        }
        else {
            res.json({
                status: false,
                message: "send mobile number",
                error_code: error_code.EMPTY_MOBILE
            })
        }
    }
    catch (ex) {
        /** logging */
        error_log(ex);
        res.json({
            status: false,
            message: ex.message,
            error_code: error_code.EX_MESSAGE
        })
    }
}

const extract_mobile_number = async (mobile_number_hash) => {
    try {
        const { OTP_KEY } = require("../../../../constants/config");
        const decrypt_service = require("../../../../utilities/decrypt");

        let mobile_number_checksum = await decrypt_service(mobile_number_hash, OTP_KEY);
        let today = new Date();
        if (mobile_number_checksum.slice(0, 2) == today.getDate() && mobile_number_checksum.slice(-2) == today.getMonth()) {
            return +mobile_number_checksum.slice(2, -2);
        }
        return null;
    }
    catch (err) {
        error_log(err);
        throw err;
    }
}


const error_code = {
    "EMPTY_MOBILE": 111,
    "EX_MESSAGE": 112
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/auth/controllers/validate_otp.js
const country_code_enum = require("../../../../enums/global/country_code");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const http_status_code_enum = require("../../../../enums/global/http_status_codes");
const validate_otp_service = require("../services/validate_otp_service");
const store_sign_up_log_service = require("../../../../common_services/sign_up/sign_up_logs");
const get_merchant_by_mobile_number = require("../../../../data_abstraction_layer/merchant/get_merchant_by_mobile_number")
const http_headers_enums = require("../../../../enums/global/http_headers");
const is_mobile_number_exist = require("../../../../data_abstraction_layer/merchant/is_mobile_number_exist");
const signup_log_stage_enum = require("../../../../enums/signup_log/signup_log_stage_enum");
const error_log = require("../../../../middelware/error_log");
const { check_merchant_status } = require("../../../../data_abstraction_layer/merchant/merchant_details");

module.exports = async (req, res) => {
  try {
    let installation_id = req.headers[http_headers_enums['fmt-installation-id']];
    let device_id = req.headers[http_headers_enums['fmt-device-id']];
    let mobile_number = +req.body.mobile_number;
    let current_app_version = req.headers.appversion;
    let otp = req.body.otp;
    let role_id = +req.body.role_id;
    let country_code = +req.body.country_code || country_code_enum.india;
    let referral_code = req.body.referral_code || null;
    /** check user exist and activated else add merchant and generate secret*/
    //checking mandatory parameters
    if (!otp && !mobile_number) {
      let message = "something is missing from the mobile_number or otp";
      res.status(http_status_code_enum.bad_request).json(create_api_response(false, message));
    } else {
      let new_user_verified = 0;
      let is_user_blocked=await check_merchant_status({mobile_number});
      if(is_user_blocked)
      {
          return res.status(http_status_code_enum.not_found).json({
              message: "user is blocked"
          });  
      }
      let existed_merchant = await is_mobile_number_exist(mobile_number);
      if (!existed_merchant) {
        new_user_verified = 1;
      }
      let token = await validate_otp_service(mobile_number, otp, role_id, country_code, referral_code)
      let merchant_detail = await get_merchant_by_mobile_number({ mobile_number });
      let merchant_detail_id = merchant_detail?.id || null;
      store_sign_up_log_service({ signup_log_stage: signup_log_stage_enum.otp_verify, installation_id, device_id, mobile_number, new_user_verified, merchant_detail_id, current_app_version })
        .catch(err => {
          error_log(err);
        });
      res.status(http_status_code_enum.ok).json(create_api_response(true, "", { token }));
    }
  } catch (ex) {
    error_log(ex);
    res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
  }
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/auth/services/validate_otp_service.js
const error_log = require('../../../../middelware/error_log');
const auth_service = require('../../../../entities/auth/service/auth_service');
const create_authentication_log_service = require('../../../../entities_v2/auth/service/create_authentication_log');
const authentication_agent_enum = require('../../../../enums/authorization/authentication_agent_enum');
const {
    generate_token
} = require('../../../../entities/auth/service/generate_token');
const env = require('../../../../config/global_config').env;
const env_enum = require('../../../../enums/env/env_enum');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const validate_otp_service = async (mobile_number, otp, role_id, country_code, referral_code) => {
    try {
        let valid;
        // designated otp for our internal login
        if (
            (otp === '0000' && env !== env_enum.production) ||
          (mobile_number === 9896111054 && otp === '9074') ||
          (mobile_number === 9999999999 && otp === '0000')
        ) { valid = true; } else {
        // validating otp
            valid = await auth_service.validate_otp(
                mobile_number,
                otp,
                country_code
            );
        }
        if (valid) {
            create_authentication_log_service(
                mobile_number,
                authentication_agent_enum.otp
            ).catch((err) => {
                error_log(err);
            });
            // eslint-disable-next-line no-useless-catch
            try {
                const token = await generate_token(
                    mobile_number,
                    role_id,
                    country_code,
                    referral_code
                );
                return token
            } catch (ex) {
                /** logging */
                //   error_log(ex);
                throw ex;
            }
        } else {
            throw new ValidationError('Invalid OTP');
        }
    } catch (ex) {
        error_log(ex);
        return ({ message: ex.message });
    }
};
module.exports = validate_otp_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/location/swagger/index.js
module.exports = {
  tags: {
    name: "location",
  },
  paths: {
    "/search_pincode": {
      get: {
        tags: ["location"],
        summary: "get pincodes upon searching",
        description: "get pincodes upon searching",
        operationId: "get_search_pincode",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "search_param",
            description: "pincode",
            required: true,
            type: "string"
          },
          {
            in: "query",
            name: "page_no",
            description: "page_no",
            required: false,
            type: "number"
          },
          {
            in: "query",
            name: "limit",
            description: "limit",
            required: false,
            type: "number"
          }
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/serviceable": {
      get: {
        tags: ["location"],
        summary: "get serviceable feature by location",
        description: "get serviceable feature by location",
        operationId: "get_serviceable_feature_by_location",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "pincode",
            description: "",
            required: true,
            type: "string"
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
  },
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/location/index.js
const router = require("express").Router();
const authorize = require("../../../middelware/authorized_routes");
const user_roles_enum = require("../../../enums/user_profile/user_role");
const serviceable_location_v2_controller = require('./controllers/serviceable_location_controller');
const search_pincode_controller = require('./controllers/search_pincode_controller');

router.get("/serviceable", authorize([user_roles_enum.Merchant]), serviceable_location_v2_controller);
router.get("/search_pincode", authorize([...Object.values(user_roles_enum)]), search_pincode_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/location/controllers/search_pincode_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const search_pincode_service = require('../services/search_pincode_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const search_param = req.query.search_param || ''; // takes pincode as a string
        const page_no = +req.query.page_no || 1;
        const limit = +req.query.limit || 10;
        if (search_param) {
            if ((search_param.trim().length) >= 4) {
                const pincodes_list = await search_pincode_service(search_param, page_no, limit);

                const response = create_api_response(true, 'success', pincodes_list);
                return res.status(http_status_code_enum.ok).json(response);
            } else {
                throw new ValidationError('Please enter atleast 4 characters.')
            }
        } else {
            return res.json(create_api_response(false, 'please provide your pincode'));
        }
    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/location/controllers/serviceable_location_controller.js
const error_log = require("../../../../middelware/error_log");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const serviceable_location_v2_services = require("../services/serviceable_location_services");

module.exports = async (req, res) => {
  try {
    let pincode = req.query.pincode;
    let master_merchant_id = req.user.master_merchant_id;
    if (!pincode) {
        let message = "pincode is mandatory"
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, message));
    }

    let serviceable = await serviceable_location_v2_services(pincode,master_merchant_id);
    return res.status(http_status_code_enum.ok).json(create_api_response(true, "successfull", {serviceable}));
  } catch (ex) {
    error_log(ex);
    res
      .status(http_status_code_enum.bad_request)
      .json(create_api_response(false, ex.message));
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/location/services/serviceable_location_services.js
const error_log = require("../../../../middelware/error_log");
const { get_serviceable_feature } = require("../../../../data_abstraction_layer/location/feature_serviceability");
const serviceable_enum = require("../../../../enums/serviceability/serviceable_enum");
const merchant_platform_enum = require("../../../../enums/merchant/merchant_platform");

const serviceable_location_services = async (pincode,master_merchant_id) => {
    try {
        //get serviceable location detail from pincode
        let is_serviceable= await get_serviceable_feature({pincode})
        if(is_serviceable?.is_procuring==serviceable_enum.enable)
        {
            if(master_merchant_id)
            {
                if(is_serviceable?.user_platform==merchant_platform_enum.ML || is_serviceable?.user_platform==merchant_platform_enum.Both)
                    return serviceable_enum.enable;
                else
                    return serviceable_enum.disable;
            }
            else{
                if(is_serviceable?.user_platform==merchant_platform_enum.Retailer || is_serviceable?.user_platform==merchant_platform_enum.Both)
                    return serviceable_enum.enable;
                else
                    return serviceable_enum.disable;
            }
        }
        else if(is_serviceable?.is_procuring==serviceable_enum.temporarly_disable)
        return serviceable_enum.temporarly_disable
        else
        return serviceable_enum.disable;
    } catch (err) {
        error_log(err);
        return null;
    }
};

module.exports = serviceable_location_services;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/location/services/search_pincode_service.js
const error_log = require("../.././../../middelware/error_log");
const get_pincode_by_search = require('../../../../data_abstraction_layer/location/get_pincode_by_search');
const get_taluk_name = require("../../../../data_abstraction_layer/location/get_master_taluk_by_id");
const get_district_name = require("../../../../data_abstraction_layer/location/get_master_district_by_id");
const get_state_name = require("../../../../data_abstraction_layer/location/get_master_state_by_id");
const get_master_state_id_by_name = require("../../../../data_abstraction_layer/location/get_master_state_id_by_name");
const get_master_district_id_by_name = require("../../../../data_abstraction_layer/location/get_master_district_id_by_name");
const get_master_taluk_id_by_name = require("../../../../data_abstraction_layer/location/get_master_taluk_id_by_name");
const { geocode } = require('@opencollabnexus/geolocation').GeoLocationFactory();
const search_pincode_service_v2 = async (search_param, page_no, limit) => {
  try {
    const search_tokens = search_param.split(" ").filter(ele => ele.trim());
    const unique_state_district_taluk_pincode = {};
    let result_arr = [];
    for (let index = 0; index < search_tokens.length; index++) {
      let current_search_token = search_tokens[index];
      const result = await geocode(current_search_token);
      result.forEach(location_result_element => {
        let location_result_obj = { ...location_result_element }
        if (+current_search_token && current_search_token.trim().length >= 4) {
          location_result_obj.title = location_result_obj.pincode;
          location_result_obj.subtitle = "";
          if (location_result_obj.taluk)
            location_result_obj.subtitle += location_result_obj.taluk + ","
          if (location_result_obj.district)
            location_result_obj.subtitle += location_result_obj.district + ","
          if (location_result_obj.state)
            location_result_obj.subtitle += location_result_obj.state
          delete location_result_obj.address;
          delete location_result_obj.lat;
          delete location_result_obj.long;
          let key = location_result_element.pincode;
          unique_state_district_taluk_pincode[key] = location_result_obj;
        }
        else {
          delete location_result_obj.address;
          delete location_result_obj.lat;
          delete location_result_obj.long;
          location_result_obj.title = location_result_obj.district;
          location_result_obj.subtitle = location_result_obj.state
          let key = location_result_obj.state + "#" + location_result_obj.district;
          unique_state_district_taluk_pincode[key] = location_result_obj;
        }
      });

    }
    result_arr = Object.values(unique_state_district_taluk_pincode)
    let paginated_result = {
      rows: result_arr.slice((page_no - 1) * limit, page_no * limit),
      count: result_arr.length
    }

    paginated_result.rows = await Promise.all(paginated_result.rows.map(async (location_element) => {
      try {
        let state = await get_master_state_id_by_name(location_element.state);
        let district = await get_master_district_id_by_name(state.id, location_element.district);
        let taluk = null;
        taluk = await get_master_taluk_id_by_name(state.id, district.id, location_element.taluk || "NA");
        return {
          pincode: location_element.pincode,
          taluk_name: location_element.taluk,
          district_name: location_element.district,
          state_name: location_element.state,
          taluk_id: taluk?.id,
          district_id: district.id,
          state_id: state.id,
          title: location_element.title,
          subtitle: location_element.subtitle
        }
      }
      catch (err) {
        console.log(err);
      }
    }));
    return paginated_result;
  }
  catch (err) {
    error_log(err);
    throw err;
  }
}

const search_pincode_service = async (search_param, page_no, limit) => {
  try {
    let attributes = ['pincode', 'master_taluka_id', 'master_district_id', 'master_state_id'];

    let pincodes_list = await get_pincode_by_search({ search_param: `${search_param}%`, page_no, limit, attributes });

    let pincodes = await Promise.all(pincodes_list.rows.map(async (pincode_element, i) => {
      let taluk_details = await get_taluk_name(pincodes_list.rows[i].master_state_id, pincodes_list.rows[i].master_district_id, pincodes_list.rows[i].master_taluka_id);
      let taluk_name = taluk_details?.name || null;
      if (taluk_name == "NA") {
        taluk_name = null
      }

      let district_details = await get_district_name(pincodes_list.rows[i].master_state_id, pincodes_list.rows[i].master_district_id);
      let district_name = district_details?.name || null;

      let state_details = await get_state_name(pincodes_list.rows[i].master_state_id);
      let state_name = state_details?.name;
      return {
        pincode: pincodes_list.rows[i].pincode,
        taluk_name: taluk_name,
        district_name: district_name,
        state_name: state_name,
        taluk_id: pincodes_list.rows[i].master_taluka_id,
        district_id: pincodes_list.rows[i].master_district_id,
        state_id: pincodes_list.rows[i].master_state_id,
      }
    }));
    let obj = {}
    obj = {
      pincodes: pincodes,
      total_count: pincodes_list.count
    }
    return obj;
  } catch (ex) {
    error_log(ex);
    throw ex;
  }
};
module.exports = search_pincode_service_v2;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/payment/swagger/index.js
module.exports = {
    tags: {
        name: 'payment'
    },
    paths: {
        '/': {
            get: {
                tags: ['payment'],
                summary: 'fetch all payments',
                description: '',
                operationId: 'fetch_payments',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'limit',
                        description: '',
                        type: 'number',
                        required: false
                    },
                    {
                        in: 'query',
                        name: 'page',
                        description: '',
                        type: 'number',
                        required: false
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/retailer': {
            get: {
                tags: ['payment'],
                summary: 'get all payments',
                description: '',
                operationId: 'get_payment_table',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'payment_id',
                        description: '',
                        required: true,
                        type: 'number'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/bank_and_tax_details': {
            post: {
                tags: ['payment'],
                summary: 'submit bank and tax details',
                description: '',
                operationId: 'submit_bank_and_tax_details',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        required: true,
                        schema: {
                            required: [
                                'payment_id',
                                'account_holder_name',
                                'account_number',
                                'bank_name',
                                'ifsc_code',
                                'is_tds_applicable',
                                'is_gst_applicable',
                                'tds_perc',
                                'tds_amount'
                            ],
                            properties: {
                                payment_id: {
                                    type: 'number'
                                },
                                account_holder_name: {
                                    type: 'string'
                                },
                                account_number: {
                                    type: 'string'
                                },
                                bank_name: {
                                    type: 'string'
                                },
                                ifsc_code: {
                                    type: 'string'
                                },
                                is_tds_applicable: {
                                    type: 'boolean'
                                },
                                is_gst_applicable: {
                                    type: 'boolean'
                                },
                                tds_perc: {
                                    type: 'number'
                                },
                                gst_perc: {
                                    type: 'number'
                                },
                                tds_amount: {
                                    type: 'number'
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/decline': {
            get: {
                tags: ['payment'],
                summary: 'decline payment',
                description: '',
                operationId: 'decline_payment',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'payment_id',
                        description: '',
                        required: true,
                        type: 'number'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/additional_payment': {
            post: {
                tags: ['payment'],
                summary: 'upload additional payments',
                description: '',
                operationId: 'upload_additional_payments',
                security: [{ Bearer: ['read'] }],
                consumes: 'multipart/form-data',
                parameters: [
                    {
                        in: 'formData',
                        name: 'file',
                        type: 'file',
                        description: ''
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/additional_payment/format': {
            get: {
                tags: ['payment'],
                summary: 'download additional payment format',
                description: '',
                operationId: 'download_additional_payment_format',
                security: [{ Bearer: ['read'] }],
                parameters: [],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/additional_payment/history': {
            get: {
                tags: ['payment'],
                summary: 'fetch additional payment history',
                description: '',
                operationId: 'fetch_additional_payment_history',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'payment_id',
                        description: '',
                        required: true,
                        type: 'number'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        }
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/payment/index.js
const router = require('express').Router();
// const fetch_payments_controller = require("./controllers/fetch_payments_controller");
const fetch_retailer_payment_details_controller = require('./controllers/fetch_retailer_payment_details_controller');
const submit_bank_and_tax_details_controller = require('./controllers/submit_bank_and_tax_details_controller');
const upload_additional_payment_controller = require('./controllers/upload_additional_payment_controller');
const upload_middleware = require('../../../middelware/upload_file_multer');
const download_additional_payment_format_controller = require('./controllers/download_additional_payment_format_controller');
const fetch_additional_payment_history_controller = require('./controllers/fetch_additional_payment_history_controller');
const decline_payment_controller = require('./controllers/decline_payment_controller');

// router.get("/", fetch_payments_controller); /** @deprecated */
router.get('/retailer', fetch_retailer_payment_details_controller);
router.post('/bank_and_tax_details', submit_bank_and_tax_details_controller);
router.post('/additional_payment', upload_middleware, upload_additional_payment_controller);
router.get('/additional_payment/format', download_additional_payment_format_controller);
router.get('/additional_payment/history', fetch_additional_payment_history_controller);
router.get('/decline', decline_payment_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/payment/controllers/fetch_retailer_payment_details_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const { fetch_retailer_payment_details_service } = require('../services/fetch_retailer_payment_details_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { payment_id } = req.query;
        if (!payment_id) {
            throw new ValidationError('payment id is a mandatory field');
        }
        const payment = await fetch_retailer_payment_details_service(payment_id);
        const response = create_api_response(true, 'success', payment);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/payment/controllers/upload_additional_payment_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const { upload_additional_payment_service } = require("../services/upload_additional_payment_service");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");

const upload_additional_payment_controller = async (req, res) => {
    try {
        let file = req.file;
        if(!file){
            return res.status(http_status_code_enum.bad_request).json({message: "file missing"});
        }
        if(file?.mimetype !== 'text/csv'){
            return res.status(http_status_code_enum.bad_request).json({message: "file format should be csv"});
        }
        const result = await upload_additional_payment_service(file);
        let response = create_api_response(result.status, result.message, result.data);
        res.status(http_status_code_enum.ok).json(response);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}

module.exports = upload_additional_payment_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/payment/controllers/fetch_additional_payment_history_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const { fetch_additional_payment_history_service } = require('../services/fetch_additional_payment_history_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { payment_id } = req.query;
        if (!payment_id) {
            throw new ValidationError('payment id is a mandatory field');
        }
        const payment = await fetch_additional_payment_history_service(payment_id);
        const response = create_api_response(true, 'success', payment);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/payment/controllers/download_additional_payment_format_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const csv_formats = require("../../../../enums/market_linkage/constants/csv_formats");

module.exports = async (req, res) => {
    try {
        let response = create_api_response(true, "success", {
            additional_payment_format: csv_formats.additional_payment_format
        });
        res.status(http_status_code_enum.ok).json(response);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/payment/controllers/decline_payment_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const { declined_payment_service } = require('../services/decline_payment_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { payment_id } = req.query;
        if (!payment_id) {
            throw new ValidationError('payment_id is mandatory params');
        }
        const declined_payment = await declined_payment_service(payment_id);
        const response = create_api_response(true, 'success', declined_payment);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/payment/controllers/fetch_payments_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const { fetch_payments_service } = require("../services/fetch_payments_service");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");

module.exports = async (req, res) => {
    try {
        let { limit, page } = req.query;
        limit = (limit && parseInt(limit) <= 50 && parseInt(limit) >= 0) ? parseInt(limit) : 50;
        page = (page && parseInt(page) >= 1) ? parseInt(page) : 1;
        const payments = await fetch_payments_service(limit, page);
        let response = create_api_response(true, "success", payments);
        res.status(http_status_code_enum.ok).json(response);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/payment/controllers/submit_bank_and_tax_details_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const joi = require('joi');
const { submit_bank_and_tax_details_service } = require('../services/submit_bank_and_tax_details_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const validation_result = bank_and_tax_schema.validate(req.body);
        if (validation_result.error) throw new ValidationError(validation_result.error.message);
        const {
            payment_id,
            account_holder_name,
            account_number,
            bank_name,
            ifsc_code,
            is_tds_applicable,
            is_gst_applicable,
            tds_perc,
            gst_perc,
            tds_amount
        } = validation_result.value;

        const added_tax_and_bank = await submit_bank_and_tax_details_service(
            payment_id,
            account_holder_name,
            account_number,
            bank_name,
            ifsc_code,
            is_tds_applicable,
            is_gst_applicable,
            tds_perc,
            gst_perc,
            tds_amount
        );
        const response = create_api_response(true, 'success', added_tax_and_bank);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
};

const bank_and_tax_schema = joi.object({
    payment_id: joi.number().positive().required(),
    account_holder_name: joi.string().trim().required(),
    account_number: joi.string().trim().required(),
    bank_name: joi.string().trim().required(),
    ifsc_code: joi.string().trim().required(),
    is_tds_applicable: joi.boolean(),
    is_gst_applicable: joi.boolean().required(),
    tds_perc: joi.number(),
    gst_perc: joi.number(),
    tds_amount: joi.number()
});



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/payment/services/submit_bank_and_tax_details_service.js
const error_log = require('../../../../middelware/error_log');
const procurement_payment_model = require('../../../../database/models_v2/procurement_payments/procurement_payments');
const account_detail_model = require('../../../../database/models_v2/transactions/account_details');
const banks_model = require('../../../../database/models_v2/transactions/banks');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const purchase_crop_order_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const payment_for_enum = require('../../../../enums/purchase_order/procurement_payment_enum').payment_for;
const { ValidationError } = require('../../../../utilities/error/custom_error');

const submit_bank_and_tax_details_service = async (
    payment_id,
    account_holder_name,
    account_number,
    bank_name,
    ifsc_code,
    is_tds_applicable,
    is_gst_applicable,
    tds_perc,
    gst_perc,
    tds_amount
) => {
    return new Promise(async (resolve, reject) => {
        try {
            const procurement_payment = await procurement_payment_model.findOne({
                where: {
                    id: payment_id,
                    is_active: true,
                    is_additional_payment: false
                }
            });
            if (!procurement_payment) { throw new ValidationError('invalid payment id'); }

            procurement_payment.is_tds_applicable = is_tds_applicable;
            if (is_tds_applicable) {
                procurement_payment.tds_percent = tds_perc;
                procurement_payment.tds_amount = tds_amount;
                procurement_payment.revised_payment = parseFloat(procurement_payment.amount) - procurement_payment.tds_amount;
            }

            procurement_payment.is_gst_applicable = is_gst_applicable;
            if (is_gst_applicable) {
                procurement_payment.gst_percent = gst_perc;
                procurement_payment.gst_amount = parseFloat(procurement_payment.amount) * (gst_perc / 100);
            }

            if (procurement_payment.payment_for === payment_for_enum.PO) {
                const purchase_crop_order = await purchase_crop_order_model.findOne({
                    where: {
                        id: procurement_payment.purchase_crop_order_id,
                        is_active: 1
                    }
                });
                const master_merchant_detail_id = purchase_crop_order.master_merchant_id;
                const account_details = await get_bank_detail_id(bank_name, account_number, ifsc_code, account_holder_name, master_merchant_detail_id);
                procurement_payment.account_detail_id = account_details.id;
            } else if (procurement_payment.payment_for === payment_for_enum.ORDER_DELIVERY) {
                const order_delivery_detail = await order_delivery_detail_model.findOne({
                    where: {
                        id: procurement_payment.order_delivery_id,
                        is_active: 1
                    }
                });
                const account_details = await get_bank_detail_id(bank_name, account_number, ifsc_code, account_holder_name);
                order_delivery_detail.account_detail_id = account_details.id;
                procurement_payment.account_detail_id = account_details.id;
                await order_delivery_detail.save();
            }
            await procurement_payment.save();
            return resolve({});
        } catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    })
}

const get_bank_detail_id = async (bank_name, account_number, ifsc_code, account_holder_name, master_merchant_id = null) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const bank_detail = await banks_model.findOrCreate({
            where: {
                name: bank_name,
                is_active: 1
            }
        });
        const account_detail_query = {
            account_number,
            ifsc_code,
            account_holder_name,
            master_merchant_id,
            bank_id: bank_detail[0].id,
            is_active: 1
        };
        const account_detail = await account_detail_model.findOrCreate({
            where: account_detail_query
        });
        return account_detail[0];
    } catch (err) {
        throw err
    }
}

module.exports = {
    submit_bank_and_tax_details_service,
    get_bank_detail_id
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/payment/services/fetch_additional_payment_history_service.js
const procurement_payments_model = require('../../../../database/models_v2/procurement_payments/procurement_payments');
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const error_log = require('../../../../middelware/error_log');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const fetch_additional_payment_history_service = (payment_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            const payment_data = await procurement_payments_model.findOne({
                where: {
                    id: payment_id,
                    is_active: true,
                    is_additional_payment: true
                }
            });
            if (!payment_data) {
                throw new ValidationError('invalid payment id');
            }
            const procurement_order = await purchase_crop_orders_model.findOne({
                where: {
                    id: payment_data.purchase_crop_order_id,
                    is_active: true
                },
                include: [{
                    model: procurement_payments_model,
                    where: {
                        is_active: true,
                        is_additional_payment: true
                    },
                    required: true
                }],
                order: [
                    [{ model: procurement_payments_model }, 'id', 'desc']
                ]
            })
            const payment_detail = procurement_order.procurement_payments.map((payment) => {
                return {
                    reason_of_payment: payment.reason_for_payment ?? null,
                    amount: payment.amount ?? null,
                    utr_number: payment.utr_number ?? null,
                    status: payment.status ?? null,
                    created_date: payment.createdAt ?? null,
                    paid_date: payment.paid_at ?? null,
                    payment_id: payment.id
                }
            })
            return resolve({ payment_detail });
        } catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    });
};

module.exports = {
    fetch_additional_payment_history_service
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/payment/services/fetch_retailer_payment_details_service.js
const procurement_payments_model = require('../../../../database/models_v2/procurement_payments/procurement_payments');
const purchase_crop_order_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const master_merchant_detail_model = require('../../../../database/models_v2/merchant/master_merchant_detail');
const master_district_model = require('../../../../database/models_v2/location/master_district');
const master_state_model = require('../../../../database/models_v2/location/master_state');
const master_taluk_model = require('../../../../database/models_v2/location/master_taluka');
const errorLog = require('../../../../middelware/error_log');
const locations_model = require('../../../../database/models_v2/global/locations');
const bank_account_details_model = require('../../../../database/models_v2/transactions/account_details');
const bank_model = require('../../../../database/models_v2/transactions/banks');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const procurement_lots_model = require('../../../../database/models_v2/procurement_sample/procurement_lots');
const round_off_to_two_decimal = require('../../../v1/utilities/round_off/round_off_to_two_decimal');
const procurement_order_bill_components_model = require('../../../../database/models_v2/procurement_payments/procurement_bill_components');
const purchase_crop_bill_component_enum = require('../../../../enums/market_linkage/enums/purchase_crop_bill_component_enum');
const { payment_for, installment_number } = require('../../../../enums/purchase_order/procurement_payment_enum');
const revision_before_payments_model = require('../../../../database/models_v2/procurement_payments/revision_before_payment');
const payment_deductions_for_retailer_model = require('../../../../database/models_v2/procurement_payments/payment_deduction_for_retailer');
const order_delivery_documents = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_documents');
const procurement_dispatch_document = require('../../../../database/models_v2/procurement_order/procurement_dispatch_document');
const order_delivery_document_type_enums = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_document_type_enums');
const merchant_verification_docs = require('../../../../database/models_v2/merchant/merchant_verification_docs');
const { doc_type } = require('../../../../enums/purchase_order/purchase_order_document_enum');
const { documentNameToTypeApp } = require('../../../../enums/market_linkage/enums/procurementSources');
const po_unloading_docs = require('../../../../database/models_v2/po_unloading/po_unloading_docs');
const po_unloading_doc_types = require('../../../../database/models_v2/po_unloading/po_unloading_doc_types');
// const retailer_yearly_transaction = require('../../../../database/models_v2/merchant/retailer_yearly_transaction');
const purchase_crop_orders = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const tds_yearly_data = require('../../../../database/models_v2/tds_yearly_data');
const procurment_crop_sample = require('../../../../database/models_v2/procurement_sample/procurment_crop_sample');
const Op = require('sequelize').Op;
const { ValidationError } = require('../../../../utilities/error/custom_error');

const fetch_retailer_payment_details_service = (payment_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            const payment = await procurement_payments_model.findOne({
                where: {
                    is_active: true,
                    id: payment_id,
                    is_additional_payment: false
                }
            });
            if (!payment) {
                throw new ValidationError('invalid payment id');
            }
            const payment_details = await generate_response(payment);
            return resolve(payment_details);
        } catch (err) {
            errorLog(err);
            return reject({ message: err.message });
        }
    });
};

const get_retailer_info = async (retailer_id) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const retailer = await master_merchant_detail_model.findOne({
            where: {
                is_active: true,
                id: retailer_id
            },
            include: [
                {
                    model: master_state_model,
                    where: {
                        is_active: true
                    },
                    required: false
                },
                {
                    model: master_district_model,
                    where: {
                        is_active: true
                    },
                    required: false
                },
                {
                    model: master_taluk_model,
                    where: {
                        is_active: true
                    },
                    required: false
                },
                {
                    model: locations_model,
                    where: {
                        is_active: true
                    },
                    required: false
                }
            ]
        })
        if (!retailer) {
            throw new ValidationError('invalid payment id');
        }
        const retailer_info = {
            retailer_name: retailer.name || null,
            business_name: retailer.business_name || null,
            email: retailer.email || null,
            full_address: retailer.full_address || null,
            mobile_number: retailer.mobile_number || null,
            taluk_name: retailer.master_taluka?.name || null,
            state_name: retailer.master_state?.name || null,
            district_name: retailer.master_district?.name || null,
            pincode: retailer.pincode || null,
            geo_location: {
                latitude: retailer.location?.latitude || null,
                longitude: retailer.location?.longitude || null
            }
        }
        return retailer_info
    } catch (err) {
        throw err
    }
}

const get_bank_details = async (account_detail_id) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const bank_account = await bank_account_details_model.findOne({
            where: {
                is_active: true,
                id: account_detail_id
            },
            include: [
                {
                    model: bank_model,
                    where: {
                        is_active: true
                    },
                    required: false
                }
            ]
        })
        const bank_details = {
            bank_name: bank_account?.bank?.name || null,
            account_number: bank_account?.account_number || null,
            ifsc_code: bank_account?.ifsc_code || null,
            account_holder_name: bank_account?.account_holder_name || null
        }
        return bank_details
    } catch (err) {
        throw err
    }
}

const get_weight_details = async (order_delivery_id, bag_deduction_value) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const order_delivery = await order_delivery_detail_model.findOne({
            where: {
                is_active: true,
                id: order_delivery_id || null
            }
        })
        if (!order_delivery) {
            throw new ValidationError('invalid payment id');
        }
        const weight_details = {
            gross_weight: order_delivery.gross_weight ?? null,
            bag_deduction: bag_deduction_value ?? null,
            net_weight: order_delivery.net_weight ?? null
        }
        return weight_details
    } catch (err) {
        throw err
    }
}

const get_po_details = async (po_id) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const purchase_order = await purchase_crop_order_model.findOne({
            where: {
                is_active: true,
                id: po_id
            },
            include: [
                {
                    model: procurement_lots_model,
                    where: {
                        is_active: true
                    },
                    include: [
                        {
                            model: procurement_order_bill_components_model,
                            where: {
                                is_active: true
                            },
                            required: true
                        }
                    ],
                    required: true
                },
                {
                    model: revision_before_payments_model,
                    where: {
                        is_active: true,
                        payment_for: payment_for.PO,
                        approved_by_state_head: true
                    },
                    required: true
                },
                {
                    model: payment_deductions_for_retailer_model,
                    where: {
                        is_active: true,
                        approved_by_state_head: true
                    },
                    required: false
                }
            ]
        })
        if (!purchase_order) {
            throw new ValidationError('invalid payment id');
        }
        const po_details = {
            commodity_price: purchase_order.price ?? null,
            mandi_tax: (purchase_order.procurement_lot.procurement_order_bill_components)
                .find((component) => component.order_bill_component_id === purchase_crop_bill_component_enum.mandi_tax).amount ?? null,
            commission: (purchase_order.procurement_lot.procurement_order_bill_components)
                .find((component) => component.order_bill_component_id === purchase_crop_bill_component_enum.retailer_commision).amount ?? null,
            labour_and_bag_cost: (purchase_order.procurement_lot.procurement_order_bill_components)
                .find((component) => component.order_bill_component_id === purchase_crop_bill_component_enum.labour_and_bag_cost).amount ?? null
        }
        return { po_details, data: purchase_order }
    } catch (err) {
        throw err
    }
}

const get_payment_details = async (payment, purchase_order, po_details, weight_details) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const other_installment = await procurement_payments_model.findOne({
            where: {
                installment_number: { [Op.ne]: payment.installment_number },
                payment_for: payment.payment_for,
                is_active: true,
                purchase_crop_order_id: purchase_order.id,
                is_additional_payment: false
            },
            include: [
                {
                    model: purchase_crop_order_model,
                    where: {
                        is_active: true
                    },
                    include: [
                        {
                            model: revision_before_payments_model,
                            where: {
                                is_active: true,
                                payment_for: payment_for.PO,
                                approved_by_state_head: true
                            },
                            required: true
                        }
                    ],
                    required: true
                }
            ]
        })
        const payment_details = {
            commodity_value: round_off_to_two_decimal((po_details.commodity_price || 0) * (weight_details.net_weight / 100)) ?? null,
            mandi_tax_value: purchase_order.mandi_tax_value ?? null,
            commission_value: round_off_to_two_decimal((po_details.commission || 0) * (weight_details.net_weight / 100)) ?? null,
            labour_and_bag_value: round_off_to_two_decimal((po_details.labour_and_bag_cost || 0) * (weight_details.net_weight / 100)) ?? null,
            retailer_billed_amount: purchase_order.total_payment ?? null,
            part_one_perc: null,
            part_one_amount: null,
            part_one_payable: null,
            deduction_amount: null,
            part_two_amount: null,
            part_two_payable: null
        }
        if (payment.installment_number === 1) {
            payment_details.part_one_perc = purchase_order.revision_before_payments[0].percentage ?? null;
            payment_details.part_one_amount = parseFloat(payment.amount) ?? null;
            payment_details.part_one_payable = parseFloat(payment.amount) ?? null;
        }
        if (payment.installment_number === 2) {
            payment_details.part_one_perc = other_installment?.purchase_crop_order?.revision_before_payments[0].percentage ?? null;
            payment_details.part_one_amount = parseFloat(other_installment.amount) ?? null;
            payment_details.part_one_payable = parseFloat(other_installment.amount) ?? null;
            payment_details.deduction_amount = purchase_order.payment_deductions_for_retailers?.[0]?.deduction_amount ?? null;
            payment_details.part_two_amount = parseFloat(payment.amount) ?? null;
            payment_details.part_two_payable = parseFloat(payment.amount) ?? null;
        }

        if (payment.installment_number === installment_number.THREE) {

            const all_retailer_payments = await procurement_payments_model.findAll({
                where: {
                    installment_number: { [Op.in]: [installment_number.ONE, installment_number.TWO] },
                    payment_for: payment.payment_for,
                    is_active: true,
                    purchase_crop_order_id: purchase_order.id,
                    is_additional_payment: false
                }
            })

            for (let i = 0; i < all_retailer_payments.length; i++) {

                const payment_data = all_retailer_payments[i].dataValues

                payment_details.part_one_perc = purchase_order.revision_before_payments[0].percentage ?? null;
                payment_details.part_one_amount = payment_data.installment_number === installment_number.ONE ? parseFloat(payment_data.amount) : payment_details.part_one_amount;
                payment_details.part_one_payable = payment_data.installment_number === installment_number.ONE ? parseFloat(payment_data.amount) : payment_details.part_one_payable;
                payment_details.deduction_amount = purchase_order.payment_deductions_for_retailers?.[0]?.deduction_amount ?? null;
                payment_details.part_two_amount = payment_data.installment_number === installment_number.TWO ? parseFloat(payment_data.amount) : payment_details.part_two_amount;
                payment_details.part_two_payable = payment_data.installment_number === installment_number.TWO ? parseFloat(payment_data.amount) : payment_details.part_two_payable;

            }

        }

        return { payment_details, other_installment }
    } catch (err) {
        throw err
    }
}

const get_doc_details = async (installment_number, order_delivery_id, master_merchant_id, purchase_crop_order_id) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const [order_delivery_docs, retailer_verification_docs, unloading_docs] = await Promise.all([
            order_delivery_documents.findAll({
                where: {
                    is_active: true,
                    order_delivery_id
                },
                include: [
                    {
                        model: procurement_dispatch_document,
                        where: {
                            is_active: true
                        },
                        required: false
                    },
                    {
                        model: order_delivery_document_type_enums,
                        where: {
                            is_active: true
                        },
                        required: false
                    }
                ]
            }),
            merchant_verification_docs.findAll({
                where: {
                    is_active: true,
                    master_merchant_id
                }
            }),
            po_unloading_docs.findAll({
                where: {
                    is_active: true,
                    purchase_crop_order_id
                },
                include: [
                    {
                        model: po_unloading_doc_types,
                        where: {
                            is_active: true
                        },
                        required: true
                    }
                ]
            })
        ])
        const documents = [];
        for (let i = 0; i < order_delivery_docs?.length || 0; i++) {
            const doc = order_delivery_docs[i]
            const doc_obj = {}
            if (doc.order_delivery_document_type_id || doc.name === doc_type.primary9rImage || doc.name === doc_type.loadedTruckWeightSlip) {
                doc_obj.doc_id = doc.id
                doc_obj.doc_url = doc.doc_url
                if (doc.order_delivery_document_type_id) { doc_obj.doc_name = doc.procurement_dispatch_document?.name } else { doc_obj.doc_name = doc.name }
                documents.push(doc_obj);
            }
        }

        for (let i = 0; i < retailer_verification_docs?.length || 0; i++) {
            const doc = retailer_verification_docs[i]
            const retailer_check_doc = {}
            if (doc?.document_type === documentNameToTypeApp.bankAccount) {
                retailer_check_doc.doc_id = doc?.id || null
                retailer_check_doc.doc_name = 'retailer cheque'
                retailer_check_doc.doc_url = doc?.front_image || null
                documents.push(retailer_check_doc)
            }
        }

        if (installment_number === 2) {
            for (let i = 0; i < unloading_docs?.length || 0; i++) {
                const doc = unloading_docs[i];
                if (doc?.po_unloading_doc_type?.name === 'UNLOADING RECEIPT') {
                    documents.push({
                        doc_id: doc?.id || null,
                        doc_name: doc?.po_unloading_doc_type?.name || null,
                        doc_url: doc?.doc_url || null
                    })
                }
            }
        }
        return documents
    } catch (err) {
        throw err
    }
}

// const get_tds_details = (payment, other_installment) => {
//     // eslint-disable-next-line no-useless-catch
//     try {
//         const tds_details = {
//             is_tds_applicable: payment.is_tds_applicable ?? null,
//             tds_perc: payment.tds_percent ?? null,
//             part_one_tds_amount: (payment.installment_number === 1)
//                 ? (payment.tds_amount ?? null)
//                 : (other_installment?.tds_amount ?? null),
//             part_two_tds_amount: (payment.installment_number === 2)
//                 ? (payment.tds_amount ?? null)
//                 : null
//         }
//         return tds_details
//     } catch (err) {
//         throw err
//     }
// }

const get_new_tds_details = async (payment, retailer_id, po_date) => {
    // eslint-disable-next-line no-useless-catch
    try {
        // const retailer_trx_details = await retailer_yearly_transaction.findOne({
        //     where: {
        //         master_merchant_id: retailer_id,
        //         financial_year_start: {
        //             [Op.lte]: po_date
        //         },
        //         financial_year_end: {
        //             [Op.gte]: po_date
        //         },
        //         is_active: 1
        //     }
        // })

        const po_data = await purchase_crop_orders.findOne({
            where: {
                is_active: 1,
                id: payment.dataValues.purchase_crop_order_id
            },
            include: [
                {
                    model: procurment_crop_sample,
                    where: {
                        is_active: 1
                    }
                },
                {
                    model: order_delivery_detail_model,
                    where: {
                        is_active: 1
                    }
                }
            ]
        })
        // console.log(po_data.dataValues)
        const is_for = po_data.dataValues.procurment_crop_sample.dataValues.f_o_r

        let payment_amount = po_data.dataValues?.total_payment

        if (is_for) {

            const total_transport_cost = po_data.dataValues?.order_delivery_detail?.dataValues.total_transport_cost

            payment_amount += total_transport_cost

        }

        const tds_data = await tds_yearly_data.findOne({
            where: {
                financial_year_start: {
                    [Op.lte]: po_data.dataValues.createdAt
                },
                financial_year_end: {
                    [Op.gte]: po_data.dataValues.createdAt
                },
                is_active: 1
            }
        })

        const tds_details = {
            is_tds_applicable: false,
            // tds_perc: 0,
            part_one_tds_amount: 0,
            part_two_tds_amount: 0
        }
        // if(retailer_trx_details){
        // eslint-disable-next-line no-unused-expressions
        tds_details.is_tds_applicable = payment.dataValues.is_tds_applicable
        // tds_details.tds_perc = payment.dataValues.is_tds_applicable ? (retailer_trx_details.dataValues.tds_percent ? retailer_trx_details.dataValues.tds_percent : 0): 0,
        tds_details.part_one_tds_amount = payment.dataValues.is_tds_applicable ? (payment.dataValues.tds_amount ? payment.dataValues.tds_amount : tds_data.dataValues.tds_percent * payment_amount) : 0
        // }

        if (payment.payment_for === payment_for.PO && (payment.installment_number === 2 || payment.installment_number === 3)) {
            const part_one_payment = await procurement_payments_model.findOne({
                where: {
                    payment_for: payment_for.PO,
                    installment_number: 1,
                    is_active: 1,
                    purchase_crop_order_id: payment.purchase_crop_order_id
                }
            })
            tds_details.part_one_tds_amount = payment.dataValues.is_tds_applicable ? (part_one_payment && part_one_payment.dataValues.tds_amount ? part_one_payment.dataValues.tds_amount : tds_data?.dataValues.tds_percent * payment_amount) : 0
        }

        return tds_details

    } catch (error) {
        throw error
    }

}

const get_gst_details = (payment) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const gst_details = {
            is_gst_applicable: payment.is_gst_applicable ?? null,
            gst_perc: payment.gst_percent ?? null
        }
        return gst_details
    } catch (err) {
        throw err
    }
}

// const get_new_gst_details = async (payment) => {
//     try {
//         const po = await purchase_crop_order_model.findOne({
//             where: {
//                 is_active: 1,
//                 id: payment.dataValues.purchase_crop_order_id
//             }
//         })

//         let gst = 0

//         if(po)
//             gst = po.dataValues.igst_percentage + po.dataValues.cgst_percentage + po.dataValues.sgst_percentage

//         const gst_details = {
//             is_gst_applicable: gst && gst !== 0 ? true : false,
//             gst_perc: gst,
//         }
//         return gst_details
//     }
//     catch (err) {
//         throw err
//     }
// }

const generate_response = async (payment) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const purchase_order = await get_po_details(payment.purchase_crop_order_id);
        const [
            retailer_info,
            bank_details,
            weight_details,
            documents
        ] = await Promise.all([
            get_retailer_info(purchase_order.data.master_merchant_id),
            get_bank_details(payment.account_detail_id),
            get_weight_details(payment.order_delivery_id, purchase_order.data.bag_deduction_value),
            get_doc_details(payment.installment_number, payment.order_delivery_id, purchase_order.data.master_merchant_id, payment.purchase_crop_order_id)
        ])
        const payment_details = await get_payment_details(payment, purchase_order.data, purchase_order.po_details, weight_details);
        const tds_details = await get_new_tds_details(payment, purchase_order.data.master_merchant_id, purchase_order.data.createdAt)
        // const gst_details = await get_new_gst_details(payment);
        const gst_details = get_gst_details(payment);

        if (payment_details.payment_details.part_one_payable) { payment_details.payment_details.part_one_payable -= (tds_details.part_one_tds_amount || 0); }
        if (payment_details.payment_details.part_two_payable) { payment_details.payment_details.part_two_payable -= (tds_details.part_two_tds_amount || 0); }

        const response_data = {
            retailer_info,
            bank_details,
            weight_details,
            po_details: purchase_order.po_details,
            payment_details: payment_details.payment_details,
            tds_details,
            gst_details,
            documents
        };
        return response_data
    } catch (err) {
        throw err
    }
}

module.exports = { fetch_retailer_payment_details_service };



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/payment/services/fetch_payments_service.js
const procurement_payments_model = require('../../../../database/models_v2/procurement_payments/procurement_payments');
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const master_merchant_detail_model = require('../../../../database/models_v2/merchant/master_merchant_detail');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const procurement_bill_components_model = require('../../../../database/models_v2/procurement_payments/procurement_bill_components');
const procurement_lots_model = require('../../../../database/models_v2/procurement_sample/procurement_lots');
const error_log = require('../../../../middelware/error_log');
const bill_operation_enum = require('../../../../enums/purchase_order/bill_operation_enum');
const { payment_for } = require('../../../../enums/purchase_order/procurement_payment_enum');
const Op = require('sequelize').Op;

const fetch_payments_service = (limit, page) => {
    return new Promise(async (resolve, reject) => {
        try {
            const resp = {
                payments: [],
                total_records: 0
            };
            const payments = await procurement_payments_model.findAll({
                where: {
                    is_active: true,
                    is_additional_payment: false
                },
                order: [['created_at', 'ASC']]
            });
            if (payments.length) {
                const sorted_payment = sort_by_pending_for_utr(payments, page, limit);
                const payment_ids = sorted_payment.map((doc) => doc.id);
                const [purchase_orders, order_deliveries] = await get_po_and_order_delivery(payment_ids);
                resp.payments = await generate_response(sorted_payment, purchase_orders, order_deliveries);
                resp.total_records = payments.length;
            }
            return resolve(resp);
        } catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    });
};

const sort_by_pending_for_utr = (payments, page, limit) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const pending_for_utr = payments
            .filter((payment) => !payment.utr_number);
        const remaining_payments = payments.filter((payment) => !pending_for_utr.includes(payment));
        const sorted_payment = pending_for_utr.concat(remaining_payments);
        return sorted_payment.slice((page - 1) * limit, page * limit);
    } catch (error) {
        throw error
    }
}

const get_po_and_order_delivery = async (payment_ids) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const [purchase_orders, order_deliveries] = await Promise.all([
            purchase_crop_orders_model.findAll({
                where: {
                    is_active: true
                },
                include: [
                    {
                        model: procurement_payments_model,
                        where: {
                            is_active: true,
                            id: { [Op.in]: payment_ids },
                            is_additional_payment: false
                        },
                        required: true
                    },
                    {
                        model: master_merchant_detail_model,
                        where: {
                            is_active: true
                        },
                        required: true
                    },
                    {
                        model: procurement_lots_model,
                        where: {
                            is_active: true
                        },
                        include: [
                            {
                                model: procurement_bill_components_model,
                                where: {
                                    is_active: true
                                },
                                required: false
                            }
                        ],
                        required: false
                    }
                ]
            }),
            order_delivery_detail_model.findAll({
                where: {
                    is_active: true
                },
                include: {
                    model: procurement_payments_model,
                    where: {
                        is_active: true,
                        id: { [Op.in]: payment_ids },
                        is_additional_payment: false
                    },
                    required: true
                }
            })
        ])
        return [purchase_orders, order_deliveries]
    } catch (error) {
        throw error
    }
}

const generate_response = async (payments, purchase_orders, order_deliveries) => {
    const payment_response = [];
    for (let i = 0; i < payments.length; i++) {
        const payment = payments[i];
        const purchase_order = purchase_orders
            .find((po) => po.procurement_payments
                ?.find((doc) => doc.id === payment.id));
        const order_delivery = order_deliveries
            .find((o) => o.procurement_payments
                ?.find((doc) => doc.id === payment.id));
        const payment_object = {
            poNumber: purchase_order?.farmart_id || null,
            name: purchase_order?.master_merchant_detail?.name || null,
            paymentType: payment?.installment_number || null,
            payableAmount: payment?.amount || 0,
            deductionAmount: calculate_deduction(purchase_order?.procurement_lot?.procurement_order_bill_components),
            utrNumber: payment?.utr_number || '',
            id: payment?.id,
            isBankInformationAvailable: !!payment.account_detail_id
        };
        if (payment.payment_for === payment_for.PO) {
            payment_object.paymentTo = 'retailer';
            payment_object.totalAmount = purchase_order?.total_payment || 0;
        } else {
            payment_object.paymentTo = 'transport';
            payment_object.totalAmount = order_delivery?.total_transport_cost || 0;
        }
        payment_response.push(payment_object);
    }
    return payment_response;
}

const calculate_deduction = (bill_component = []) => {
    let total_deduction = 0;
    for (let i = 0; i < bill_component.length; i++) {
        if (bill_component[i]?.order_bill_operation_id === bill_operation_enum.addition) {
            total_deduction += bill_component[i]?.amount;
        } else {
            total_deduction -= bill_component[i]?.amount;
        }
    }
    return total_deduction;
};

module.exports = {
    fetch_payments_service,
    sort_by_pending_for_utr,
    get_po_and_order_delivery,
    generate_response,
    calculate_deduction
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/payment/services/upload_additional_payment_service.js
const purchase_crop_orders = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const procurement_payments_model = require('../../../../database/models_v2/procurement_payments/procurement_payments');
const bank_account_details_model = require('../../../../database/models_v2/transactions/account_details');
const banks_model = require('../../../../database/models_v2/transactions/banks');
const { payment_for } = require('../../../../enums/purchase_order/procurement_payment_enum');
const error_log = require('../../../../middelware/error_log');
const convert_csv_to_json = require('../../../../utilities/csv_to_json/convert_csv_to_json');
const convert_json_to_csv = require('../../../../utilities/json_to_csv/convert_json_to_csv');
const Op = require('sequelize').Op;
const save_media_stream_file_aws = require('../../../../utilities/save_media_stream_file_aws');
const payee_type = {
    retailer: payment_for.PO,
    transporter: payment_for.ORDER_DELIVERY,
    buyer: payment_for.BUYER,
    broker: payment_for.BROKER,
    'central govt': payment_for.CENTRAL_GOVT,
    'state govt': payment_for.STATE_GOVT,
    mandi: payment_for.MANDI,
    others: payment_for.OTHERS
}
const { ValidationError } = require('../../../../utilities/error/custom_error');

const upload_additional_payment_service = async (uploaded_file) => {
    return new Promise(async (resolve, reject) => {
        try {
            const payment_data = await convert_csv_to_json(uploaded_file);
            if (!payment_data.length) { throw new ValidationError('atleast 1 payment need to be uploaded'); }
            if (payment_data.length > 100) { throw new ValidationError('only 100 payments can be uploaded at a time'); }
            const [problem_exist, problematic_records, po_list] = await validate_payment_data(payment_data);
            if (!problem_exist) {
                const uploaded_account_data = await upload_bank_account_details(payment_data);
                await upload_payment_details(payment_data, uploaded_account_data, po_list)
            }
            const csv_data = await convert_json_to_csv(problematic_records);
            const data_buffer = Buffer.from(csv_data, 'utf-8');
            const file_url = await save_media_stream_file_aws(data_buffer, 'text/csv', 'Additional_Payment/' + Date.now());
            const response = {
                data: { file_url },
                message: problem_exist ? 'Invalid data in file' : 'success',
                status: !problem_exist
            }
            return resolve(response);
        } catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    })
}
const validate_payment_data = async (payment_data) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const problematic_records = [];
        let problem_exist = false;
        if (payment_data[0]['PO ID'] === undefined ||
            payment_data[0]['ZOHO ID'] === undefined ||
            payment_data[0]['Reason for payment (120 char)'] === undefined ||
            payment_data[0]['Payee Type (Allowed values - Retailer,Transporter,Buyer,Broker,Central Govt,State Govt,Mandi,Others)'] === undefined ||
            payment_data[0]['Account Holder Name (120 char)'] === undefined ||
            payment_data[0]['Bank Name (120 char)'] === undefined ||
            payment_data[0]['Account Number (36 - alphanumeric )'] === undefined ||
            payment_data[0]['IFSC Code (12 char - alphanumeric )'] === undefined ||
            payment_data[0]['Payable Amount (Rs)'] === undefined ||
            Object.keys(payment_data[0]).length > 9) { throw new ValidationError('Invalid file format'); }

        const po_list = await purchase_crop_orders.findAll({
            where: {
                is_active: true,
                farmart_id: { [Op.in]: payment_data.map((data) => (data['PO ID']).trim()) }
            }
        });
        for (let index = 0; index < payment_data.length; index++) {
            const problem = [];
            const payment = payment_data[index];
            const po_details = po_list.find((po) => po.farmart_id === (payment['PO ID']).toUpperCase().trim());
            if (!po_details) { problem.push('PO ID is wrong'); }
            if (po_details && (po_details.zoho_po_id).toLowerCase().trim() !== (payment['ZOHO ID']).toLowerCase().trim()) { problem.push('ZOHO ID is wrong'); }
            if (!payee_type[(payment['Payee Type (Allowed values - Retailer,Transporter,Buyer,Broker,Central Govt,State Govt,Mandi,Others)']).toLowerCase().trim()]) { problem.push('Payee type is wrong - Not from the mentioned list of payee type in the dropdown'); }

            if (!(payment['Reason for payment (120 char)'].trim())) { problem.push('Reason for payment (120 char)- Missing'); }
            if (!(payment['Account Holder Name (120 char)'].trim())) { problem.push('Account Holder Name(120 char) - Missing'); }
            if (!(payment['Bank Name (120 char)'].trim())) { problem.push('Bank Name(120 char) - Missing'); }
            if (!(payment['Account Number (36 - alphanumeric )'].trim())) { problem.push('Account Number(36 - alphanumeric) - Missing'); }
            if (!(payment['IFSC Code (12 char - alphanumeric )'].trim())) { problem.push('IFSC Code(12 char - alphanumeric) - Missing'); }

            if (payment['Reason for payment (120 char)'].trim().length > 120) { problem.push('Reason for payment (120 char)- No of characters are more then the limit'); }
            if (payment['Account Holder Name (120 char)'].trim().length > 120) { problem.push('Account Holder Name(120 char) - No of characters are more then the limit'); }
            if (payment['Bank Name (120 char)'].trim().length > 120) { problem.push('Bank Name(120 char) - No of characters are more then the limit'); }
            if (payment['Account Number (36 - alphanumeric )'].trim().length > 36) { problem.push('Account Number(36 - alphanumeric) - No of characters are more then the limit'); }
            if (payment['IFSC Code (12 char - alphanumeric )'].trim().length > 12) { problem.push('IFSC Code(12 char - alphanumeric) - No of Characters are more then the limit'); }
            if (!problem.length) { problem.push('no problem'); } else { problem_exist = true; }
            problematic_records.push({
                ...payment,
                problem: problem.join(', ')
            })
        }
        return [problem_exist, problematic_records, po_list];
    } catch (err) {
        throw err
    }
}
const upload_bank_account_details = async (payment_data) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const bank_list = await banks_model.findAll({
            where: {
                is_active: true,
                name: { [Op.in]: payment_data.map((data) => (data['Bank Name (120 char)']).trim()) }
            }
        });
        const uploaded_account_data = []
        for (let index = 0; index < payment_data.length; index++) {
            const payment = payment_data[index];
            let bank = bank_list.find((b) => (b.name).toLowerCase().trim() === (payment['Bank Name (120 char)']).toLowerCase().trim());
            if (!bank) {
                bank = await banks_model.build({
                    is_active: true,
                    name: (payment['Bank Name (120 char)']).trim()
                }).save();
            }
            uploaded_account_data.push(await bank_account_details_model.findOrCreate({
                where: {
                    account_number: (payment['Account Number (36 - alphanumeric )']).toUpperCase().trim(),
                    ifsc_code: (payment['IFSC Code (12 char - alphanumeric )']).toUpperCase().trim(),
                    account_holder_name: (payment['Account Holder Name (120 char)']).toUpperCase().trim(),
                    is_active: true,
                    bank_id: bank?.id ?? null
                }
            }));
        }
        return uploaded_account_data.map((data) => data[0]);
    } catch (err) {
        throw err
    }
}
const upload_payment_details = async (payment_data, uploaded_account_data, po_list) => {
    // eslint-disable-next-line no-useless-catch
    try {
        // fetch banks again since new banks has been added while uploading account details
        const bank_list = await banks_model.findAll({
            where: {
                is_active: true,
                name: { [Op.in]: payment_data.map((data) => (data['Bank Name (120 char)']).trim()) }
            }
        });
        const payment_data_to_upload = [];
        for (let index = 0; index < payment_data.length; index++) {
            const payment = payment_data[index];
            const po_details = po_list.find((po) => po.farmart_id === (payment['PO ID']).toUpperCase().trim());
            const bank = bank_list.find((b) => (b.name).toLowerCase().trim() === (payment['Bank Name (120 char)']).toLowerCase().trim());
            const account_details = uploaded_account_data.find((acc) =>
                (acc.account_number).toLowerCase().trim() === (payment['Account Number (36 - alphanumeric )']).toLowerCase().trim() &&
                (acc.ifsc_code).toLowerCase().trim() === (payment['IFSC Code (12 char - alphanumeric )']).toLowerCase().trim() &&
                (acc.account_holder_name).toLowerCase().trim() === (payment['Account Holder Name (120 char)']).toLowerCase().trim() &&
                acc.bank_id === bank?.id);

            payment_data_to_upload.push({
                payment_for: payee_type[(payment['Payee Type (Allowed values - Retailer,Transporter,Buyer,Broker,Central Govt,State Govt,Mandi,Others)']).toLowerCase().trim()],
                amount: payment['Payable Amount (Rs)'],
                revised_payment: payment['Payable Amount (Rs)'],
                is_active: true,
                reason_for_payment: payment['Reason for payment (120 char)'],
                purchase_crop_order_id: po_details.id,
                account_detail_id: account_details?.id ?? null,
                is_additional_payment: true
            })
        }
        await procurement_payments_model.bulkCreate(payment_data_to_upload);
    } catch (err) {
        throw err
    }
}

module.exports = {
    upload_additional_payment_service,
    validate_payment_data,
    upload_bank_account_details,
    upload_payment_details
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/payment/services/decline_payment_service.js
const procurement_payments_model = require('../../../../database/models_v2/procurement_payments/procurement_payments');
const { status } = require('../../../../enums/purchase_order/procurement_payment_enum');
const error_log = require('../../../../middelware/error_log');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const declined_payment_service = (payment_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            const payment_data = await procurement_payments_model.findOne({
                where: {
                    is_active: true,
                    id: payment_id,
                    is_additional_payment: true
                }
            })
            if (!payment_data) { throw new ValidationError('additional payment not found'); }
            payment_data.status = status.DECLINED;
            await payment_data.save();
            return resolve({});
        } catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    });
};

module.exports = {
    declined_payment_service
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/crop/swagger/index.js
module.exports = {
    tags: {
        name: "crop"
    },
    paths: {
        "/": {
            get: {
                tags: ["crop"],
                summary: "fetch crops",
                description: "",
                operationId: "fetch_crop",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "query",
                        name: "limit",
                        description: "",
                        required: false,
                        type: "number"
                    },
                    {
                        in: "query",
                        name: "page",
                        description: "",
                        required: false,
                        type: "number"
                    },
                    {
                        in: "query",
                        name: "search_param",
                        description: "",
                        required: false,
                        type: "string"
                    },
                    {
                        in: "query",
                        name: "category",
                        description: "",
                        required: false,
                        type: "number"
                    },
                    {
                        in: "query",
                        name: "is_variety_required",
                        description: "",
                        required: false,
                        type: "boolean"
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        }
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/crop/index.js
const fetch_crops_controller = require("./controllers/fetch_crops_controller");
const router = require("express").Router();

router.get("/", fetch_crops_controller);

module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/crop/controllers/fetch_crops_controller.js
const http_status_code_enum = require("../../../../enums/global/http_status_codes");
const error_log = require("../../../../middelware/error_log");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const { fetch_crops_service } = require("../services/fetch_crops_service");

module.exports = async (req, res) => {
    try {
        let { limit, page, search_param, category, is_variety_required } = req.query;
        limit = (limit && parseInt(limit) >= 0) ? parseInt(limit) : 100;
        page = (page && parseInt(page) >= 1) ? parseInt(page) : 1;
        const crops = await fetch_crops_service({ limit, page, search_param, category, is_variety_required });
        const response = create_api_response(true, "success", crops);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/crop/services/fetch_crops_service.js
const Op = require('sequelize').Op;
const crop_detail = require('../../../../database/models_v2/crop/crop_detail');
const crop_varieties_detail = require('../../../../database/models_v2/crop/crop_varieties_detail');
const error_log = require('../../../../middelware/error_log');

const fetch_crops_service = async ({ limit, page, search_param, category, is_variety_required = false }) => {
    return new Promise(async (resolve, reject) => {
        try {
            const query = {
                is_active: true
            }
            if (category) {
                query.category = category;
            }
            if (search_param) {
                query.name = {
                    [Op.like]: '%' + search_param + '%'
                }
            }
            const crops = await crop_detail.findAndCountAll({
                where: query,
                include: [
                    {
                        model: crop_varieties_detail,
                        attributes: ['id'],
                        where: {
                            is_active: true
                        },
                        required: (is_variety_required === 'true')
                    }
                ],
                distinct: ['id'],
                order: [['updated_at', 'DESC']],
                limit,
                offset: ((page - 1) * limit) || 0
            })
            const response = generate_response(crops);
            return resolve(response);
        } catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    })
}

const generate_response = (crops) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const response = {
            crops: [],
            total_records: 0
        }
        for (let index = 0; index < crops.rows.length; index++) {
            const crop = crops.rows[index];
            response.crops.push({
                id: crop.id,
                crop_name: crop.name,
                category: crop.category,
                no_of_varieties: crop.crop_varieties_details.length
            })
        }
        response.total_records = crops.count;
        return response;
    } catch (err) {
        throw err;
    }
}

module.exports = {
    fetch_crops_service,
    generate_response
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/master_sample/swagger/index.js
module.exports = {
    tags: {
        name: "master_sample",
    },
    paths: {
        "/": {
            get: {
                tags: ["master_sample"],
                summary: "fetch all samples",
                description: "",
                operationId: "fetch_master_sample",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "query",
                        name: "limit",
                        description: "",
                        type: "number",
                        required: false
                    },
                    {
                        in: "query",
                        name: "page",
                        description: "",
                        type: "number",
                        required: false
                    },
                    {
                        in: "query",
                        name: "status",
                        description: "",
                        type: "number",
                        required: false
                    },
                    {
                        in: "query",
                        name: "name",
                        description: "",
                        type: "string",
                        required: false
                    },
                    {
                        in: "query",
                        name: "number",
                        description: "",
                        type: "string",
                        required: false
                    },
                    {
                        in: "query",
                        name: "associated_pa",
                        description: "",
                        type: "number",
                        required: false
                    },
                    {
                        in: "query",
                        name: "search_param",
                        description: "",
                        type: "string",
                        required: false
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        },
        "/pa": {
            post: {
              tags: ["master_sample"],
              summary: "get all sample list",
              description: "",
              operationId: "get_all_sample",
              security: [{ Bearer: ["read"] }],
              parameters: [
                {
                  "in": "body",
                  "name": "body",
                  "description": "",
                  "required": true,
                  "schema": {
                    "properties": {
                            "limit": {
                                "type": "number",
                            },
                            "page_number": {
                                "type": "number",
                            },
                            "status": {
                                "type":"array",
                                "items":{
                                  "type":"number"
                                }
                            },
                            "search_by": {
                              "type": "string",
                            }
                    }
                  }
                }
              ],
              responses: {
                400: {
                  description: "Invalid input",
                },
                200: {
                  description: "success",
                },
              },
            }
          },
          "/edit_lead_status": {
            post: {
              tags: ["master_sample"],
              summary: "edit lead status",
              description: "",
              operationId: "edit_lead_status",
              security: [{ Bearer: ["read"] }],
              parameters: [
                {
                  "in": "body",
                  "name": "body",
                  "description": "",
                  "required": true,
                  "schema": {
                    "properties": {
                            "lead_id": {
                                "type": "number",
                            },
                            "leadStatus": {
                                "type": "number",
                            }
                    }
                  }
                }
              ],
              responses: {
                400: {
                  description: "Invalid input",
                },
                200: {
                  description: "success",
                },
              },
            }
          },
          "/get_lead_status": {
            get: {
                tags: ["master_sample"],
                summary: "fetch all lead status",
                description: "",
                operationId: "fetch_lead_status",
                security: [{ Bearer: ["read"] }],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        },
        "/{sample_id}": {
          get: {
              tags: ["master_sample"],
              summary: "fetch sample details",
              description: "",
              operationId: "fetch_master_sample_details",
              security: [{ Bearer: ["read"] }],
              parameters: [
                {
                  in: "path",
                  name: "sample_id",
                  description: "",
                  required: true,
                  type: "string",
                }
              ],
              responses: {
                  400: {
                      description: "Invalid input"
                  },
                  200: {
                      description: "success"
                  }
              }
          }
      },
      "/rpm": {
        get: {
            tags: ["master_sample"],
            summary: "get samples by rpm",
            description: "",
            operationId: "get_sample_rpm_new",
            security: [{ Bearer: ["read"] }],
            parameters: [
                {
                    "in": "query",
                    "name": "name",
                    "description": "",
                    "type": "string"
                },
                {
                    "in": "query",
                    "name": "number",
                    "description": "",
                    "type": "number"
                },
                {
                    "in": "query",
                    "name": "status",
                    "description": "",
                    "type": "number"
                },
                {
                    "in": "query",
                    "name": "associateId",
                    "description": "",
                    "type": "string"
                },
                {
                  "in": "query",
                  "name": "limit",
                  "description": "",
                  "type": "string"
              },
              {
                "in": "query",
                "name": "page_number",
                "description": "",
                "type": "string"
            },
            ],
            responses: {
                400: {
                    description: "Invalid input",
                },
                200: {
                    description: "success",
                }
            }
        }
    }
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/master_sample/index.js
const router = require("express").Router();
const create_sample_controller = require("./controllers/create_sample_controller");
const edit_lead_status_controller = require("./controllers/edit_lead_status_controller");
const fetch_master_sample_controller = require("./controllers/fetch_master_sample_controller");
const fetch_master_sample_pa_list_controller = require("./controllers/fetch_master_sample_pa_list_controller");
const get_lead_status_controller = require("./controllers/get_lead_status_controller");
const get_sample_detail_controller = require("./controllers/get_sample_detail_controller");
const get_sample_rpm_controller = require("./controllers/get_sample_rpm_controller");
const validateSampleData = require("./validation/validation");

router.get("/rpm", get_sample_rpm_controller);
router.get("/", fetch_master_sample_controller);
router.post("/pa", fetch_master_sample_pa_list_controller)
router.post("/edit_lead_status", edit_lead_status_controller)
router.get("/get_lead_status", get_lead_status_controller)
router.get("/:sample_id", get_sample_detail_controller)
router.post("/", validateSampleData, create_sample_controller)

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/master_sample/utils/send_service_response.js
const send_service_response = async (status=false,data={},message="") => {
    return {status, message, data}
}

module.exports = {
    send_service_response
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/master_sample/controllers/edit_lead_status_controller.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { ml_lead_stages } = require("../../../../enums/market_linkage/enums/ml_lead_enum");
const error_log = require("../../../../middelware/error_log");
const edit_lead_status_service = require("../services/edit_lead_status_service");

module.exports = async (req,res) => {

    try {

        const {lead_id, leadStatus} = req.body

        const leadStatusSet = new Set([ml_lead_stages.customer_not_available, ml_lead_stages.lead, ml_lead_stages.pa_assigned,
            ml_lead_stages.reject_fake_user, ml_lead_stages.reject_insufficient_quantity, ml_lead_stages.reject_others, 
            ml_lead_stages.reject_price_parity, ml_lead_stages.reject_testing, ml_lead_stages.reject_user_declined, ml_lead_stages.request_for_reschedule,
            ml_lead_stages.sample_collected])

            
        if(!leadStatusSet.has(leadStatus))
            return res.status(HTTP_status_codes.badRequest).send({status: false, messgae: "Please send correct lead status"})

        const result = await edit_lead_status_service({lead_id,leadStatus})

        return res.status(HTTP_status_codes.ok).json(result);
        
    } catch (error) {
        error_log(error)
        return res.status(HTTP_status_codes.internalServerError).json({
            message: error.message,
        });
    }

}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/master_sample/controllers/get_sample_rpm_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const { get_sample_rpm_service } = require("../services/get_sample_rpm_service");
const user_role = require("../../../../enums/user_profile/user_role");
const merchant_category = require("../../../../enums/market_linkage/enums/v2/merchant_category");

module.exports = async (req, res) => {
    try {
        const { user_profile_id: user_id, user_role_id: designation } = req.user;

        let category;

        switch (designation) {
            case user_role.PROCUREMENT_ASSOCIATE:
                category = merchant_category.PROCUREMENT
                break;
            case user_role.SALES_ASSOCIATE:
            case user_role.STATE_HEAD_SALES:
            case user_role.REGIONAL_MANAGER_SALES:
                category = merchant_category.SALES
                break;
            default:
                category = merchant_category.PROCUREMENT
                break;
        }

        let { limit, page_number, name, number, status, associateId } = req.query;

        limit = (limit && parseInt(limit) <= 20 && parseInt(limit) >= 0) ? parseInt(limit) : 20;
        page_number = (page_number && parseInt(page_number) >= 1) ? parseInt(page_number) : 1;

        const getSampleResult = await get_sample_rpm_service(
            user_id,
            name,
            number,
            status,
            associateId,
            category,
            limit,
            page_number
        );

        return res.status(getSampleResult.status).json(getSampleResult.data);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({ message: err.message });
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/master_sample/controllers/get_sample_detail_controller.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");
const get_sample_details_service = require("../services/get_sample_details_service");

module.exports = async (req,res) => {

    try {

        const sample_id = req.params.sample_id

        const data = await get_sample_details_service(sample_id)

        return res.status(HTTP_status_codes.ok).json(data)
        
    } catch (error) {
        error_log(error)
        return res.status(HTTP_status_codes.internalServerError).json({
            message: error.message,
        });
    }

}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/master_sample/controllers/get_lead_status_controller.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");
const get_lead_status_service = require("../services/get_lead_status_service");

module.exports = async (req, res) => {
    try {

        const { user_role_id: designation } = req.user || {};

        const data = await get_lead_status_service(designation)

        return res.status(HTTP_status_codes.ok).json(data)
        
    } catch (error) {
        error_log(error)
        return res.status(HTTP_status_codes.internalServerError).json({
            message: error.message,
        });
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/master_sample/controllers/create_sample_controller.js
const source_enum = require('../../../../entities_v2/metadata/enums/campaign/source_enum');
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const { dispatchBy } = require('../../../../enums/market_linkage/enums/procurement_crop_sample');
const merchant_category = require('../../../../enums/market_linkage/enums/v2/merchant_category');
const user_role = require('../../../../enums/user_profile/user_role');
const error_log = require('../../../../middelware/error_log');
const { create_sample_service } = require('../services/create_sample_servcie');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {

        const {
            cropId,
            crop_variety_id,
            sampleWeight,
            totalAvailableQuantity,
            purchasePrice,
            transportCostEst,
            qcReport = [],
            sampleImages = [],
            retailerId,
            bagType,
            emptyBagWeight,
            loadedBagWeight,
            bagDeduction,
            isMandiTaxPaid,
            leadId,
            labourAndBagCost,
            lot = [],
            sampleId
        } = req.body;

        const mandiTax = +req.body.mandiTax || 0;
        const retailerCommision = +req.body.retailerCommision || 0;
        const FOR = req.body.FOR || 0;
        const dispatch_by = req.body.dispatch_by || dispatchBy.PA;
        const is_gst_receipt_opted = req.body.is_gst_receipt_opted;
        const { user_role_id: designation, user_profile_id } = req.user;
        let reqLocation, sampleSource, category;

        switch (designation) {
        case user_role.PROCUREMENT_ASSOCIATE:
            category = merchant_category.PROCUREMENT
            break;
        case user_role.SALES_ASSOCIATE:
        case user_role.STATE_HEAD_SALES:
        case user_role.REGIONAL_MANAGER_SALES:
            category = merchant_category.SALES
            break;
        default:
            category = merchant_category.PROCUREMENT
            break;
        }

        if (designation === user_role.PROCUREMENT_ASSOCIATE || designation === user_role.SALES_ASSOCIATE) {
            sampleSource = source_enum.pa;
            if (!req.headers.geolocation) throw new ValidationError('geolocation header missing'); ;
            reqLocation = JSON.parse(req.headers.geolocation);
        }

        const create_new_sample_data = await create_sample_service({
            sampleData: {
                retailerId,
                crop_variety_id,
                sampleWeight,
                totalAvailableQuantity,
                purchasePrice,
                transportCostEst,
                createdBy: user_profile_id,
                qcReport,
                sampleImages,
                cropId,
                bagType,
                emptyBagWeight,
                loadedBagWeight,
                bagDeduction,
                isMandiTaxPaid,
                leadId,
                mandiTax,
                retailerCommision,
                labourAndBagCost,
                FOR,
                dispatch_by,
                category,
                is_gst_receipt_opted
            },
            reqLocation,
            sampleSource,
            lot,
            sampleId
        })

        return res.status(HTTP_status_codes.ok).json(create_new_sample_data)

    } catch (error) {
        error_log(error)
        return res.status(HTTP_status_codes.internalServerError).json({
            message: error.message
        });
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/master_sample/controllers/fetch_master_sample_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const { fetch_master_sample_service } = require("../services/fetch_master_sample_service");

module.exports = async (req, res) => {
    try {
        let { limit = 50, page = 1, status = "ALL", name, number, search_param } = req.query;
        if (limit && parseInt(limit) <= 50)
            limit = parseInt(limit);
        else
            limit = 50;
        if (page)
            page = parseInt(page);

        let associated_pa = req.query.associated_pa || "ALL";
        const master_samples = await fetch_master_sample_service(limit, page, status, associated_pa, name, number, null, null, search_param);
        let response = create_api_response(true, "success", master_samples);
        res.status(http_status_code_enum.ok).json(response);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/master_sample/controllers/fetch_master_sample_pa_list_controller.js
const app_log_service = require("../../../../common_services/market_linkage/logging/app_log_service");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const fetch_master_sample_pa_list_service = require("../services/fetch_master_sample_pa_list_service");

module.exports = async (req, res) => {
    try {
   
      let { limit, page_number, status, search_by } = req.body;
      limit = (limit && parseInt(limit) <= 50 && parseInt(limit) >= 0) ? parseInt(limit) : 50;
      page_number = (page_number && parseInt(page_number) >= 1) ? parseInt(page_number) : 1;
  
      const {user_profile_id, user_role_id} = req.user

    
      const sample_result = await fetch_master_sample_pa_list_service({user_profile_id, limit, page_number, status, search_by, user_role_id});
      return res.status(HTTP_status_codes.ok).json(sample_result);
  
    } catch (e) {
      app_log_service({type:type.error,err:e});
      return res.status(HTTP_status_codes.internalServerError).json({
        message: e.message,
      });
    }
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/master_sample/services/get_sample_rpm_service.js
const user_profile = require('../../../../database/models/user_profile');
const crop_detail = require('../../../../database/models_v2/crop/crop_detail');
const crop_varieties_detail = require('../../../../database/models_v2/crop/crop_varieties_detail');
const purchase_qc_report = require('../../../../database/models_v2/crop/purchase_qc_report');
const locations = require('../../../../database/models_v2/global/locations');
const master_merchant_detail = require('../../../../database/models_v2/merchant/master_merchant_detail');
const crop_variety_qc_param_maps = require('../../../../database/models_v2/procurement_order/crop_variety_qc_param_maps');
const purchase_crop_orders = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const qc_param_types = require('../../../../database/models_v2/procurement_order/qc_param_types');
const procurement_order_bill_components = require('../../../../database/models_v2/procurement_payments/procurement_bill_components');
const procurement_order_bill_component_enum = require('../../../../database/models_v2/procurement_payments/procurement_order_bill_component_enums');
const procurement_lots = require('../../../../database/models_v2/procurement_sample/procurement_lots');
const procurment_crop_sample = require('../../../../database/models_v2/procurement_sample/procurment_crop_sample');
const purchase_crop_sample_images = require('../../../../database/models_v2/procurement_sample/purchase_sample_images');
// const masterSampleModel = require('../../../../database/mongoose/market_linkage_db/masterSample.model');
// const userModel = require('../../../../database/mongoose/market_linkage_db/user.model');
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const { sampleStatus } = require('../../../../enums/market_linkage/enums/masterSampleEnum');
const error_log = require('../../../../middelware/error_log');
const get_all_juniors_service = require('../../../v1/users/_services/get_all_juniors_service');
const convertKgToGram = require('../../../v1/utilities/unitConversion/convertKgToGram');
const convertKgToTon = require('../../../v1/utilities/unitConversion/convertKgToTon');
const Op = require('sequelize').Op;
const { ValidationError } = require('../../../../utilities/error/custom_error');

const get_sample_rpm_service = async (userId, name, number, status = sampleStatus.CREATED, associateId, category, limit, page_number) => {
    try {
        const query = {
            is_active: 1,
            category
        };
        const user_query = {
            is_active: 1
        };
        const merchant_query = {
            is_active: 1
        };

        if (associateId) {
            const user = await user_profile.findOne({
                where: {
                    id: associateId,
                    is_active: 1
                }
            });
            if (!user) throw new ValidationError('pa not found');
            user_query.mobile_number = user.mobile_number;
        } else {
            const juniorUsers = await get_all_juniors_service(userId);
            if (juniorUsers.status !== HTTP_status_codes.ok) {
                return juniorUsers;
            }
            const createdBy = juniorUsers.data.map(function (user) {
                return user.mobileNumber;
            });
            user_query.mobile_number = { [Op.in]: createdBy };
        }
        if (name) {
            merchant_query.name = name;
        }
        if (number) {
            merchant_query.mobile_number = number;
        }
        if (status) {
            query.status = status;
        }

        const sampleData = await procurment_crop_sample.findAll({
            where: query,
            include: [
                {
                    model: user_profile,
                    where: user_query,
                    required: true
                },
                {
                    model: master_merchant_detail,
                    where: merchant_query,
                    required: true
                },
                {
                    model: purchase_crop_sample_images,
                    where: {
                        is_active: true
                    },
                    required: false
                },
                {
                    model: locations,
                    where: {
                        is_active: true
                    },
                    required: false
                },
                {
                    model: crop_detail,
                    where: {
                        is_active: true
                    },
                    required: true
                },
                {
                    model: crop_varieties_detail,
                    where: {
                        is_active: true
                    },
                    required: true
                },
                {
                    model: purchase_qc_report,
                    where: {
                        is_active: true
                    },
                    include: [{
                        model: crop_variety_qc_param_maps,
                        where: {
                            is_active: true
                        },
                        required: false,
                        include: [
                            {
                                model: qc_param_types,
                                where: {
                                    is_active: true
                                },
                                required: false
                            }
                        ]
                    }],
                    required: false
                },
                {
                    model: procurement_order_bill_components,
                    include: [
                        {
                            model: procurement_order_bill_component_enum,
                            where: {
                                is_active: true
                            },
                            required: false
                        }
                    ],
                    where: {
                        is_active: true
                    },
                    required: false
                },
                {
                    model: procurement_lots,
                    where: {
                        is_active: 1
                    },
                    required: false
                },
                {
                    model: purchase_crop_orders,
                    where: {
                        is_active: true
                    },
                    required: false
                }
            ],
            limit,
            offset: ((page_number - 1) * limit) || 0,
            order: [['updated_at', 'DESC']]
        });

        sampleData.forEach(sample => {
            const kgToTonResult = convertKgToTon({
                sampleWeight: sample.sample_weight
            });
            const kgTogramResult = convertKgToGram({
                emptyBagWeight: sample.empty_bag_weight
            })

            sample.sample_weight = kgToTonResult.sampleWeight;
            sample.empty_bag_weight = kgTogramResult.emptyBagWeight;
        });

        const response_data = sampleData.map((sample) => {
            return {
                retailerGeoLocation: sample.location
                    ? {
                        accuracy: sample.location.accuracy,
                        lat: sample.location.latitude,
                        long: sample.location.longitude
                    }
                    : {},
                isActive: sample.is_active,
                status: sample.status,
                sampleImages: sample.purchase_crop_sample_images.map((image) => image.image),
                _id: sample.id,
                retailerId: sample.master_merchant_detail?.id,
                retailerMobileNumber: sample.master_merchant_detail?.mobile_number,
                retailerName: sample.master_merchant_detail?.name,
                retailerDistrictName: sample.master_merchant_detail?.district_name,
                retailerStateName: sample.master_merchant_detail?.state_name,
                retailerPincode: sample.master_merchant_detail?.pincode,
                cropName: sample.crop_detail?.name,
                cropVariety: sample.crop_varieties_detail?.id,
                cropVarietyName: sample.crop_varieties_detail?.name,
                sampleWeight: sample.sample_weight,
                totalAvailableQuantity: sample.total_available_quantity,
                purchasePrice: sample.purchase_price,
                transportCostEst: sample.transport_cost_est,
                createdBy: sample.user_profile
                    ? {
                        id: sample.user_profile.id,
                        name: sample.user_profile.name,
                        mobileNumber: sample.user_profile.mobile_number
                    }
                    : {},
                qcReport: sample.purchase_qc_reports
                    ? sample.purchase_qc_reports.map((qc_report) => {
                        return {
                            name: qc_report?.crop_variety_qc_param_map?.qc_param_type?.name,
                            value: qc_report?.value,
                            qcReportId: qc_report?.crop_variety_qc_param_map_id,
                            image: qc_report?.image,
                            thresholdCondition: qc_report?.crop_variety_qc_param_map?.condition,
                            thresholdValue: qc_report?.crop_variety_qc_param_map?.threshold_value
                        }
                    })
                    : [],
                lot: sample.procurement_lots?.map((lot) => {
                    const kgToTonResult = convertKgToTon({ lot: lot.weight });
                    return kgToTonResult.lot;
                }),
                cropId: sample.crop_detail?.id,
                bagType: sample.bag_type,
                emptyBagWeight: sample.empty_bag_weight,
                loadedBagWeight: sample.loaded_bag_weight,
                isMandiTaxPaid: sample.is_mandi_tax_paid,
                bagDeduction: sample.bag_deduction,
                mandiTax: sample.procurement_order_bill_components?.find(o => o.procurement_order_bill_component_enum.name === 'mandi_tax')?.amount,
                retailerCommision: sample.procurement_order_bill_components?.find(o => o.procurement_order_bill_component_enum.name === 'retailer_commision')?.amount,
                labourAndBagCost: sample.procurement_order_bill_components?.find(o => o.procurement_order_bill_component_enum.name === 'labour_and_bag_cost')?.amount,
                farmartId: sample.farmart_id,
                createdAt: sample.createdAt,
                updatedAt: sample.updatedAt,
                leadId: sample.purchase_crop_lead_id,
                procurableTon: sample.procurable_ton,
                retailerLockedPrice: sample.retailer_locked_price,
                zohoPoId: sample.zoho_po_id,
                poData: sample.purchase_crop_orders?.map((po) => {
                    return {
                        poId: po.id,
                        poNumber: po.farmart_id,
                        poStatus: po.status
                    }
                }),
                retailerEmail: sample.master_merchant_detail?.email,
                retailerBusinessName: sample.master_merchant_detail?.business_name,
                retailerFarmartId: sample.master_merchant_detail?.farmart_id,
                FOR: sample.f_o_r,
                dispatch_by: sample.dispatch_by,
                category: sample.category
            }
        });
        return { status: HTTP_status_codes.ok, data: response_data };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: 'Something bad happened',
                error: err.message
            }
        };
    }
};

module.exports = {
    get_sample_rpm_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/master_sample/services/get_sample_details_service.js
const crop_varieties_detail = require("../../../../database/models_v2/crop/crop_varieties_detail")
const crop_detail = require("../../../../database/models_v2/crop/crop_detail")
const purchase_qc_report = require("../../../../database/models_v2/crop/purchase_qc_report")
const master_merchant_detail = require("../../../../database/models_v2/merchant/master_merchant_detail")
const crop_variety_qc_param_maps = require("../../../../database/models_v2/procurement_order/crop_variety_qc_param_maps")
const purchase_crop_orders = require("../../../../database/models_v2/procurement_order/purchase_crop_orders")
const qc_param_types = require("../../../../database/models_v2/procurement_order/qc_param_types")
const procurement_order_bill_components = require("../../../../database/models_v2/procurement_payments/procurement_bill_components")
const procurement_order_bill_component_enum = require("../../../../database/models_v2/procurement_payments/procurement_order_bill_component_enums")
const procurement_lots = require("../../../../database/models_v2/procurement_sample/procurement_lots")
const procurment_crop_sample = require("../../../../database/models_v2/procurement_sample/procurment_crop_sample")
const purchase_crop_sample_images = require("../../../../database/models_v2/procurement_sample/purchase_sample_images")
const error_log = require("../../../../middelware/error_log")
const convertKgToGram = require("../../../v1/utilities/unitConversion/convertKgToGram")
const convertKgToTon = require("../../../v1/utilities/unitConversion/convertKgToTon")
const { send_service_response } = require("../utils/send_service_response");
const user_profile_model = require("../../../../database/models/user_profile");

module.exports = async (sample_id) => {

    try {

        const query = {
            id: sample_id,
            is_active: 1
        }

        const lot_where_clause = {
            is_active: 1
        };


        const sample_data = await procurment_crop_sample.findAll({
            where: query,
            include: [
                {
                    model: purchase_crop_sample_images,
                    where: {
                        is_active: true
                    },
                    required: false
                },
                {
                    model: procurement_order_bill_components,
                    where: {
                        is_active: true
                    },
                    include: [
                        {
                            model: procurement_order_bill_component_enum
                        }
                    ],
                    required: false
                },
                {
                    model: purchase_qc_report,
                    where: {
                        is_active: true
                    },
                    include: [{
                        model: crop_variety_qc_param_maps,
                        where: {
                            is_active: true
                        },
                        include: [
                            {
                                model: qc_param_types
                            }
                        ]
                    }],
                    required: false
                },
                {
                    model: master_merchant_detail,
                    where: {
                        is_active: 1
                    }
                },
                {
                    model: procurement_lots,
                    where: lot_where_clause,
                    required: false
                },
                {
                    model: purchase_crop_orders,
                    required: false
                },
                {
                    model: crop_varieties_detail,
                    required: false
                },
                {
                    model: crop_detail,
                    required: false
                }
            ],
            order: [["updated_at", "DESC"]],
        });

        sample_data.forEach(sample => {
            const kgToTonResult = convertKgToTon({
                sampleWeight: sample.sampleWeight
            });
            const kgTogramResult = convertKgToGram({
                emptyBagWeight: sample.emptyBagWeight
            })

            sample.sampleWeight = kgToTonResult.sampleWeight;
            sample.emptyBagWeight = kgTogramResult.emptyBagWeight;
        });
        const sample_detail_response = await create_response_data(sample_data);
        return send_service_response(true, { sample_detail: sample_detail_response }, '')

    } catch (error) {
        error_log(error)
        return send_service_response(false, {}, error.message)
    }

}

const create_response_data = async (sample_data) => {
    const sample_response_data = await Promise.all(sample_data.map(async (sample) => {
        let created_by = await user_profile_model.findOne({
            where: {
                id: sample.created_by,
                is_active: 1
            },
            attributes: ["name", "mobile_number"]
        });
        if (created_by)
            created_by = created_by.dataValues;
        return {
            sampleImages: sample.purchase_crop_sample_images.map((image) => image.image),
            sampleId: sample.id,
            retailerId: sample.master_merchant_detail?.id,
            retailerMobileNumber: sample.master_merchant_detail?.mobile_number,
            retailerPincode: sample.master_merchant_detail?.pincode,
            retailerEmail: sample.master_merchant_detail?.email,
            retailerBusinessName: sample.master_merchant_detail?.business_name,
            retailerFarmartId: sample.master_merchant_detail?.farmart_id,
            leadId: sample.purchase_crop_lead_id,
            sampleWeight: sample.sample_weight / 1000,
            totalAvailableQuantity: sample.total_available_quantity,
            purchasePrice: sample.purchase_price,
            transportCostEst: sample.transport_cost_est,
            qcReport: sample.purchase_qc_reports ? sample.purchase_qc_reports.map((qc_report) => {
                return {
                    name: qc_report?.crop_variety_qc_param_map?.qc_param_type?.name,
                    value: qc_report?.value,
                    qcReportId: qc_report?.crop_variety_qc_param_map_id,
                    image: qc_report?.image,
                    imgReq: qc_report?.crop_variety_qc_param_map?.image_required,
                    thresholdCondition: qc_report?.crop_variety_qc_param_map?.condition,
                    thresholdValue: qc_report?.crop_variety_qc_param_map?.threshold_value
                }
            }) : [],
            lot: sample.procurement_lots.map((lot) => lot.weight / 1000),
            cropId: sample.crop_id,
            crop_variety_id: sample.crop_variety_id,
            crop_variety: sample.crop_varieties_detail?.name,
            bagType: sample.bag_type,
            emptyBagWeight: sample.empty_bag_weight,
            loadedBagWeight: sample.loaded_bag_weight,
            bagDeduction: sample.bag_deduction,
            isMandiTaxPaid: sample.is_mandi_tax_paid,
            mandiTax: sample.procurement_order_bill_components?.find(o => o.procurement_order_bill_component_enum.name === 'mandi_tax')?.amount,
            retailerCommision: sample.procurement_order_bill_components?.find(o => o.procurement_order_bill_component_enum.name === 'retailer_commision')?.amount,
            labourAndBagCost: sample.procurement_order_bill_components?.find(o => o.procurement_order_bill_component_enum.name === 'labour_and_bag_cost')?.amount,
            farmartId: sample.farmart_id,
            createdAt: sample.createdAt,
            updatedAt: sample.updatedAt,
            procurableTon: sample.procurable_ton,
            retailerLockedPrice: sample.retailer_locked_price,
            zohoPoId: sample.zoho_po_id,
            FOR: sample.f_o_r,
            dispatch_by: sample.dispatch_by,
            is_gst_receipt_opted: sample.is_gst_receipt_opted,
            category: sample.category,
            retailerName: sample.master_merchant_detail?.name,
            retailerDistrictName: sample.master_merchant_detail?.district_name,
            retailerStateName: sample.master_merchant_detail?.state_name,
            retailerPincode: sample.master_merchant_detail?.pincode,
            retailerAddress: sample.master_merchant_detail?.full_address,
            sampleStatus: sample.status,
            cropName: sample.crop_detail?.name,
            created_by: created_by || null
        }
    }));
    return sample_response_data;
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/master_sample/services/fetch_master_sample_service.js
const error_log = require('../../../../middelware/error_log');
const user_profile_model = require("../../../../database/models/user_profile");
const crop_detail_model = require("../../../../database/models_v2/crop/crop_detail");
const crop_varieties_detail_model = require("../../../../database/models_v2/crop/crop_varieties_detail");
const purchase_qc_report_model = require("../../../../database/models_v2/crop/purchase_qc_report");
const locations_model = require("../../../../database/models_v2/global/locations");
const master_merchant_detail_model = require("../../../../database/models_v2/merchant/master_merchant_detail");
const purchase_crop_orders_model = require("../../../../database/models_v2/procurement_order/purchase_crop_orders");
const procurement_order_bill_components_model = require("../../../../database/models_v2/procurement_payments/procurement_bill_components");
const procurement_lots_model = require("../../../../database/models_v2/procurement_sample/procurement_lots");
const procurment_crop_sample_model = require("../../../../database/models_v2/procurement_sample/procurment_crop_sample");
const purchase_crop_sample_images_model = require("../../../../database/models_v2/procurement_sample/purchase_sample_images");
const convertKgToTon = require("../../../../utilities/unit_conversion/convert_kg_to_ton");
const convertKgToGram = require("../../../../utilities/unit_conversion/convert_kg_to_gram");
const purchase_crop_bill_component_enum = require("../../../../enums/market_linkage/enums/purchase_crop_bill_component_enum");
const crop_variety_qc_param_maps_model = require("../../../../database/models_v2/procurement_order/crop_variety_qc_param_maps");
const qc_param_types_model = require("../../../../database/models_v2/procurement_order/qc_param_types");
const Op = require('sequelize').Op;

const fetch_master_sample_service = (limit, page, status, associated_pa, name, number, lot_id, sample_id, search_param) => {
    return new Promise(async (resolve, reject) => {
        try {
            const sample_query = {
                is_active: true
            };
            const user_query = {
                is_active: true
            };
            const merchant_query = {
                is_active: true
            };
            const lot_query = {
                is_active: true
            };
            if (lot_id) {
                lot_query.id = lot_id;
            }
            if (associated_pa !== "ALL") {
                user_query.id = associated_pa;
            }
            if (status !== "ALL") {
                sample_query.status = status;
            }
            if (sample_id) {
                sample_query.id = sample_id
            }
            if (name) {
                merchant_query.name = name;
            }
            if (number) {
                merchant_query.mobile_number = number;
            }
            let lot_data = [], total_records = 0;
            if (search_param) {
                [lot_data, total_records] = await fetch_master_sample_on_search(search_param, lot_query, sample_query, limit, page);
            }
            else {
                let lot_details = await procurement_lots_model.findAndCountAll({
                    where: lot_query,
                    include: [
                        {
                            model: purchase_crop_orders_model,
                            where: {
                                is_active: true
                            },
                            required: false
                        },
                        {
                            model: procurment_crop_sample_model,
                            where: sample_query,
                            required: true
                        },
                        {
                            model: procurement_order_bill_components_model,
                            where: {
                                is_active: true
                            },
                            required: false
                        }
                    ],
                    distinct: ['id'],
                    order: [["updated_at", "DESC"]],
                    limit: limit,
                    offset: ((page - 1) * limit) || 0
                });
                lot_data = lot_details.rows;
                total_records = lot_details.count
            }

            const sample_ids = (lot_data).map((lot) => lot.procurment_crop_sample_id);
            const sample_data = await procurment_crop_sample_model.findAll({
                where: {
                    id: { [Op.in]: sample_ids }
                },
                include: [
                    {
                        model: locations_model,
                        where: {
                            is_active: true
                        },
                        required: false
                    },
                    {
                        model: purchase_crop_sample_images_model,
                        where: {
                            is_active: true
                        },
                        required: false
                    },
                    {
                        model: master_merchant_detail_model,
                        where: merchant_query,
                        required: true
                    },
                    {
                        model: crop_detail_model,
                        where: {
                            is_active: true
                        },
                        required: true
                    },
                    {
                        model: crop_varieties_detail_model,
                        where: {
                            is_active: true
                        },
                        required: true
                    },
                    {
                        model: user_profile_model,
                        where: user_query,
                        required: true
                    },
                    {
                        model: procurement_order_bill_components_model,
                        where: {
                            is_active: true
                        },
                        required: false
                    },
                    {
                        model: purchase_qc_report_model,
                        where: {
                            is_active: true
                        },
                        include: [{
                            model: crop_variety_qc_param_maps_model,
                            where: {
                                is_active: true
                            },
                            include: [
                                {
                                    model: qc_param_types_model,
                                    where: {
                                        is_active: true
                                    },
                                    required: true
                                }
                            ],
                            required: true
                        }],
                        required: false
                    },
                ]
            })

            const response_data = generate_response(lot_data, sample_data);
            return resolve({
                samples: response_data,
                total_records
            });
        } catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    });
};

const fetch_master_sample_on_search = async (search_param, lot_query, sample_query, limit, page) => {
    lot_query.zoho_po_id = {
        [Op.like]: "%" + search_param + "%",
    }
    sample_query.farmart_id = {
        [Op.like]: "%" + search_param + "%",
    }
    let po_query = {
        farmart_id: {
            [Op.like]: "%" + search_param + "%",
        },
        is_active: true
    }
    let [lot_list, po_list, lots_w_sample_cond] = await Promise.all([
        procurement_lots_model.findAll({
            where: lot_query,
            attributes: ['id']
        }),
        purchase_crop_orders_model.findAll({
            where: po_query,
            attributes: ['procurement_lot_id']
        }),
        procurement_lots_model.findAll({
            where: {
                is_active: true
            },
            include: [
                {
                    model: procurment_crop_sample_model,
                    where: sample_query,
                    required: true
                }
            ],
            attributes: ['id']
        }),
    ]);

    let lot_ids = [...new Set(lot_list.map((lot) => lot.id)
        .concat(po_list.map((po) => po.procurement_lot_id))
        .concat(lots_w_sample_cond.map((lot) => lot.id)))];

    // query without search param
    delete lot_query.zoho_po_id;
    delete sample_query.farmart_id;
    if (lot_query.id) {
        lot_ids.push(lot_query.id)
    }
    lot_query.id = { [Op.in]: lot_ids };

    let lot_data = await procurement_lots_model.findAndCountAll({
        where: lot_query,
        include: [
            {
                model: purchase_crop_orders_model,
                where: {
                    is_active: true
                },
                required: false
            },
            {
                model: procurment_crop_sample_model,
                where: sample_query,
                required: true
            },
            {
                model: procurement_order_bill_components_model,
                where: {
                    is_active: true
                },
                required: false
            }
        ],
        distinct: ['id'],
        order: [["updated_at", "DESC"]],
        limit: limit,
        offset: ((page - 1) * limit) || 0
    });
    return [lot_data.rows, lot_data.count];
}

const generate_response = (lot_data, sample_data) => {
    const sample_response_data = (lot_data).map((lot) => {
        const lot_ton_result = convertKgToTon({ lot: lot.weight });
        const sample = sample_data.find((sample) => sample.id === lot.procurment_crop_sample_id); // check
        const sample_ton_result = convertKgToTon({ sampleWeight: sample.sample_weight });
        const sample_gram_result = convertKgToGram({ emptyBagWeight: sample.empty_bag_weight });
        return {
            retailerGeoLocation: sample.location ? {
                accuracy: sample.location.accuracy,
                lat: sample.location.latitude,
                long: sample.location.longitude,
            } : {},
            sampleImages: sample.purchase_crop_sample_images.map((image) => image.image),
            _id: sample.id,
            retailerId: sample.master_merchant_detail?.id,
            retailerMobileNumber: sample.master_merchant_detail?.mobile_number,
            retailerName: sample.master_merchant_detail?.name,
            retailerDistrictName: sample.master_merchant_detail?.district_name,
            retailerStateName: sample.master_merchant_detail?.state_name,
            retailerPincode: sample.master_merchant_detail?.pincode,
            cropName: sample.crop_detail?.name,
            cropVariety: sample.crop_varieties_detail?.id,
            cropVarietyName: sample.crop_varieties_detail?.name,
            sampleWeight: sample_ton_result.sampleWeight,
            purchasePrice: sample.purchase_price,
            createdBy: sample.user_profile ? {
                id: sample.user_profile.id,
                name: sample.user_profile.name,
                mobileNumber: sample.user_profile.mobile_number
            } : {},
            qcReport: sample.purchase_qc_reports ? sample.purchase_qc_reports.map((qc_report) => {
                return {
                    name: qc_report?.crop_variety_qc_param_map?.qc_param_type?.name,
                    value: qc_report?.value,
                    qcReportId: qc_report?.crop_variety_qc_param_map_id,
                    image: qc_report?.image,
                    thresholdCondition: qc_report?.crop_variety_qc_param_map?.condition,
                    thresholdValue: qc_report?.crop_variety_qc_param_map?.threshold_value
                }
            }) : [],
            cropId: sample.crop_detail?.id,
            bagType: sample.bag_type,
            emptyBagWeight: sample_gram_result.emptyBagWeight,
            loadedBagWeight: sample.loaded_bag_weight,
            bagDeduction: sample.bag_deduction,
            isMandiTaxPaid: sample.is_mandi_tax_paid,
            mandiTax: sample.procurement_order_bill_components?.find(o => o.order_bill_component_id === purchase_crop_bill_component_enum.mandi_tax)?.amount,
            retailerCommision: sample.procurement_order_bill_components?.find(o => o.order_bill_component_id === purchase_crop_bill_component_enum.retailer_commision)?.amount,
            labourAndBagCost: sample.procurement_order_bill_components?.find(o => o.order_bill_component_id === purchase_crop_bill_component_enum.labour_and_bag_cost)?.amount,
            farmartId: sample.farmart_id,
            createdAt: lot.createdAt,
            updatedAt: lot.updatedAt,
            leadId: sample.purchase_crop_lead_id,
            retailerEmail: sample.master_merchant_detail?.email,
            retailerBusinessName: sample.master_merchant_detail?.business_name,
            retailerFarmartId: sample.master_merchant_detail?.farmart_id,
            lotId: lot.id,
            totalAvailableQuantity: lot_ton_result.lot,
            retailerLockedPrice: lot.retailer_locked_price || sample.retailer_locked_price,
            procurableTon: lot.procurable_ton || sample.procurable_ton,
            transportCostEst: sample.transport_cost_est,
            finalTransportCost: lot.transport_cost_est || sample.transport_cost_est,
            finalBagDeduction: lot.bag_deduction || sample.bag_deduction,
            zohoPoId: lot.zoho_po_id,
            status: lot.status,
            poStatus: (lot.purchase_crop_orders) ? lot.purchase_crop_orders[0]?.status : null,
            poId: (lot.purchase_crop_orders) ? lot.purchase_crop_orders[0]?.id : null,
            poNumber: (lot.purchase_crop_orders) ? lot.purchase_crop_orders[0]?.farmart_id : null,
            finalMandiTax: lot.procurement_order_bill_components?.find(o => o.order_bill_component_id === purchase_crop_bill_component_enum.mandi_tax)?.amount || 0,
            finalCommission: lot.procurement_order_bill_components?.find(o => o.order_bill_component_id === purchase_crop_bill_component_enum.retailer_commision)?.amount || 0,
            finalLabourAndGunnybagDeduction: lot.procurement_order_bill_components?.find(o => o.order_bill_component_id === purchase_crop_bill_component_enum.labour_and_bag_cost)?.amount || 0,
            FOR: sample.FOR,
            dispatch_by: sample.dispatch_by,
        };
    });
    return sample_response_data;
}

module.exports = {
    fetch_master_sample_service,
    generate_response
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/master_sample/services/get_lead_status_service.js
const { ml_lead_stages } = require("../../../../enums/market_linkage/enums/ml_lead_enum")
const user_role = require("../../../../enums/user_profile/user_role")
const error_log = require("../../../../middelware/error_log")
const { send_service_response } = require("../utils/send_service_response")

module.exports = async (designation) => {

    try {

        let result = []

        const eliminated_lead_status = new Set([ml_lead_stages.lead,ml_lead_stages.pa_assigned,ml_lead_stages.reject_user_declined])

        if(designation === user_role.PROCUREMENT_ASSOCIATE){
            Object.keys(ml_lead_stages).forEach((key) => {
                if(!eliminated_lead_status.has(ml_lead_stages[key])){
                    result.push({name: key.split('_').join(' ').toUpperCase(), id: ml_lead_stages[key]})
                }
            })
        } else {
            Object.keys(ml_lead_stages).forEach((key) => {
                if(!eliminated_lead_status.has(ml_lead_stages[key]) && ml_lead_stages[key] !== ml_lead_stages.sample_collected){
                    result.push({name: key.split('_').join(' ').toUpperCase(), id: ml_lead_stages[key]})
                }
            })
        }

        return send_service_response(true, {actions: result})
        
    } catch (error) {
        error_log(error)
        return send_service_response(false,{},error.message)
    }

}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/master_sample/services/create_sample_servcie.js
const { pa_activity_log_service } = require("../../../../common_services/market_linkage/logging/pa_activity_log_service");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");
const convertGramToKg = require("../../../v1/utilities/unitConversion/convertGramToKg");
const convertKgToGram = require("../../../v1/utilities/unitConversion/convertKgToGram");
const convertKgToTon = require("../../../v1/utilities/unitConversion/convertKgToTon");
const convertTonToKg = require("../../../v1/utilities/unitConversion/convertTonToKg");
const { actionPerformed } = require("../../../../enums/market_linkage/enums/paActivityEnum");
const { generate_unique_id } = require("../../../../common_services/unique_id_generation/generate_unique_id");
const { categories } = require("../../../../enums/market_linkage/enums/categories");
const language_enum = require("../../../../entities_v2/metadata/enums/global/langauge");
const leads_model = require("../../../../database/mongoose/market_linkage_db/lead.model");
const purchase_crop_lead = require("../../../../database/models_v2/purchase_campaign/purchase_crop_lead");
const procurment_crop_sample = require("../../../../database/models_v2/procurement_sample/procurment_crop_sample");
const master_merchant_detail = require("../../../../database/models_v2/merchant/master_merchant_detail");
const crop_detail = require("../../../../database/models_v2/crop/crop_detail");
const crop_varieties_detail = require("../../../../database/models_v2/crop/crop_varieties_detail");
const user_profile = require("../../../../database/models/user_profile");
const locations = require("../../../../database/models_v2/global/locations");
const procurement_order_bill_component_enum = require("../../../../database/models_v2/procurement_payments/procurement_order_bill_component_enums");
const procurement_order_bill_components = require("../../../../database/models_v2/procurement_payments/procurement_bill_components");
const purchase_crop_sample_images = require("../../../../database/models_v2/procurement_sample/purchase_sample_images");
const procurement_lots = require("../../../../database/models_v2/procurement_sample/procurement_lots");
const { sampleStatus } = require("../../../../enums/market_linkage/enums/masterSampleEnum");
const crop_variety_qc_param_maps = require("../../../../database/models_v2/procurement_order/crop_variety_qc_param_maps");
const qc_param_types = require("../../../../database/models_v2/procurement_order/qc_param_types");
const purchase_qc_report = require("../../../../database/models_v2/crop/purchase_qc_report");
const { addContent } = require("pdfkit");
const create_price_polling_service = require("../../../v1/campaign/_services/create_price_polling_service");
const lead_stage_enum = require("../../../../enums/order_tracking/lead_stage_enum");
const { ml_lead_stages } = require("../../../../enums/market_linkage/enums/ml_lead_enum");
const sequelize = require("../../../../database/db_connection_initializer");
const Op = require('sequelize').Op;

const add_procurement_lots = async (
    lot_distribution,
    transport_cost_est,
    bag_deduction,
    zoho_po_id,
    status,
    mandi_tax,
    retailer_commision,
    labour_and_bag_cost,
    sample_id,
    t
) => {
    const procurement_lots_data = lot_distribution.map((lot) => {
        const TonResult = convertTonToKg({ lot });
        return {
            weight: TonResult.lot,
            transport_cost_est,
            bag_deduction,
            zoho_po_id,
            status,
            is_active: 1,
            procurment_crop_sample_id: sample_id
        }
    });
    const added_lots = await procurement_lots.bulkCreate(procurement_lots_data, { transaction: t });
    await Promise.all(added_lots.map(async (lot) => {
        const bill_components = {
            mandi_tax,
            retailer_commision,
            labour_and_bag_cost
        }
        const component_enums = await procurement_order_bill_component_enum.findAll({
            where: {
                name: { [Op.in]: Object.keys(bill_components) },
                is_active: 1
            }
        })
        await procurement_order_bill_components.bulkCreate(
            component_enums.filter((component) => bill_components[component.name] !== undefined).map((component) => {
                return {
                    order_bill_component_id: component.id || null,
                    order_bill_operation_id: component.bill_operation_enum_id || null,
                    procurement_lot_id: lot.id || null,
                    amount: bill_components[component.name],
                    is_active: 1
                }
            }),
            { transaction: t }
        );
        return bill_components;
    }))
    return added_lots;
}

const add_sample_images = async (sample_images, sample_id, t) => {
    const sample_images_data = sample_images.map((image) => {
        return {
            image: image || null,
            status:1,
            purchase_crop_sample_id: sample_id || null,
            is_active: 1
        }
    })
    await purchase_crop_sample_images.bulkCreate(sample_images_data, { transaction: t });
    return sample_images
}

const add_qc_report = async (qc_reports, crop_variety_id, sample_id, t) => {
    const qc_report_data = await Promise.all(qc_reports.map(async (qc) => {
        const qc_type = await qc_param_types.findOne({
            where: {
                name: qc.name || null,
                is_active: 1
            }
        })
        const qc_data = await crop_variety_qc_param_maps.findOne({
            where: {
                qc_param_type_id: qc_type.id || null,
                crop_variety_id: crop_variety_id || null,
                is_active: 1
            }
        })
        return {
            value: qc.value || null,
            image: qc.image || null,
            crop_variety_qc_param_map_id: qc_data?.id || null,
            purchase_crop_sample_id: sample_id || null,
            is_active: 1
        }
    }));
    const added_purchase_qc_report = await purchase_qc_report.bulkCreate(qc_report_data, { transaction: t });
    const qc_response = [];
    for (let qc of added_purchase_qc_report) {
        qc_response.push(await purchase_qc_report.findByPk(qc.id, {
            include: [{
                model: crop_variety_qc_param_maps,
                include: [
                    {
                        model: qc_param_types
                    }
                ]
            }]
        }))
    }
    return qc_response;
}

const add_bill_components = async (bill_components, sample_id, t) => {
    const component_enums = await procurement_order_bill_component_enum.findAll({
        where: {
            name: { [Op.in]: Object.keys(bill_components) },
            is_active: 1
        }
    })
    const added_bill_components = await procurement_order_bill_components.bulkCreate(
        component_enums.filter((component) => bill_components[component.name] !== undefined).map((component) => {
            return {
                order_bill_component_id: component.id || null,
                order_bill_operation_id: component.bill_operation_enum_id || null,
                procurement_crop_sample_id: sample_id || null,
                amount: bill_components[component.name],
                is_active: 1
            }
        }),
        { transaction: t }
    );
    return bill_components;
}

const create_sample_service = async (newSampleData) => {
    try {
        const { sampleData, reqLocation, sampleSource, lot, sampleId } = newSampleData;

        const master_merchant_data = await master_merchant_detail.findByPk(sampleData.retailerId);

        const uniqueIdResult = await generate_unique_id({
            state: master_merchant_data.dataValues.state_name,
            district: master_merchant_data.dataValues.district_name,
            category: categories.MasterSample
        })

        if (uniqueIdResult.status === HTTP_status_codes.internalServerError) {
            return uniqueIdResult;
        }

        if (!sampleData.isMandiTaxPaid) {
            sampleData.mandiTax = 0;
        }

        const TonResult = convertTonToKg({
            sampleWeight: sampleData.sampleWeight
        });
        const gramResult = convertGramToKg({
            emptyBagWeight: sampleData.emptyBagWeight
        });

        const crop_details = await crop_detail.findOne({
            where: {
                id: sampleData.cropId || null,
                is_active: 1
            }
        })
        const variety_details = await crop_varieties_detail.findOne({
            where: {
                id: sampleData.crop_variety_id || null,
                crop_id: crop_details?.id || null,
                is_active: 1
            }
        })
        const created_by_data = await user_profile.findOne({
            where: {
                id: sampleData.createdBy || null,
                is_active: 1
            }
        });

        const location_data = await locations.findOrCreate({
            where: {
                latitude: reqLocation?.lat || null,
                longitude: reqLocation?.long || null,
                accuracy: reqLocation?.accuracy || null,
                is_active: 1
            }
        })

        if (!sampleData.leadId && sampleSource) {
            const lead_details = await create_price_polling_service(
                null,
                sampleData.purchasePrice,
                sampleData.totalAvailableQuantity,
                crop_details?.id,
                master_merchant_data?.merchant_detail_id,
                master_merchant_data?.id,
                language_enum.english,
                sampleSource,
                created_by_data?.id
            )
            sampleData.leadId = lead_details.id
        }

        let existing_sample, sampleAddedData, added_bill_component, added_qc_report, added_sample_images, added_lots;
        await sequelize.transaction(async (t) => {
            existing_sample = await procurment_crop_sample.findOne({
                where: {
                    purchase_crop_lead_id: sampleData.leadId,
                    status: sampleStatus.LEAD_CREATED
                }
            })

            if(existing_sample){
                sampleAddedData = await existing_sample.update({
                    farmart_id: uniqueIdResult.data || null,
                    sample_weight: TonResult.sampleWeight,
                    bag_type: sampleData.bagType || null,
                    empty_bag_weight: gramResult.emptyBagWeight,
                    loaded_bag_weight: sampleData.loadedBagWeight,
                    purchase_price: sampleData.purchasePrice,
                    total_available_quantity: sampleData.totalAvailableQuantity,
                    transport_cost_est: sampleData.transportCostEst,
                    bag_deduction: sampleData.bagDeduction,
                    is_mandi_tax_paid: sampleData.isMandiTaxPaid,
                    is_active: 1,
                    master_merchant_id: sampleData.retailerId,
                    crop_id: sampleData.cropId,
                    crop_variety_id: sampleData.crop_variety_id,
                    created_by: sampleData.createdBy,
                    purchase_crop_lead_id: sampleData.leadId || null,
                    location_id: location_data[0]?.id || null,
                    status: sampleStatus.CREATED,
                    f_o_r: sampleData.FOR,
                    dispatch_by: sampleData.dispatch_by,
                    category: sampleData.category,
                    is_gst_receipt_opted: sampleData.is_gst_receipt_opted ?? existing_sample.is_gst_receipt_opted
                }, { transaction: t })
            } else {
                sampleAddedData = await procurment_crop_sample.build({
                    farmart_id: uniqueIdResult.data || null,
                    sample_weight: TonResult.sampleWeight,
                    bag_type: sampleData.bagType || null,
                    empty_bag_weight: gramResult.emptyBagWeight,
                    loaded_bag_weight: sampleData.loadedBagWeight,
                    purchase_price: sampleData.purchasePrice,
                    total_available_quantity: sampleData.totalAvailableQuantity,
                    transport_cost_est: sampleData.transportCostEst,
                    bag_deduction: sampleData.bagDeduction,
                    is_mandi_tax_paid: sampleData.isMandiTaxPaid,
                    is_active: 1,
                    master_merchant_id: sampleData.retailerId,
                    crop_id: sampleData.cropId,
                    crop_variety_id: sampleData.crop_variety_id,
                    created_by: sampleData.createdBy,
                    purchase_crop_lead_id: sampleData.leadId || null,
                    location_id: location_data[0]?.id || null,
                    status: sampleStatus.CREATED,
                    f_o_r: sampleData.FOR,
                    dispatch_by: sampleData.dispatch_by,
                    category: sampleData.category,
                    is_gst_receipt_opted: sampleData.is_gst_receipt_opted ?? false
                }).save({ transaction: t });
            }

            added_bill_component = await add_bill_components({
                mandi_tax: sampleData.mandiTax,
                retailer_commision: sampleData.retailerCommision,
                labour_and_bag_cost: sampleData.labourAndBagCost
            }, sampleAddedData.id, t);

            added_qc_report = await add_qc_report(sampleData.qcReport, variety_details?.id, sampleAddedData.id, t);
            added_sample_images = await add_sample_images(sampleData.sampleImages, sampleAddedData.id, t);
            added_lots = await add_procurement_lots(
                lot,
                sampleAddedData.transport_cost_est,
                sampleAddedData.bag_deduction,
                sampleAddedData.zoho_po_id,
                sampleAddedData.status,
                sampleData.mandiTax,
                sampleData.retailerCommision,
                sampleData.labourAndBagCost,
                sampleAddedData.id,
                t
            );
        })
        if (reqLocation) {
            // pa activity logging
            pa_activity_log_service({
                paId: sampleAddedData.created_by,
                actionLocation: reqLocation,
                actionTimestamp: new Date(Date.now()),
                actionPerformed: actionPerformed.SampleAddition,
                retailerId: sampleAddedData.master_merchant_id,
                sampleId: sampleAddedData.id
            }).catch((err) => {
                error_log(err);
            });
        }

        const kgToTonResult = convertKgToTon({
            sampleWeight: sampleAddedData.sample_weight
        });
        const kgTogramResult = convertKgToGram({
            emptyBagWeight: sampleAddedData.empty_bag_weight
        });

        sampleAddedData.sample_weight = kgToTonResult.sampleWeight;
        sampleAddedData.empty_bag_weight = kgTogramResult.emptyBagWeight;


        if(sampleAddedData.purchase_crop_lead_id){

            await purchase_crop_lead.update({
                status: (ml_lead_stages.sample_collected).toString(),
                assigned_pa: sampleData.createdBy
            },{
                where: {
                    id: sampleAddedData.purchase_crop_lead_id
                }
            })

            await procurment_crop_sample.update({
                status: sampleStatus.CREATED
            },{
                where: {
                    purchase_crop_lead_id: sampleAddedData.purchase_crop_lead_id
                }
            })

        }

        const response_data = {
            isActive: sampleAddedData.is_active,
            status: sampleAddedData.status,
            sampleImages: added_sample_images,
            sampleId: sampleAddedData.id,
            retailerId: master_merchant_data?.id,
            cropName: crop_details?.name,
            cropVariety: variety_details?.id,
            cropVarietyName: variety_details?.name,
            sampleWeight: sampleAddedData.sample_weight,
            totalAvailableQuantity: sampleAddedData.total_available_quantity,
            purchasePrice: sampleAddedData.purchase_price,
            transportCostEst: sampleAddedData.transport_cost_est,
            createdBy: created_by_data ? {
                id: created_by_data.id,
                name: created_by_data.name,
                mobileNumber: created_by_data.mobile_number
            } : {},
            lot: added_lots.map((lot) => {
                const kgToTonResult = convertKgToTon({ lot: lot.weight });
                return kgToTonResult.lot;
            }),
            qcReport: added_qc_report ? added_qc_report.map((qc_report) => {
                return {
                    name: qc_report?.crop_variety_qc_param_map?.qc_param_type?.name,
                    value: qc_report?.value,
                    qcReportId: qc_report?.crop_variety_qc_param_map_id,
                    image: qc_report?.image,
                    thresholdCondition: qc_report?.crop_variety_qc_param_map?.condition,
                    thresholdValue: qc_report?.crop_variety_qc_param_map?.threshold_value
                }
            }) : [],
            cropId: crop_details?.id,
            bagType: sampleAddedData.bag_type,
            emptyBagWeight: sampleAddedData.empty_bag_weight,
            loadedBagWeight: sampleAddedData.loaded_bag_weight,
            bagDeduction: sampleAddedData.bag_deduction,
            isMandiTaxPaid: sampleAddedData.is_mandi_tax_paid,
            mandiTax: added_bill_component.mandi_tax,
            retailerCommision: added_bill_component.retailer_commision,
            labourAndBagCost: added_bill_component.labour_and_bag_cost,
            farmartId: sampleAddedData.farmart_id,
            FOR: sampleAddedData.f_o_r,
            dispatch_by: sampleAddedData.dispatch_by,
            is_gst_receipt_opted: sampleAddedData.is_gst_receipt_opted,
            createdAt: sampleAddedData.createdAt,
            updatedAt: sampleAddedData.updatedAt,
            category: sampleData.category,
            leadId: sampleAddedData.purchase_crop_lead_id
        }

        return { status: HTTP_status_codes.ok, data: response_data };
    } catch (err) {
      
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};

module.exports = {
    create_sample_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/master_sample/services/fetch_master_sample_pa_list_service.js
const { Op } = require("sequelize")
const crop_detail = require("../../../../database/models_v2/crop/crop_detail")
const crop_varieties_detail = require("../../../../database/models_v2/crop/crop_varieties_detail")
const locations = require("../../../../database/models_v2/global/locations")
const master_merchant_detail = require("../../../../database/models_v2/merchant/master_merchant_detail")
const procurment_crop_sample = require("../../../../database/models_v2/procurement_sample/procurment_crop_sample")
const purchase_crop_lead = require("../../../../database/models_v2/purchase_campaign/purchase_crop_lead")
const source_enum = require("../../../../entities_v2/metadata/enums/campaign/source_enum")
const { sampleStatus } = require("../../../../enums/market_linkage/enums/masterSampleEnum")
const { ml_lead_stages } = require("../../../../enums/market_linkage/enums/ml_lead_enum")
const user_role = require("../../../../enums/user_profile/user_role")
const error_log = require("../../../../middelware/error_log")
const round_off_to_two_decimal = require("../../../v1/utilities/round_off/round_off_to_two_decimal")
const { send_service_response } = require("../utils/send_service_response")

module.exports = async ({user_profile_id,page_number,limit,search_by,status, user_role_id}) => {

    try {

        let whereObj = {
            is_active: 1
        }

        let retailer_filter = {}
        let lead_filter = {}
        const lead_status_set = new Set()

        if(status && Array.isArray(status) && (user_role_id === user_role.PROCUREMENT_ASSOCIATE || user_role_id === user_role.SALES_ASSOCIATE)){

            status.forEach((el) => {
                if(el === sampleStatus.LEAD_CREATED){
                    lead_status_set.add(ml_lead_stages.pa_assigned)
                    lead_status_set.add(ml_lead_stages.customer_not_available)
                    lead_status_set.add(ml_lead_stages.request_for_reschedule)
                } else if(el > sampleStatus.CREATED){
                    Object.keys(ml_lead_stages).forEach(key => {
                        if(ml_lead_stages[key] !== ml_lead_stages.lead && ml_lead_stages[key] !== ml_lead_stages.pa_assigned)
                            lead_status_set.add(ml_lead_stages[key])
                    })
                } else {
                    Object.keys(ml_lead_stages).forEach(key => {
                            lead_status_set.add(ml_lead_stages[key])
                    })
                }
            })

        } else if(status && Array.isArray(status)){
            status.forEach((el) => {
                if(el === sampleStatus.LEAD_CREATED)
                    lead_status_set.add(ml_lead_stages.lead)
                else if(el > sampleStatus.CREATED){
                    Object.keys(ml_lead_stages).forEach(key => {
                        if(ml_lead_stages[key] !== ml_lead_stages.lead)
                            lead_status_set.add(ml_lead_stages[key])
                    })
                } else {
                    Object.keys(ml_lead_stages).forEach(key => {
                            lead_status_set.add(ml_lead_stages[key])
                    })
                }
            })
        }

        lead_filter.status = {
            [Op.in]: Array.from(lead_status_set)
        }

        if(user_role_id === user_role.PROCUREMENT_ASSOCIATE || user_role_id === user_role.SALES_ASSOCIATE)
            lead_filter.assigned_pa = user_profile_id

        if(user_profile_id)
            whereObj.created_by = user_profile_id

        if(status && Array.isArray(status) && status.length > 0)
            whereObj.status = {
                [Op.in]: status
            }

        if(search_by){
            retailer_filter[Op.or] = [          
                {
                    name: {
                        [Op.like] : '%' + search_by + '%'
                    }
                }
            ]
        
            if((parseInt(search_by)).toString() !== 'NaN'){
                retailer_filter[Op.or].push({
                    mobile_number: {
                        [Op.like] : '%' + parseInt(search_by) + '%'
                    }
                })
            }

            lead_filter[Op.or] = [
                {
                    farmart_id: {
                        [Op.like] : '%' + search_by + '%'
                    }
                }
            ]

        }

        const master_sample_data = await procurment_crop_sample.findAll({
            where: whereObj,
            include: [
                {
                    model: master_merchant_detail,
                    where: retailer_filter,
                    attributes: ["name","mobile_number","state_name","district_name"]
                },
                {
                    model: purchase_crop_lead,
                    where: lead_filter,
                    attributes: ["status","source","farmart_id"]
                },
                {
                    model: locations,
                    attributes: ["latitude","longitude"]
                },
                {
                    model: crop_varieties_detail,
                    attributes: ["id","name"]
                },
                {
                    model: crop_detail,
                    attributes: ["name"]
                }
            ],
            attributes: ["id","master_merchant_id","purchase_crop_lead_id"
                ,"created_at","crop_id","status", "purchase_price","total_available_quantity","updated_at","farmart_id"],
            limit: limit,
            offset: ((page_number - 1) * limit) || 0,
            order: [["updated_at","DESC"]]
        })

        return send_service_response(true,create_response_data(master_sample_data,lead_status_set))
        
    } catch (error) {
        error_log(error)
        return send_service_response(false,{},error.message)
    }

}

const create_response_data = (raw_data,lead_status_set) => {

    let result = []

    for(let i=0; i<raw_data.length; i++){

        const sample = raw_data[i].dataValues

        //if(sample.purchase_crop_lead && sample.purchase_crop_lead.dataValues && sample.purchase_crop_lead && sample.purchase_crop_lead.dataValues.source && sample.purchase_crop_lead.dataValues.source === source_enum.pa)
            //continue
        const lead_status = sample.purchase_crop_lead && sample.purchase_crop_lead.dataValues ? sample.purchase_crop_lead.dataValues.status : ''
        if(lead_status !== '' && lead_status_set.has(parseInt(lead_status)))
            result.push({
                sampleID: sample.id,
                leadID: sample.purchase_crop_lead_id,
                isLead: sample.status === 0 ? true : false,
                retialer_id: sample.master_merchant_id,
                retailer_name: sample.master_merchant_detail && sample.master_merchant_detail.dataValues ? sample.master_merchant_detail.dataValues.name : '',
                cropID: sample.crop_id,
                created_at: sample.created_at,
                crop_variety_id: sample.crop_varieties_detail && sample.crop_varieties_detail.dataValues ? sample.crop_varieties_detail.dataValues.id : '',
                crop_variety: sample.crop_varieties_detail && sample.crop_varieties_detail.dataValues ? sample.crop_varieties_detail.dataValues.name : '',
                mobile_number: sample.master_merchant_detail && sample.master_merchant_detail.dataValues ? sample.master_merchant_detail.dataValues.mobile_number : '',
                lat: sample.location && sample.location.dataValues ? sample.location.dataValues.latitude : '',
                long: sample.location && sample.location.dataValues ? sample.location.dataValues.longitude : '',
                crop_weight: sample.total_available_quantity,
                crop_price: round_off_to_two_decimal(sample.purchase_price),
                leadStatus: sample.purchase_crop_lead && sample.purchase_crop_lead.dataValues ? sample.purchase_crop_lead.dataValues.status : '',
                leadFarmartId: sample.purchase_crop_lead && sample.purchase_crop_lead.dataValues ? sample.purchase_crop_lead.dataValues.farmart_id : '',
                sampleStatus: sample.status,
                crop_name: sample.crop_detail && sample.crop_detail.dataValues ? sample.crop_detail.dataValues.name : '',
                retailer_state:sample.master_merchant_detail && sample.master_merchant_detail.dataValues ? sample.master_merchant_detail.dataValues.state_name : '',
                retailer_district:sample.master_merchant_detail && sample.master_merchant_detail.dataValues ? sample.master_merchant_detail.dataValues.district_name : '',
                farmartSampleId: sample.farmart_id
            })
        else if(lead_status === '')
            result.push({
                sampleID: sample.id,
                leadID: sample.purchase_crop_lead_id,
                isLead: sample.status === 0 ? true : false,
                retialer_id: sample.master_merchant_id,
                retailer_name: sample.master_merchant_detail && sample.master_merchant_detail.dataValues ? sample.master_merchant_detail.dataValues.name : '',
                cropID: sample.crop_id,
                created_at: sample.created_at,
                crop_variety_id: sample.crop_varieties_detail && sample.crop_varieties_detail.dataValues ? sample.crop_varieties_detail.dataValues.id : '',
                crop_variety: sample.crop_varieties_detail && sample.crop_varieties_detail.dataValues ? sample.crop_varieties_detail.dataValues.name : '',
                mobile_number: sample.master_merchant_detail && sample.master_merchant_detail.dataValues ? sample.master_merchant_detail.dataValues.mobile_number : '',
                lat: sample.location && sample.location.dataValues ? sample.location.dataValues.latitude : '',
                long: sample.location && sample.location.dataValues ? sample.location.dataValues.longitude : '',
                crop_weight: sample.total_available_quantity,
                crop_price: round_off_to_two_decimal(sample.purchase_price),
                leadStatus: sample.purchase_crop_lead && sample.purchase_crop_lead.dataValues ? sample.purchase_crop_lead.dataValues.status : '',
                leadFarmartId: sample.purchase_crop_lead && sample.purchase_crop_lead.dataValues ? sample.purchase_crop_lead.dataValues.farmart_id : '',
                sampleStatus: sample.status,
                crop_name: sample.crop_detail && sample.crop_detail.dataValues ? sample.crop_detail.dataValues.name : '',
                retailer_state:sample.master_merchant_detail && sample.master_merchant_detail.dataValues ? sample.master_merchant_detail.dataValues.state_name : '',
                retailer_district:sample.master_merchant_detail && sample.master_merchant_detail.dataValues ? sample.master_merchant_detail.dataValues.district_name : '',
                farmartSampleId: sample.farmart_id
            })

    }

    return {sample_data:result}
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/master_sample/services/edit_lead_status_service.js
const purchase_crop_lead = require('../../../../database/models_v2/purchase_campaign/purchase_crop_lead')
const error_log = require('../../../../middelware/error_log')
const { ml_lead_stages, rejection_reasons } = require('../../../../enums/market_linkage/enums/ml_lead_enum');
const ENV = require('../../../../config/global_config').env;
const global_config = require('../../../../config/global_config');
const env_enum = require('../../../../enums/env/env_enum');
const retailer_ml_lead_stage_map = require('../../../../enums/order_tracking/retailer_ml_lead_stage_map');
const put_request = require('../../../../utilities/external_API_calls/put_request');
const RETAILER_STAGE_URL = require('../../../../constants/global').RETAILER_STAGE_URL;
const RETAILER_PROD_URL = require('../../../../constants/global').RETAILER_PROD_URL;
const API_HEADERS = {
    'Content-Type': 'application/json',
    Authorization: `Bearer ${ENV === global_config.market_linkage_system_token}`
};
const { send_service_response } = require('../utils/send_service_response')
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async ({ lead_id, leadStatus }) => {

    try {
        let lead = await purchase_crop_lead.findOne({
            where: {
                is_active: true,
                id: lead_id
            }
        });
        if (!lead) { throw new ValidationError('invalid lead id'); }

        lead.status = leadStatus;
        lead = await lead.save();

        // send lead update to retailer app
        const API_URL = (ENV === env_enum.production ? RETAILER_PROD_URL : RETAILER_STAGE_URL) + 'v1/order_tracking/request_lead';
        const rejection_reason = Object.keys(rejection_reasons).find(key => rejection_reasons[key] === lead.status) ?? null;
        const stage = Object.keys(ml_lead_stages).find(key => ml_lead_stages[key] === lead.status);
        const API_BODY = {
            lead_id: lead.id,
            stage: retailer_ml_lead_stage_map[stage] ?? null,
            farmart_lead_id: lead.farmart_id,
            rejection_reason,
            source: lead.source
        }
        put_request(API_URL, API_BODY, API_HEADERS)
            .catch(err => {
                error_log(err);
            });

        return send_service_response(true, { status: true })

    } catch (error) {
        error_log(error)
        return send_service_response(false, {}, error.message)
    }

}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/master_sample/validation/validation.js
const joi = require("joi");
const httpStatusCode = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const appLogService = require("../../../../common_services/market_linkage/logging/app_log_service");
const { number, string } = require("joi");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");

const qcSchema = joi.object({
  name: joi.string().trim().required(),
  qcReportId: joi.number().positive().required(),
  value: joi.string().required(),
  image: joi.exist(),
  thresholdValue: joi.string().trim().required(),
  thresholdCondition: joi.string().trim().required(),
  imgReq: joi.boolean().required()
});

const schema = joi.object({
  qcReport: joi.array().items(qcSchema).min(1).required(),
  lot: joi.array().items(joi.number()).min(1).required(),
  sampleImages: joi.array().items(joi.string().trim()).min(1).required(),
  sampleWeight: joi.number().required(),
  totalAvailableQuantity: joi.number().required(),
  purchasePrice: joi.number().required(),
  transportCostEst: joi.number().required(),
  retailerId: joi.number().positive().required(),
  sampleId: joi.number().positive(),
  leadId: joi.any(),
  cropId: joi.number().positive().required(),
  crop_variety_id: joi.number().positive().required(),
  bagType: joi.string().required(),
  emptyBagWeight: joi.number().required(),
  loadedBagWeight: joi.number().required(),
  bagDeduction: joi.number().required(),
  isMandiTaxPaid: joi.boolean().required(),
  retailerCommision: joi.number().required(),
  mandiTax: joi.number().required(),
  labourAndBagCost: joi.number().required(),
  FOR: joi.number().required(),
  dispatch_by: joi.number().positive().required(),
  is_gst_receipt_opted: joi.boolean()
});

//------------------ Validation Middleware ------------------
const validateSampleData = async (req, res, next) => {
  try {
    const result = schema.validate(req.body);
    if (result.error) throw new Error(result.error.message);
    req.body = result.value;
    next();
  } catch (err) {
    appLogService({ type: type.error, err });
    res.status(httpStatusCode.badRequest).json({
      message: err.message ?? "something went wrong.",
    });
  }
};

module.exports = validateSampleData;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/index.js
const router = require("express").Router();

const retailer = require('./retailer');
const user = require('./user');
const swagger = require("./swagger-config");
const master_sample = require('./master_sample');
const story = require("./story");
const sales_order = require('./sales_order');
const mandi_taxation = require('./mandi_taxation');
const po_so_invoicing = require('./po_so_invoicing');
const payment = require('./payment');
const po_unloading = require('./po_unloading');
const purchase_order = require('./purchase_order');
// const po_unloading = require('./po_unloading')
const buyer = require("./buyer");
const auth = require("./auth");
const multimedia = require("./multimedia");
const crop_advisory = require("./crop_advisory");
const location = require("./location");

router.use("/retailer", retailer);
router.use("/user", user);
router.use("/swagger", swagger);
router.use("/master_sample", master_sample);
router.use("/story", story);
router.use("/sales_order", sales_order);
router.use("/mandi_taxation", mandi_taxation);
router.use("/po_so_invoicing", po_so_invoicing);
router.use("/payment", payment);
router.use("/po_unloading", po_unloading);
router.use("/purchase_order", purchase_order);
router.use("/buyer", buyer);
router.use("/auth", auth);
router.use("/multimedia", multimedia);
router.use("/campaign", require('./campaign'));
router.use("/crop_advisory", crop_advisory);
router.use("/crop", require('./crop'));
router.use("/location", location);

module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/user/swagger/index.js
module.exports = {
    tags: {
        name: "user",
    },
    paths: {
        "/panel": {
            post: {
                tags: ["user"],
                summary: "add and modify user",
                description: "",
                operationId: "add_and_modify_user",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "body",
                        name: "body",
                        description: "",
                        required: true,
                        schema: {
                            required: [
                                "user_name",
                                "mobile_number",
                                "employee_id",
                                "designation_id",
                                "state_ids",
                                "district_ids",
                                "reporting_manager_id"
                            ],
                            type: "object",
                            properties: {
                                user_id: {
                                    type: "number"
                                },
                                user_name: {
                                    type: "string"
                                },
                                mobile_number: {
                                    type: "string"
                                },
                                employee_id: {
                                    type: "string"
                                },
                                designation_id: {
                                    type: "number"
                                },
                                state_ids: {
                                    type: "array",
                                    items: {
                                        type: "number"
                                    }
                                },
                                district_ids: {
                                    type: "array",
                                    items: {
                                        type: "number"
                                    }
                                },
                                reporting_manager_id: {
                                    type: "number"
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        },
        "/": {
            post: {
                tags: ["user"],
                summary: "fetch users by role",
                description: "",
                operationId: "fetch_users_by_role",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "body",
                        name: "body",
                        description: "",
                        required: true,
                        schema: {
                            required: ["role_ids"],
                            type: "object",
                            properties: {
                                retailer_id: {
                                    type: "array",
                                    items: {
                                        type: "number"
                                    }
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            },
            get: {
                tags: ["user"],
                summary: "fetch all users",
                description: "",
                operationId: "fetch_users",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "query",
                        name: "searchParam",
                        description: "",
                        type: "string",
                        required: false
                    },
                    {
                        in: "query",
                        name: "state_id",
                        description: "",
                        type: "number",
                        required: false
                    },
                    {
                        in: "query",
                        name: "district_id",
                        description: "",
                        type: "number",
                        required: false
                    },
                    {
                        in: "query",
                        name: "status_of_employee",
                        description: "",
                        type: "number",
                        required: false
                    },
                    {
                        in: "query",
                        name: "page_no",
                        description: "",
                        type: "number",
                        required: false
                    },
                    {
                        in: "query",
                        name: "limit",
                        description: "",
                        type: "number",
                        required: false
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        },
        "/mobile_number_check": {
            get: {
                tags: ["user"],
                summary: "check if mobile number already exist",
                description: "",
                operationId: "check_mobile_number_exist",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "query",
                        name: "mobile_number",
                        description: "",
                        type: "string",
                        required: true
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        },
        "/designations": {
            get: {
                tags: ["user"],
                summary: "get all designations",
                description: "",
                operationId: "get_all_designations",
                security: [{ Bearer: ["read"] }],
                parameters: [],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        },
        "/rm": {
            get: {
                tags: ["user"],
                summary: "fetch reporting managers",
                description: "",
                operationId: "fetch_reporting_managers",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "query",
                        name: "searchParam",
                        description: "",
                        type: "string",
                        required: false
                    },
                    {
                        in: "query",
                        name: "user_id",
                        description: "",
                        type: "number",
                        required: false
                    },
                    {
                        in: "query",
                        name: "page",
                        description: "",
                        type: "number",
                        required: false
                    },
                    {
                        in: "query",
                        name: "limit",
                        description: "",
                        type: "number",
                        required: false
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        }
    }
};




File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/user/index.js
const user_role = require("../../../enums/user_profile/user_role");
const authorize = require("../../../middelware/authorized_routes");
const add_and_modify_user_controller = require("./controllers/add_and_modify_user_controller");
const check_user_mobile_exists_controller = require("./controllers/check_user_mobile_exists_controller");
const fetch_reporting_managers_controller = require("./controllers/fetch_reporting_managers_controller");
const fetch_users_by_role_controller = require("./controllers/fetch_users_by_role_controller");
const fetch_users_controller = require("./controllers/fetch_users_controller");
const get_all_designations_controller = require("./controllers/get_all_designations_controller");

const router = require("express").Router();

router.post("/", fetch_users_by_role_controller);
router.get("/", authorize(Object.values(user_role)), fetch_users_controller);
router.get("/rm", authorize(Object.values(user_role)), fetch_reporting_managers_controller);
router.post("/panel", authorize(Object.values(user_role)) ,add_and_modify_user_controller);
router.get("/mobile_number_check", authorize(Object.values(user_role)), check_user_mobile_exists_controller);
router.get("/designations", authorize(Object.values(user_role)), get_all_designations_controller);

module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/user/controllers/fetch_users_by_role_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const fetch_users_by_role_service = require('../services/fetch_users_by_role_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { role_ids } = req.body;
        if (!role_ids || !role_ids.length) {
            throw new ValidationError('role_ids is mandatory field');
        }
        const pa_rpm_list = await fetch_users_by_role_service(role_ids);
        const pa_rpm_list_response = create_api_response(true, 'successfull', pa_rpm_list);
        return res.status(http_status_code_enum.ok).json(pa_rpm_list_response);
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/user/controllers/fetch_users_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const { fetch_users_service } = require('../services/fetch_users_service');

module.exports = async (req, res) => {
    try {
        let { searchParam, state_id, district_id, status_of_employee, page_no, limit } = req.query;
        limit = (limit && parseInt(limit) <= 100 && parseInt(limit) >= 0) ? parseInt(limit) : 50;
        page_no = (page_no && parseInt(page_no) >= 1) ? parseInt(page_no) : 1;

        let users = await fetch_users_service(searchParam, state_id, district_id, status_of_employee, page_no, limit)
        let response = create_api_response(true, "successfull", users);
        return res.status(http_status_code_enum.ok).json(response);
    }
    catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/user/controllers/check_user_mobile_exists_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const { check_user_mobile_exists_service } = require('../services/check_user_mobile_exists_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { mobile_number } = req.query;
        if (!mobile_number) {
            throw new ValidationError('mobile_number is mandatory query param');
        }
        const mobile_number_exist = await check_user_mobile_exists_service(mobile_number);
        const response = create_api_response(true, 'successfull', mobile_number_exist);
        return res.status(http_status_code_enum.ok).json(response);
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/user/controllers/get_all_designations_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const { get_all_designations_service } = require('../services/get_all_designations_service');

module.exports = async (req, res) => {
    try {
        let designations = await get_all_designations_service();
        let response = create_api_response(true, "successfull", designations);
        return res.status(http_status_code_enum.ok).json(response);
    }
    catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/user/controllers/fetch_reporting_managers_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const { fetch_reporting_manager_service } = require('../services/fetch_reporting_managers_service');


module.exports = async (req, res) => {
    try {
        let { searchParam, user_id, page, limit } = req.query;
        limit = (limit && parseInt(limit) <= 20 && parseInt(limit) >= 0) ? parseInt(limit) : 20;
        page = (page && parseInt(page) >= 1) ? parseInt(page) : 1;
        let reporting_managers = await fetch_reporting_manager_service(searchParam, user_id, page, limit)
        let response = create_api_response(true, "successfull", reporting_managers);
        return res.status(http_status_code_enum.ok).json(response);
    }
    catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/user/controllers/add_and_modify_user_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const { add_and_modify_user_service } = require('../services/add_and_modify_user_service');
const joi = require('joi');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const validation_result = user_schema.validate(req.body);
        if (validation_result.error) throw new ValidationError(validation_result.error.message);
        const {
            user_id,
            user_name,
            mobile_number,
            employee_id,
            designation_id,
            state_ids,
            district_ids,
            reporting_manager_id,
            status_of_employee
        } = validation_result.value;

        const { user_profile_id } = req.user || {};

        if (!user_profile_id) {
            throw new ValidationError('unauthorised user')
        }

        const user = await add_and_modify_user_service(
            user_id,
            user_name,
            mobile_number,
            employee_id,
            designation_id,
            state_ids,
            district_ids,
            reporting_manager_id,
            status_of_employee,
            user_profile_id
        );
        const response = create_api_response(true, 'successfull', user);
        return res.status(http_status_code_enum.ok).json(response);
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}

const user_schema = joi.object({
    user_id: joi.number().positive(),
    user_name: joi.string().trim().required(),
    mobile_number: joi.string().trim().length(10).regex(/^[0-9]+$/).required(),
    employee_id: joi.string().trim().required(),
    designation_id: joi.number().positive().required(),
    state_ids: joi.array().items(joi.number().positive()).required(),
    district_ids: joi.array().items(joi.number().positive()).required(),
    reporting_manager_id: joi.number().positive().required(),
    status_of_employee: joi.number().required()
});



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/user/services/get_all_designations_service.js
const user_roles = require('../../../../database/models/user_roles');
const user_role = require('../../../../enums/user_profile/user_role');
const error_log = require('../../../../middelware/error_log');

const get_all_designations_service = () => {
    return new Promise(async (resolve, reject) => {
        try {
            const ml_user_roles = await user_roles.findAll({
                where: {
                    is_active: true,
                    is_ml_user: true
                }
            })
            let response = []
            for (let index = 0; index < ml_user_roles.length; index++) {
                const role = ml_user_roles[index];
                response.push({
                    id: role.id,
                    name: role.name
                })
            }
            resolve({ destinations: response });
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

module.exports = {
    get_all_designations_service
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/user/services/fetch_users_by_role_service.js
const user_profile = require('../../../../database/models/user_profile');
const error_log = require('../../../../middelware/error_log');
const Op = require('sequelize').Op;

const fetch_users_by_role_service = (role_ids) => {
    return new Promise(async (resolve, reject) => {
        try {
            const user_list = await user_profile.findAll({
                where: {
                    user_role_id: { [Op.in]: role_ids },
                    is_active: true
                }
            })
            const response_data = user_list.map((user) => {
                return {
                    id: user.id,
                    name: user.name,
                    role_id: user.user_role_id,
                    mobile_number: user.mobile_number
                }
            })
            resolve({ users: response_data });
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

module.exports = fetch_users_by_role_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/user/services/add_and_modify_user_service.js
const error_log = require('../../../../middelware/error_log');
const user_profile_model = require('../../../../database/models/user_profile');
const bcrypt = require('bcrypt');
const users_login = require('../../../../database/models/user_login');
// const user_status = require('../../../../enums/market_linkage/enums/v2/user_status');
const master_district_model = require('../../../../database/models_v2/location/master_district');
const user_state_district_map_model = require('../../../../database/models_v2/user/user_state_district_map');
const Op = require('sequelize').Op;
const { ValidationError } = require('../../../../utilities/error/custom_error');

const add_and_modify_user_service = (
    user_id,
    user_name,
    mobile_number,
    employee_id,
    designation_id,
    state_ids,
    district_ids,
    reporting_manager_id,
    status_of_employee,
    user_profile_id
) => {
    return new Promise(async (resolve, reject) => {
        try {
            mobile_number = parseInt(mobile_number);
            let user_profile = {
                name: user_name,
                mobile_number,
                agent_code: mobile_number,
                employee_id,
                status: status_of_employee,
                is_active: true,
                user_role_id: designation_id,
                user_profile_created_by_id: user_profile_id,
                reports_to: reporting_manager_id
            }
            const user_login = {
                mobile_number,
                is_active: true,
                password: '123456',
                password_hash: ''
            }

            // modifying if user exists
            if (user_id) {
                user_profile = await user_profile_model.findOne({
                    where: {
                        id: user_id,
                        is_active: true
                    }
                });
                user_profile.name = user_name;
                user_profile.employee_id = employee_id;
                user_profile.user_role_id = designation_id;
                user_profile.reports_to = reporting_manager_id;
                user_profile.status = status_of_employee;
                // user_profile.mobile_number = mobile_number;
            }

            // mobile_number duplicate check
            if (!user_id || (user_id && user_profile.mobile_number !== mobile_number)) {
                const mobile_exist = await user_profile_model.findOne({
                    where: {
                        mobile_number,
                        is_active: true
                    }
                });
                if (mobile_exist) {
                    throw new ValidationError('mobile number already exist');
                } else {
                    user_profile.mobile_number = mobile_number;
                }
            }

            let added_user_profile
            if (user_id) {
                added_user_profile = await user_profile.save();
            } else {
                added_user_profile = await user_profile_model.build(user_profile).save();
                user_login.password_hash = bcrypt.hashSync(user_login.password, bcrypt.genSaltSync(10));
                user_login.user_id = added_user_profile.id;
                await users_login.build(user_login).save();
            }

            if (user_id) {
                // filtering out mapping that already exists
                [state_ids, district_ids] = await filter_state_districts(user_id, state_ids, district_ids)
            }
            // mapping of user with state and district
            await map_user_with_state_district(district_ids, state_ids, added_user_profile);
            return resolve();
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

const map_user_with_state_district = async (district_ids, state_ids, added_user_profile) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const district_details = await master_district_model.findAll({
            where: {
                id: { [Op.in]: district_ids },
                is_active: true
            }
        });
        let user_state_district_mapping = district_details.map((district) => {
            state_ids = state_ids.filter((state) => state !== district.master_state_id);
            return {
                is_active: true,
                user_id: added_user_profile.id,
                state_id: district.master_state_id,
                district_id: district.id
            }
        });
        if (state_ids.length) {
            user_state_district_mapping = user_state_district_mapping.concat(state_ids
                .map((state) => {
                    return {
                        is_active: true,
                        user_id: added_user_profile.id,
                        state_id: state
                    }
                })
            )
        }
        await user_state_district_map_model.bulkCreate(user_state_district_mapping)
    } catch (err) {
        throw err
    }
}

const filter_state_districts = async (user_id, state_ids, district_ids) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const mapped_users = await user_state_district_map_model.findAll({
            where: {
                user_id,
                is_active: true
            }
        });
        for (let index = 0; index < mapped_users.length; index++) {
            const mapping = mapped_users[index];
            if (!district_ids.find((id) => id === mapping.district_id)) {
                mapping.is_active = false;
                await mapping.save();
            } else {
                district_ids = district_ids.filter((id) => id !== mapping.district_id)
                state_ids = state_ids.filter((id) => id !== mapping.state_id)
            }
        }
        return [state_ids, district_ids]
    } catch (err) {
        throw err
    }
}

module.exports = {
    add_and_modify_user_service
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/user/services/check_user_mobile_exists_service.js
const user_profile = require('../../../../database/models/user_profile');
const error_log = require('../../../../middelware/error_log');

const check_user_mobile_exists_service = (mobile_number) => {
    return new Promise(async (resolve, reject) => {
        try {
            const mobile_exist = await user_profile.findOne({
                where: {
                    is_active: true,
                    mobile_number
                }
            })
            resolve({ exists: mobile_exist ? true : false });
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

module.exports = {
    check_user_mobile_exists_service
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/user/services/fetch_users_service.js
const user_profile_model = require('../../../../database/models/user_profile');
const user_roles_model = require('../../../../database/models/user_roles');
const master_district_model = require('../../../../database/models_v2/location/master_district');
const master_state_model = require('../../../../database/models_v2/location/master_state');
const user_state_district_map_model = require('../../../../database/models_v2/user/user_state_district_map');
const get_user_roles = require('../../../../data_abstraction_layer/user_profile/get_user_roles');
// const ml_user_role = require('../../../../enums/user_profile/ml_user_role');
const error_log = require('../../../../middelware/error_log');
const Op = require('sequelize').Op;

const fetch_users_service = (searchParam, state_id, district_id, status_of_employee, page, limit) => {
    return new Promise(async (resolve, reject) => {
        try {
            const res = {
                user_list: [],
                total_records: 0
            };
            const ml_user_roles = await get_user_roles({ ml: true });
            // all the filters
            const query = {
                is_active: true,
                user_role_id: { [Op.in]: ml_user_roles.map((user) => user.id) }
            }
            if (searchParam) {
                const search_array = [
                    { name: { [Op.like]: '%' + searchParam + '%' } },
                    { mobile_number: { [Op.like]: '%' + searchParam + '%' } },
                    { employee_id: { [Op.like]: '%' + searchParam + '%' } }
                ]
                query[Op.or] = search_array;
            }
            if (status_of_employee) {
                query.status = status_of_employee
            }
            const state_district_map_query = {
                is_active: true
            }
            if (state_id) {
                state_district_map_query.state_id = state_id
            }
            if (district_id) {
                state_district_map_query.district_id = district_id
            }
            const include_list = [
                {
                    model: user_profile_model,
                    where: {
                        is_active: true
                    },
                    as: 'user_profile_created_by',
                    required: false
                },
                {
                    model: user_profile_model,
                    where: {
                        is_active: true
                    },
                    as: 'reports',
                    required: false
                },
                {
                    model: user_roles_model,
                    where: {
                        is_active: true
                    },
                    as: 'user_role',
                    required: false
                }
            ];
            if (state_district_map_query.district_id || state_district_map_query.state_id) {
                const obj = {
                    model: user_state_district_map_model,
                    where: state_district_map_query,
                    required: true
                }
                include_list.push(obj);
            }
            const users = await user_profile_model.findAndCountAll({
                where: query,
                include: include_list,
                order: [['updated_at', 'DESC']],
                distinct: ['id'],
                limit,
                offset: ((page - 1) * limit) || 0
            })
            const user_ids = users.rows.map((user) => user.id);
            const user_state_district_mapping = await get_user_state_district_mapping(user_ids);
            res.user_list = generate_response(users.rows, user_state_district_mapping);
            res.total_records = users.count;
            resolve(res);
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

const get_user_state_district_mapping = async (user_ids) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const user_state_district_mapping = await user_state_district_map_model.findAll({
            where: {
                is_active: true,
                user_id: { [Op.in]: user_ids }
            },
            include: [
                {
                    model: master_state_model,
                    where: {
                        is_active: true
                    },
                    required: false
                },
                {
                    model: master_district_model,
                    where: {
                        is_active: true
                    },
                    required: false
                }
            ]
        });
        return user_state_district_mapping;
    } catch (err) {
        throw err
    }
}

const generate_response = (users, user_state_district_mapping) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const user_list = users.map((user) => {
            const user_mapping = user_state_district_mapping
                .filter((mapping) => mapping.user_id === user.id);
            const state_names = user_mapping
                .filter((mapping, index, self) => mapping.state_id && self.findIndex((s) => s.state_id === mapping.state_id) === index)
                .map((mapping) => {
                    return {
                        id: mapping.master_state.id,
                        name: mapping.master_state.name
                    }
                });
            const district_names = user_mapping
                .filter((mapping) => mapping.district_id)
                .map((mapping) => {
                    return {
                        id: mapping.master_district.id,
                        name: mapping.master_district.name
                    }
                });
            return {
                user_id: user.id,
                employee_name: user.name,
                designation: user.user_role?.name,
                designation_id: user.user_role?.id,
                mobile_number: user.mobile_number,
                employee_id: user.employee_id,
                reporting_manager: user.reports?.name,
                reporting_manager_id: user.reports?.id,
                status_of_employee: user.status,
                state_names,
                district_names
            }
        })
        return user_list
    } catch (err) {
        throw err
    }
}

module.exports = {
    fetch_users_service,
    generate_response,
    get_user_state_district_mapping
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/user/services/fetch_reporting_managers_service.js
const user_profile_model = require('../../../../database/models/user_profile');
const user_roles_model = require('../../../../database/models/user_roles');
const master_district_model = require('../../../../database/models_v2/location/master_district');
const master_state_model = require('../../../../database/models_v2/location/master_state');
const user_state_district_map_model = require('../../../../database/models_v2/user/user_state_district_map');
const error_log = require('../../../../middelware/error_log');
const Op = require('sequelize').Op;

const fetch_reporting_manager_service = (searchParam, user_id, page, limit) => {
    return new Promise(async (resolve, reject) => {
        try {
            const res = {
                rm_list: [],
                total_records: 0
            };
            // all the filters
            const query = {
                is_active: true
            }
            if (searchParam) {
                const search_array = [
                    { name: { [Op.like]: '%' + searchParam + '%' } },
                    { mobile_number: { [Op.like]: '%' + searchParam + '%' } },
                    { employee_id: { [Op.like]: '%' + searchParam + '%' } }
                ]
                query[Op.or] = search_array;
            }
            if (user_id) {
                query.id = user_id
            }

            const users = await user_profile_model.findAndCountAll({
                where: query,
                include: [
                    {
                        model: user_profile_model,
                        where: {
                            is_active: true
                        },
                        as: 'user_profile_created_by',
                        required: false
                    },
                    {
                        model: user_profile_model,
                        where: {
                            is_active: true
                        },
                        as: 'reports',
                        required: false
                    },
                    {
                        model: user_roles_model,
                        where: {
                            is_active: true
                        },
                        as: 'user_role',
                        required: false
                    }
                ],
                distinct: ['id'],
                limit,
                offset: ((page - 1) * limit) || 0
            })
            const user_ids = users.rows.map((user) => user.id);
            const user_state_district_mapping = await get_user_state_district_mapping(user_ids);
            res.rm_list = generate_response(users.rows, user_state_district_mapping);
            res.total_records = users.count;
            resolve(res);
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

const get_user_state_district_mapping = async (user_ids) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const user_state_district_mapping = await user_state_district_map_model.findAll({
            where: {
                is_active: true,
                user_id: { [Op.in]: user_ids }
            },
            include: [
                {
                    model: master_state_model,
                    where: {
                        is_active: true
                    },
                    required: false
                },
                {
                    model: master_district_model,
                    where: {
                        is_active: true
                    },
                    required: false
                }
            ]
        });
        return user_state_district_mapping;
    } catch (err) {
        throw err
    }
}

const generate_response = (users, user_state_district_mapping) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const rm_list = users.map((user) => {
            const user_mapping = user_state_district_mapping
                .filter((mapping) => mapping.user_id === user.id);
            const state_names = user_mapping
                .filter((mapping, index, self) => mapping.state_id && self.findIndex((s) => s.state_id === mapping.state_id) === index)
                .map((mapping) => mapping.master_state.name)
                .join(', ');
            const district_names = user_mapping
                .filter((mapping) => mapping.district_id)
                .map((mapping) => mapping.master_district.name)
                .join(', ');
            return {
                user_id: user.id,
                name: user.name,
                state_names,
                district_names,
                designation_name: user.user_role?.name,
                mobile_number: user.mobile_number,
                employee_id: user.employee_id
            }
        })
        return rm_list
    } catch (err) {
        throw err
    }
}

module.exports = {
    fetch_reporting_manager_service,
    generate_response,
    get_user_state_district_mapping
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/purchase_order/swagger/index.js
module.exports = {
    tags: {
        name: "purchase_order",
    },
    paths: {
        "/po_docs": {
            get: {
                tags: ["purchase_order"],
                summary: "fetch po docs",
                description: "",
                operationId: "fetch_po_docs",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "query",
                        name: "po_id",
                        description: "",
                        type: "number",
                        required: false
                    },
                    {
                        in: "query",
                        name: "po_pending_inhand_id",
                        description: "",
                        type: "number",
                        required: false
                    },
                    {
                        in: "query",
                        name: "so_id",
                        description: "",
                        type: "number",
                        required: false
                    },
                    {
                        in: "query",
                        name: "doc_for",
                        description: "",
                        type: "number",
                        required: false
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            },
            put: {
                tags: ["purchase_order"],
                summary: "modify po docs",
                description: "",
                operationId: "modify_po_docs",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "body",
                        name: "body",
                        description: "",
                        required: true,
                        schema: {
                            required: [
                                "doc_id",
                                "doc_type",
                                "doc_for",
                                "doc_url"
                            ],
                            type: "object",
                            properties: {
                                doc_id: {
                                    type: "number"
                                },
                                doc_type: {
                                    type: "number"
                                },
                                doc_for: {
                                    type: "number"
                                },
                                doc_url: {
                                    type: "string"
                                },
                                doc_back_url: {
                                    type: "string"
                                },
                                doc_status: {
                                    type: "number"
                                },
                                file_name: {
                                    type: "string"
                                },
                                doc_value: {
                                    type: "string"
                                },
                                currency_type: {
                                    type: "number"
                                },
                                doc_created_date: {
                                    type: "string"
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        },
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/purchase_order/index.js
const add_dispatch_info_controller = require("./controllers/add_dispatch_info_controller");
const fetch_po_docs_controller = require("./controllers/fetch_po_docs_controller");
const modify_po_docs_controller = require("./controllers/modify_po_docs_controller");
const update_payment_info_controller = require("./controllers/update_payment_info_controller");
const router = require("express").Router();

router.post("/dispatch_info", add_dispatch_info_controller);
router.post("/update_payment_info", update_payment_info_controller);
router.get("/po_docs", fetch_po_docs_controller);
router.put("/po_docs", modify_po_docs_controller);
module.exports=router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/purchase_order/controllers/add_dispatch_info_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const { add_dispatch_info_service } = require('../services/add_dispatch_info_service');
const user_role = require('../../../../enums/user_profile/user_role');
const joi = require('joi');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {

    try {
        const validation_result = dispatch_info_schema.validate(req.body);
        if (validation_result.error) throw new ValidationError(validation_result.error.message);
        const {
            po_id,
            dispatch_info
        } = validation_result.value;
        const {
            gross_weight,
            net_weight,
            mandi_tax,
            bag_deduction,
            number_of_bags,
            total_transport_cost,
            advance_transport_cost,
            docs
        } = dispatch_info;

        const { user_role_id } = req.user || {};
        let req_location;

        if (user_role_id === user_role.PROCUREMENT_ASSOCIATE) {
            if (!req.headers.geolocation) throw new ValidationError('geolocation header missing'); ;
            req_location = JSON.parse(req.headers.geolocation);
        }
        const added_dispatch_info = await add_dispatch_info_service(
            po_id,
            req_location,
            {
                gross_weight,
                net_weight,
                mandi_tax,
                bag_deduction,
                number_of_bags,
                total_transport_cost,
                advance_transport_cost,
                docs
            }
        )
        const response = create_api_response(true, 'successfull', added_dispatch_info);
        return res.status(http_status_code_enum.ok).json(response);
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}

const dispatch_info_schema = joi.object({
    po_id: joi.number().positive().required(),
    dispatch_info: joi.object({
        gross_weight: joi.number().required(),
        net_weight: joi.number().required(),
        mandi_tax: joi.number().required(),
        bag_deduction: joi.number().required(),
        number_of_bags: joi.number().required(),
        total_transport_cost: joi.number().required(),
        advance_transport_cost: joi.number().required(),
        docs: joi.array().items(joi.object({
            dispatch_doc_id: joi.number().positive(),
            name: joi.string().trim(),
            image: joi.string().trim().required()
        }).required()).required()
    }).required()
});



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/purchase_order/controllers/fetch_po_docs_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const fetch_po_docs_service = require('../services/fetch_po_docs_service');

module.exports = async (req, res) => {
    try {
        const { po_id, po_pending_inhand_id, so_id, doc_for } = req.query;
        const po_docs = await fetch_po_docs_service({ po_id, po_pending_inhand_id, so_id, doc_for });
        let response = create_api_response(true, "successfull", po_docs);
        return res.status(http_status_code_enum.ok).json(response);
    }
    catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/purchase_order/controllers/update_payment_info_controller.js
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const update_po_payment_info_service = require('../services/update_po_payment_info');
const user_role = require('../../../../enums/user_profile/user_role');
const joi = require('joi');
const { ValidationError } = require('../../../../utilities/error/custom_error');

/**
 * @param {import("express").Request} req
 * @param {import("express").Response} res
 */
const update_payment_info_controller = async (req, res) => {
    try {
        const user = req.user;
        if (!user) { throw new ValidationError('No user found.'); }
        const designation = user.user_role_id;
        const acceptedRoles = [
            user_role.REGIONAL_PROCUREMENT_MANAGER,
            user_role.STATE_HEAD_PROCUREMENT,
            user_role.REGIONAL_MANAGER_SALES,
            user_role.STATE_HEAD_SALES
        ];
        if (!acceptedRoles.includes(designation)) { throw new ValidationError('Only PA, RPM & State Heads are allowed to update payment info.'); }

        let userType;
        if (designation === user_role.STATE_HEAD_PROCUREMENT || designation === user_role.STATE_HEAD_SALES) { userType = 'STATE_P_HEAD'; } else { userType = 'RPM'; }

        req.body.userType = userType;
        const validation_result = payment_schema.validate(req.body);
        if (validation_result.error) throw new ValidationError(validation_result.error.message);
        const {
            poId,
            paymentInfo,
            grossWeight,
            bagDeduction,
            netWeight,
            totalTransportCost,
            mandiTax
        } = validation_result.value;

        const paymentInfoResult = await update_po_payment_info_service({
            poId,
            paymentInfo,
            grossWeight,
            bagDeduction,
            netWeight,
            totalTransportCost,
            mandiTax
        }, userType);

        res.status(paymentInfoResult.status).json(paymentInfoResult.data);
    } catch (err) {
        return res.status(http_status_code_enum.bad_request).json({
            message: err.message
        });
    }
}

const payment_schema = joi.object({
    poId: joi.number().positive().required(),
    paymentInfo: joi.object({
        retailer: joi.object({
            percentage: joi.number().required(),
            amount: joi.number().required(),
            deduction: joi.number()
        }).required(),
        transport: joi.object({
            amount: joi.number().required(),
            deduction: joi.number()
        }).required()
    }).required(),
    grossWeight: joi.alternatives().conditional('userType', {
        is: 'RPM',
        then: joi.number(),
        otherwise: joi.number().required()
    }),
    bagDeduction: joi.alternatives().conditional('userType', {
        is: 'RPM',
        then: joi.number(),
        otherwise: joi.number().required()
    }),
    netWeight: joi.alternatives().conditional('userType', {
        is: 'RPM',
        then: joi.number(),
        otherwise: joi.number().required()
    }),
    totalTransportCost: joi.alternatives().conditional('userType', {
        is: 'RPM',
        then: joi.number(),
        otherwise: joi.number().required()
    }),
    mandiTax: joi.alternatives().conditional('userType', {
        is: 'RPM',
        then: joi.number(),
        otherwise: joi.number().required()
    }),
    userType: joi.string().trim()
});

module.exports = update_payment_info_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/purchase_order/controllers/modify_po_docs_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const modify_po_docs_service = require('../services/modify_po_docs_service');
const joi = require('joi');
const { document_for_enum } = require('../../../../enums/market_linkage/enums/po');
const user_role = require('../../../../enums/user_profile/user_role');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const validation_result = po_docs_schema.validate(req.body);
        if (validation_result.error) throw new ValidationError(validation_result.error.message);
        const {
            doc_id,
            doc_type,
            doc_for,
            doc_url,
            doc_back_url,
            doc_status,
            file_name,
            doc_value,
            currency_type,
            doc_created_date
        } = validation_result.value;

        const { user } = req;
        if (!user) throw new ValidationError('Unauthorised access');
        const designation = user.user_role_id;
        if (doc_status) {
            const acceptedRoles = [
                user_role.REGIONAL_PROCUREMENT_MANAGER,
                user_role.STATE_HEAD_PROCUREMENT,
                user_role.PROCUREMENT_ASSOCIATE
            ];
            if (!acceptedRoles.includes(designation)) { throw new ValidationError('Only PA, RPM & State Heads are allowed to approve documents.'); }
        }

        const po_docs = await modify_po_docs_service({
            doc_id,
            doc_type,
            doc_for,
            doc_url,
            doc_back_url,
            doc_status,
            file_name,
            doc_value,
            currency_type,
            doc_created_date,
            designation
        });
        const response = create_api_response(true, 'successfull', po_docs);
        return res.status(http_status_code_enum.ok).json(response);
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}

const po_docs_schema = joi.object({
    doc_id: joi.number().required(),
    doc_for: joi.number().required(),
    doc_url: joi.string().trim().required(),

    doc_type: joi.alternatives().conditional('doc_for', {
        is: document_for_enum.dispatch,
        then: joi.number(),
        otherwise: joi.number().required()
    }), // not required in case of dispatch docs

    doc_status: joi.alternatives().conditional('doc_for', {
        is: joi.any().valid(document_for_enum.dispatch, document_for_enum.transport, document_for_enum.deduction),
        then: joi.number(),
        otherwise: joi.forbidden()
    }), // for dispatch, transport and deduction docs

    doc_back_url: joi.alternatives().conditional('doc_for', {
        is: joi.any().valid(document_for_enum.dispatch, document_for_enum.transport, document_for_enum.deduction),
        then: joi.string().trim().allow(''),
        otherwise: joi.forbidden()
    }), // for dispatch, transport and deduction docs

    file_name: joi.alternatives().conditional('doc_for', {
        is: joi.any().valid(document_for_enum.mandi, document_for_enum.invoice),
        then: joi.string().trim().allow(''),
        otherwise: joi.forbidden()
    }), // for mandi and invoice docs

    doc_value: joi.alternatives().conditional('doc_for', {
        is: document_for_enum.invoice,
        then: joi.string().trim().allow(''),
        otherwise: joi.forbidden()
    }), // for invoice docs

    currency_type: joi.alternatives().conditional('doc_for', {
        is: document_for_enum.invoice,
        then: joi.number(),
        otherwise: joi.forbidden()
    }), // for invoice docs

    doc_created_date: joi.alternatives().conditional('doc_for', {
        is: document_for_enum.invoice,
        then: joi.string().trim().required(),
        otherwise: joi.forbidden()
    }) // for invoice docs
});



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/purchase_order/services/modify_po_docs_service/modify_unloading_docs_service.js
const error_log = require('../../../../../middelware/error_log');
const po_unloading_docs_model = require('../../../../../database/models_v2/po_unloading/po_unloading_docs');
const { ValidationError } = require('../../../../../utilities/error/custom_error');

const modify_unloading_docs_service = ({
    doc_id,
    doc_url
}) => {
    return new Promise(async (resolve, reject) => {
        try {
            const unloading_doc = await po_unloading_docs_model.findOne({
                where: {
                    id: doc_id,
                    is_active: true
                }
            })
            if (!unloading_doc) { throw new ValidationError('Invalid doc id'); }

            if (doc_url && doc_url !== unloading_doc.doc_url) { unloading_doc.doc_url = doc_url; }
            await unloading_doc.save();
            return resolve({});
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

module.exports = {
    modify_unloading_docs_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/purchase_order/services/modify_po_docs_service/modify_invoice_docs_service.js
const po_so_invoice_doc_model = require('../../../../../database/models_v2/po_so_invoicing/po_so_invoice_doc');
const error_log = require('../../../../../middelware/error_log');
const update_invoicing_doc_service = require('../../../../v1/po_so_invoicing/services/update_invoicing_doc_service');
const { ValidationError } = require('../../../../../utilities/error/custom_error');

const modify_invoice_docs_service = ({
    doc_id,
    doc_type,
    doc_url,
    file_name,
    doc_value,
    currency_type,
    doc_created_date
}) => {
    return new Promise(async (resolve, reject) => {
        try {
            const invoice_doc = await po_so_invoice_doc_model.findOne({
                where: {
                    is_active: true,
                    id: doc_id
                }
            })
            if (!invoice_doc) { throw new ValidationError('Invalid doc id'); }

            await update_invoicing_doc_service(
                invoice_doc.po_so_invoice_id,
                file_name,
                doc_url,
                doc_created_date,
                doc_value,
                doc_type,
                currency_type
            )
            return resolve({});
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

module.exports = {
    modify_invoice_docs_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/purchase_order/services/modify_po_docs_service/index.js
const error_log = require('../../../../../middelware/error_log');
const { modify_transport_dispatch_deduction_docs_service } = require('./modify_transport_dispatch_deduction_docs_service');
const { modify_invoice_docs_service } = require('./modify_invoice_docs_service');
const { modify_mandi_docs_service } = require('./modify_mandi_docs_service');
const { document_for_enum } = require('../../../../../enums/market_linkage/enums/po');
const { modify_unloading_docs_service } = require('./modify_unloading_docs_service');
const { ValidationError } = require('../../../../../utilities/error/custom_error');

module.exports = ({
    doc_id,
    doc_type,
    doc_for,
    doc_url,
    doc_back_url,
    doc_status,
    file_name,
    doc_value,
    currency_type,
    doc_created_date,
    designation
}) => {
    return new Promise(async (resolve, reject) => {
        try {
            // for only transport, dispatch and deduction documents
            if (doc_for === document_for_enum.transport || doc_for === document_for_enum.dispatch || doc_for === document_for_enum.deduction) {
                await modify_transport_dispatch_deduction_docs_service({
                    doc_id,
                    doc_type,
                    doc_url,
                    doc_back_url,
                    doc_status,
                    designation
                });
            } else if (doc_for === document_for_enum.invoice) {
                // for only invoice documents
                await modify_invoice_docs_service({
                    doc_id,
                    doc_type,
                    doc_url,
                    file_name,
                    doc_value,
                    currency_type,
                    doc_created_date
                });
            } else if (doc_for === document_for_enum.mandi) {
                // for only mandi documents
                await modify_mandi_docs_service({
                    doc_id,
                    doc_type,
                    doc_url,
                    file_name
                });
            } else if (doc_for === document_for_enum.unloading) {
                // for only unloading documents
                await modify_unloading_docs_service({
                    doc_id,
                    doc_type,
                    doc_url
                });
            } else { throw new ValidationError('Invalid doc_for'); }
            return resolve({});
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/purchase_order/services/modify_po_docs_service/modify_transport_dispatch_deduction_docs_service.js
const error_log = require('../../../../../middelware/error_log');
const order_delivery_documents_model = require('../../../../../database/models_v2/procurement_order_deliveries/order_delivery_documents');
const order_delivery_detail_model = require('../../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const { update_doc_status_service } = require('../../../../v1/purchase_order/services/update_doc_status_service');
const Op = require('sequelize').Op;
const { ValidationError } = require('../../../../../utilities/error/custom_error');

const modify_transport_dispatch_deduction_docs_service = ({
    doc_id,
    doc_url,
    doc_back_url,
    doc_status,
    designation
}) => {
    return new Promise(async (resolve, reject) => {
        try {
            const order_delivery_doc = await order_delivery_documents_model.findOne({
                where: {
                    id: doc_id,
                    is_active: true
                },
                include: [
                    {
                        model: order_delivery_detail_model,
                        required: true,
                        where: {
                            purchase_crop_order_id: { [Op.not]: null },
                            is_active: true
                        }
                    }
                ]
            })
            if (!order_delivery_doc) { throw new ValidationError('Invalid doc id'); }

            if (doc_url && doc_url !== order_delivery_doc.doc_url) { order_delivery_doc.doc_url = doc_url; }
            if (doc_back_url && doc_back_url !== order_delivery_doc.doc_back_url) { order_delivery_doc.doc_back_url = doc_back_url; }
            await order_delivery_doc.save();
            if (doc_status) {
                await update_doc_status_service(
                    order_delivery_doc.order_delivery_detail.purchase_crop_order_id,
                    doc_id,
                    doc_status,
                    doc_url,
                    designation
                )
            }
            return resolve({});
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

module.exports = {
    modify_transport_dispatch_deduction_docs_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/purchase_order/services/modify_po_docs_service/modify_mandi_docs_service.js
const error_log = require('../../../../../middelware/error_log');
const mandi_tax_doc_type_enum = require('../../../../../enums/market_linkage/enums/mandi_tax_doc_type_enum');
const order_delivery_documents_model = require('../../../../../database/models_v2/procurement_order_deliveries/order_delivery_documents');
const doc_type_enum = require('../../../../../enums/purchase_order/purchase_order_document_enum').doc_type;
const mandi_taxation_model = require('../../../../../database/models_v2/mandi_taxation/mandi_taxation')
const order_delivery_detail_model = require('../../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const { ValidationError } = require('../../../../../utilities/error/custom_error');

const modify_mandi_docs_service = ({
    doc_id,
    doc_type,
    doc_url,
    file_name
}) => {
    return new Promise(async (resolve, reject) => {
        try {
            const mandi_tax_exist = await mandi_taxation_model.findOne({
                where: {
                    id: doc_id,
                    is_active: true
                }
            });
            if (!mandi_tax_exist) { throw new ValidationError('Invalid doc id'); }
            if (doc_url) { mandi_tax_exist['url_' + Object.keys(mandi_tax_doc_type_enum).find((key) => mandi_tax_doc_type_enum[key] === doc_type)] = doc_url; }
            if (file_name) { mandi_tax_exist['name_' + Object.keys(mandi_tax_doc_type_enum).find((key) => mandi_tax_doc_type_enum[key] === doc_type)] = file_name; }
            await mandi_tax_exist.save();

            // also update in order delivery document
            if (doc_type === mandi_tax_doc_type_enum['1st_9r'] || doc_type === mandi_tax_doc_type_enum['1st_9r_gate_pass']) {
                const mandi_doc = await order_delivery_documents_model.findOne({
                    where: {
                        is_active: true,
                        name: (doc_type === mandi_tax_doc_type_enum['1st_9r']) ? doc_type_enum.primary9rImage : doc_type_enum.first9rGatePass
                    },
                    include: [
                        {
                            model: order_delivery_detail_model,
                            required: true,
                            where: {
                                purchase_crop_order_id: mandi_tax_exist.purchase_crop_order_id,
                                is_active: true
                            }
                        }
                    ]
                })
                if (mandi_doc && doc_url && doc_url !== mandi_doc.doc_url) {
                    mandi_doc.doc_url = doc_url;
                    await mandi_doc.save();
                }
            }
            return resolve({});
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

module.exports = {
    modify_mandi_docs_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/purchase_order/services/update_po_payment_info/create_by_pa.js
const revision_before_payment_model = require("../../../../../database/models_v2/procurement_payments/revision_before_payment");
const { payment_for: PaymentFor } = require("../../../../../enums/purchase_order/procurement_payment_enum");
const { createRevision } = require("./utils");

/**
 * Creates a new record for transport advance cost.
 * @param {number} poId purchase_crop_order's ``id``
 * @param {number} deliveryDetailId purchase_crop_order.order_delivery_detail ``id``
 * @param {{
 *     transport: {
 *         percentage: number,
 *         amount: number,
 *         deduction: number, // can be zero.
 *     }
 * }} paymentInfo
 * 
 * @return {Promise<revision_before_payment_model>}
 */
const create_by_pa = async (poId, deliveryDetailId, paymentInfo) => {
    let paymentRevision = await createRevision(
        paymentInfo.transport.amount,
        paymentInfo.transport.percentage,
        poId,
        deliveryDetailId,
        PaymentFor.ORDER_DELIVERY,
        false,
        false
    ).save();
    return paymentRevision;
}

module.exports = create_by_pa;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/purchase_order/services/update_po_payment_info/index.js
const HTTP_status_codes = require('../../../../../enums/market_linkage/constants/HTTP_status_codes');
const error_log = require('../../../../../middelware/error_log');
const purchase_crop_orders_model = require('../../../../../database/models_v2/procurement_order/purchase_crop_orders');
const order_delivery_detail_model = require('../../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const revision_before_payment_model = require('../../../../../database/models_v2/procurement_payments/revision_before_payment');
const procurement_payments_model = require('../../../../../database/models_v2/procurement_payments/procurement_payments');
const { payment_for: PaymentForType } = require('../../../../../enums/purchase_order/procurement_payment_enum');
const update_by_rpm = require('./update_by_rpm');
const update_by_state_head = require('./update_by_state_head');
const create_payment = require('./create_payment');
const { get_doc_for_approval_service } = require('../../../../v1/purchase_order/services/get_doc_for_approval_service');
const procurement_order_bill_components_model = require('../../../../../database/models_v2/procurement_payments/procurement_bill_components');
// const bill_operation_enum = require('../../../../../enums/purchase_order/bill_operation_enum');
const purchase_crop_bill_component_enum = require('../../../../../enums/market_linkage/enums/purchase_crop_bill_component_enum');
const round_off_to_two_decimal = require('../../../../v1/utilities/round_off/round_off_to_two_decimal');
const procurement_lots_model = require('../../../../../database/models_v2/procurement_sample/procurement_lots');
const merchant_verification_docs = require('../../../../../database/models_v2/merchant/merchant_verification_docs');
const merchant_doc_status = require('../../../../../enums/merchant/mechant_doc_status');
const { get_retailer_yearly_trx } = require('../../../../v1/payment/_services/update_retailer_total_transaction');
const { ValidationError } = require('../../../../../utilities/error/custom_error');

/**
 * This service is responsible for updating the payment info for the given PO.
 * ``PA``, ``RPM``, ``STATE_HEAD`` can update this info.
 *
 * If PA updates, create new record for revision_before_payment and mark ``approved_by_rpm`` and ``approved_by_state_head`` as ``false``.
 *
 * If RPM updates, create new record and mark previous as inactive & set ``approved_by_rpm`` as ``true``.
 *
 * If STATE_HEAD updates, create new record and mark previous as inactive & set ``approved_by_state_head`` as ``true``.
 * After approval from STATE_HEAD create a new record for ``procurement_payments``.
 * @param {{
 *      poId: number,
 *      paymentInfo: {
 *          retailer: {
 *              percentage: number,
 *              amount: number,
 *              deduction: number, // can be zero.
 *          } | undefined,
 *          transport: {
 *              amount: number,
 *              deduction: number, // can be zero.
 *          } | undefined
 *      }
 * }} params
 * @param {"RPM" | "STATE_P_HEAD"} userType possible values are RPM or STATE_P_HEAD
 * @returns {Promise<{status: number, data: any}>}
 */
const update_po_payment_info = async ({
    poId,
    paymentInfo,
    grossWeight,
    bagDeduction,
    netWeight,
    totalTransportCost,
    mandiTax
}, userType) => {
    try {
        let purchaseOrder = await purchase_crop_orders_model.findOne({
            where: { id: poId, is_active: true },
            include: [
                {
                    // this will be single object.
                    model: order_delivery_detail_model,
                    required: true,
                    where: { is_active: true }
                },
                {
                    // this will be array of objects.
                    model: revision_before_payment_model,
                    required: false,
                    where: { is_active: true }
                },
                {
                    model: procurement_lots_model,
                    where: {
                        is_active: true
                    },
                    include: [
                        {
                            model: procurement_order_bill_components_model,
                            where: {
                                is_active: true
                            },
                            required: false
                        }
                    ],
                    required: true
                }
            ]
        });
        if (!purchaseOrder) { throw new ValidationError(`No PO found with id: ${poId}`); }
        // const prev_total_payment = purchaseOrder.dataValues.total_payment
        // sample_id, createdAt, master_merchant_id}
        const createdAt = purchaseOrder.dataValues.createdAt
        const master_merchant_id = purchaseOrder.dataValues.master_merchant_id
        const sample_id = purchaseOrder.dataValues.purchase_sample_id
        if (paymentInfo?.transport?.amount > (totalTransportCost ?? purchaseOrder.order_delivery_detail.total_transport_cost)) { throw new ValidationError('Advance transport payment should be less than or equal to total transport cost') }

        const merchant_docs = await merchant_verification_docs.findAll({
            where: {
                master_merchant_id: purchaseOrder.dataValues.master_merchant_id,
                is_active: 1
            },
            attributes: ['front_image', 'status']
        })

        let areAllDocumentsSubmittedByRetailer = true
        let areAllRetailerDocumentsApproved = true

        merchant_docs.forEach(doc => {
            if (doc && doc.dataValues && !doc.dataValues.front_image) {
                areAllDocumentsSubmittedByRetailer = false
                areAllRetailerDocumentsApproved = false
            } else if (doc && doc.dataValues && doc.dataValues.front_image && doc.dataValues.status === merchant_doc_status.PENDING) { areAllRetailerDocumentsApproved = false }
        })

        if (!areAllDocumentsSubmittedByRetailer || !areAllRetailerDocumentsApproved) {
            return {
                status: HTTP_status_codes.badRequest,
                data: {
                    message: 'Merchant doc not approved',
                    error: ''
                }
            }
        }

        const doc_approval_status = await get_doc_for_approval_service(poId);
        if (doc_approval_status.pending_docs !== 0 || doc_approval_status.rejected_docs !== 0) {
            throw new ValidationError('Please approve all documents before payment.')
        }
        let orderDeliveryDetail = purchaseOrder.order_delivery_detail;
        // const prev_total_transport = orderDeliveryDetail.dataValues.total_transport_cost
        const revisionPayments = purchaseOrder.revision_before_payments || [];
        totalTransportCost = totalTransportCost ?? orderDeliveryDetail.total_transport_cost;

        const retailerRevisedPayment = revisionPayments.find(rp => {
            return (rp.is_active === 1 && rp.payment_for === PaymentForType.PO);
        });
        const transportRevisedPayment = revisionPayments.find(rp => {
            return (rp.is_active === 1 && rp.payment_for === PaymentForType.ORDER_DELIVERY);
        });
        let paymentServiceResult;

        // check if payment already added
        const [retailer_payment_added, transport_payment_added] = await Promise.all([
            procurement_payments_model.findOne({
                where: {
                    is_active: true,
                    payment_for: PaymentForType.PO,
                    purchase_crop_order_id: poId,
                    order_delivery_id: orderDeliveryDetail.id,
                    installment_number: 1,
                    is_additional_payment: false
                }
            }),
            procurement_payments_model.findOne({
                where: {
                    is_active: true,
                    payment_for: PaymentForType.ORDER_DELIVERY,
                    purchase_crop_order_id: poId,
                    order_delivery_id: orderDeliveryDetail.id,
                    installment_number: 1,
                    is_additional_payment: false
                }
            })
        ])
        if ((retailer_payment_added && retailer_payment_added.utr_number) ||
            (transport_payment_added && transport_payment_added.utr_number)) { throw new ValidationError('Payment is done. Cannot make changes') }

        if (userType === 'RPM') {
            if (retailer_payment_added || transport_payment_added) { throw new ValidationError('State Head payment is done. Cannot make changes'); }
            paymentServiceResult = await update_by_rpm(
                paymentInfo,
                totalTransportCost,
                transportRevisedPayment,
                retailerRevisedPayment
            );
        }
        if (userType === 'STATE_P_HEAD') {
            // console.log(purchaseOrder.dataValues.total_payment)
            [purchaseOrder, orderDeliveryDetail] =
                await update_order_delivery_details(purchaseOrder, orderDeliveryDetail, mandiTax, bagDeduction, grossWeight, netWeight, totalTransportCost, paymentInfo.retailer.amount);
            let new_total_payment = purchaseOrder.dataValues.total_payment
            const new_total_transport = orderDeliveryDetail.dataValues.total_transport_cost
            // const is_tds_applicable = await update_retailer_total_transaction_v2({po_id: poId,prev_total_payment, new_total_payment, prev_total_transport, new_total_transport})
            let is_tds_applicable = false
            const retailer_trx_amount = await get_retailer_yearly_trx({ sample_id, createdAt, master_merchant_id })

            if (retailer_trx_amount.data.is_for === 1) { new_total_payment += new_total_transport }

            if (new_total_payment + retailer_trx_amount.data.total_retailer_transaction > retailer_trx_amount.data.threshold_amount) { is_tds_applicable = true }

            if (!retailer_payment_added && !transport_payment_added) {
                paymentServiceResult = await update_by_state_head(
                    poId,
                    orderDeliveryDetail.id,
                    transportRevisedPayment,
                    retailerRevisedPayment,
                    totalTransportCost,
                    paymentInfo
                );
                // create payment records in case of state head.
                const gst_perc = purchaseOrder.dataValues.sgst_percentage + purchaseOrder.dataValues.igst_percentage + purchaseOrder.dataValues.cgst_percentage
                await Promise.all([
                    // retailer
                    create_payment({
                        poId,
                        orderDeliveryId: orderDeliveryDetail.id,
                        buyerOrderId: purchaseOrder.buyer_order_id,
                        amount: paymentInfo.retailer.amount,
                        installment: 1,
                        paymentFor: PaymentForType.PO,
                        is_gst_applicable: !!(gst_perc && gst_perc !== 0),
                        gst_percent: gst_perc,
                        is_tds_applicable
                    }),
                    // transport
                    create_payment({
                        poId,
                        orderDeliveryId: orderDeliveryDetail.id,
                        buyerOrderId: purchaseOrder.buyer_order_id,
                        amount: paymentInfo.transport.amount,
                        installment: 1,
                        paymentFor: PaymentForType.ORDER_DELIVERY
                    })
                ]);
            } else {
                const retailerPayment = paymentInfo.retailer;
                const transportPayment = paymentInfo.transport;
                await update_revision_payments(revisionPayments, retailerPayment, transportPayment, totalTransportCost);
                await update_payment_part_one(retailerPayment, transportPayment, retailer_payment_added, transport_payment_added, is_tds_applicable);
                paymentServiceResult = {
                    partOnePaymentRetailer: retailerPayment.amount,
                    partOnePercRetailer: retailerPayment.percentage,
                    partOnePaymentTransporter: transportPayment.amount,
                    partOnePercTransporter: parseInt((transportPayment.amount * 100) / totalTransportCost),
                    isPartOneApprovedByRpm: true,
                    isPartOneApprovedByStateHead: true
                }
            }

        }
        return {
            status: 200,
            data: paymentServiceResult
        };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: 'Something bad happened',
                error: err.message
            }
        };
    }
};

const update_order_delivery_details = async (
    purchaseOrder,
    orderDeliveryDetail,
    mandiTax,
    bagDeduction,
    grossWeight,
    netWeight,
    totalTransportCost,
    advanceTransportCost
) => {
    // eslint-disable-next-line no-useless-catch
    try {
        purchaseOrder.mandi_tax_value = mandiTax;
        purchaseOrder.bag_deduction_value = bagDeduction;
        orderDeliveryDetail.gross_weight = grossWeight;
        orderDeliveryDetail.net_weight = netWeight;
        orderDeliveryDetail.total_transport_cost = totalTransportCost;
        orderDeliveryDetail.advance_transport_cost = advanceTransportCost;

        const commissionObj = purchaseOrder.procurement_lot.procurement_order_bill_components
            ?.find(bc => bc.order_bill_component_id === purchase_crop_bill_component_enum.retailer_commision);
        const labourBagObj = purchaseOrder.procurement_lot.procurement_order_bill_components
            ?.find(bc => bc.order_bill_component_id === purchase_crop_bill_component_enum.labour_and_bag_cost);
        const commodity = round_off_to_two_decimal((purchaseOrder.price || 0) * (netWeight / 100));
        const commission = round_off_to_two_decimal((commissionObj?.amount || 0) * (netWeight / 100));
        const labour_and_bag = round_off_to_two_decimal((labourBagObj?.amount || 0) * (netWeight / 100))
        purchaseOrder.total_payment = commodity + commission + labour_and_bag + mandiTax;

        [purchaseOrder, orderDeliveryDetail] = await Promise.all([
            purchaseOrder.save(),
            orderDeliveryDetail.save()
        ])
        return [purchaseOrder, orderDeliveryDetail]
    } catch (err) {
        throw err
    }
}

const update_revision_payments = async (revisionPayments, retailerPayment, transportPayment, totalTransportCost) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const sh_approved_retailer_payment = revisionPayments
            .find((rp) => rp.is_active === true &&
                rp.payment_for === PaymentForType.PO &&
                rp.approved_by_state_head === true);
        const sh_approved_transport_payment = revisionPayments
            .find((rp) => rp.is_active === true &&
                rp.payment_for === PaymentForType.ORDER_DELIVERY &&
                rp.approved_by_state_head === true);
        sh_approved_retailer_payment.amount = retailerPayment.amount;
        sh_approved_retailer_payment.percentage = retailerPayment.percentage;
        sh_approved_transport_payment.amount = transportPayment.amount;
        const transportPerc = (transportPayment.amount * 100) / totalTransportCost;
        sh_approved_transport_payment.percentage = transportPerc;
        await Promise.all([
            sh_approved_retailer_payment.save(),
            sh_approved_transport_payment.save()
        ])
    } catch (err) {
        throw err
    }
}

const update_payment_part_one = async (retailerPayment, transportPayment, retailer_payment_added, transport_payment_added, is_tds_applicable = false) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const retailer_tds_amount = (parseFloat(retailerPayment.amount) * ((retailer_payment_added.tds_percent || 0) / 100));
        const retailer_revised_payment = parseFloat(retailerPayment.amount) - retailer_tds_amount;
        retailer_payment_added.amount = retailerPayment.amount;
        retailer_payment_added.revised_payment = retailer_revised_payment;
        retailer_payment_added.is_tds_applicable = is_tds_applicable

        const transport_tds_amount = (parseFloat(transportPayment.amount) * ((transport_payment_added.tds_percent || 0) / 100));
        const transport_revised_payment = parseFloat(transportPayment.amount) - transport_tds_amount;
        transport_payment_added.amount = transportPayment.amount;
        transport_payment_added.revised_payment = transport_revised_payment;

        await Promise.all([
            retailer_payment_added.save(),
            transport_payment_added.save()
        ]);
    } catch (err) {
        throw err
    }
}

module.exports = update_po_payment_info;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/purchase_order/services/update_po_payment_info/update_by_rpm.js
/* The commented line `// const revision_before_payment_model =
require("../../../../../database/models_v2/procurement_payments/revision_before_payment");` is
importing a model named `revision_before_payment` from a specific path in the project directory.
This model is likely related to procurement payments and may contain schema definitions or methods
for interacting with revision data before payment processing. */
// const revision_before_payment_model = require("../../../../../database/models_v2/procurement_payments/revision_before_payment");
const { payment_for: PaymentFor } = require('../../../../../enums/purchase_order/procurement_payment_enum');
const { createRevision, isDataChanged } = require('./utils');
const { ValidationError } = require('../../../../../utilities/error/custom_error');

/**
 * If transport advance cost given deactivate previus record & and create a new one as marked ``true``
 * for field ``approved_by_rpm``.
 * Creates a new record for retailer payment info and mark ``approved_by_rpm`` ``true`` as well.
 *
 * @param {{
 *     retailer: {
 *         percentage: number,
 *         amount: number,
 *         deduction: number, // can be zero.
 *     },
 *     transport: {
 *         amount: number,
 *         deduction: number, // can be zero.
 *     } | undefined
 * }} paymentInfo
 * @param {number} totalTransportCost
 * @param {revision_before_payment_model} revisedTransportPayment
 *
 * @return {Promise<any[]>}
 */
const update_by_rpm = async (paymentInfo, totalTransportCost, revisedTransportPayment, revisedRetailerPayment) => {
    if (!revisedTransportPayment) { throw new ValidationError('transport revised payment can\'t be null or undefined.'); }
    if (!paymentInfo || !paymentInfo.retailer) { throw new ValidationError('retailer payment info is required.'); }

    const poId = revisedTransportPayment.purchase_crop_order_id;
    const deliveryId = revisedTransportPayment.order_delivery_id;
    const retailerPayment = paymentInfo.retailer;
    const transportPayment = paymentInfo.transport;
    let paymentRevisions = [];

    if (transportPayment) {
        const changed = isDataChanged(revisedTransportPayment, transportPayment)
        if (changed) {
            // mark current transport revision record as inactive.
            revisedTransportPayment.is_active = 0;
            // create new record for transport.
            const transportPerc = (transportPayment.amount * 100) / totalTransportCost;
            paymentRevisions.push(createRevision(
                transportPayment.amount,
                parseInt(transportPerc),
                poId,
                deliveryId,
                PaymentFor.ORDER_DELIVERY,
                true,
                false
            ));
        } else {
            // there is no new update for transport advance cost.
            // set current record's field approved_by_rpm to true.
            revisedTransportPayment.approved_by_rpm = true;
        }
        paymentRevisions.push(revisedTransportPayment);
    }
    if (revisedRetailerPayment && retailerPayment) {
        const changed = isDataChanged(revisedRetailerPayment, retailerPayment)
        if (changed) {
            // mark current retailer revision record as inactive.
            revisedRetailerPayment.is_active = 0;
            // create new record for retailer.
            paymentRevisions.push(createRevision(
                retailerPayment.amount,
                retailerPayment.percentage,
                poId,
                deliveryId,
                PaymentFor.PO,
                true,
                false
            ));
        } else {
            // there is no new update for retailer payment.
            // set current record's field approved_by_rpm to true.
            revisedRetailerPayment.approved_by_rpm = true;
        }
        paymentRevisions.push(revisedRetailerPayment);
    } else {
        paymentRevisions.push(createRevision(
            retailerPayment.amount,
            retailerPayment.percentage,
            poId,
            deliveryId,
            PaymentFor.PO,
            true,
            false
        ));
    }

    paymentRevisions = await Promise.all(paymentRevisions.map(pr => pr.save()));
    return {
        partOnePaymentRetailer: retailerPayment.amount,
        partOnePercRetailer: retailerPayment.percentage,
        partOnePaymentTransporter: transportPayment.amount,
        partOnePercTransporter: parseInt((transportPayment.amount * 100) / totalTransportCost),
        isPartOneApprovedByRpm: true,
        isPartOneApprovedByStateHead: false
    };
}

module.exports = update_by_rpm;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/purchase_order/services/update_po_payment_info/create_payment.js
// const purchase_crop_orders_model = require('../../../../../database/models_v2/procurement_order/purchase_crop_orders');
const procurement_payments_model = require('../../../../../database/models_v2/procurement_payments/procurement_payments');
const { payment_for, status: payment_status } = require('../../../../../enums/purchase_order/procurement_payment_enum');
// const Op = require('sequelize').Op;

/**
 * This will create a final payment record in the database.
 * @param {{
 *      poId: number,
 *      buyerOrderId: number,
 *      orderDeliveryId: number,
 *      amount: number,
 *      installment: number,
 *      paymentFor: number,
 * }} paymentData
 * @return {Promise<procurement_payments_model>}
 */

const create_payment = async (paymentData) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const payment = {
            payment_for: paymentData.paymentFor,
            amount: paymentData.amount,
            installment_number: paymentData.installment,
            status: payment_status.PENDING,
            is_tds_applicable: paymentData.is_tds_applicable || false,
            tds_percent: null,
            tds_amount: null,
            is_gst_applicable: paymentData.is_gst_applicable || false,
            gst_percent: paymentData.gst_percent || null,
            gst_amount: null,
            revised_payment: paymentData.amount,
            is_active: true,
            purchase_crop_order_id: paymentData.poId,
            buyer_order_id: paymentData.buyerOrderId,
            order_delivery_id: paymentData.orderDeliveryId,
            account_detail_id: paymentData.accountDetailId || null,
            is_additional_payment: false
        }
        if (payment.payment_for === payment_for.PO) {
            const part_1_payment = await procurement_payments_model.findOne({
                where: {
                    is_active: true,
                    purchase_crop_order_id: paymentData.poId,
                    payment_for: paymentData.paymentFor,
                    is_additional_payment: false
                }
            })

            if (part_1_payment) {
                payment.is_gst_applicable = part_1_payment.is_gst_applicable;
                payment.gst_percent = part_1_payment.gst_percent;
                payment.is_tds_applicable = part_1_payment.is_tds_applicable;
                payment.tds_percent = part_1_payment.tds_percent;
                payment.tds_amount = (parseFloat(payment.amount) * (part_1_payment.tds_percent / 100));
                payment.revised_payment = parseFloat(payment.amount) - payment.tds_amount;
            }

        }
        const paymentRecord = await procurement_payments_model.create(payment);
        return paymentRecord;
    } catch (err) {
        throw err
    }
}

module.exports = create_payment;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/purchase_order/services/update_po_payment_info/utils.js
const revision_before_payment_model = require("../../../../../database/models_v2/procurement_payments/revision_before_payment");

const createRevision = (amount, percentage, poId, deliveryId, paymentFor, approvedRpm, approvedSTH) => {
    return revision_before_payment_model.build({
        is_active: 1,
        amount: amount,
        percentage: percentage,
        approved_by_rpm: approvedRpm,
        approved_by_state_head: approvedSTH,
        purchase_crop_order_id: poId,
        order_delivery_id: deliveryId,
        payment_for: paymentFor
    });
}

const isDataChanged = (revisedPayment, newPayment) => {
    const currentAmount = revisedPayment.amount;
    const currentPercentage = revisedPayment.percentage;
    const newAmount = newPayment.amount;
    const newPercentage = newPayment.percentage;
    return (
        currentAmount !== newAmount
        ||
        currentPercentage !== newPercentage
    );
}

module.exports = {
    createRevision,
    isDataChanged
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/purchase_order/services/update_po_payment_info/update_by_state_head.js
// const revision_before_payment_model = require('../../../../../database/models_v2/procurement_payments/revision_before_payment');
const { payment_for: PaymentFor } = require('../../../../../enums/purchase_order/procurement_payment_enum');
const { createRevision, isDataChanged } = require('./utils');
const { ValidationError } = require('../../../../../utilities/error/custom_error');

/**
 * State head can update existing payment revision record or can create new record
 * without waiting for rpm approval.
 * Once approved by State Head, PA & RPM can't update that.
 *
 * @param {number} poId
 * @param {number} deliveryDetailId
 * @param {revision_before_payment_model} revisedTransportPayment
 * @param {revision_before_payment_model=} revisedRetailerPayment
 * @param {number} totalTransportCost
 * @param {{
 *     retailer: {
 *         percentage: number,
 *         amount: number,
 *         deduction: number, // can be zero.
 *     },
 *     transport: {
 *         amount: number,
 *         deduction: number, // can be zero.
 *     }
 * }} paymentInfo
 *
 * @return {Promise<any[]>}
 */
const update_by_state_head = async (poId, deliveryDetailId,
    revisedTransportPayment, revisedRetailerPayment, totalTransportCost, paymentInfo) => {

    if (!revisedTransportPayment) { throw new ValidationError("revised transport payment can't be null or undefined."); }
    if (!paymentInfo || !paymentInfo.retailer || !paymentInfo.transport) { throw new ValidationError('Please provide payment info.'); }

    const retailerPayment = paymentInfo.retailer;
    const transportPayment = paymentInfo.transport;
    let paymentRevision = [];

    if (!revisedRetailerPayment) {
        revisedRetailerPayment = await createRevision(
            retailerPayment.amount,
            retailerPayment.percentage,
            poId,
            deliveryDetailId,
            PaymentFor.PO).save();
    }
    // check for retailer
    let changed = isDataChanged(revisedRetailerPayment, retailerPayment);
    if (changed) {
        // create new record
        const revision = createRevision(
            retailerPayment.amount,
            retailerPayment.percentage,
            poId,
            deliveryDetailId,
            PaymentFor.PO,
            true,
            true);
        paymentRevision.push(revision);
        // deactivate current revision.
        revisedRetailerPayment.is_active = 0;
    } else {
        // mark current revision as accepted
        revisedRetailerPayment.approved_by_rpm = true;
        revisedRetailerPayment.approved_by_state_head = true;
    }
    paymentRevision.push(revisedRetailerPayment);

    // check for transport
    changed = isDataChanged(revisedTransportPayment, transportPayment);
    if (changed) {
        // create new record
        const transportPerc = (transportPayment.amount * 100) / totalTransportCost;
        const revision = createRevision(
            transportPayment.amount,
            parseInt(transportPerc),
            poId,
            deliveryDetailId,
            PaymentFor.ORDER_DELIVERY,
            true,
            true);
        paymentRevision.push(revision);
        // deactivate current revision.
        revisedTransportPayment.is_active = 0;
    } else {
        // mark current revision as accepted
        revisedTransportPayment.approved_by_rpm = true;
        revisedTransportPayment.approved_by_state_head = true;
    }

    paymentRevision.push(revisedTransportPayment);
    paymentRevision = await Promise.all(paymentRevision.map(pr => pr.save()));
    return {
        partOnePaymentRetailer: retailerPayment.amount,
        partOnePercRetailer: retailerPayment.percentage,
        partOnePaymentTransporter: transportPayment.amount,
        partOnePercTransporter: parseInt((transportPayment.amount * 100) / totalTransportCost),
        isPartOneApprovedByRpm: true,
        isPartOneApprovedByStateHead: true
    };
}

module.exports = update_by_state_head;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/purchase_order/services/add_dispatch_info_service.js
const error_log = require('../../../../middelware/error_log');
const { pa_activity_log_service } = require('../../../../common_services/market_linkage/logging/pa_activity_log_service');
// const masterSampleModel = require("../../../../database/mongoose/market_linkage_db/masterSample.model");
// const purchaseOrderModel = require("../../../../database/mongoose/market_linkage_db/purchase_order.model");
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const { actionPerformed } = require('../../../../enums/market_linkage/enums/paActivityEnum');
const { POStatus } = require('../../../../enums/market_linkage/enums/po');
const { getPoFullInfo } = require('../../../v1/purchase_order/services/get_po_details_service');
// const create_dispatch_document_service = require("../../campaign/services/dispatch_document_create_service").add_dispatch_document;
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const procurement_dispatch_document_model = require('../../../../database/models_v2/procurement_order/procurement_dispatch_document');
// const order_delivery_detail_model = require("../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail");
const order_delivery_documents_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_documents');
const order_delivery_logs_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_logs');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const add_mandi_tax_service = require('../../../v1/mandi_taxation/services/add_mandi_tax_service');
const create_payment_revision = require('../../../v1/purchase_order/_services/update_po_payment_info/create_by_pa');
const ENV = require('../../../../config/global_config').env;
const global_config = require('../../../../config/global_config');
const env_enum = require('../../../../enums/env/env_enum');
const put_request = require('../../../../utilities/external_API_calls/put_request');
const RETAILER_STAGE_URL = require('../../../../constants/global').RETAILER_STAGE_URL;
const RETAILER_PROD_URL = require('../../../../constants/global').RETAILER_PROD_URL;
const API_HEADERS = {
    'Content-Type': 'application/json',
    Authorization: `Bearer ${ENV === global_config.market_linkage_system_token}`
};
const order_delivery_stage_enum = require('../../../../enums/purchase_order/order_delivery_stage_enum');
const { fetch_po_details_by_id_service } = require('../../campaign/services/fetch_po_details_by_id_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const add_dispatch_info_service = (po_id, req_location,
    {
        gross_weight,
        net_weight,
        mandi_tax,
        bag_deduction,
        number_of_bags,
        total_transport_cost,
        advance_transport_cost,
        docs
    }
) => {
    return new Promise(async (resolve, reject) => {
        try {
            const purchase_order = await purchase_crop_orders_model.findOne({
                where: {
                    id: po_id,
                    is_active: true
                },
                include: [
                    {
                        model: order_delivery_detail_model,
                        required: false,
                        where: {
                            is_active: true
                        }
                    }
                ]
            });
            if (!purchase_order) { throw new ValidationError(`No po found with id: ${po_id}`); }
            purchase_order.status = POStatus.READY_TO_DISPATCH;
            purchase_order.status_remark = 'PO has been ready for dispatch.';
            purchase_order.mandi_tax_value = mandi_tax;
            purchase_order.bag_deduction_value = bag_deduction;

            // create order delivery detail
            let order_dispatch_info = purchase_order.order_delivery_detail;
            if (!order_dispatch_info) {
                order_dispatch_info = order_delivery_detail_model.build({
                    purchase_crop_order_id: purchase_order.id,
                    is_active: true
                });
            }
            order_dispatch_info.gross_weight = gross_weight;
            order_dispatch_info.net_weight = net_weight;
            order_dispatch_info.number_of_bags = number_of_bags;
            order_dispatch_info.advance_transport_cost = advance_transport_cost;
            order_dispatch_info.total_transport_cost = total_transport_cost;

            await Promise.all([
                order_dispatch_info.save(),
                add_documents_and_log(docs, order_dispatch_info.id)
            ])

            const po_full_info = await getPoFullInfo(purchase_order.id);
            const commodity_value = po_full_info.data?.retailerPaymentInfo?.find(payment_info => payment_info.name === 'Commodity Value')?.toBePaid || 0;
            const commission_value = po_full_info.data?.retailerPaymentInfo?.find(payment_info => payment_info.name === 'Commission Amount')?.toBePaid || 0;
            const labour_and_bag_value = po_full_info.data?.retailerPaymentInfo?.find(payment_info => payment_info.name === 'Labour + Gunny Bag Cost')?.toBePaid || 0;
            purchase_order.total_payment = commodity_value + purchase_order.mandi_tax_value + commission_value + labour_and_bag_value;
            const transport_perc = (advance_transport_cost * 100) / total_transport_cost;

            await Promise.all([
                purchase_order.save(),
                add_mandi_tax_service(purchase_order.id, po_full_info.data?.dispatchInfo?.primary9rImage, po_full_info.data?.dispatchInfo?.first9rGatePass, purchase_order.buyer_order_id ?? null),
                create_payment_revision(
                    purchase_order.id,
                    order_dispatch_info.id,
                    {
                        transport: {
                            amount: advance_transport_cost,
                            percentage: parseInt(transport_perc)
                        }
                    }
                )
            ])

            // send po update to retailer app

            fetch_po_details_by_id_service(purchase_order.id)
                .then((API_BODY) => {
                    const API_URL = (ENV === env_enum.production ? RETAILER_PROD_URL : RETAILER_STAGE_URL) + 'v1/order_tracking/purchase_order';
                    put_request(API_URL, API_BODY, API_HEADERS)
                        .catch(err => {
                            error_log(err);
                        });
                })
                .catch(err => {
                    error_log(err);
                });

            // track PA activity if everything is ok.
            if (po_full_info.status === HTTP_status_codes.ok && req_location) {
                // pa activity logging
                pa_activity_log_service({
                    paId: po_full_info.data.paInfo.id,
                    actionLocation: req_location,
                    actionTimestamp: new Date(Date.now()),
                    actionPerformed: actionPerformed.DispatchDocsSubmission,
                    retailerId: po_full_info.data.retailerInfo.id,
                    sampleId: po_full_info.data.sampleInfo.id,
                    poId: po_full_info.data._id
                }).catch((err) => {
                    error_log(err);
                })
            }
            return resolve(po_full_info);
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

const add_documents_and_log = async (docs, order_delivery_id) => {
    // query the docs enum based on the given handover doc names.
    let procurement_dispatch_doc_enum = [];
    procurement_dispatch_doc_enum = await procurement_dispatch_document_model.findAll({
        where: {
            id: docs.map(hd => hd.dispatch_doc_id),
            is_active: true
        }
    })

    const dispatch_docs = docs.map(hd => {
        const doc_enum = procurement_dispatch_doc_enum.find(docEnum => docEnum.id === hd.dispatch_doc_id);
        if (!doc_enum) {
            return {
                name: hd.name,
                doc_url: hd.image,
                order_delivery_id,
                is_active: true
            }
        }
        return {
            doc_url: hd.image,
            order_delivery_id,
            order_delivery_document_type_id: doc_enum.id,
            is_active: true
        };
    });

    // save PO activity log and dispatch documents.
    await Promise.all([
        order_delivery_logs_model.create({
            order_delivery_stage_id: order_delivery_stage_enum.ready_to_dispatch,
            order_detail_id: order_delivery_id,
            log_time: new Date(),
            is_active: true
        }),
        order_delivery_documents_model.bulkCreate(dispatch_docs)
    ]);
}

module.exports = {
    add_dispatch_info_service,
    add_documents_and_log
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/purchase_order/services/fetch_po_docs_service/fetch_dispatch_docs_service.js
const error_log = require('../../../../../middelware/error_log');
const { Op } = require("sequelize");
const procurement_dispatch_document_model = require("../../../../../database/models_v2/procurement_order/procurement_dispatch_document");
const order_delivery_documents_model = require("../../../../../database/models_v2/procurement_order_deliveries/order_delivery_documents");
const order_delivery_detail_model = require("../../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail");
const { doc_type } = require('../../../../../enums/purchase_order/purchase_order_document_enum');
const { document_for_enum } = require('../../../../../enums/market_linkage/enums/po');
const identify_file_type_from_url = require('../../../../../common_services/url_to_file_type/identify_file_type_from_url');

const fetch_dispatch_docs_service = ({ po_id, po_pending_inhand_id }) => {
    return new Promise(async (resolve, reject) => {
        try {
            const query = {
                is_active: true
            }
            if (po_pending_inhand_id)
                query.po_pending_inhand_detail_id = po_pending_inhand_id;
            else
                query.purchase_crop_order_id = po_id;

            let dispatch_docs = await Promise.all([
                order_delivery_documents_model.findAll({
                    where: {
                        is_active: true
                    },
                    include: [
                        {
                            model: order_delivery_detail_model,
                            where: query,
                            required: true
                        },
                        {
                            model: procurement_dispatch_document_model,
                            where: {
                                is_active: true
                            },
                            required: true
                        }
                    ]
                }),
                order_delivery_documents_model.findAll({
                    where: {
                        is_active: true,
                        name: { [Op.in]: [doc_type.transportBillImage, doc_type.loadedTruckWeightSlip] }
                    },
                    include: [
                        {
                            model: order_delivery_detail_model,
                            where: query,
                            required: true
                        }
                    ]
                })
            ])
            dispatch_docs = dispatch_docs[0].concat(dispatch_docs[1]);
            const response = [];
            for (let i = 0; i < dispatch_docs.length; i++) {
                const doc = dispatch_docs[i];
                if (!doc.doc_url) continue;
                const file_type = await identify_file_type_from_url(doc.doc_url);
                const doc_name = (doc.name ?? doc.procurement_dispatch_document.name)
                    ?.split(' ')
                    ?.map(w => w[0].toUpperCase() + w.substring(1).toLowerCase())
                    ?.join(' ') ?? '';
                response.push({
                    doc_id: doc.id,
                    doc_name,
                    doc_url: doc.doc_url ?? '',
                    doc_back_url: doc.doc_back_url ?? '',
                    doc_type: doc.order_delivery_document_type_id ?? null,
                    file_type,
                    doc_for: document_for_enum.dispatch,
                    doc_status: doc.status ?? null
                });
            }
            return resolve(response);
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

module.exports = {
    fetch_dispatch_docs_service
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/purchase_order/services/fetch_po_docs_service/fetch_transport_docs_service.js
const error_log = require('../../../../../middelware/error_log');
const order_delivery_document_type_enums_model = require('../../../../../database/models_v2/procurement_order_deliveries/order_delivery_document_type_enums');
const order_delivery_documents_model = require("../../../../../database/models_v2/procurement_order_deliveries/order_delivery_documents");
const order_delivery_detail_model = require("../../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail");
const { document_for_enum } = require('../../../../../enums/market_linkage/enums/po');
const identify_file_type_from_url = require('../../../../../common_services/url_to_file_type/identify_file_type_from_url');
const procurement_dispatch_document_types = require('../../../../../enums/purchase_order/procurement_dispatch_document_types');
const Op = require('sequelize').Op;

const fetch_transport_docs_service = ({ po_id, po_pending_inhand_id }) => {
    return new Promise(async (resolve, reject) => {
        try {
            const query = {
                is_active: true
            }
            if (po_pending_inhand_id)
                query.po_pending_inhand_detail_id = po_pending_inhand_id;
            else
                query.purchase_crop_order_id = po_id;

            const transport_docs = await order_delivery_documents_model.findAll({
                where: {
                    is_active: true
                },
                include: [
                    {
                        model: order_delivery_detail_model,
                        where: query,
                        required: true
                    },
                    {
                        model: order_delivery_document_type_enums_model,
                        where: {
                            is_active: true,
                            id: {
                                [Op.in]: [
                                    procurement_dispatch_document_types.AADHAR,
                                    procurement_dispatch_document_types['CANCELLED CHECK'],
                                    procurement_dispatch_document_types.DL,
                                    procurement_dispatch_document_types['LOADING FLOOR'],
                                    procurement_dispatch_document_types['NUMBER PLATE'],
                                    procurement_dispatch_document_types.RC,
                                    procurement_dispatch_document_types.TDS
                                ]
                            }
                        },
                        required: true
                    }
                ]
            })
            const response = [];
            for (let i = 0; i < transport_docs.length; i++) {
                const doc = transport_docs[i];
                if (!doc.doc_url) continue;
                const file_type = await identify_file_type_from_url(doc.doc_url);
                const doc_name = (doc.order_delivery_document_type_enum.name)
                    ?.split(' ')
                    ?.map(w => w[0].toUpperCase() + w.substring(1).toLowerCase())
                    ?.join(' ') ?? '';
                response.push({
                    doc_id: doc.id,
                    doc_name,
                    doc_url: doc.doc_url ?? '',
                    doc_back_url: doc.doc_back_url ?? '',
                    doc_type: doc.order_transport_doc_type_id ?? null,
                    file_type,
                    doc_for: document_for_enum.transport,
                    doc_status: doc.status ?? null
                });
            }
            return resolve(response);
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

module.exports = {
    fetch_transport_docs_service
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/purchase_order/services/fetch_po_docs_service/fetch_unloading_docs_service.js
const error_log = require('../../../../../middelware/error_log');
const { document_for_enum } = require('../../../../../enums/market_linkage/enums/po');
const identify_file_type_from_url = require('../../../../../common_services/url_to_file_type/identify_file_type_from_url');
const unloading_doc_type_enum = require('../../../../../enums/market_linkage/enums/unloading_doc_type_enum');
const po_unloading_docs_model = require('../../../../../database/models_v2/po_unloading/po_unloading_docs');

const fetch_unloading_docs_service = ({ po_id, so_id, po_pending_inhand_id }) => {
    return new Promise(async (resolve, reject) => {
        try {
            let query = {
                is_active: true,
                buyer_order_detail_id: so_id
            }
            if (po_id) {
                query.purchase_crop_order_id = po_id
            }
            if (po_pending_inhand_id) {
                query.po_pending_inhand_id = po_pending_inhand_id
            }
            const unloading_docs = await po_unloading_docs_model.findAll({
                where: query
            })
            const response = [];
            for (let i = 0; i < unloading_docs.length; i++) {
                const doc = unloading_docs[i];
                if (!doc.doc_url) continue;
                const doc_name = (Object.keys(unloading_doc_type_enum).find((key) => unloading_doc_type_enum[key] === doc.po_unloading_doc_type_id))
                    ?.split(' ')
                    ?.map(w => w[0].toUpperCase() + w.substring(1).toLowerCase())
                    ?.join(' ') ?? '';
                let file_type = await identify_file_type_from_url(doc.doc_url);
                response.push({
                    doc_id: doc.id,
                    doc_name,
                    doc_url: doc.doc_url ?? '',
                    doc_type: doc.po_unloading_doc_type_id ?? null,
                    file_type,
                    doc_for: document_for_enum.unloading
                });
            }
            return resolve(response);
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

module.exports = {
    fetch_unloading_docs_service
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/purchase_order/services/fetch_po_docs_service/index.js
const error_log = require('../../../../../middelware/error_log');
const { fetch_transport_docs_service } = require('./fetch_transport_docs_service');
const { fetch_dispatch_docs_service } = require('./fetch_dispatch_docs_service');
const { fetch_invoice_docs_service } = require('./fetch_invoice_docs_service');
const { fetch_mandi_docs_service } = require('./fetch_mandi_docs_service');
const { document_for_enum } = require('../../../../../enums/market_linkage/enums/po');
const { fetch_unloading_docs_service } = require('./fetch_unloading_docs_service');
const { fetch_deduction_docs_service } = require('./fetch_deduction_docs_service');
const { ValidationError } = require('../../../../../utilities/error/custom_error');

module.exports = ({ po_id, po_pending_inhand_id, so_id, doc_for }) => {
    return new Promise(async (resolve, reject) => {
        try {
            let response = {};
            if (doc_for) {
                // for only transport documents
                if (doc_for === document_for_enum.transport) {
                    if (po_pending_inhand_id) { response.transport_docs = await fetch_transport_docs_service({ po_pending_inhand_id }); } else if (po_id) { response.transport_docs = await fetch_transport_docs_service({ po_id }); } else { throw new ValidationError('po_pending_inhand_id or po_id is required for transport documents'); }
                } else if (doc_for === document_for_enum.dispatch) {
                    // for only dispatch documents
                    if (po_pending_inhand_id) { response.dispatch_docs = await fetch_dispatch_docs_service({ po_pending_inhand_id }); } else if (po_id) { response.dispatch_docs = await fetch_dispatch_docs_service({ po_id }); } else { throw new ValidationError('po_pending_inhand_id or po_id is required for dispatch documents'); }
                } else if (doc_for === document_for_enum.invoice) {
                    // for only invoice documents
                    if (po_id && so_id) { response.invoice_docs = await fetch_invoice_docs_service({ po_id, so_id }); } else { throw new ValidationError('po_id and so_id are required for invoice documents'); }
                } else if (doc_for === document_for_enum.mandi) {
                    // for only mandi documents
                    if (po_id && so_id) { response.mandi_docs = await fetch_mandi_docs_service({ po_id, so_id }); } else { throw new ValidationError('po_id and so_id are required for mandi documents'); }
                } else if (doc_for === document_for_enum.unloading) {
                    // for only unloading documents
                    if (po_id && so_id) { response.unloading_docs = await fetch_unloading_docs_service({ po_id, so_id }); }
                    if (po_pending_inhand_id && so_id) { response.unloading_docs = await fetch_unloading_docs_service({ po_pending_inhand_id, so_id }); } else { throw new ValidationError('po_id and so_id are required for invoice documents'); }
                } else if (doc_for === document_for_enum.deduction) {
                    // for only deduction documents
                    if (po_id && so_id) { response.deduction_docs = await fetch_deduction_docs_service({ po_id, so_id }); }
                    if (po_pending_inhand_id && so_id) { response.deduction_docs = await fetch_deduction_docs_service({ po_pending_inhand_id, so_id }); } else { throw new ValidationError('po_id and so_id are required for invoice documents'); }
                }
            } else {
                // for all the documents
                response = {
                    transport_docs: [],
                    dispatch_docs: [],
                    invoice_docs: [],
                    mandi_docs: [],
                    unloading_docs: [],
                    deduction_docs: []
                }
                if (po_pending_inhand_id) {
                    response.transport_docs = await fetch_transport_docs_service({ po_pending_inhand_id });
                    response.dispatch_docs = await fetch_dispatch_docs_service({ po_pending_inhand_id });
                } else if (po_id) {
                    response.transport_docs = await fetch_transport_docs_service({ po_id });
                    response.dispatch_docs = await fetch_dispatch_docs_service({ po_id });
                } else { throw new ValidationError('po_pending_inhand_id or po_id is required for po documents'); }

                if (po_id && so_id) {
                    response.invoice_docs = await fetch_invoice_docs_service({ po_id, so_id });
                    response.mandi_docs = await fetch_mandi_docs_service({ po_id, so_id });
                    response.unloading_docs = await fetch_unloading_docs_service({ po_id, so_id });
                    response.deduction_docs = await fetch_deduction_docs_service({ po_id, so_id });
                }
                if (po_pending_inhand_id && so_id) {
                    response.unloading_docs = await fetch_unloading_docs_service({ po_pending_inhand_id, so_id });
                    response.deduction_docs = await fetch_deduction_docs_service({ po_pending_inhand_id, so_id });
                }
            }
            return resolve(response);
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/purchase_order/services/fetch_po_docs_service/fetch_invoice_docs_service.js
const error_log = require('../../../../../middelware/error_log');
const po_so_invoice_doc_model = require('../../../../../database/models_v2/po_so_invoicing/po_so_invoice_doc');
const po_so_invoice_model = require('../../../../../database/models_v2/po_so_invoicing/po_so_invoice');
const po_so_doc_type_enum = require('../../../../../enums/market_linkage/enums/po_so_doc_type_enum');
const { document_for_enum } = require('../../../../../enums/market_linkage/enums/po');
const identify_file_type_from_url = require('../../../../../common_services/url_to_file_type/identify_file_type_from_url');

const fetch_invoice_docs_service = ({ po_id, so_id }) => {
    return new Promise(async (resolve, reject) => {
        try {
            const invoice_docs = await po_so_invoice_doc_model.findAll({
                where: {
                    is_active: true
                },
                include: [
                    {
                        model: po_so_invoice_model,
                        where: {
                            is_active: true,
                            buyer_order_detail_id: so_id,
                            purchase_crop_order_id: po_id
                        }
                    }
                ]
            })
            const response = [];
            for (let i = 0; i < invoice_docs.length; i++) {
                const doc = invoice_docs[i];
                if (!doc.doc_url) continue;
                const doc_name = (Object.keys(po_so_doc_type_enum).find((key) => po_so_doc_type_enum[key] === doc.doc_type))
                    ?.split('_')
                    ?.map(w => w[0].toUpperCase() + w.substring(1).toLowerCase())
                    ?.join(' ') ?? '';
                const file_type = await identify_file_type_from_url(doc.doc_url);
                response.push({
                    doc_id: doc.id,
                    doc_name,
                    file_name: doc.doc_name ?? '',
                    doc_url: doc.doc_url ?? '',
                    doc_value: doc.doc_value ?? null,
                    currency_type: doc.currency_type ?? null,
                    doc_created_date: doc.doc_created_date ?? '',
                    doc_type: doc.doc_type ?? null,
                    file_type,
                    doc_for: document_for_enum.invoice
                });
            }
            return resolve(response);
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

module.exports = {
    fetch_invoice_docs_service
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/purchase_order/services/fetch_po_docs_service/fetch_deduction_docs_service.js
const error_log = require('../../../../../middelware/error_log');
const order_delivery_document_type_enums_model = require('../../../../../database/models_v2/procurement_order_deliveries/order_delivery_document_type_enums');
const order_delivery_documents_model = require("../../../../../database/models_v2/procurement_order_deliveries/order_delivery_documents");
const order_delivery_detail_model = require("../../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail");
const { document_for_enum } = require('../../../../../enums/market_linkage/enums/po');
const identify_file_type_from_url = require('../../../../../common_services/url_to_file_type/identify_file_type_from_url');
const procurement_dispatch_document_types = require('../../../../../enums/purchase_order/procurement_dispatch_document_types');
const Op = require('sequelize').Op;

const fetch_deduction_docs_service = ({ po_id, po_pending_inhand_id }) => {
    return new Promise(async (resolve, reject) => {
        try {
            const query = {
                is_active: true
            }
            if (po_pending_inhand_id)
                query.po_pending_inhand_detail_id = po_pending_inhand_id;
            else
                query.purchase_crop_order_id = po_id;

            const deduction_docs = await order_delivery_documents_model.findAll({
                where: {
                    is_active: true,
                },
                include: [
                    {
                        model: order_delivery_detail_model,
                        where: query,
                        required: true
                    },
                    {
                        model: order_delivery_document_type_enums_model,
                        where: {
                            is_active: true,
                            id: {[Op.in]: [
                                procurement_dispatch_document_types.BUYER_DEDUCTION_REPORT
                            ]}
                        },
                        required: true
                    }
                ]
            })
            const response = [];
            for (let i = 0; i < deduction_docs.length; i++) {
                const doc = deduction_docs[i];
                if (!doc.doc_url) continue;
                const doc_name = (doc.order_delivery_document_type_enum.name)
                    ?.split('_')
                    ?.map(w => w[0].toUpperCase() + w.substring(1).toLowerCase())
                    ?.join(' ') ?? '';
                const file_type = await identify_file_type_from_url(doc.doc_url);
                response.push({
                    doc_id: doc.id,
                    doc_name,
                    doc_url: doc.doc_url ?? '',
                    doc_type: doc.order_transport_doc_type_id ?? null,
                    file_type,
                    doc_for: document_for_enum.deduction,
                    doc_back_url: doc.doc_back_url ?? '',
                    doc_status: doc.status ?? null
                });
            }
            return resolve(response);
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

module.exports = {
    fetch_deduction_docs_service
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/purchase_order/services/fetch_po_docs_service/fetch_mandi_docs_service.js
const error_log = require('../../../../../middelware/error_log');
const mandi_taxation_model = require('../../../../../database/models_v2/mandi_taxation/mandi_taxation');
const { document_for_enum } = require('../../../../../enums/market_linkage/enums/po');
const identify_file_type_from_url = require('../../../../../common_services/url_to_file_type/identify_file_type_from_url');
const mandi_tax_doc_type_enum = require('../../../../../enums/market_linkage/enums/mandi_tax_doc_type_enum');

const fetch_mandi_docs_service = ({ po_id, so_id }) => {
    return new Promise(async (resolve, reject) => {
        try {
            const [mandi_doc_urls, mandi_doc_names] = await Promise.all([
                mandi_taxation_model.findOne({
                    where: {
                        is_active: true,
                        buyer_order_detail_id: so_id,
                        purchase_crop_order_id: po_id
                    },
                    attributes: [
                        'id',
                        'status',
                        ['url_6r', '6r'],
                        ['url_1st_9r', '1st 9r'],
                        ['url_1st_9r_gate_pass', '1st 9r Gate Pass'],
                        ['url_stock_transfer_9r', 'Stock Transfer 9r'],
                        ['url_stock_transfer_9r_gate_pass', 'Stock Transfer 9r Gate Pass'],
                        ['url_3rd_9r', '3rd 9r'],
                        ['url_3rd_9r_gate_pass', '3rd 9r Gate Pass'],
                    ],
                    raw: true
                }),
                mandi_taxation_model.findOne({
                    where: {
                        is_active: true,
                        buyer_order_detail_id: so_id,
                        purchase_crop_order_id: po_id
                    },
                    attributes: [
                        'name_6r',
                        'name_1st_9r',
                        'name_1st_9r_gate_pass',
                        'name_stock_transfer_9r',
                        'name_stock_transfer_9r_gate_pass',
                        'name_3rd_9r',
                        'name_3rd_9r_gate_pass',
                    ],
                    raw: true
                })
            ])
            const response = [];
            for (const doc of Object.entries(mandi_doc_urls || {})) {
                if (!doc[1] || doc[0] === 'id' || doc[0] === 'status') continue;
                const file_type = await identify_file_type_from_url(doc[1]);
                let file_name = Object.entries(mandi_doc_names).find((name) => name[0] === "name_" + doc[0]?.toLowerCase()?.split(' ')?.join('_'))?.[1];
                let doc_type = mandi_tax_doc_type_enum[doc[0]?.toLowerCase()?.split(' ')?.join('_')] ?? null;
                response.push({
                    doc_id: mandi_doc_urls.id,
                    doc_name: doc[0] ?? '',
                    file_name: file_name ?? '',
                    doc_url: doc[1] ?? '',
                    file_type,
                    doc_for: document_for_enum.mandi,
                    doc_type
                });
            }

            return resolve(response);
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

module.exports = {
    fetch_mandi_docs_service
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/po_unloading/index.js
const router = require("express").Router();
const fetch_unloading_details_controller = require("./controllers/fetch_unloading_details_controller");

// requires query parameter "po_id" and "so_id" of type number.
router.get("/", fetch_unloading_details_controller);

module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/po_unloading/controllers/fetch_unloading_details_controller.js
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const { fetch_unloading_details_service } = require('../services/fetch_unloading_details_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const po_id = parseInt(req.query.po_id);
        const po_pending_inhand_id = parseInt(req.query.po_pending_inhand_id);
        const so_id = parseInt(req.query.so_id);

        if (!Number.isInteger(po_id) && !Number.isInteger(po_pending_inhand_id)) { throw new ValidationError("'po_id' and 'po_pending_inhand_id' are not valid ids (integer)."); }
        if (!Number.isInteger(so_id)) { throw new ValidationError("'so_id' as query parameter is not a valid id (integer)."); }

        const result = await fetch_unloading_details_service(po_id, po_pending_inhand_id, so_id);
        const jsonRes = create_api_response(true, 'success', result);
        res.status(http_status_code_enum.ok).json(jsonRes);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/po_unloading/services/fetch_unloading_details_service.js
const { Op } = require('sequelize');
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const qc_param_types_model = require('../../../../database/models_v2/procurement_order/qc_param_types');
const buyer_order_detail_model = require('../../../../database/models_v2/buyer_order/buyer_order_detail');
const buyer_detail_model = require('../../../../database/models_v2/buyer/buyer_detail');
const buyer_order_crop_info_model = require('../../../../database/models_v2/buyer_order/buyer_order_crop_info');
const buyer_order_delivery_info_model = require('../../../../database/models_v2/buyer_order/buyer_order_delivery_info');
const buyer_order_quality_check_model = require('../../../../database/models_v2/buyer_order/buyer_order_quality_check');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const order_delivery_documents_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_documents');
const order_delivery_logs_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_logs');
const user_profile_model = require('../../../../database/models/user_profile');
const po_unloading_deduction_report_model = require('../../../../database/models_v2/po_unloading/po_unloading_deduction_report');
const po_unloading_doc_types_model = require('../../../../database/models_v2/po_unloading/po_unloading_doc_types');
const po_unloading_docs_model = require('../../../../database/models_v2/po_unloading/po_unloading_docs');
const po_unloading_qlty_detail_model = require('../../../../database/models_v2/po_unloading/po_unloading_qlty_detail');
const po_unloading_qty_detail_model = require('../../../../database/models_v2/po_unloading/po_unloading_qty_detail');
const po_unloading_qty_types_model = require('../../../../database/models_v2/po_unloading/po_unloading_qty_types');
const order_delivery_stage_enum = require('../../../../enums/purchase_order/order_delivery_stage_enum');
const procurement_dispatch_document_types = require('../../../../enums/purchase_order/procurement_dispatch_document_types');
const { UnloadingQuantityType } = require('../../../../enums/market_linkage/enums/unloading_quantity_enum');
const unloading_doc_type_enum = require('../../../../enums/market_linkage/enums/unloading_doc_type_enum');
const po_pending_inhand_detail_model = require('../../../../database/models_v2/po_unloading/po_pending_inhand_detail');
const { POStatus } = require('../../../../enums/market_linkage/enums/po');
const error_log = require('../../../../middelware/error_log');
// const { pending_po_status } = require('../../../../enums/market_linkage/enums/po_pending_in_hand_enum');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const fetch_unloading_details_service = async (po_id, po_pending_inhand_id, so_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            let sub_purchase_order, purchase_order, po_pending_inhand;
            if (po_pending_inhand_id) {
                sub_purchase_order = await po_pending_inhand_detail_model.findOne({
                    where: {
                        // status: { [Op.gte]: pending_po_status.DISPATCHED },
                        is_active: true,
                        id: po_pending_inhand_id
                    },
                    include: [
                        {
                            model: buyer_order_detail_model,
                            where: {
                                is_active: true,
                                id: so_id
                            },
                            required: true
                        }
                    ]
                })
                if (!sub_purchase_order) {
                    throw new ValidationError(`No PO found with id ${po_pending_inhand_id}. Or PO is not dispatched yet.`);
                }
                purchase_order = await purchase_crop_orders_model.findOne({
                    where: {
                        is_active: true,
                        id: sub_purchase_order.purchase_crop_order_id
                    },
                    include: [
                        {
                            model: user_profile_model,
                            where: {
                                is_active: true
                            },
                            required: true
                        },
                        {
                            model: po_pending_inhand_detail_model,
                            where: {
                                is_active: true
                            },
                            required: true
                        }
                    ]
                })
            } else {
                [purchase_order, po_pending_inhand] = await Promise.all([
                    purchase_crop_orders_model.findOne({
                        where: {
                            status: { [Op.gte]: POStatus.DISPATCHED },
                            is_active: true,
                            id: po_id
                        },
                        include: [
                            {
                                model: buyer_order_detail_model,
                                where: {
                                    is_active: true,
                                    id: so_id
                                },
                                required: true
                            }
                        ]
                    }),
                    po_pending_inhand_detail_model.findOne({
                        where: {
                            previous_buyer_order_detail_id: so_id,
                            purchase_crop_order_id: po_id,
                            is_active: true
                        }
                    })
                ]);
                if (!purchase_order) { throw new ValidationError(`No PO found with id ${po_id}. Or PO is not dispatched yet. Or PO is not mapped to given SO.`); }
            }

            const buyer_order_detail = (sub_purchase_order ? sub_purchase_order.buyer_order_detail : purchase_order.buyer_order_detail) ?? {};
            const pa_profile = purchase_order.user_profile ?? {};
            const [
                unloading_deduction_report,
                order_unloading_docs,
                unloading_quality,
                unloading_quantity,
                po_delivery_detail
            ] = await purchase_order_associations(purchase_order, sub_purchase_order, so_id);

            if (!po_delivery_detail) { throw new ValidationError('po is not dispatched yet.'); }

            const [
                arrival_images,
                delivery_logs
            ] = await po_delivery_associations(po_delivery_detail);

            const [
                buyer_detail,
                crop_info,
                order_delivery_info,
                quality_checks
            ] = await buyer_order_associations(buyer_order_detail);

            const response = generate_response(
                purchase_order,
                sub_purchase_order,
                pa_profile,
                unloading_deduction_report,
                order_unloading_docs,
                unloading_quality,
                unloading_quantity,
                po_delivery_detail,
                buyer_order_detail,
                arrival_images,
                delivery_logs,
                buyer_detail,
                crop_info,
                order_delivery_info,
                quality_checks,
                po_pending_inhand
            );
            resolve(response);
        } catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    })
}

const purchase_order_associations = async (purchase_order, sub_purchase_order, so_id) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const order_delivery_sub_query = {
            is_active: true
        }
        const sub_query = {
            is_active: true
        }
        if (sub_purchase_order) {
            sub_query.po_pending_inhand_id = sub_purchase_order.id;
            order_delivery_sub_query.po_pending_inhand_detail_id = sub_purchase_order.id;
        } else {
            sub_query.purchase_crop_order_id = purchase_order.id;
            order_delivery_sub_query.purchase_crop_order_id = purchase_order.id;
        }

        const [
            unloading_deduction_report,
            order_unloading_docs,
            unloading_quality,
            unloading_quantity,
            po_delivery_detail
        ] = await Promise.all([
            po_unloading_deduction_report_model.findOne({
                where: {
                    ...sub_query,
                    buyer_order_detail_id: so_id
                }
            }),
            po_unloading_docs_model.findAll({
                where: {
                    ...sub_query,
                    buyer_order_detail_id: so_id
                },
                include: {
                    model: po_unloading_doc_types_model,
                    where: {
                        is_active: true
                    }
                }
            }),
            po_unloading_qlty_detail_model.findAll({
                where: {
                    ...sub_query,
                    buyer_order_detail_id: so_id
                }
            }),
            po_unloading_qty_detail_model.findAll({
                where: {
                    ...sub_query,
                    buyer_order_detail_id: so_id
                },
                include: {
                    model: po_unloading_qty_types_model,
                    where: {
                        is_active: true
                    }
                }
            }),
            order_delivery_detail_model.findOne({
                where: order_delivery_sub_query
            })
        ]);
        return [
            unloading_deduction_report || {},
            order_unloading_docs || [],
            unloading_quality || [],
            unloading_quantity || [],
            po_delivery_detail || {}
        ];
    } catch (err) {
        throw err
    }
}

const po_delivery_associations = async (po_delivery_detail) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const [
            arrival_images,
            delivery_logs
        ] = await Promise.all([
            order_delivery_documents_model.findAll({
                where: {
                    is_active: true,
                    order_transport_doc_type_id: {
                        [Op.in]: [
                            procurement_dispatch_document_types.VEHICLE_ARRIVED_AT_BUYER,
                            procurement_dispatch_document_types.BUYER_DEDUCTION_REPORT
                        ]
                    },
                    order_delivery_id: po_delivery_detail.id
                }
            }) ?? [],
            order_delivery_logs_model.findAll({
                where: {
                    is_active: true,
                    order_delivery_stage_id: order_delivery_stage_enum.vehicle_arrived_at_buyer,
                    order_detail_id: po_delivery_detail.id
                }
            }) ?? []
        ]);
        return [
            arrival_images,
            delivery_logs
        ];
    } catch (err) {
        throw err
    }
}

const buyer_order_associations = async (buyer_order_detail) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const [
            buyer_detail,
            crop_info,
            order_delivery_info,
            quality_checks
        ] = await Promise.all([
            buyer_detail_model.findOne({
                where: {
                    is_active: true,
                    id: buyer_order_detail.buyer_id
                }
            }),
            buyer_order_crop_info_model.findOne({
                where: {
                    is_active: true,
                    buyer_order_id: buyer_order_detail.id
                }
            }),
            buyer_order_delivery_info_model.findOne({
                where: {
                    is_active: true,
                    buyer_order_id: buyer_order_detail.id
                }
            }),
            buyer_order_quality_check_model.findAll({
                where: {
                    is_active: true,
                    buyer_order_id: buyer_order_detail.id
                },
                include: {
                    model: qc_param_types_model,
                    where: {
                        is_active: true
                    }
                }
            })
        ]);
        return [
            buyer_detail,
            crop_info,
            order_delivery_info,
            quality_checks
        ];
    } catch (err) {
        throw err
    }
}

const generate_response = (
    purchase_order,
    sub_purchase_order,
    pa_profile,
    unloading_deduction_report,
    order_unloading_docs,
    unloading_quality,
    unloading_quantity,
    po_delivery_detail,
    buyer_order_detail,
    arrival_images,
    delivery_logs,
    buyer_detail,
    crop_info,
    order_delivery_info,
    quality_checks,
    po_pending_inhand
) => {
    const deduction_report_doc = arrival_images.find(ai => ai.order_transport_doc_type_id === procurement_dispatch_document_types.BUYER_DEDUCTION_REPORT) ?? {};

    const arrival_info = {
        arrived_at: (delivery_logs.length > 0) ? delivery_logs[0].log_time : null,
        images: arrival_images.filter(ai => ai.order_transport_doc_type_id !== null).map(ai => ai.doc_url)
    };

    const transport_info = {
        transport_name: po_delivery_detail.transport_name ?? null,
        driver_name: po_delivery_detail.driver_name ?? null,
        driver_mobile_number: po_delivery_detail.driver_mobile_number ?? null,
        vehicle_number: po_delivery_detail.vehicle_number ?? null
    };

    const pa_info = {
        name: pa_profile.name,
        mobile_number: pa_profile.mobile_number
    };

    const buyer_info = {
        name: `${buyer_detail?.trader_name} (${buyer_detail?.legal_name})`,
        state: order_delivery_info?.state_name ?? null,
        district: order_delivery_info?.district_name ?? null,
        address: order_delivery_info ? `${order_delivery_info.address}, ${order_delivery_info.district_name} ${order_delivery_info.pincode}, ${order_delivery_info.state_name}, India` : null
    };

    const sales_order_info = {
        id: buyer_order_detail.id,
        so_number: buyer_order_detail.farmart_id,
        qc_list: quality_checks.map(qc => {
            const qc_type = qc.qc_param_type ?? {};
            const submitted = unloading_quality.find(uc => uc.buyer_order_quality_check_id === qc.id) ?? {};
            return {
                buyer_order_qc_id: qc.id,
                type: qc_type.id,
                name: qc_type.name,
                target_value: qc.required_value,
                actual_value: submitted.actual_value ?? null
            };
        })
    };

    const unloading_docs = Object.entries(unloading_doc_type_enum).map(dt => {
        const submitted = order_unloading_docs.find(ud => ud.po_unloading_doc_type_id === dt[1]) ?? {};
        return {
            type: dt[1],
            name: dt[0],
            url: submitted.doc_url ?? null
        };
    });

    const deduction_report = {
        deduction_amount: unloading_deduction_report?.deduction_amount ?? null,
        deduction_remarks: unloading_deduction_report?.deduction_remarks ?? null,
        deduction_report_url: deduction_report_doc.doc_url ?? null,
        unloading_comment: unloading_deduction_report?.unloading_comment ?? null
    };

    const unloading_details = Object.entries(UnloadingQuantityType).map(qt => {
        const submitted = unloading_quantity.find(uqt => uqt.po_unloading_qty_type_id === qt[1]) ?? {};
        const name = qt[0]
            .split('_')
            .map(w => w[0].toUpperCase() + w.substring(1).toLowerCase())
            .join(' ');
        return {
            type: qt[1],
            name,
            value: submitted.value ?? null
        };
    });

    const po_pending_inhand_details = get_po_pending_inhand_details(sub_purchase_order, purchase_order, po_pending_inhand);

    return {
        id: purchase_order.id,
        po_pending_inhand_id: sub_purchase_order?.id ?? null,
        po_number: purchase_order.farmart_id,
        status: purchase_order.status ?? null,
        po_pending_inhand_status: sub_purchase_order?.status ?? null,
        crop_name: crop_info?.crop_name ?? null,
        variety_name: crop_info?.variety_name ?? null,
        quantity_kg: po_delivery_detail.gross_weight ?? null,
        no_of_bags: po_delivery_detail.number_of_bags ?? null,
        arrival_info,
        transport_info,
        pa_info,
        buyer_info,
        sales_order_info,
        unloading_docs,
        deduction_report,
        unloading_details,
        po_pending_inhand_details
    };
}

const get_po_pending_inhand_details = (sub_purchase_order, purchase_order, po_pending_inhand) => {
    const response = {
        rejected_quantity: po_pending_inhand?.weight_kg ?? null,
        rejected_bags: po_pending_inhand?.number_of_bag ?? null,
        warehouse_id: po_pending_inhand?.warehouse_detail_id ?? null,
        send_to: po_pending_inhand?.send_to ?? null
    }
    if (sub_purchase_order) {
        const pending_po_list = purchase_order.po_pending_inhand_details;
        const po_map_count = sub_purchase_order.po_map_count;
        const pending_po_details = pending_po_list.find((po) => po.po_map_count === po_map_count + 1);
        response.rejected_quantity = pending_po_details?.weight_kg ?? null;
        response.rejected_bags = pending_po_details?.number_of_bag ?? null;
        response.warehouse_id = pending_po_details?.warehouse_detail_id ?? null;
        response.send_to = pending_po_details?.send_to ?? null;
    }
    return response;
}

module.exports = {
    fetch_unloading_details_service,
    purchase_order_associations,
    po_delivery_associations,
    buyer_order_associations,
    generate_response
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/po_so_invoicing/swagger/index.js
module.exports = {
    tags: {
        name: 'po_so_invoicing'
    },
    paths: {
        '/': {
            get: {
                tags: ['po_so_invoicing'],
                summary: 'fetch po so invoicing list',
                description: '',
                operationId: 'fetch_invoicing_list',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'limit',
                        description: 'max limit is 10',
                        type: 'number',
                        required: false
                    },
                    {
                        in: 'query',
                        name: 'page',
                        description: '',
                        type: 'number',
                        required: false
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        }
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/po_so_invoicing/index.js
const router = require('express').Router();
// const fetch_invoicing_list_controller = require('./controllers/fetch_invoicing_list_controller');

// router.get('/', fetch_invoicing_list_controller); /** @deprecated */
module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/po_so_invoicing/controllers/fetch_invoicing_list_controller.js
const error_log = require('../../../../middelware/error_log');
const { fetch_invoicing_list_service } = require('../services/fetch_invoicing_list_service');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
module.exports = async (req, res) => {

    try {
        let { limit, page } = req.query;
        limit = (limit && parseInt(limit) <= 10 && parseInt(limit) >= 0) ? parseInt(limit) : 10;
        page = (page && parseInt(page) >= 1) ? parseInt(page) : 1;
        let invoicing_list = await fetch_invoicing_list_service(limit, page);
        let invoicing_list_response = create_api_response(true, "successfull", invoicing_list);
        return res.status(http_status_code_enum.ok).json(invoicing_list_response);
    }
    catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/po_so_invoicing/services/fetch_invoicing_list_service.js
const error_log = require('../../../../middelware/error_log');
const po_so_invoice_model = require('../../../../database/models_v2/po_so_invoicing/po_so_invoice');
const po_so_invoice_doc_model = require('../../../../database/models_v2/po_so_invoicing/po_so_invoice_doc');
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const procurement_bill_components_model = require('../../../../database/models_v2/procurement_payments/procurement_bill_components');
const buyer_order_detail_model = require('../../../../database/models_v2/buyer_order/buyer_order_detail');
const buyer_order_delivery_info_model = require('../../../../database/models_v2/buyer_order/buyer_order_delivery_info');
const master_merchant_detail_model = require('../../../../database/models_v2/merchant/master_merchant_detail');
const buyer_detail_model = require('../../../../database/models_v2/buyer/buyer_detail');
const purchase_crop_bill_component_enum = require('../../../../enums/market_linkage/enums/purchase_crop_bill_component_enum');
const { procurementTypeToName } = require('../../../../enums/market_linkage/enums/procurementSources');
const order_delivery_detail = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const procurement_lots = require('../../../../database/models_v2/procurement_sample/procurement_lots');
const procurment_crop_sample = require('../../../../database/models_v2/procurement_sample/procurment_crop_sample');
const po_unloading_qty_detail = require('../../../../database/models_v2/po_unloading/po_unloading_qty_detail');
const { UnloadingQuantityType } = require('../../../../enums/market_linkage/enums/unloading_quantity_enum');
const po_unloading_docs = require('../../../../database/models_v2/po_unloading/po_unloading_docs');
const unloading_doc_type_enum = require('../../../../enums/market_linkage/enums/unloading_doc_type_enum');
const po_so_doc_type_enum = require('../../../../enums/market_linkage/enums/po_so_doc_type_enum');
const order_delivery_documents = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_documents');
const dispatch_doc_type = require('../../../../enums/market_linkage/enums/dispatch_doc_type');
const { POStatus } = require('../../../../enums/market_linkage/enums/po');
const invoiceSharingEnum = require('../../../../enums/market_linkage/enums/invoiceSharingEnum');
const identify_file_type_from_url = require('../../../../common_services/url_to_file_type/identify_file_type_from_url');
const Op = require('sequelize').Op;

const fetch_invoicing_list_service = (limit, page) => {
    return new Promise(async (resolve, reject) => {
        try {
            const resp = {
                invoicing_docs: [],
                total_records: 0
            };
            const po_so_invoice_list = await po_so_invoice_model.findAll({
                where: {
                    is_active: true
                },
                include: [
                    {
                        model: purchase_crop_orders_model,
                        where: {
                            is_active: true
                        },
                        required: true
                    },
                    {
                        model: buyer_order_detail_model,
                        where: {
                            is_active: true
                        },
                        required: true
                    },
                    {
                        model: po_so_invoice_doc_model,
                        where: {
                            is_active: true
                        },
                        required: false
                    }
                ],
                order: [['status', 'ASC'], ['updatedAt', 'ASC']]
            });

            if (po_so_invoice_list.length > 0) {
                const sorted_by_po_so_status = sort_by_po_so_status(po_so_invoice_list);
                const sorted_by_invoice_pending = sort_by_invoice_pending(sorted_by_po_so_status, page, limit);
                const invoicing_doc_id = sorted_by_invoice_pending.map((doc) => doc.id);
                const [purchase_orders, buyer_orders] = await get_purchase_and_buyer_order(invoicing_doc_id);
                resp.invoicing_docs = await generate_response(sorted_by_invoice_pending, purchase_orders, buyer_orders);
                resp.total_records = po_so_invoice_list.length
            }

            return resolve(resp);
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

const sort_by_po_so_status = (po_so_invoice_list) => {
    // eslint-disable-next-line no-useless-catch
    try {
        let sorted_invoice_docs = po_so_invoice_list.filter((invoice) =>
            invoice.purchase_crop_order?.status === POStatus.READY_TO_DISPATCH &&
            invoice.buyer_order_detail?.invoice_sharing === invoiceSharingEnum.beforeUnloading &&
            invoice.status === 0
        )

        sorted_invoice_docs = sorted_invoice_docs.concat(po_so_invoice_list.filter((invoice) =>
            invoice.purchase_crop_order?.status >= POStatus.UNLOADING &&
            invoice.buyer_order_detail?.invoice_sharing === invoiceSharingEnum.afterUnloading &&
            invoice.status === 0
        ))

        sorted_invoice_docs = sorted_invoice_docs.concat(po_so_invoice_list.filter((invoice) =>
            !sorted_invoice_docs.find((record) => record.id === invoice.id)
        ))
        return sorted_invoice_docs;
    } catch (error) {
        throw error
    }
}

const sort_by_invoice_pending = (po_so_invoice_list, page, limit) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const pending_invoice_docs = po_so_invoice_list
            .filter((doc) => !(doc.po_so_invoice_docs
                ?.find((invoice_doc) => invoice_doc.doc_type === po_so_doc_type_enum.INVOICE)) &&
                doc.status === 0);
        const remaining_docs = po_so_invoice_list.filter((doc) => !pending_invoice_docs.includes(doc));
        const sorted_invoice_docs = pending_invoice_docs.concat(remaining_docs);
        return sorted_invoice_docs.slice((page - 1) * limit, page * limit);
    } catch (error) {
        throw error
    }
}

const get_purchase_and_buyer_order = async (invoicing_doc_id) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const [purchase_orders, buyer_orders] = await Promise.all([
            purchase_crop_orders_model.findAll({
                where: {
                    is_active: true
                },
                include: [
                    {
                        model: po_so_invoice_model,
                        where: {
                            is_active: true,
                            id: { [Op.in]: invoicing_doc_id }
                        },
                        required: true
                    },
                    {
                        model: order_delivery_detail,
                        where: {
                            is_active: true
                        },
                        include: {
                            model: order_delivery_documents,
                            where: {
                                is_active: true,
                                order_delivery_document_type_id: dispatch_doc_type['handover document']
                            },
                            required: true
                        },
                        required: false
                    },
                    {
                        model: master_merchant_detail_model,
                        where: {
                            is_active: true
                        },
                        required: false
                    },
                    {
                        model: procurement_lots,
                        where: {
                            is_active: true
                        },
                        include: [
                            {
                                model: procurment_crop_sample,
                                where: {
                                    is_active: true
                                }
                            },
                            {
                                model: procurement_bill_components_model,
                                where: {
                                    is_active: true,
                                    order_bill_component_id: purchase_crop_bill_component_enum.mandi_tax
                                }
                            }
                        ],
                        required: false
                    }
                ]
            }),
            buyer_order_detail_model.findAll({
                where: {
                    is_active: true
                },
                include: [
                    {
                        model: po_so_invoice_model,
                        where: {
                            is_active: true,
                            id: { [Op.in]: invoicing_doc_id }
                        },
                        required: true
                    },
                    {
                        model: buyer_detail_model,
                        where: {
                            is_active: true
                        },
                        required: false
                    },
                    {
                        model: po_unloading_qty_detail,
                        where: {
                            is_active: true,
                            po_unloading_qty_type_id: UnloadingQuantityType.ACCEPTED_WEIGHT
                        },
                        required: false
                    },
                    {
                        model: po_unloading_docs,
                        where: {
                            is_active: true,
                            po_unloading_doc_type_id: unloading_doc_type_enum['UNLOADING RECEIPT']
                        },
                        required: false
                    },
                    {
                        model: buyer_order_delivery_info_model,
                        where: {
                            is_active: true
                        },
                        as: 'delivery_info',
                        required: false
                    }
                ]
            })
        ])
        return [purchase_orders, buyer_orders]
    } catch (error) {
        throw error
    }
}

const generate_response = async (po_so_invoice_list, purchase_orders, buyer_orders) => {
    const resp = [];
    try {
        for (let index = 0; index < po_so_invoice_list.length; index++) {
            const po_so_invoice = po_so_invoice_list[index];
            const purchase_crop_order = purchase_orders
                .find((po) => po.po_so_invoices
                    ?.find((doc) => doc.id === po_so_invoice.id));
            const buyer_order_detail = buyer_orders
                .find((so) => so.po_so_invoices
                    ?.find((doc) => doc.id === po_so_invoice.id));
            const is_mandi_tax_paid = purchase_crop_order?.procurement_lot?.procurment_crop_sample?.is_mandi_tax_paid;
            const po_so_invoice_doc = (po_so_invoice.po_so_invoice_docs || []).find(doc => doc.doc_type === po_so_doc_type_enum.INVOICE);
            const po_so_credit_note_doc = (po_so_invoice.po_so_invoice_docs || []).find(doc => doc.doc_type === po_so_doc_type_enum.CREDIT_NOTE);
            const po_so_debit_note_doc = (po_so_invoice.po_so_invoice_docs || []).find(doc => doc.doc_type === po_so_doc_type_enum.DEBIT_NOTE);
            const po_so_eway_bill_doc = (po_so_invoice.po_so_invoice_docs || []).find(doc => doc.doc_type === po_so_doc_type_enum.EWAY_BILL);
            const mandi_tax_value = purchase_crop_order?.procurement_lot?.procurement_order_bill_components;
            const buyer_accepted_weight = buyer_order_detail?.po_unloading_qty_details
                ?.find((qty) => qty.purchase_crop_order_id === purchase_crop_order?.id)?.value ?? null;
            const unloading_doc_url = buyer_order_detail?.po_unloading_docs
                ?.find((doc) => doc.purchase_crop_order_id === purchase_crop_order?.id)?.doc_url ?? '';
            const _po_so_invoice = {
                id: po_so_invoice.id,
                po_id: purchase_crop_order?.id,
                po_number: purchase_crop_order?.farmart_id || '',
                so_Id: buyer_order_detail?.id || null,
                so_number: buyer_order_detail?.farmart_id || '',
                po_so_map_no: po_so_invoice.po_so_map_no || null,
                status_of_po: purchase_crop_order?.status || null,
                po_type: procurementTypeToName[purchase_crop_order?.master_merchant_detail?.profession_id || 0],
                buyer_name: buyer_order_detail?.buyer_detail?.legal_name || '',
                delivery_location: buyer_order_detail?.delivery_info?.address || '',
                status: po_so_invoice.status || 0,
                invoice_on_gross: buyer_order_detail?.is_invoice_on_gross || null,
                invoicing_stage: buyer_order_detail?.invoice_sharing || null,
                mandi_tax_paid_at_source: is_mandi_tax_paid ? (mandi_tax_value?.[0]?.amount || null) : false,
                buyer_accepted_weight,
                handover_weight: purchase_crop_order?.order_delivery_detail?.gross_weight || null,
                unloading_doc_url,
                po_so_invoice_doc_url: po_so_invoice_doc?.doc_url || '',
                po_so_invoice_doc_name: po_so_invoice_doc?.doc_name || '',
                po_so_invoice_doc_value: po_so_invoice_doc?.doc_value || null,
                po_so_invoice_currency: po_so_invoice_doc?.currency_type || null,
                po_so_invoice_doc_created_date: po_so_invoice_doc?.doc_created_date || '',
                po_so_invoice_file_type: await identify_file_type_from_url(po_so_invoice_doc?.doc_url) || '',
                po_so_credit_note_doc_url: po_so_credit_note_doc?.doc_url || '',
                po_so_credit_note_doc_name: po_so_credit_note_doc?.doc_name || '',
                po_so_credit_note_doc_value: po_so_credit_note_doc?.doc_value || null,
                po_so_credit_note_currency: po_so_credit_note_doc?.currency_type || null,
                po_so_credit_note_doc_created_date: po_so_credit_note_doc?.doc_created_date || '',
                po_so_credit_note_file_type: await identify_file_type_from_url(po_so_credit_note_doc?.doc_url) || '',
                po_so_debit_note_doc_url: po_so_debit_note_doc?.doc_url || '',
                po_so_debit_note_doc_name: po_so_debit_note_doc?.doc_name || '',
                po_so_debit_note_doc_value: po_so_debit_note_doc?.doc_value || null,
                po_so_debit_note_currency: po_so_debit_note_doc?.currency_type || null,
                po_so_debit_note_doc_created_date: po_so_debit_note_doc?.doc_created_date || '',
                po_so_debit_note_file_type: await identify_file_type_from_url(po_so_debit_note_doc?.doc_url) || '',
                po_so_eway_bill_doc_url: po_so_eway_bill_doc?.doc_url || '',
                po_so_eway_bill_doc_name: po_so_eway_bill_doc?.doc_name || '',
                po_so_eway_bill_doc_value: po_so_eway_bill_doc?.doc_value || null,
                po_so_eway_bill_currency: po_so_eway_bill_doc?.currency_type || null,
                po_so_eway_bill_doc_created_date: po_so_eway_bill_doc?.doc_created_date || '',
                po_so_eway_bill_file_type: await identify_file_type_from_url(po_so_eway_bill_doc?.doc_url) || '',
                handover_document_url: purchase_crop_order?.order_delivery_detail?.order_delivery_documents?.[0].doc_url || '',
                e_invoice_required: buyer_order_detail.e_invoice_required
            };
            resp.push(_po_so_invoice);
        }
        return resp;
    } catch (error) {
        error_log(error);
        return resp;
    }
}

module.exports = {
    sort_by_po_so_status,
    sort_by_invoice_pending,
    get_purchase_and_buyer_order,
    generate_response,
    fetch_invoicing_list_service
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/multimedia/swagger/index.js
module.exports = {
  tags: {
    name: "multimedia",
  },
  paths: {
    "/image": {
      post: {
        tags: ["multimedia"],
        summary: "upload image",
        description: "",
        operationId: "image_upload_stream",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "formData",
            name: "file",
            type: "file",
            description: "key name should be file",
          },
          {
            in: "formData",
            name: "file_name",
            type: "String",
            description: "",
            require:true
          },
          {
            in: "formData",
            name: "category",
            type: "String",
            require:true,
            description: "category",
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
  },
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/multimedia/index.js
const router = require("express").Router();
const authorize = require("../../../middelware/authorized_routes");
const user_roles_enum = require("../../../entities/metadata/enums/user_roles");
const upload_middleware = require("../../../middelware/upload_file_multer");

//controller
const image_upload_v2_controller = require("./controllers/image_upload_v2_controller");

//routes 
router.post("/image", upload_middleware, image_upload_v2_controller);

/**
 * this api is updated version of image upload api of v1
 * it will place all the assests in one place category wise.
 */
module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/multimedia/controllers/image_upload_v2_controller.js
const error_logs = require('../../../../middelware/error_log');
const file_upload = require('../services/file_upload');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const image = req.file;
        const file_name = req.body.file_name;
        const category = req.body.category;
        if (!image || !category || !file_name) {
            throw new ValidationError('file,file_name and category are mandatory fields');
        }

        if (image.mimetype.slice(0, 5) !== 'image') {
            throw new ValidationError('only image files allowed')
        }
        const extension = image.mimetype.slice(6) ? ('.' + image.mimetype.slice(6)) : '';
        const data = await file_upload(image, 'image', file_name, category, extension);
        res.status(200).json({
            message: 'success',
            data,
            status: true
        })
    } catch (ex) {
        error_logs(ex)
        res.status(400).json({
            status: false,
            message: ex.message
        })
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/multimedia/services/file_upload.js
const app_log = require('../../../../middelware/error_log');
const config = require('../../../../config/global_config');
const AWS = require('aws-sdk');
const get_formatted_s3_url = require('../../../../common_services/aws/format_s3_url');
let { S3_BUCKET_NAME } = require('../../../../constants/global');
const env_enum = require('../../../../enums/env/env_enum');
const global_config = require('../../../../config/global_config');

const white_listed_file_types = ['image', 'pdf', 'video', 'audio'];
const { ValidationError } = require('../../../../utilities/error/custom_error');

const file_upload = async (file, type, file_name, category, extension = '') => {
    return new Promise(async (resolve, reject) => {
        try {
            const isFileAllowed = white_listed_file_types.filter(function (fileType) {
                return type.includes(fileType);
            });

            if (isFileAllowed.length === 0) {
                throw new ValidationError('file type mismatch');
            }
            let folder_name = 'metadata'
            let env_name = 'local';
            if (config.env === 'development' || config.env === 'production') {
                env_name = config.env;
            }
            folder_name = folder_name + '/' + env_name + '/' + category + '/' + file_name;
            // Configure AWS to use promise
            AWS.config.setPromisesDependency(require('bluebird'));
            if (global_config.env === env_enum.development) {
                AWS.config.update({ region: config.AWS_REGION });
                S3_BUCKET_NAME = require('../../../../constants/global').S3_BUCKET_NAME_DEV;
            } else if (global_config.env === env_enum.staging) {
                AWS.config.update({ region: config.AWS_REGION });
                S3_BUCKET_NAME = require('../../../../constants/global').S3_BUCKET_NAME_STAGE;
            } else {
                AWS.config.update({ accessKeyId: config.AWS_ACCESS_KEY_ID, secretAccessKey: config.AWS_SECRET_ACCESS_KEY, region: config.AWS_REGION });
            }

            // Create an s3 instance
            const s3 = new AWS.S3();

            const params = {
                Bucket: S3_BUCKET_NAME,
                Key: folder_name + '/' + Date.now().toString() + extension, // type is not required
                Body: file.buffer,
                // ACL: 'public-read',
                ContentEncoding: file.encoding, // required
                ContentType: file.mimetype // required. Notice the back ticks
            }

            // The upload() is used instead of putObject() as we'd need the location url and assign that to our user profile/database
            // see: http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#upload-property
            let location = '';
            // let key = '';
            try {
                const { Location } = await s3.upload(params).promise();
                location = Location;
                // key = Key;
                location = await get_formatted_s3_url(location, params.Bucket);
            } catch (ex) {
                app_log(ex);
                reject({ message: ex.message });
            }
            resolve(location);
        } catch (err) {
            app_log(err);
            reject({ message: err.message });
        }
    })

}

module.exports = file_upload;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/campaign/swagger/index.js
module.exports = {
  tags: {
    name: "campaign",
  },
  paths: {
    "/": {
      get: {
        tags: ["campaign"],
        summary: "get all campaigns details",
        description: "",
        operationId: "get_all_campaigns_details",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "page_no",
            description: "",
            required: false,
            type: "number"
          },
          {
            in: "query",
            name: "limit",
            description: "",
            required: false,
            type: "number"
          },
          {
            in: "query",
            name: "search_param",
            description: "",
            required: false,
            type: "string"
          }
        ],
        responses: {
          400: {
            description: "Invalid input"
          },
          200: {
            description: "success"
          }
        }
      },
      post: {
        tags: ["campaign"],
        summary: "create campaign",
        description: "",
        operationId: "create_campaign",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "body",
            name: "body",
            description: "",
            required: true,
            schema: {
              required: [
                "state_id",
                "district_ids",
                "crop_id",
                "quantity_in_ton",
                "min_price",
                "max_price",
                "start_date",
                "end_date",
                "comment",
                "banner_img_url"
              ],
              properties: {
                state_id: {
                  type: "number"
                },
                district_ids: {
                  type: "number"
                },
                crop_id: {
                  type: "number"
                },
                quantity_in_ton: {
                  type: "number"
                },
                min_price: {
                  type: "number"
                },
                max_price: {
                  type: "number"
                },
                start_date: {
                  type: "string"
                },
                end_date: {
                  type: "string"
                },
                comment: {
                  type: "string"
                },
                banner_img_url: {
                  type: "string"
                },
                platform_id: {
                  type: "number"
                },
                target_mobile_numbers: {
                  type: "string"
                }
              }
            }
          }
        ],
        responses: {
          400: {
            description: "Invalid input"
          },
          200: {
            description: "success"
          }
        }
      }
    },
    "/force_shut": {
      post: {
        tags: ["campaign"],
        summary: "force shut campaign",
        description: "",
        operationId: "force_shut_campaign",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "body",
            name: "body",
            description: "",
            required: true,
            schema: {
              required: [
                "campaign_id"
              ],
              properties: {
                campaign_id: {
                  type: "number"
                },
                reason: {
                  type: "string"
                }
              }
            }
          }
        ],
        responses: {
          400: {
            description: "Invalid input"
          },
          200: {
            description: "success"
          }
        }
      }
    },
    "/custom_mobile_number_format": {
      get: {
        tags: ["campaign"],
        summary: "download formart for custom mobile number",
        description: "",
        operationId: "download_campaign_custom_mobile_format",
        security: [{ Bearer: ["read"] }],
        parameters: [],
        responses: {
          400: {
            description: "Invalid input"
          },
          200: {
            description: "success"
          }
        }
      }
    },
    "/lead": {
      get: {
        tags: ["campaign"],
        summary: "get leads by merchant id",
        description: "",
        operationId: "get_leads_by_merchant_id",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "master_merchant_detail_id",
            description: "",
            required: true,
            type: "number"
          },
          {
            in: "query",
            name: "is_rejected",
            description: "",
            required: false,
            type: "boolean"
          },
          {
            in: "query",
            name: "page_no",
            description: "",
            required: false,
            type: "number"
          },
          {
            in: "query",
            name: "limit",
            description: "",
            required: false,
            type: "number"
          }
        ],
        responses: {
          400: {
            description: "Invalid input"
          },
          200: {
            description: "success"
          }
        }
      },
      post: {
        tags: ["campaign"],
        summary: "generate new lead",
        description: "",
        operationId: "generate_new_lead",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "body",
            name: "body",
            description: "",
            required: true,
            schema: {
              required: [
                "weight_in_kg",
                "price_per_kg",
                "crop_id",
                "source"
              ],
              properties: {
                merchant_detail_id: {
                  type: "number"
                },
                master_merchant_detail_id: {
                  type: "number"
                },
                weight_in_kg: {
                  type: "number"
                },
                price_per_kg: {
                  type: "number"
                },
                crop_id: {
                  type: "number"
                },
                source: {
                  type: "number"
                },
                campaign_id: {
                  type: "number"
                }
              }
            }
          }
        ],
        responses: {
          400: {
            description: "Invalid input"
          },
          200: {
            description: "success"
          }
        }
      },
      patch: {
        tags: ["campaign"],
        summary: "take action on lead",
        description: "",
        operationId: "action_on_lead",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "body",
            name: "body",
            description: "",
            required: true,
            schema: {
              required: [
                "lead_id",
                "stage"
              ],
              properties: {
                lead_id: {
                  type: "number"
                },
                stage: {
                  type: "number"
                }
              }
            }
          }
        ],
        responses: {
          400: {
            description: "Invalid input"
          },
          200: {
            description: "success"
          }
        }
      }
    },
    "/purchase_order": {
      get: {
        tags: ["campaign"],
        summary: "get purchase order list",
        description: "",
        operationId: "get_purchase_order_list",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "master_merchant_detail_id",
            description: "",
            required: false,
            type: "number"
          },
          {
            in: "query",
            name: "lead_id",
            description: "",
            required: false,
            type: "number"
          },
          {
            in: "query",
            name: "page_no",
            description: "",
            required: false,
            type: "number"
          },
          {
            in: "query",
            name: "limit",
            description: "",
            required: false,
            type: "number"
          }
        ],
        responses: {
          400: {
            description: "Invalid input"
          },
          200: {
            description: "success"
          }
        }
      },
      patch: {
        tags: ["campaign"],
        summary: "take action on purchase order",
        description: "",
        operationId: "action_on_purchase_order",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "body",
            name: "body",
            description: "",
            required: true,
            schema: {
              required: [
                "action",
                "po_id"
              ],
              properties: {
                action: {
                  type: "number"
                },
                po_id: {
                  type: "number"
                },
                tnc_url: {
                  type: "string"
                }
              }
            }
          }
        ],
        responses: {
          400: {
            description: "Invalid input"
          },
          200: {
            description: "success"
          }
        }
      }
    },
    "/purchase_order/details": {
      get: {
        tags: ["campaign"],
        summary: "get purchase order details",
        description: "",
        operationId: "get_purchase_order_details",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "po_id",
            description: "",
            required: true,
            type: "number"
          }
        ],
        responses: {
          400: {
            description: "Invalid input"
          },
          200: {
            description: "success"
          }
        }
      }
    },
    "/lead/list": {
      post: {
        tags: ["campaign"],
        summary: "fetch all leads",
        description: "",
        operationId: "fetch_all_leads",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "body",
            name: "body",
            description: "",
            required: true,
            schema: {
              required: [],
              properties: {
                state_id: {
                  type: "number"
                },
                district_id: {
                  type: "number"
                },
                crop_id: {
                  type: "number"
                },
                status: {
                  type: "array",
                  items: {
                    type: "number"
                  }
                },
                merchant_detail_id: {
                  type: "number"
                },
                page_no: {
                  type: "number"
                },
                limit: {
                  type: "number"
                }
              }
            }
          }
        ],
        responses: {
          400: {
            description: "Invalid input"
          },
          200: {
            description: "success"
          }
        }
      }
    },
    "/lead/action_on_lead": {
      post: {
        tags: ["campaign"],
        summary: "submit action on lead",
        description: "",
        operationId: "submit_action_on_lead",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "body",
            name: "body",
            description: "",
            required: true,
            schema: {
              required: ["lead_pa_map_list"],
              properties: {
                lead_pa_map_list: {
                  type: "array",
                  items: {
                    type: "object",
                    required: ['lead_id'],
                    properties: {
                      action_performed: {
                        type: "number"
                      },
                      lead_id: {
                        type: "string"
                      },
                      pa_id: {
                        type: "number"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        responses: {
          400: {
            description: "Invalid input"
          },
          200: {
            description: "success"
          }
        }
      }
    },
    "/inquiry": {
      post: {
        tags: ["campaign"],
        summary: "submit campaign lead v2",
        description: "",
        operationId: "create_campaign_lead_v2",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "formData",
            name: "campaign_id",
            description: "",
            required: false,
            type: "number",
          },
          {
            in: "formData",
            name: "lat",
            description: "",
            required: true,
            type: "string",
          },
          {
            in: "formData",
            name: "long",
            description: "",
            required: true,
            type: "string",
          },
          {
            in: "formData",
            name: "price",
            description: "",
            required: true,
            type: "number",
          },
          {
            in: "formData",
            name: "quantity",
            description: "",
            required: true,
            type: "number",
          },
          {
            in: "formData",
            name: "crop_type_id",
            description: "mysql crop_id",
            required: true,
            type: "string",
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/crops": {
      get: {
        tags: ["campaign"],
        summary: "fetch crops for campaigns with the prices",
        description: "fetch crops for campaigns with the prices",
        operationId: "get_crops_for_campaigns",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "header",
            name: "language",
            description: "language enum",
            required: false,
            type: "number",
          },
          {
            in: "query",
            name: "page_no",
            description: "page_no",
            required: false,
            type: "number"
          },
          {
            in: "query",
            name: "limit",
            description: "limit",
            required: false,
            type: "number"
          },
          {
            in: "query",
            name: "district_id",
            description: "district_id",
            required: true,
            type: "number"
          },
          {
            in: "query",
            name: "state_id",
            description: "state_id",
            required: true,
            type: "number"
          }
        ],
        responses: {
          400: {
            description: "Invalid input"
          },
          200: {
            description: "success"
          }
        },
        deprecated: true
      }
    } 
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/campaign/index.js
const user_role = require("../../../enums/user_profile/user_role");
const authorize = require("../../../middelware/authorized_routes");
const action_on_lead_controller = require("./controllers/action_on_lead_controller");
const action_on_purchase_order_controller = require("./controllers/action_on_purchase_order_controller");
const fetch_leads_by_retailer_id_controller = require("./controllers/fetch_leads_by_retailer_id_controller");
const fetch_po_details_by_id_controller = require("./controllers/fetch_po_details_by_id_controller");
const fetch_po_list_by_retailer_id_controller = require("./controllers/fetch_po_list_by_retailer_id_controller");
const generate_new_lead_controller = require("./controllers/generate_new_lead_controller");
const fetch_all_leads_controller = require("./controllers/fetch_all_leads_controller");
const submit_action_on_lead_controller = require("./controllers/submit_action_on_lead_controller");
const fetch_all_campaign_details_controller = require("./controllers/fetch_all_campaign_details_controller");
const download_campaign_custom_mobile_format_controller = require("./controllers/download_campaign_custom_mobile_format_controller");
const create_campaign_controller = require("./controllers/create_campaign_controller");
const force_shut_campaign_controller = require("./controllers/force_shut_campaign_controller");
const create_price_polling_v2_controller = require("./controllers/create_price_polling_v2_controller");
const router = require("express").Router();
const fetch_crops_for_campaign_with_prices = require("../campaign/controllers/fetch_crops_for_campaign_controller");
const swagger_path_from_auth = '../apis/v2/campaign/swagger';

router.get("/", fetch_all_campaign_details_controller);
// router.get("/crops", fetch_crops_for_campaign_with_prices); // ********deprecated ******
router.get("/custom_mobile_number_format", download_campaign_custom_mobile_format_controller);
router.post("/", create_campaign_controller);
router.post("/force_shut", force_shut_campaign_controller);

router.get("/lead", authorize([user_role.retailer_system]), fetch_leads_by_retailer_id_controller);
router.get("/purchase_order", authorize([user_role.retailer_system]), fetch_po_list_by_retailer_id_controller);
router.get("/purchase_order/details", authorize([user_role.retailer_system]), fetch_po_details_by_id_controller);
router.post("/lead", authorize([user_role.retailer_system]), generate_new_lead_controller);
router.patch("/lead", authorize([user_role.retailer_system]), action_on_lead_controller);
router.patch("/purchase_order", authorize([user_role.retailer_system]), action_on_purchase_order_controller);
router.post("/lead/list", fetch_all_leads_controller);
router.post("/lead/action_on_lead", submit_action_on_lead_controller);
router.post("/inquiry", authorize([user_role.Merchant]), create_price_polling_v2_controller);


module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/campaign/controllers/generate_new_lead_controller.js
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const joi = require('joi');
const { generate_new_lead_service } = require('../services/generate_new_lead_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const validation_result = lead_schema.validate(req.body);
        if (validation_result.error) throw new ValidationError(validation_result.error.message);
        const {
            master_merchant_detail_id,
            merchant_detail_id,
            weight_in_kg,
            price_per_kg,
            crop_id,
            source,
            campaign_id
        } = validation_result.value;
        const campaign_lead = await generate_new_lead_service(
            master_merchant_detail_id,
            merchant_detail_id,
            weight_in_kg,
            price_per_kg,
            crop_id,
            source,
            campaign_id
        );
        const response = create_api_response(true, 'success', campaign_lead);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}

const lead_schema = joi.object({
    master_merchant_detail_id: joi.number(),
    merchant_detail_id: joi.number().required(),
    weight_in_kg: joi.number().required(),
    price_per_kg: joi.number().required(),
    crop_id: joi.number().required(),
    source: joi.number().required(),
    campaign_id: joi.number()
});



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/campaign/controllers/create_price_polling_v2_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const create_price_polling_v2_service = require('../services/create_price_polling_v2_service');
const language_enum = require('../../../../entities_v2/metadata/enums/global/langauge');
const campaign_source_enum = require('../../../../entities_v2/metadata/enums/campaign/source_enum');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const campaign_id = req.body.campaign_id;
        const country_code = req.user.country?.country_code;
        const price_per_quintal = +req.body.price || 0;// per quintal
        const quantity_in_tonne = +req.body.quantity || 0;// in tonne
        const crop_type_id = req.body.crop_type_id;
        const merchant_id = req.user.user_profile_id;
        const language_id = +req.headers.language || language_enum.hindi;
        const master_merchant_id = req.user.master_merchant_id || null;
        const mobile_number = req.user.mobile_number + '';
        let lat = req.body.lat || null;
        let long = req.body.long || null;
        if (!price_per_quintal || !quantity_in_tonne || !lat || !long) {
            throw new ValidationError('lat,long,price_per_quintal and quantity_in_tonne are mandatory parameter');
        }
        lat += '';
        long += '';
        if (!campaign_id && !crop_type_id) {
            throw new ValidationError('must have either campaign_id or crop_type_id parameter');
        }
        // respective service to be called
        let source = campaign_source_enum.campaign;
        if (!campaign_id) {
            source = campaign_source_enum.retailer;
        }
        const price_polling_data = await create_price_polling_v2_service(lat, long, campaign_id, price_per_quintal, quantity_in_tonne, crop_type_id, merchant_id, master_merchant_id, language_id, source, country_code, mobile_number)
        const response = create_api_response(true, 'success', price_polling_data);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/campaign/controllers/fetch_crops_for_campaign_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const language_enum = require('../../../../entities_v2/metadata/enums/global/langauge');
const fetch_crops_for_campaign_service = require('../services/fetch_crops_for_campaign_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const language = +req.headers.language || language_enum.english;
        const page_no = +req.query.page_no || 1;
        const limit = +req.query.limit || 10;
        const district_id = +req.query.district_id || null;
        const state_id = +req.query.state_id || null;

        if (!district_id || !state_id) {
            throw new ValidationError('district_id and state_id are mandatory parameters !!');
        }

        const data = await fetch_crops_for_campaign_service(page_no, limit, language, district_id, state_id);

        const response = create_api_response(true, 'success', data);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res
            .status(http_status_code_enum.bad_request)
            .json(create_api_response(false, err.message));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/campaign/controllers/fetch_leads_by_retailer_id_controller.js
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const { fetch_leads_by_retailer_id_service } = require('../services/fetch_leads_by_retailer_id_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        let { master_merchant_detail_id, is_rejected, page_no, limit } = req.query;
        limit = limit ? parseInt(limit) : 50;
        page_no = page_no ? parseInt(page_no) : 1;
        if (!master_merchant_detail_id) { throw new ValidationError('master_merchant_detail_id is missing'); }
        const campaign_leads = await fetch_leads_by_retailer_id_service(master_merchant_detail_id, is_rejected, page_no, limit);
        const response = create_api_response(true, 'success', campaign_leads);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/campaign/controllers/action_on_lead_controller.js
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const joi = require('joi');
const { action_on_lead_service } = require('../services/action_on_lead_service');
// const lead_stage_enum = require('../../../../enums/order_tracking/lead_stage_enum');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const validation_result = po_action_schema.validate(req.body);
        if (validation_result.error) throw new ValidationError(validation_result.error.message);
        const { lead_id, stage } = validation_result.value;
        const taken_action = await action_on_lead_service(lead_id, stage)
        const response = create_api_response(true, 'success', taken_action);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}

const po_action_schema = joi.object({
    lead_id: joi.number().required(),
    stage: joi.number().required()
});



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/campaign/controllers/submit_action_on_lead_controller.js
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const submit_action_on_lead_service = require('../services/submit_action_on_lead_service');
const joi = require('joi');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const validation_result = action_schema.validate(req.body);
        if (validation_result.error) throw new ValidationError(validation_result.error.message);
        const { lead_pa_map_list } = validation_result.value;
        const pa_mapped = await submit_action_on_lead_service({ lead_pa_map_list });
        const response = create_api_response(true, 'success', pa_mapped);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}

const action_schema = joi.object({
    lead_pa_map_list: joi.array().items(joi.object({
        action_performed: joi.number().allow(null),
        lead_id: joi.string().trim().required(),
        pa_id: joi.number().allow(null)
    })).required()
});



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/campaign/controllers/create_campaign_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const joi = require('joi');
const { create_campaign_service } = require('../services/create_campaign_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const validation_result = campaign_schema.validate(req.body);
        if (validation_result.error) throw new ValidationError(validation_result.error.message);
        let {
            state_id,
            district_ids = [],
            crop_id,
            quantity_in_ton,
            min_price,
            max_price,
            start_date,
            end_date,
            comment,
            banner_img_url,
            platform_id,
            target_mobile_numbers
        } = validation_result.value;
        const user_profile_id = req.user?.user_profile_id;
        if (!user_profile_id) { throw new ValidationError('Unauthorised'); }
        target_mobile_numbers = target_mobile_numbers || '';
        target_mobile_numbers = target_mobile_numbers
            .split(',')
            .map((num) => num.trim());
        if (target_mobile_numbers.length > 100) { throw new ValidationError('Only 100 phone numbers are allowed to send custom campaign.') }
        target_mobile_numbers = target_mobile_numbers.join(',');

        const campaign = await create_campaign_service({
            state_id,
            district_ids,
            crop_id,
            quantity_in_ton,
            min_price,
            max_price,
            start_date,
            end_date,
            comment,
            banner_img_url,
            platform_id,
            target_mobile_numbers,
            user_profile_id
        });
        const response = create_api_response(true, 'success', campaign);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}

const campaign_schema = joi.object({
    state_id: joi.number().required(),
    district_ids: joi.array().items(joi.number().required()).required(),
    crop_id: joi.number().required(),
    quantity_in_ton: joi.number().required(),
    min_price: joi.number().required(),
    max_price: joi.number().required(),
    start_date: joi.date().required(),
    end_date: joi.date().required(),
    comment: joi.string().required(),
    banner_img_url: joi.string().required(),
    platform_id: joi.number().allow(null),
    target_mobile_numbers: joi.string().allow('').allow(null)
});



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/campaign/controllers/force_shut_campaign_controller.js
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const error_log = require('../../../../middelware/error_log');
const { force_shut_campaign_service } = require('../services/force_shut_campaign_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { campaign_id, reason = '' } = req.body;
        if (!campaign_id) { throw new ValidationError('campaign_id is mandatory field'); }
        const campaign = await force_shut_campaign_service({ campaign_id, reason });
        const response = create_api_response(true, 'success', campaign);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/campaign/controllers/fetch_all_leads_controller.js
const http_status_code_enum = require("../../../../enums/global/http_status_codes");
const error_log = require("../../../../middelware/error_log");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const { fetch_all_leads_service } = require("../services/fetch_all_leads_service");

module.exports = async (req, res) => {
    try {
        let {
            state_id,
            district_id,
            crop_id,
            status,
            master_merchant_detail_id,
            page_no,
            limit
        } = req.body;
        limit = limit ? parseInt(limit) : 50;
        page_no = page_no ? parseInt(page_no) : 1;
        const campaign_leads = await fetch_all_leads_service(
            state_id,
            district_id,
            crop_id,
            status,
            master_merchant_detail_id,
            page_no,
            limit
        );
        const response = create_api_response(true, "success", campaign_leads);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/campaign/controllers/fetch_po_details_by_id_controller.js
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const { fetch_po_details_by_id_service } = require('../services/fetch_po_details_by_id_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { po_id } = req.query;
        if (!po_id) {
            throw new ValidationError('')
        }
        const po_details = await fetch_po_details_by_id_service(po_id);
        const response = create_api_response(true, 'success', po_details);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/campaign/controllers/fetch_all_campaign_details_controller.js
const fetch_all_campaign_details_service = require("../services/fetch_all_campaign_details_service");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const http_status_code_enum = require("../../../../enums/global/http_status_codes");
const error_log = require("../../../../middelware/error_log");

module.exports = async (req, res) => {
    try {
        let { page_no, limit, search_param } = req.query;
        limit = limit ? parseInt(limit) : 50;
        page_no = page_no ? parseInt(page_no) : 1;
        const campaigns = await fetch_all_campaign_details_service(page_no, limit, search_param);
        const response = create_api_response(true, "success", campaigns);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/campaign/controllers/fetch_po_list_by_retailer_id_controller.js
const http_status_code_enum = require("../../../../enums/global/http_status_codes");
const error_log = require("../../../../middelware/error_log");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const { fetch_po_list_by_retailer_id_service } = require("../services/fetch_po_list_by_retailer_id_service");

module.exports = async (req, res) => {
    try {
        let { master_merchant_detail_id, lead_id, page_no, limit } = req.query;
        limit = limit ? parseInt(limit) : 50;
        page_no = page_no ? parseInt(page_no) : 1;
        const po_list = await fetch_po_list_by_retailer_id_service(master_merchant_detail_id, lead_id, page_no, limit);
        const response = create_api_response(true, "success", po_list);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/campaign/controllers/download_campaign_custom_mobile_format_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const csv_formats = require("../../../../enums/market_linkage/constants/csv_formats");

module.exports = async (req, res) => {
    try {
        let response = create_api_response(true, "success", {
            custom_mobile_number_format: csv_formats.campaign_custom_mobile_number_format
        });
        res.status(http_status_code_enum.ok).json(response);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/campaign/controllers/action_on_purchase_order_controller.js
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const joi = require('joi');
const { action_on_purchase_order_service } = require('../services/action_on_purchase_order_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const validation_result = po_action_schema.validate(req.body);
        if (validation_result.error) throw new ValidationError(validation_result.error.message);
        const { action, po_id, tnc_url } = validation_result.value;
        const taken_action = await action_on_purchase_order_service(action, po_id, tnc_url)
        const response = create_api_response(true, 'success', taken_action);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}

const po_action_schema = joi.object({
    action: joi.number().min(1).max(2).required(),
    po_id: joi.number().required(),
    tnc_url: joi.string().allow('').trim()
});



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/campaign/services/create_campaign_service.js
const campaign_model = require('../../../../database/models_v2/purchase_campaign/purchase_crop_campaign');
const campaign_state_district_map_model = require('../../../../database/models_v2/purchase_campaign/purchase_crop_campaign_state_district_map');
const campaign_stage_enum = require('../../../../enums/market_linkage/enums/campaignEnum').stages;
const error_log = require('../../../../middelware/error_log');
const crop_detail_model = require('../../../../database/models_v2/crop/crop_detail');
const generateBranchIOLink = require('../../../../common_services/deep_link/branch_io');
const env_enum = require('../../../../enums/env/env_enum');
const { RETAILER_PROD_URL, RETAILER_STAGE_URL } = require('../../../../constants/global');
const post_request = require('../../../../utilities/external_API_calls/post_request');
const ENV = require('../../../../config/global_config').env;
const global_config = require('../../../../config/global_config');
const API_HEADERS = {
    'Content-Type': 'application/json',
    Authorization: `Bearer ${ENV === global_config.market_linkage_system_token}`
};
const { ValidationError } = require('../../../../utilities/error/custom_error');

const create_campaign_service = ({
    state_id,
    district_ids,
    crop_id,
    quantity_in_ton,
    min_price,
    max_price,
    start_date,
    end_date,
    comment,
    banner_img_url,
    platform_id,
    target_mobile_numbers,
    user_profile_id
}) => {
    return new Promise(async (resolve, reject) => {
        try {
            const date_now = new Date();
            start_date = new Date(start_date);
            end_date = new Date(end_date);
            if (start_date < date_now) { throw new ValidationError('Campaign cannot be created before current time'); }
            if (end_date < start_date) { throw new ValidationError('End time cannot be less than start time'); }
            const crop_details = await crop_detail_model.findOne({
                where: {
                    is_active: true,
                    id: crop_id
                }
            });
            if (!crop_details) { throw new ValidationError('Invalid crop id'); }

            // create campaign
            const campaign_data = {
                start_date: new Date(start_date),
                end_date: new Date(end_date),
                stage: campaign_stage_enum.scheduled,
                min_price: min_price / 100,
                max_price: max_price / 100,
                banner_image_url: banner_img_url,
                comment,
                crop_id,
                created_by: user_profile_id,
                quantity_in_kg: quantity_in_ton * 1000,
                is_active: true
            }
            if (platform_id) { campaign_data.platform_id = platform_id; }
            if (target_mobile_numbers) { campaign_data.target_mobile_numbers = target_mobile_numbers; }
            const campaign = await campaign_model.create(campaign_data);

            // create  campaign and state-district maps
            let campaign_state_district_maps = [];
            for (let i = 0; i < district_ids.length; i++) {
                campaign_state_district_maps.push({
                    purchase_campaign_id: campaign.id,
                    m_dist: district_ids[i],
                    m_state: state_id,
                    is_active: true
                });
            }
            campaign_state_district_maps = await campaign_state_district_map_model.bulkCreate(campaign_state_district_maps);

            // generate branch url
            const branch_url = await generateBranchIOLink({
                deeplink_path: 'CAMPAIGN',
                title: 'Campaign form redirect',
                description: 'Campaign form redirect',
                payload: {
                    campaign: {
                        campaign_id: campaign.id,
                        crop_id: campaign.crop_id,
                        name: crop_details.crop_name,
                        crop_img_url: crop_details.crop_img_url
                    }
                }
            });
            campaign.branch_url = branch_url.branchUrl;

            // broadcast campaign banner
            const API_URL = (ENV === env_enum.production ? RETAILER_PROD_URL : RETAILER_STAGE_URL) + 'v3/app_banner/campaign';
            const API_BODY = {
                banner_image_url: banner_img_url,
                campaign_id: campaign.id,
                min_price: campaign.min_price,
                max_price: campaign.max_price,
                crop_id: campaign.crop_id,
                master_state_id: state_id,
                master_district_ids: district_ids,
                live_from: campaign.start_date,
                live_till: campaign.end_date
            }
            const banner = await post_request(API_URL, API_BODY, API_HEADERS);
            campaign.app_banner_id = banner.data?.data?.app_banner_id ?? null;
            await campaign.save();
            return resolve({});
        } catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    });
}

module.exports = {
    create_campaign_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/campaign/services/fetch_po_list_by_retailer_id_service.js
const error_log = require('../../../../middelware/error_log');
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const procurment_crop_sample_model = require('../../../../database/models_v2/procurement_sample/procurment_crop_sample');
const purchase_crop_lead_model = require('../../../../database/models_v2/purchase_campaign/purchase_crop_lead');
const convert_ton_to_kg = require('../../../../utilities/unit_conversion/convert_ton_to_kg');
const convert_price_per_quintal_to_kg = require('../../../../utilities/unit_conversion/convert_price_per_quintal_to_kg');
const procurement_payments_model = require('../../../../database/models_v2/procurement_payments/procurement_payments');
const { get_po_stage_for_retailer_app_service } = require('./get_po_stage_for_retailer_app_service');
const { payment_for } = require('../../../../enums/purchase_order/procurement_payment_enum');
const purchase_order_pdfs_model = require('../../../../database/models_v2/purchase_order_pdfs');
const { pdfStatus } = require('../../../../enums/market_linkage/enums/po_pdf');

const fetch_po_list_by_retailer_id_service = async (master_merchant_detail_id, lead_id, page_no, limit) => {
    return new Promise(async (resolve, reject) => {
        try {
            const response = {
                purchase_orders: [],
                total_records: 0
            }
            const lead_query = {
                is_active: true
            }
            if (lead_id) { lead_query.id = lead_id; }
            if (master_merchant_detail_id) { lead_query.master_merchant_id = master_merchant_detail_id; }

            const po_list = await purchase_crop_orders_model.findAndCountAll({
                where: {
                    is_active: true
                },
                include: [
                    {
                        model: purchase_order_pdfs_model,
                        as: 'logs',
                        where: {
                            is_active: true,
                            pdf_status: pdfStatus.ACTIVE
                        },
                        required: false
                    },
                    {
                        model: procurment_crop_sample_model,
                        where: {
                            is_active: true
                        },
                        include: [
                            {
                                model: purchase_crop_lead_model,
                                where: lead_query,
                                required: true
                            }
                        ],
                        required: true
                    },
                    {
                        model: procurement_payments_model,
                        where: {
                            is_active: true,
                            payment_for: payment_for.PO
                        },
                        required: false
                    }
                ],
                distinct: ['id'],
                limit,
                order: [['updated_at', 'DESC']],
                offset: ((page_no - 1) * limit) || 0
            })
            response.purchase_orders = await generate_response(po_list.rows);
            response.total_records = po_list.count;
            return resolve(response)
        } catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    })
}

const generate_response = async (po_list) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const purchase_orders = await Promise.all(po_list.map(async (po) => {
            const stage = await get_po_stage_for_retailer_app_service(po);
            return {
                lead_id: po.procurment_crop_sample.purchase_crop_lead.id,
                farmart_lead_id: po.procurment_crop_sample.purchase_crop_lead.farmart_id,
                weight_in_kg: convert_ton_to_kg({ quantity: po.quantity }).quantity,
                price_per_kg: convert_price_per_quintal_to_kg({ price: po.price }).price,
                po_id: po.id,
                po_farmart_id: po.farmart_id,
                stage,
                source: po.procurment_crop_sample.purchase_crop_lead.source,
                po_doc_url: po.logs?.[0]?.po_doc_url ?? null,
                tnc_url: po.logs?.[0]?.tnc_url ?? null
            }
        }));
        return purchase_orders;
    } catch (err) {
        throw err;
    }
}

module.exports = {
    fetch_po_list_by_retailer_id_service,
    generate_response
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/campaign/services/get_po_stage_for_retailer_app_service.js
const { POStatus } = require("../../../../enums/market_linkage/enums/po");
const purchase_order_pdfs_model = require("../../../../database/models_v2/purchase_order_pdfs");
const { pdfStatus, ACCPETED_BY_RETAILER } = require("../../../../enums/market_linkage/enums/po_pdf");
const po_stage_enum = require("../../../../enums/order_tracking/po_stage_enum");

const get_po_stage_for_retailer_app_service = async (po) => {
    try {
        let status = po_stage_enum.generated;;
        const po_doc = await purchase_order_pdfs_model.findOne({
            where: {
                is_active: true,
                po_id: po.id,
                pdf_status: pdfStatus.ACTIVE
            }
        })
        if (po_doc && po_doc.is_accepted_by_retailer === ACCPETED_BY_RETAILER.ACCEPTED)
            status = po_stage_enum.accepted;
        else if (po_doc && po_doc.is_accepted_by_retailer === ACCPETED_BY_RETAILER.REJECTED)
            return po_stage_enum.rejected_by_user;

        if (po.status >= POStatus.READY_TO_DISPATCH)
            status = po_stage_enum.vehicle_loading_completed;

        if (po.procurement_payments) {
            const part_1_retailer = po.procurement_payments.find(pp => {
                return (pp.installment_number === 1 && pp.utr_number);
            });
            const part_2_retailer = po.procurement_payments.find(pp => {
                return (pp.installment_number === 2 && pp.utr_number);
            });
            if (part_1_retailer)
                status = po_stage_enum.payment_1_completed;
            if (part_2_retailer)
                status = po_stage_enum.payment_2_completed;
        }
        return status;
    }
    catch (err) {
        error_log(err);
        return reject({ message: err.message });
    }
}

module.exports = {
    get_po_stage_for_retailer_app_service
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/campaign/services/send_notification_to_pa.js
const error_log = require('../../../../middelware/error_log');
const get_master_merchant_detail_by_id_service = require('../../../../data_abstraction_layer/master_merchant/get_master_merchant_detail_by_id');
const get_crop_detail_by_id_service = require('../../../../data_abstraction_layer/crop/get_crop_detail_by_id');
const notification_event_enum = require('../../../../enums/notification/ml_notification_event_enum');
const language = require("../../../../enums/global/language");
const fetch_ml_notification_string = require('../../../../entities_v2/notification/services/fetch_ml_notification_string')
const { send_notification_for_ml } = require("../../../../notifier/firebase_admin_ml");

module.exports = async(pa_id, farmart_id, master_merchant_id, crop_id, price_per_kg) => {
  try{
    let variables = {};
    variables.lead_id = farmart_id;
    let master_merchant_detail= await get_master_merchant_detail_by_id_service({master_merchant_id}, ["business_name"]);
    variables.business_name = master_merchant_detail?.business_name ||"" ;
    let crop_detail = await get_crop_detail_by_id_service({crop_id, attributes : ["name"]});
    variables.crop_name = crop_detail ? crop_detail.name : ""; 
    variables.price = 100 * price_per_kg  //price per quintel 

    const notification = await fetch_ml_notification_string(notification_event_enum.pa_assign_notification, language.english, variables);
        if (notification) {
            send_notification_for_ml([pa_id], notification.title, notification.message, null)
                .catch(err => {
                    error_log(err);
                });
        }
    
  }catch(err){
    error_log(err);
  }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/campaign/services/create_price_polling_v2_service.js
const error_log = require('../../../../middelware/error_log');
const campaign_source_enum = require('../../../../entities_v2/metadata/enums/campaign/source_enum');
const whatsapp_campaign_response_ticket_service = require('../../../../entities_v2/campaign/whatsapp_campaign_response_ticket_service');
const post_request_service = require('../../../../utilities/external_API_calls/post_request');
const constants = require('../../../../constants');
const global_config = require('../../../../config/global_config');
const env_enum = require('../../../../enums/env/env_enum');
const { clear_leads_cache } = require('../../../../data_abstraction_layer/order_tracking/order_tracking_leads_in_redis');
const get_language_service = require('../../../../data_abstraction_layer/language/get_language_by_id');
const { lead_creation_alert } = require('../../../../common_services/campaign/alert_on_slack');

const reverse_geocode_service = require('../../../v1/location/services/reverse_geocode_service');
const {
    get_pincode_details_by_pincode
} = require('../../../../data_abstraction_layer/location/master_pincodes');
const add_business_account_service = require('../../../v1/merchant/services/add_business_account_service');
const merchant_type_enum = require('../../../../enums/merchant/merchant_type');
const merchant_category_enum = require('../../../../enums/market_linkage/enums/v2/merchant_category');
const {
    get_merchant_detail_by_id
} = require('../../../../data_abstraction_layer/merchant/merchant_details');
const { get_shop_detail_by_merchant_id } = require('../../../../data_abstraction_layer/merchant/shop_details');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (
    lat,
    long,
    campaign_id = null,
    price_per_quintal,
    quantity_in_tonne,
    crop_type_id,
    merchant_detail_id,
    ml_merchant_id,
    language_id,
    source = campaign_source_enum.campaign,
    country_code,
    mobile_number
) => {
    try {
        let lead_data = {};
        const { name } = await get_merchant_detail_by_id({
            merchant_detail_id,
            attributes: ['name']
        });
        if (ml_merchant_id) {
            lead_data = await create_leads({
                ml_merchant_id,
                merchant_detail_id,
                quantity_in_tonne,
                price_per_quintal,
                crop_type_id,
                source,
                campaign_id,
                language_id,
                mobile_number,
                name,
                country_code
            });
        } else {
            // find pincode from lat long
            // find search it in db
            // if not found then call create lead
            // else onboard the retailer on ml
            const location_obj = await reverse_geocode_service(lat, long);
            const pincode = location_obj?.zipcode;
            if (pincode) {
                const pincode_details = await get_pincode_details_by_pincode({ pincode });
                if (pincode_details) {
                    // create business account
                    const profession_id = merchant_type_enum.Retailer;
                    const category = merchant_category_enum.PROCUREMENT;
                    const state_id = pincode_details.master_state_id;
                    const district_id = pincode_details.master_district_id;
                    const taluk_id = pincode_details.master_taluka_id;
                    const full_address = location_obj.formatted_address;
                    const accuracy = 5;// need this

                    const business_account = await add_business_account_service(
                        name,
                        profession_id,
                        mobile_number,
                        full_address,
                        state_id,
                        district_id,
                        taluk_id,
                        pincode,
                        lat,
                        long,
                        accuracy,
                        category
                    );
                    // update this master_merchant_id in shop details
                    const shop_details = await get_shop_detail_by_merchant_id({ merchant_detail_id });
                    if (shop_details) {
                        shop_details.master_merchant_detail_id = business_account?.id
                        await shop_details.save();
                    }
                    // create lead
                    lead_data = await create_leads({
                        ml_merchant_id: business_account?.id,
                        merchant_detail_id,
                        quantity_in_tonne,
                        price_per_quintal,
                        crop_type_id,
                        source,
                        campaign_id,
                        language_id,
                        mobile_number,
                        name,
                        country_code
                    });
                } else {
                    // normal flow of lead generation that will notify ml side
                    lead_data = await create_leads({
                        ml_merchant_id,
                        merchant_detail_id,
                        quantity_in_tonne,
                        price_per_quintal,
                        crop_type_id,
                        source,
                        campaign_id,
                        language_id,
                        mobile_number,
                        name
                    });
                }
            } else {
                // normal flow of lead generation that will notify ml side
                lead_data = await create_leads({
                    ml_merchant_id,
                    merchant_detail_id,
                    quantity_in_tonne,
                    price_per_quintal,
                    crop_type_id,
                    source,
                    campaign_id,
                    language_id,
                    mobile_number,
                    name
                });
            }
        }
        return lead_data;
    } catch (err) {
        error_log(err);
        throw err;
    }
};
const create_leads = async ({
    ml_merchant_id,
    merchant_detail_id,
    quantity_in_tonne,
    price_per_quintal,
    crop_type_id,
    source,
    campaign_id,
    language_id,
    mobile_number,
    name,
    country_code
}) => {
    let token = constants.global_constants.RETAILER_DEV_TOKEN;
    let url = constants.global_constants.MARKET_LINKAGE_DEV_URL;
    if (global_config.env === env_enum.production) {
        url = constants.global_constants.MARKET_LINKAGE_PROD_URL;
        token = constants.global_constants.RETAILER_PROD_TOKEN;
    }
    const endpoint = '/v2/campaign/lead';
    const body = {
        merchant_detail_id,
        weight_in_kg: quantity_in_tonne * 1000,
        price_per_kg: price_per_quintal / 100,
        crop_id: crop_type_id,
        source
    };
    if (ml_merchant_id) {
        body.master_merchant_detail_id = ml_merchant_id;
    }
    if (campaign_id) body.campaign_id = campaign_id;
    let lead_api_response;
    try {
        lead_api_response = await post_request_service(url + endpoint, body, {
            Authorization: token
        });
    } catch (err) {
        throw new ValidationError(err.response.data.message);
    }
    const { language_code } = await get_language_service(language_id);
    const lead_data = {
        lead_id: lead_api_response?.data?.data?.lead_id || null,
        farmart_lead_id: lead_api_response?.data?.data?.farmart_lead_id || null,
        message: lead_api_response?.data?.data?.message?.[language_code]
    };
    await clear_leads_cache({
        master_merchant_id: ml_merchant_id,
        merchant_detail_id
    });
    if (lead_data.farmart_lead_id) {
        whatsapp_campaign_response_ticket_service(
            language_id,
            name,
            lead_data.farmart_lead_id,
            crop_type_id,
            quantity_in_tonne,
            price_per_quintal,
            mobile_number,
            country_code
        ).catch((err) => {
            error_log(err);
        });
    } else {
        const channel_id = global_config.lead_non_ml_channel_id;

        lead_creation_alert({
            merchant_detail_id,
            crop_detail_id: crop_type_id,
            quantity_in_tonne,
            price_per_quintal,
            channel_id
        }).catch((err) => {
            error_log(err);
        });
    }
    return lead_data;
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/campaign/services/force_shut_campaign_service.js
const campaign_model = require('../../../../database/models_v2/purchase_campaign/purchase_crop_campaign');
const campaign_stage_enum = require('../../../../enums/market_linkage/enums/campaignEnum').stages;
const error_log = require('../../../../middelware/error_log');
const env_enum = require('../../../../enums/env/env_enum');
const { RETAILER_PROD_URL, RETAILER_STAGE_URL, MARKET_LINKAGE_SYSTEM_PROD_TOKEN, MARKET_LINKAGE_SYSTEM_STAGE_TOKEN } = require('../../../../constants/global');
const post_request = require('../../../../utilities/external_API_calls/post_request');
const ENV = require('../../../../config/global_config').env;
const global_config = require('../../../../config/global_config');
const API_HEADERS = {
    'Content-Type': 'application/json',
    Authorization: `Bearer ${ENV === global_config.market_linkage_system_token}`
};
const { ValidationError } = require('../../../../utilities/error/custom_error');

const force_shut_campaign_service = ({ campaign_id, reason }) => {
    return new Promise(async (resolve, reject) => {
        try {
            const campaign = await campaign_model.findOne({
                where: {
                    id: campaign_id,
                    is_active: true
                },
                attributes: ['stage', 'reason', 'id', 'app_banner_id']
            });
            if (campaign.stage === campaign_stage_enum.force_shut ||
                campaign.stage === campaign_stage_enum.expired) { throw new ValidationError('already shut down or expired'); }
            campaign.stage = campaign_stage_enum.force_shut;
            campaign.reason = reason;
            await campaign.save();

            // delete app banner
            const API_URL = (ENV === env_enum.production ? RETAILER_PROD_URL : RETAILER_STAGE_URL) + 'app_banner/delete_app_banner';
            post_request(API_URL, { app_banner_id: campaign.app_banner_id }, API_HEADERS)
                .catch(err => {
                    error_log(err);
                });
            return resolve({});
        } catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    });
}

module.exports = {
    force_shut_campaign_service
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/campaign/services/fetch_po_details_by_id_service.js
const error_log = require('../../../../middelware/error_log');
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const procurment_crop_sample_model = require('../../../../database/models_v2/procurement_sample/procurment_crop_sample');
const purchase_crop_lead_model = require('../../../../database/models_v2/purchase_campaign/purchase_crop_lead');
const convert_ton_to_kg = require('../../../../utilities/unit_conversion/convert_ton_to_kg');
const convert_price_per_quintal_to_kg = require('../../../../utilities/unit_conversion/convert_price_per_quintal_to_kg');
const procurement_payments_model = require('../../../../database/models_v2/procurement_payments/procurement_payments');
const { payment_for } = require('../../../../enums/purchase_order/procurement_payment_enum');
const { get_po_stage_for_retailer_app_service } = require('./get_po_stage_for_retailer_app_service');
const payment_deductions_for_retailer_model = require('../../../../database/models_v2/procurement_payments/payment_deduction_for_retailer');
const { doc_type } = require('../../../../enums/purchase_order/purchase_order_document_enum');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const order_delivery_documents_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_documents');
const dispatch_doc_type = require('../../../../enums/market_linkage/enums/dispatch_doc_type');
const purchase_order_pdfs_model = require('../../../../database/models_v2/purchase_order_pdfs');
const { pdfStatus } = require('../../../../enums/market_linkage/enums/po_pdf');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const fetch_po_details_by_id_service = async (po_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            const po = await purchase_crop_orders_model.findOne({
                where: {
                    is_active: true,
                    id: po_id
                },
                include: [
                    {
                        model: purchase_order_pdfs_model,
                        as: 'logs',
                        where: {
                            is_active: true,
                            pdf_status: pdfStatus.ACTIVE
                        },
                        required: false
                    },
                    {
                        model: order_delivery_detail_model,
                        where: {
                            is_active: true
                        },
                        include: [
                            {
                                model: order_delivery_documents_model,
                                where: {
                                    is_active: true,
                                    order_transport_doc_type_id: null
                                },
                                required: false
                            }
                        ],
                        required: false
                    },
                    {
                        model: procurment_crop_sample_model,
                        where: {
                            is_active: true
                        },
                        include: [
                            {
                                model: purchase_crop_lead_model,
                                where: {
                                    is_active: true
                                },
                                required: true
                            }
                        ],
                        required: true
                    },
                    {
                        model: procurement_payments_model,
                        where: {
                            is_active: true,
                            payment_for: payment_for.PO
                        },
                        required: false
                    },
                    {
                        model: payment_deductions_for_retailer_model,
                        where: {
                            is_active: true
                        },
                        required: false
                    }
                ]
            })
            if (!po) { throw new ValidationError('Invalid po id'); }
            const po_details = await generate_response(po);
            return resolve(po_details)
        } catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    })
}

const generate_response = async (po) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const part_1_retailer = po.procurement_payments.find(pp => {
            return (pp.installment_number === 1 && pp.utr_number);
        });
        const part_2_retailer = po.procurement_payments.find(pp => {
            return (pp.installment_number === 2 && pp.utr_number);
        });
        const weight_slip_url = (po.order_delivery_detail?.order_delivery_documents || []).find(doc => doc.name === doc_type.loadedTruckWeightSlip)?.doc_url ?? null;
        const dispatch_docs = (po.order_delivery_detail?.order_delivery_documents)?.filter((doc) => doc.order_delivery_document_type_id) || [];
        const handover_document_url = dispatch_docs.find((doc) => doc.order_delivery_document_type_id === dispatch_doc_type['handover document'])?.doc_url ?? null;
        const deduction = po.payment_deductions_for_retailers[0]?.deduction_amount ?? null;
        const stage = await get_po_stage_for_retailer_app_service(po);
        const po_details = {
            lead_id: po.procurment_crop_sample.purchase_crop_lead.id,
            farmart_lead_id: po.procurment_crop_sample.purchase_crop_lead.farmart_id,
            weight_in_kg: convert_ton_to_kg({ quantity: po.quantity }).quantity,
            price_per_kg: convert_price_per_quintal_to_kg({ price: po.price }).price,
            po_id: po.id,
            po_farmart_id: po.farmart_id,
            stage,
            handover_document_url,
            weight_slip_url,
            payment_part_1: part_1_retailer
                ? {
                    amount: parseFloat(part_1_retailer.revised_payment ?? part_1_retailer.amount),
                    utr_no: part_1_retailer.utr_number,
                    done_at: part_1_retailer.paid_at,
                    deduction: 0
                }
                : null,
            payment_part_2: part_2_retailer
                ? {
                    amount: parseFloat(part_2_retailer.revised_payment ?? part_2_retailer.amount),
                    utr_no: part_2_retailer.utr_number,
                    done_at: part_2_retailer.paid_at,
                    deduction
                }
                : null,
            tnc_url: po.logs?.[0]?.tnc_url ?? null,
            po_doc_url: po.logs?.[0]?.po_doc_url ?? null
        }
        return po_details;
    } catch (err) {
        throw err;
    }
}

module.exports = {
    fetch_po_details_by_id_service,
    generate_response
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/campaign/services/action_on_purchase_order_service.js
const error_log = require('../../../../middelware/error_log');
const purchase_order_pdfs_model = require('../../../../database/models_v2/purchase_order_pdfs');
const { pdfStatus, ACCPETED_BY_RETAILER } = require('../../../../enums/market_linkage/enums/po_pdf');
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const ENV = require('../../../../config/global_config').env;
const global_config = require('../../../../config/global_config');
const env_enum = require('../../../../enums/env/env_enum');
const put_request = require('../../../../utilities/external_API_calls/put_request');
const { fetch_po_details_by_id_service } = require('./fetch_po_details_by_id_service');
const RETAILER_STAGE_URL = require('../../../../constants/global').RETAILER_STAGE_URL;
const RETAILER_PROD_URL = require('../../../../constants/global').RETAILER_PROD_URL;
// const MARKET_LINKAGE_SYSTEM_STAGE_TOKEN = require('../../../../constants/global').MARKET_LINKAGE_SYSTEM_STAGE_TOKEN;
// const MARKET_LINKAGE_SYSTEM_PROD_TOKEN = require('../../../../constants/global').MARKET_LINKAGE_SYSTEM_PROD_TOKEN;
const API_HEADERS = {
    'Content-Type': 'application/json',
    Authorization: `Bearer ${ENV === global_config.market_linkage_system_token}`
};
const { ValidationError } = require('../../../../utilities/error/custom_error');

const action_on_purchase_order_service = async (action, po_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            const [po_doc, po] = await Promise.all([
                purchase_order_pdfs_model.findOne({
                    where: {
                        is_active: true,
                        po_id,
                        pdf_status: pdfStatus.ACTIVE
                    }
                }),
                purchase_crop_orders_model.findOne({
                    where: {
                        is_active: true,
                        id: po_id
                    }
                })
            ])
            if (!po_doc || !po) { throw new ValidationError('Invalid po id') }

            if (action === 1) { // reject
                po_doc.is_accepted_by_retailer = ACCPETED_BY_RETAILER.REJECTED;
                po_doc.retailer_action_at = new Date();
            } else if (action === 2) { // accept
                po_doc.is_accepted_by_retailer = ACCPETED_BY_RETAILER.ACCEPTED;
                po_doc.retailer_action_at = new Date();
            }
            await po_doc.save();

            // send po update to retailer app
            fetch_po_details_by_id_service(po.id)
                .then((API_BODY) => {
                    const API_URL = (ENV === env_enum.production ? RETAILER_PROD_URL : RETAILER_STAGE_URL) + 'v1/order_tracking/purchase_order';
                    put_request(API_URL, API_BODY, API_HEADERS)
                        .catch(err => {
                            error_log(err);
                        });
                })
                .catch(err => {
                    error_log(err);
                });

            return resolve({});
        } catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    })
}

module.exports = {
    action_on_purchase_order_service
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/campaign/services/fetch_all_leads_service.js
const error_log = require("../../../../middelware/error_log");
const purchase_crop_lead_model = require("../../../../database/models_v2/purchase_campaign/purchase_crop_lead");
const { ml_lead_stages } = require("../../../../enums/market_linkage/enums/ml_lead_enum");
const master_merchant_detail_model = require("../../../../database/models_v2/merchant/master_merchant_detail");
const crop_detail_model = require("../../../../database/models_v2/crop/crop_detail");
const round_off_to_two_decimal = require("../../../v1/utilities/round_off/round_off_to_two_decimal");
const user_profile_model = require("../../../../database/models/user_profile");
const Op = require('sequelize').Op;

const fetch_all_leads_service = async (
    state_id = null,
    district_id = null,
    crop_id = null,
    status = [],
    master_merchant_detail_id = null,
    page_no = null,
    limit = null
) => {
    return new Promise(async (resolve, reject) => {
        try {
            const lead_fetch_condition = {
                is_active: true,
                source: {
                    [Op.ne]: 3 // not including pa leads
                }
            }
            let master_merchant_condition = {
                is_active: true
            }
            if (state_id) master_merchant_condition.state_id = state_id;
            if (district_id) master_merchant_condition.district_id = district_id;
            if (crop_id) lead_fetch_condition.crop_id = crop_id;
            if (status && status.length) lead_fetch_condition.status = { [Op.in]: status };
            if (master_merchant_detail_id) lead_fetch_condition.master_merchant_id = master_merchant_detail_id;

            const campaign_leads = await purchase_crop_lead_model.findAndCountAll({
                where: lead_fetch_condition,
                include: [
                    {
                        model: master_merchant_detail_model,
                        where: master_merchant_condition,
                        required: true
                    },
                    {
                        model: crop_detail_model,
                        where: {
                            is_active: true
                        },
                        required: true
                    }
                ],
                distinct: ['id'],
                limit: limit,
                order: [['created_at', 'DESC']],
                offset: ((page_no - 1) * limit) || 0
            });

            // map assigned pa with campaign leads
            let campaign_leads_to_pa_map = await map_pa_with_leads(campaign_leads);

            for (let index = 0; index < campaign_leads.rows.length; index++) {
                let lead = campaign_leads.rows[index];
                let lead_element = {
                    id: lead.farmart_id,
                    source: lead.source,
                    campaign_id: lead.campaign_id,
                    crop_id: lead.crop_id,
                    crop_name: lead.crop_detail.name,
                    status: lead.status,
                    assigned_pa: lead.assigned_pa,
                    assigned_pa_name: campaign_leads_to_pa_map[lead.assigned_pa?.toString()]?.name || null,
                    weight_in_tons: round_off_to_two_decimal(lead.quantity_in_kg / 1000),
                    price_per_quintal: round_off_to_two_decimal(lead.price_per_kg * 100),
                    created_at: lead.createdAt,
                    merchant_mobile_number: lead.master_merchant_detail.mobile_number,
                    merchant_state: lead.master_merchant_detail.state_name || "",
                    merchant_district: lead.master_merchant_detail.district_name || "",
                    merchant_detail_id: lead.master_merchant_detail.id,
                    merchant_name: lead.master_merchant_detail.name,
                    merchant_business_name: lead.master_merchant_detail.business_name
                };
                campaign_leads.rows[index] = lead_element;
            }
            const [pending_leads, assigned_leads, rejected_leads] = await get_number_of_leads();
            return resolve({
                campaign_lead_data: {
                    number_of_assigned_leads: assigned_leads,
                    number_of_pending_leads: pending_leads,
                    number_of_rejected_leads: rejected_leads,
                    campaign_leads
                }
            });
        }
        catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    })
}

const get_number_of_leads = async () => {
    const pending_status_list = [
        ml_lead_stages.lead
    ]
    const pending_leads = await purchase_crop_lead_model.count({
        where: {
            status: {
                [Op.in]: pending_status_list
            },
            is_active: true,
            source: {
                [Op.ne]: 3 // not including pa leads
            },
            master_merchant_id: { [Op.ne]: null },
            crop_id: { [Op.ne]: null }
        }
    });
    const assigned_status_list = [
        ml_lead_stages.pa_assigned,
        ml_lead_stages.request_for_reschedule,
        ml_lead_stages.customer_not_available
    ]
    const assigned_leads = await purchase_crop_lead_model.count({
        where: {
            status: {
                [Op.in]: assigned_status_list
            },
            is_active: true,
            source: {
                [Op.ne]: 3 // not including pa leads
            },
            master_merchant_id: { [Op.ne]: null },
            crop_id: { [Op.ne]: null }
        }
    });
    const rejected_status_list = [
        ml_lead_stages.reject_insufficient_quantity,
        ml_lead_stages.reject_price_parity,
        ml_lead_stages.reject_fake_user,
        ml_lead_stages.reject_others,
        ml_lead_stages.reject_testing,
        ml_lead_stages.reject_user_declined
    ]
    const rejected_leads = await purchase_crop_lead_model.count({
        where: {
            status: {
                [Op.in]: rejected_status_list
            },
            is_active: true,
            source: {
                [Op.ne]: 3 // not including pa leads
            },
            master_merchant_id: { [Op.ne]: null },
            crop_id: { [Op.ne]: null }
        }
    });
    return [pending_leads, assigned_leads, rejected_leads]
}

const map_pa_with_leads = async (campaign_leads) => {
    try {
        // get pa details of assigned pa in leads
        let assigned_pa_ids = campaign_leads.rows.map((lead) => lead.assigned_pa);
        const assigned_pa_list = await user_profile_model.findAll({
            where: {
                is_active: true,
                id: { [Op.in]: assigned_pa_ids }
            }
        })

        // mapping assigned pa details to lead details 
        const campaign_leads_to_pa_map = {};
        for (let index = 0; index < assigned_pa_list.length; index++) {
            let pa_details = assigned_pa_list[index];
            const pa_id = pa_details.id
            campaign_leads_to_pa_map[pa_id.toString()] = {
                name: pa_details.name
            };
        }

        return campaign_leads_to_pa_map;
    }
    catch (err) {
        throw err;
    }
}

module.exports = {
    fetch_all_leads_service
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/campaign/services/fetch_leads_by_retailer_id_service.js
const user_profile_model = require("../../../../database/models/user_profile");
const error_log = require("../../../../middelware/error_log");
const purchase_crop_lead_model = require("../../../../database/models_v2/purchase_campaign/purchase_crop_lead");
const retailer_ml_lead_stage_map = require("../../../../enums/order_tracking/retailer_ml_lead_stage_map");
const { rejection_reasons, ml_lead_stages } = require("../../../../enums/market_linkage/enums/ml_lead_enum");
const Op = require('sequelize').Op;
const rejected_status = [
    ml_lead_stages.reject_fake_user,
    ml_lead_stages.reject_insufficient_quantity,
    ml_lead_stages.reject_others,
    ml_lead_stages.reject_price_parity,
    ml_lead_stages.reject_testing,
    ml_lead_stages.reject_user_declined
]

const fetch_leads_by_retailer_id_service = async (master_merchant_detail_id, is_rejected = 0, page_no, limit) => {
    return new Promise(async (resolve, reject) => {
        try {
            const date_60_days_ago = new Date();
            date_60_days_ago.setDate(date_60_days_ago.getDate() - 60);
            const response = {
                leads: [],
                total_records: 0
            }
            const query = {
                is_active: true,
                created_at: {
                    [Op.gte]: date_60_days_ago
                }
            }
            if (is_rejected && parseInt(is_rejected)) {
                query.status = {
                    [Op.in]: rejected_status
                }
            }
            else {
                query.status = {
                    [Op.notIn]: rejected_status
                }
            }
            if (master_merchant_detail_id)
                query.master_merchant_id = master_merchant_detail_id;

            const campaign_leads = await purchase_crop_lead_model.findAndCountAll({
                where: query,
                distinct: ['id'],
                limit: limit,
                order: [['updated_at', 'DESC']],
                offset: ((page_no - 1) * limit) || 0
            })
            const pa_ids = campaign_leads.rows.filter((lead) => lead.assigned_pa).map((lead) => lead.assigned_pa);
            const assigned_pa_list = await user_profile_model.findAll({
                where: {
                    is_active: true,
                    id: { [Op.in]: pa_ids }
                }
            })
            response.leads = generate_response(campaign_leads.rows, assigned_pa_list);
            response.total_records = campaign_leads.count;
            return resolve(response)
        }
        catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    })
}

const generate_response = (campaign_leads, assigned_pa_list) => {
    try {
        const leads = campaign_leads.map((lead) => {
            const pa_mapped = assigned_pa_list.find((l) => l.id === lead.assigned_pa);
            let rejection_reason = Object.keys(rejection_reasons).find(key => rejection_reasons[key] == lead.status) ?? null;
            let stage = Object.keys(ml_lead_stages).find(key => ml_lead_stages[key] == lead.status);
            return {
                lead_id: lead.id,
                farmart_lead_id: lead.farmart_id,
                stage: retailer_ml_lead_stage_map[stage] ?? null,
                pa_mapped: pa_mapped ? {
                    mobile_number: pa_mapped.mobile_number,
                    name: pa_mapped.name
                } : null,
                rejection_reason,
                source: lead.source,
                crop_id: lead.crop_id,
                weight_in_kg: lead.quantity_in_kg,
                price_per_kg: lead.price_per_kg,
                lead_created_date: lead.createdAt
            }
        })
        return leads
    }
    catch (err) {
        error_log(err);
        return reject({ message: err.message });
    }
}

module.exports = {
    fetch_leads_by_retailer_id_service,
    generate_response
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/campaign/services/submit_action_on_lead_service.js
const purchase_crop_lead_model = require('../../../../database/models_v2/purchase_campaign/purchase_crop_lead');
const error_log = require('../../../../middelware/error_log');
const Op = require('sequelize').Op;
const ENV = require('../../../../config/global_config').env;
const global_config = require('../../../../config/global_config');
const env_enum = require('../../../../enums/env/env_enum');
const post_request = require('../../../../utilities/external_API_calls/post_request');
const user_profile = require('../../../../database/models/user_profile');
const procurment_crop_sample_model = require('../../../../database/models_v2/procurement_sample/procurment_crop_sample');
const pa_assignment_mode_for_lead = require('../../../../enums/market_linkage/enums/pa_assignment_mode_for_lead');
const { ml_lead_stages } = require('../../../../enums/market_linkage/enums/ml_lead_enum');
const assign_pa_to_master_merchant = require('../../../../data_abstraction_layer/master_merchant/assign_pa_to_master_merchant');
const RETAILER_STAGE_URL = require('../../../../constants/global').RETAILER_STAGE_URL;
const RETAILER_PROD_URL = require('../../../../constants/global').RETAILER_PROD_URL;
const send_notification_to_pa = require('../services/send_notification_to_pa');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const API_HEADERS = {
    'Content-Type': 'application/json',
    Authorization: `Bearer ${ENV === global_config.market_linkage_system_token}`
};
const rejected_status = [
    ml_lead_stages.reject_insufficient_quantity,
    ml_lead_stages.reject_price_parity,
    ml_lead_stages.reject_fake_user,
    ml_lead_stages.reject_others,
    ml_lead_stages.reject_testing,
    ml_lead_stages.reject_user_declined
]

const submit_action_on_lead_service = ({ lead_pa_map_list = [], pa_assignment_mode = pa_assignment_mode_for_lead.BOT }) => {
    return new Promise(async (resolve, reject) => {
        try {
            const lead_ids = lead_pa_map_list.map((map) => map.lead_id);
            const campaign_leads = await purchase_crop_lead_model.findAll({
                where: {
                    farmart_id: { [Op.in]: lead_ids },
                    is_active: true
                },
                include: [
                    {
                        model: procurment_crop_sample_model,
                        where: {
                            is_active: true
                        },
                        required: true
                    }
                ]
            });
            for (let index = 0; index < lead_pa_map_list.length; index++) {
                const lead_map = lead_pa_map_list[index];
                const pa_id = lead_pa_map_list[index].pa_id;
                const lead = campaign_leads.find((l) => l.farmart_id === lead_map.lead_id);
                if (lead && !rejected_status.includes(parseFloat(lead.status))) {
                    if (lead_map.pa_id) {
                        lead.assigned_pa = lead_map.pa_id;
                        lead.pa_assignment_mode = pa_assignment_mode;
                        lead.status = ml_lead_stages.pa_assigned;
                        const sample = lead.procurment_crop_sample;
                        sample.created_by = lead_map.pa_id;
                        await sample.save();
                        const pa_details = await user_profile.findOne({
                            where: {
                                is_active: true,
                                id: lead_map.pa_id
                            }
                        })
                        if (!pa_details) { throw new ValidationError('invalid pa id'); }

                        // send mapped pa details to retailer app
                        const API_URL = (ENV === env_enum.production ? RETAILER_PROD_URL : RETAILER_STAGE_URL) + 'v1/order_tracking/request_lead/pa';
                        const API_BODY = {
                            lead_id: lead.id,
                            farmart_lead_id: lead.farmart_id,
                            pa_name: pa_details.name,
                            pa_mobile_number: pa_details.mobile_number
                        }
                        post_request(API_URL, API_BODY, API_HEADERS)
                            .catch(err => {
                                error_log(err);
                            });

                        // send notification
                        send_notification_to_pa(pa_id, lead.farmart_id, lead.master_merchant_id, lead.crop_id, lead.price_per_kg)
                            .catch(err => {
                                error_log(err);
                            })
                    }
                    if (lead_map.action_performed) {
                        lead.status = lead_map.action_performed;
                    }
                    await lead.save();
                    // assigned pa to unassigned master merchant
                    await assign_pa_to_master_merchant(lead_map.pa_id, lead.master_merchant_id);
                } else {
                    throw new ValidationError('Cannot take action on rejected leads');
                }
            }
            resolve({})
        } catch (ex) {
            error_log(ex);
            reject({ message: ex.message });
        }
    });
};

module.exports = submit_action_on_lead_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/campaign/services/action_on_lead_service.js
const error_log = require('../../../../middelware/error_log');
const purchase_crop_lead_model = require('../../../../database/models_v2/purchase_campaign/purchase_crop_lead');
const procurment_crop_sample_model = require('../../../../database/models_v2/procurement_sample/procurment_crop_sample');
const { sampleStatus } = require('../../../../enums/market_linkage/enums/masterSampleEnum');
const lead_stage_enum = require('../../../../enums/order_tracking/lead_stage_enum');
const { ml_lead_stages, rejection_reasons } = require('../../../../enums/market_linkage/enums/ml_lead_enum');
const ENV = require('../../../../config/global_config').env;
const global_config = require('../../../../config/global_config');
const env_enum = require('../../../../enums/env/env_enum');
const retailer_ml_lead_stage_map = require('../../../../enums/order_tracking/retailer_ml_lead_stage_map');
const put_request = require('../../../../utilities/external_API_calls/put_request');
const RETAILER_STAGE_URL = require('../../../../constants/global').RETAILER_STAGE_URL;
const RETAILER_PROD_URL = require('../../../../constants/global').RETAILER_PROD_URL;
const API_HEADERS = {
    'Content-Type': 'application/json',
    Authorization: `Bearer ${ENV === global_config.market_linkage_system_token}`
};
const { ValidationError } = require('../../../../utilities/error/custom_error');

const action_on_lead_service = async (lead_id, stage) => {
    return new Promise(async (resolve, reject) => {
        try {
            const sample = await procurment_crop_sample_model.findOne({
                where: {
                    is_active: true
                },
                include: [
                    {
                        model: purchase_crop_lead_model,
                        where: {
                            is_active: true,
                            id: lead_id
                        },
                        required: true
                    }
                ]
            })
            if (!sample) { throw new ValidationError('Invalid sample id') }

            if (stage === lead_stage_enum.rejected_by_merchant) {
                const lead = sample.purchase_crop_lead;
                if (lead.status === ml_lead_stages.sample_collected || sample.status === sampleStatus.CREATED) { throw new ValidationError('Lead status cannot be updated'); }
                lead.status = ml_lead_stages.reject_user_declined;
                sample.status = sampleStatus.TERMINATED;
                await Promise.all([
                    lead.save(),
                    sample.save()
                ])
                // send lead update to retailer app
                const API_URL = (ENV === env_enum.production ? RETAILER_PROD_URL : RETAILER_STAGE_URL) + 'v1/order_tracking/request_lead';
                const rejection_reason = Object.keys(rejection_reasons).find(key => rejection_reasons[key] === lead.status) ?? null;
                const stage = Object.keys(ml_lead_stages).find(key => ml_lead_stages[key] === lead.status);
                const API_BODY = {
                    lead_id: lead.id,
                    stage: retailer_ml_lead_stage_map[stage] ?? null,
                    farmart_lead_id: lead.farmart_id,
                    rejection_reason,
                    source: lead.source
                }
                put_request(API_URL, API_BODY, API_HEADERS)
                    .catch(err => {
                        error_log(err);
                    });
                return resolve(null);
            }
        } catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    })
}

module.exports = {
    action_on_lead_service
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/campaign/services/fetch_crops_for_campaign_service.js
const error_log = require("../../../../middelware/error_log");
const crop_detail_model = require("../../../../database/models_v2/crop/crop_detail");
const crop_vernacular_metadata_model = require("../../../../database/models_v2/crop/crop_vernacular_metadata");
const language_enum = require("../../../../enums/global/language");
const state_name_by_id = require("../../../../data_abstraction_layer/location/get_master_state_by_id");
const district_name_by_id = require("../../../../data_abstraction_layer/location/get_master_district_by_id");
const pricing_for_campaign_crops = require("../../../../common_services/campaign/pricing_for_campaign_crops");
const get_crop_no_of_orders = require("../../../../data_abstraction_layer/crop/get_crop_no_of_orders");

module.exports = async (page_no=1, limit=10, language_id = language_enum.english, district_id, state_id, crop_id) => {
    try {
        let max;
        let min;
        const query = {
            is_active: 1,
            for_campaign: true
        }
        if (crop_id) {
            query.id = crop_id
        }
        const state_details = await state_name_by_id(state_id);
        const state_name = state_details?.name || null;

        const district_details = await district_name_by_id(state_id, district_id);
        const district_name = district_details?.name || null;

        const crops = await crop_detail_model.findAndCountAll({
            where: query,
            include: [{
                model: crop_vernacular_metadata_model,
                where: {
                    is_active: 1,
                    language_id,
                }
            }],
            limit: limit,
            offset: ((page_no - 1) * limit) || 0
        });

        let crops_for_campaign = await Promise.all(crops.rows.map(async (crops_element, i) => {
            try {
                let crop_order_count = await get_crop_no_of_orders({ crop_id: crops_element.id });
                const variables = {
                    "${district_name}": district_name,
                    "${no_of_orders}": crop_order_count
                }
                let promotional_text = await get_crop_promotional_text({ crop_id: crops_element.id, language_id, variables });
                let commodity_name = crops.rows[i].name;
                let prices = await pricing_for_campaign_crops(commodity_name, state_name, district_name);
                if (prices) {
                    max = prices.max;
                    min = prices.min;
                }
                return {
                    crop_img_url: crops_element.app_tile_url || "https://farmartdocs2021.s3.ap-south-1.amazonaws.com/metadata/crop_icons/default_crop.png",
                    crop_id: crops_element.id,
                    name: crops_element.crop_vernacular_metadata[0].name || crops_element.name,
                    max_price: max,
                    min_price: min,
                    promotional_text: (max && crop_order_count) ? promotional_text : ""
                }
            } catch (err) {
                error_log(err);
            }
        }))

        let crop_details = {}
        crop_details = {
            campaign_crops: crops_for_campaign,
            total_count: crops.count
        }

        return crop_details;
    }
    catch (err) {
        error_log(err);
    }
}

const get_crop_promotional_text = async ({ crop_id, language_id, variables }) => {
    try {
        const get_promotional_template = require("../../../../data_abstraction_layer/crop/get_crop_promotional_template");
        let promotional_template = await get_promotional_template({ crop_id, language_id });
        if (promotional_template) {
            let promotional_template_token = promotional_template.split(" ");
            promotional_template_token = promotional_template_token.map(ele => {
                if (variables[ele])
                    return variables[ele];
                return ele;
            })
            promotional_template = promotional_template_token.join(" ");
        }
        return promotional_template;
    }
    catch (error) {
        error_log(error);
        return "";
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/campaign/services/fetch_all_campaign_details_service.js
const campaign_model = require("../../../../database/models_v2/purchase_campaign/purchase_crop_campaign");
const Op = require('sequelize').Op;
const error_log = require("../../../../middelware/error_log");
const campaign_state_district_maps_model = require("../../../../database/models_v2/purchase_campaign/purchase_crop_campaign_state_district_map");
const purchase_crop_lead_model = require("../../../../database/models_v2/purchase_campaign/purchase_crop_lead");
const master_state_model = require("../../../../database/models_v2/location/master_state");
const master_district_model = require("../../../../database/models_v2/location/master_district");
const round_off_to_two_decimal = require("../../../v1/utilities/round_off/round_off_to_two_decimal");

module.exports = (page_no, limit, search_param) => {
    return new Promise(async (resolve, reject) => {
        try {
            let query = {
                is_active: true
            }
            if (search_param) {
                query.id = {
                    [Op.like]: '%' + search_param + '%'
                }
            }
            const campaign_list = await campaign_model.findAndCountAll({
                where: query,
                distinct: ['id'],
                limit: limit,
                order: [['created_at', 'DESC']],
                offset: ((page_no - 1) * limit) || 0,
                include: {
                    model: purchase_crop_lead_model,
                    attributes: ['id'],
                    where: {
                        is_active: true
                    },
                    required: false
                }
            });
            const campaign_ids = campaign_list.rows.map((campaign) => campaign.id);
            const campaign_state_district_map_list = await campaign_state_district_maps_model.findAll({
                where: {
                    purchase_campaign_id: { [Op.in]: campaign_ids },
                    is_active: true
                },
                include: [
                    {
                        model: master_state_model,
                        where: {
                            is_active: true
                        }
                    },
                    {
                        model: master_district_model,
                        where: {
                            is_active: true
                        }
                    }
                ]
            });
            const response = generate_response(campaign_list.rows, campaign_state_district_map_list);
            return resolve({
                campaigns: response,
                total_records: campaign_list.count,
            });
        } catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    });
};

const generate_response = (campaign_list, campaign_state_district_map_list) => {
    const response = [];
    for (let i = 0; i < campaign_list.length; i++) {
        const campaign = campaign_list[i];
        const campaign_state_district_map = campaign_state_district_map_list.filter((map) => map.purchase_campaign_id === campaign.id);
        const campaign_response = {
            crop_id: campaign.crop_id ?? null,
            state: campaign_state_district_map[0]?.master_state ? {
                id: campaign_state_district_map[0]?.master_state.id,
                name: campaign_state_district_map[0]?.master_state.name
            } : null,
            districts: null,
            start_date: campaign.start_date ?? null,
            end_date: campaign.end_date ?? null,
            min_price: round_off_to_two_decimal(campaign.min_price * 100) ?? null,
            max_price: round_off_to_two_decimal(campaign.max_price * 100) ?? null,
            comment: campaign.comment ?? null,
            banner_img_url: campaign.banner_image_url ?? null,
            stage: campaign.stage ?? null,
            target_mobile_numbers: campaign.target_mobile_numbers ?? null,
            total_audience: campaign.total_audience_at_creation ?? null,
            campaign_id: campaign.id + "",
            quantity: round_off_to_two_decimal(campaign.quantity_in_kg / 1000) ?? null,
            leads_count: (campaign.purchase_crop_leads ?? []).length,
            platform_id: campaign.platform_id
        };
        if (campaign_state_district_map.length) {
            campaign_response.districts = [];
            for (let j = 0; j < campaign_state_district_map.length; j++) {
                const ele = campaign_state_district_map[j];
                campaign_response.districts.push({
                    id: ele.master_district.id,
                    name: ele.master_district.name
                });
            }
        }
        response.push(campaign_response);
    }
    return response;
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/campaign/services/generate_new_lead_service.js
const user_profile_model = require("../../../../database/models/user_profile");
const error_log = require("../../../../middelware/error_log");
const purchase_crop_lead_model = require("../../../../database/models_v2/purchase_campaign/purchase_crop_lead");
const master_merchant_detail_model = require("../../../../database/models_v2/merchant/master_merchant_detail");
const { generate_unique_id } = require("../../../../common_services/unique_id_generation/generate_unique_id");
const { categories } = require("../../../../enums/market_linkage/enums/categories");
const convert_kg_to_ton = require("../../../../utilities/unit_conversion/convert_kg_to_ton");
const procurment_crop_sample_model = require("../../../../database/models_v2/procurement_sample/procurment_crop_sample");
const { sampleStatus } = require("../../../../enums/market_linkage/enums/masterSampleEnum");
const { ml_lead_stages, rejection_reasons } = require("../../../../enums/market_linkage/enums/ml_lead_enum");
const merchant_detail_model = require("../../../../database/models/merchant_detail");
const get_merchant_lead_error_message = require("../../../../data_abstraction_layer/order_tracking/get_merchant_lead_error_message");
const http_status_codes = require("../../../../enums/global/http_status_codes");
const ENV = require("../../../../config/global_config").env;
const global_config = require("../../../../config/global_config");
const env_enum = require("../../../../enums/env/env_enum");
const retailer_ml_lead_stage_map = require("../../../../enums/order_tracking/retailer_ml_lead_stage_map");
const put_request = require("../../../../utilities/external_API_calls/put_request");
const convert_price_per_kg_to_quintal = require("../../../../utilities/unit_conversion/convert_price_per_kg_to_quintal");
const user_state_district_map_model = require("../../../../database/models_v2/user/user_state_district_map");
const RETAILER_STAGE_URL = require("../../../../constants/global").RETAILER_STAGE_URL;
const RETAILER_PROD_URL = require("../../../../constants/global").RETAILER_PROD_URL;
const API_HEADERS = {
    'Content-Type': 'application/json',
    Authorization: `Bearer ${ENV == global_config.market_linkage_system_token}`,
};
const sequelize = require('sequelize');
const user_role = require('../../../../enums/user_profile/user_role');
const pa_assignment_mode_for_lead = require('../../../../enums/market_linkage/enums/pa_assignment_mode_for_lead');
const submit_action_on_lead_service = require('./submit_action_on_lead_service');
const lead_stage_enum = require('../../../../enums/order_tracking/lead_stage_enum');
const { lead_creation_alert } = require('../../../../common_services/campaign/alert_on_slack');
const Op = sequelize.Op;
const Sequelize = require("../../../../database/db_connection_initializer");
const add_sample_for_lead = require("../../../../data_abstraction_layer/procurment_master_sample/add_sample_for_lead");
const user_status = require("../../../../enums/market_linkage/enums/v2/user_status");
const { ValidationError } = require('../../../../utilities/error/custom_error');

const generate_new_lead_service = async (
    master_merchant_detail_id,
    merchant_detail_id,
    weight_in_kg,
    price_per_kg,
    crop_id,
    source,
    campaign_id
) => {
    return new Promise(async (resolve, reject) => {
        try {
            let master_merchant, merchant, farmart_id;
            if (master_merchant_detail_id) {
                master_merchant = await master_merchant_detail_model.findOne({
                    where: {
                        id: master_merchant_detail_id,
                        is_active: true
                    }
                });
                if (!master_merchant) {
                    throw new ValidationError('Invalid master merchant id');
                }
                const id_response = await generate_unique_id({
                    state: master_merchant?.state_name ?? null,
                    district: master_merchant?.district_name ?? null,
                    category: categories.ProcurementLead
                });
                if (id_response.status === http_status_codes.ok) { farmart_id = id_response.data }
            } else {
                merchant = await merchant_detail_model.findOne({
                    where: {
                        id: merchant_detail_id,
                        is_active: true
                    }
                });
                if (!merchant) {
                    throw new ValidationError('Invalid merchant id');
                }
                const id_response = await generate_unique_id({
                    state: merchant?.state_name ?? null,
                    district: merchant?.district_name ?? null,
                    category: categories.ProcurementLead
                });
                if (id_response.status === http_status_codes.ok) { farmart_id = id_response.data }
            }
            // add campaign lead and sample
            const campaign_lead = await add_lead_and_sample(
                master_merchant_detail_id,
                merchant_detail_id,
                weight_in_kg,
                price_per_kg,
                crop_id,
                source,
                campaign_id,
                farmart_id,
                master_merchant
            );
            // send update to retailer app
            send_lead_update_to_retailer(campaign_lead);

            if (master_merchant_detail_id) {
                // auto allocate pa
                const pa_mapped = await auto_allocate_pa(
                    campaign_lead.farmart_id,
                    master_merchant.state_id,
                    master_merchant.district_id,
                    master_merchant.referred_by
                );

                const channel_id = global_config.lead_ml_channel_id;

                lead_creation_alert({ merchant_detail_id, crop_detail_id: crop_id, quantity_in_tonne: (weight_in_kg / 1000).toFixed(2), price_per_quintal: (price_per_kg * 100).toFixed(2), onboarded: true, pa: pa_mapped, channel_id })
                    .catch(err => {
                        error_log(err);
                    })

                return resolve({
                    farmart_lead_id: campaign_lead.farmart_id ?? null,
                    lead_id: campaign_lead.id,
                    message: null
                })
            }
            return resolve({
                farmart_lead_id: null,
                lead_id: null,
                message: get_merchant_lead_error_message()
            })
        } catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    })
}

const add_lead_and_sample = async (
    master_merchant_detail_id,
    merchant_detail_id,
    weight_in_kg,
    price_per_kg,
    crop_id,
    source,
    campaign_id,
    farmart_id,
    master_merchant
) => {
    // eslint-disable-next-line no-useless-catch
    try {
        let campaign_lead = null
        await Sequelize.transaction(async (t) => {
            campaign_lead = {
                farmart_id: farmart_id ?? null,
                is_active: true,
                quantity_in_kg: weight_in_kg,
                price_per_kg,
                source,
                status: ml_lead_stages.lead,
                crop_id,
                crop_variety_id: null,
                master_merchant_id: master_merchant_detail_id ?? null,
                merchant_detail_id,
                campaign_id: campaign_id ?? null
            }
            campaign_lead = await purchase_crop_lead_model.create(campaign_lead, { transaction: t });

            // add sample for the lead
            if (master_merchant_detail_id) {
                await add_sample_for_lead(
                    master_merchant.state_name,
                    master_merchant.district_name,
                    weight_in_kg,
                    price_per_kg,
                    master_merchant.id,
                    master_merchant.merchant_detail_id,
                    crop_id,
                    campaign_lead.id,
                    t
                );
            }
        })
        return campaign_lead;
    } catch (err) {
        throw err;
    }
}

const send_lead_update_to_retailer = (campaign_lead) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const API_URL = (ENV === env_enum.production ? RETAILER_PROD_URL : RETAILER_STAGE_URL) + 'v1/order_tracking/request_lead';
        const API_BODY = {
            lead_id: campaign_lead.id,
            stage: lead_stage_enum.created,
            farmart_lead_id: campaign_lead.farmart_id,
            rejection_reason: null,
            source: campaign_lead.source
        }
        put_request(API_URL, API_BODY, API_HEADERS)
            .catch(err => {
                error_log(err);
            });
    } catch (err) {
        throw err;
    }
}

const auto_allocate_pa = async (campaign_lead_id, state_id, district_id, preferred_pa_id = null) => {
    /**
     * mapping preference order
     * 1. first match it with preferred pa passed as a param
     * 2. Pa with whom no lead is mapped till now
     * 3. pa with least leads mapped
     */
    let pa_mapped = null;
    const all_pa = await user_profile_model.findAll({
        where: {
            is_active: true,
            user_role_id: user_role.PROCUREMENT_ASSOCIATE,
            status: user_status.ACTIVATED
        },
        attributes: ['id', 'name', 'mobile_number', 'status'],
        include: [
            {
                model: user_state_district_map_model,
                where: {
                    is_active: true,
                    state_id: state_id ?? null,
                    district_id: district_id ?? null
                },
                attributes: [],
                required: true
            }
        ],
        raw: true
    })
    let preferred_pa = null
    if (preferred_pa_id) { preferred_pa = all_pa.find((pa) => pa.id === preferred_pa_id); }
    const all_pa_ids = all_pa.map((pa) => pa.id);

    // pa which is not mapped to any lead yet, wont be in this query's result
    const mapped_leads = await purchase_crop_lead_model.findAll({
        attributes: ['assigned_pa', [sequelize.fn('count', 'assigned_pa'), 'map_count']],
        where: {
            is_active: true,
            assigned_pa: { [Op.and]: [{ [Op.not]: null }, { [Op.in]: all_pa_ids }] }
        },
        group: ['assigned_pa'],
        order: [[sequelize.fn('count', 'assigned_pa'), 'asc']],
        raw: true
    })
    const mapped_user_ids = mapped_leads.map((lead) => lead.assigned_pa);
    const least_mapped_user = all_pa.find((pa) => pa.id === mapped_leads[0]?.assigned_pa);
    // unmapped pa =  pa_of_state_district - pa whom atleast one lead is assigned
    const unmapped_user = all_pa.find((pa) => !mapped_user_ids.includes(pa.id));

    if (unmapped_user || least_mapped_user) {
        await submit_action_on_lead_service({
            lead_pa_map_list: [{
                action_performed: ml_lead_stages.pa_assigned,
                lead_id: campaign_lead_id,
                pa_id: preferred_pa?.id ?? unmapped_user?.id ?? least_mapped_user?.id ?? null
            }],
            pa_assignment_mode: pa_assignment_mode_for_lead.AUTO
        })
        pa_mapped = preferred_pa ?? unmapped_user ?? least_mapped_user ?? null;
    }
    return pa_mapped;
}

module.exports = {
    generate_new_lead_service
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/sales_order/swagger/index.js
module.exports = {
    tags: {
        name: "sales_order",
    },
    paths: {
        "/": {
            post: {
                tags: ["sales_order"],
                summary: "add_sales_order",
                description: "",
                operationId: "add_sales_order",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "body",
                        name: "body",
                        description: "",
                        required: true,
                        schema: {
                            properties: {
                                buyerOrderId: {
                                    type: "number"
                                },
                                buyerId: {
                                    type: "number"
                                },
                                orderQuantityInTon: {
                                    type: "number"
                                },
                                buyerOfferingPriceQuintal: {
                                    type: "number"
                                },
                                deliveryInfo: {
                                    properties: {
                                        address: {
                                            type: "string"
                                        },
                                        pincode: {
                                            type: "string"
                                        },
                                        district: {
                                            type: "string"
                                        },
                                        state: {
                                            type: "string"
                                        },
                                        image: {
                                            type: "string"
                                        }
                                    }
                                },
                                cropId: {
                                    type: "number"
                                },
                                varietyId: {
                                    type: "number"
                                },
                                expDeliveryIn: {
                                    type: "number"
                                },
                                packagingType: {
                                    type: "number"
                                },
                                fullfillmentType: {
                                    type: "number"
                                },
                                qualityChecks: {
                                    type: "array",
                                    items: {
                                        properties: {
                                            id: {
                                                type: "number"
                                            },
                                            name: {
                                                type: "string"
                                            },
                                            requiredValue: {
                                                type: "string"
                                            }
                                        }
                                    }
                                },
                                licenceNumber: {
                                    type: "string"
                                },
                                buyerFacilityGst: {
                                    type: "string"
                                },
                                cashDiscountPercent: {
                                    type: "number"
                                },
                                bagDeductionPercent: {
                                    type: "number"
                                },
                                soRepaymentTimeline: {
                                    type: "string"
                                },
                                isInvoiceOnGross: {
                                    type: "boolean"
                                },
                                invoiceSharing: {
                                    type: "number"
                                },
                                unloadingCharges: {
                                    type: "number"
                                },
                                brokerageCharges: {
                                    type: "number"
                                },
                                netPrice: {
                                    type: "number"
                                },
                                eInvoiceRequired: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            },
            get: {
                tags: ["sales_order"],
                summary: "fetch sales order",
                description: "",
                operationId: "fetch_sales_order",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "query",
                        name: "limit",
                        description: "",
                        type: "number",
                        required: false
                    },
                    {
                        in: "query",
                        name: "page",
                        description: "",
                        type: "number",
                        required: false
                    },
                    {
                        in: "query",
                        name: "status",
                        description: "",
                        type: "string",
                        required: false
                    },
                    {
                        in: "query",
                        name: "search",
                        description: "",
                        type: "string",
                        required: false
                    },
                    {
                        in: "query",
                        name: "placed_by",
                        description: "",
                        type: "string",
                        required: false
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        },
        "/sa": {
            get: {
                tags: ["sales_order"],
                summary: "fetch sales order by sa",
                description: "",
                operationId: "fetch_sales_order_by_sa",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "query",
                        name: "limit",
                        description: "",
                        type: "number",
                        required: false
                    },
                    {
                        in: "query",
                        name: "page",
                        description: "",
                        type: "number",
                        required: false
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        },
        "/mapping": {
            get: {
                tags: ["sales_order"],
                summary: "get buyer order for mapping",
                description: "",
                operationId: "get_so_for_mapping",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "query",
                        name: "po_id",
                        description: "",
                        required: false,
                        type: "string",
                    },
                    {
                        in: "query",
                        name: "po_pending_inhand_id",
                        description: "",
                        required: false,
                        type: "string",
                    },
                ],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    },
                },
            },
        }
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/sales_order/index.js
const add_sales_order_controller = require("./controllers/add_sales_order_controller");
const fetch_sales_order_by_sa_controller = require("./controllers/fetch_sales_order_by_sa_controller");
const fetch_sales_order_controller = require("./controllers/fetch_sales_order_controller");
const fetch_so_for_mapping_controller = require("./controllers/fetch_so_for_mapping_controller");

const router = require("express").Router();

router.post("/", add_sales_order_controller); 
router.get("/", fetch_sales_order_controller);
router.get("/sa", fetch_sales_order_by_sa_controller);
router.get("/mapping", fetch_so_for_mapping_controller);

module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/sales_order/controllers/fetch_sales_order_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const { fetch_sales_order_service } = require('../services/fetch_sales_order_service');

module.exports = async (req, res) => {
    try {
        let { page, limit, status, search, placed_by } = req.query;
        limit = (limit) ? parseInt(limit) : 50;
        page = page ? parseInt(page) : 1;
        const sales_orders = await fetch_sales_order_service(null, null, page, limit, status, search, placed_by);
        let sales_order_response = create_api_response(true, "successfull", sales_orders);
        return res.status(http_status_code_enum.ok).json(sales_order_response);
    }
    catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/sales_order/controllers/fetch_sales_order_by_sa_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const { fetch_sales_order_service } = require('../services/fetch_sales_order_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        let { page, limit } = req.query;
        limit = (limit && parseInt(limit) <= 50) ? parseInt(limit) : 50;
        page = page ? parseInt(page) : 1;

        const { user } = req;
        if (!user || !user.user_profile_id) {
            throw new ValidationError('unauthorised access')
        }
        const sales_orders = await fetch_sales_order_service(user.user_profile_id, null, page, limit);
        const sales_order_response = create_api_response(true, 'successfull', sales_orders);
        return res.status(http_status_code_enum.ok).json(sales_order_response);
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/sales_order/controllers/fetch_so_for_mapping_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const { fetch_so_for_mapping_service } = require("../services/fetch_so_for_mapping_service");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");

module.exports = async (req, res) => {
    try {
        const { po_id, po_pending_inhand_id } = req.query;
        const allSOForMappingResult = await fetch_so_for_mapping_service(po_id, po_pending_inhand_id);
        let response = create_api_response(true, "successfull", allSOForMappingResult);
        return res.status(http_status_code_enum.ok).json(response);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json({ message: err.message });
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/sales_order/controllers/add_sales_order_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const joi = require('joi');
const { add_sales_order_service } = require('../services/add_sales_order_service');
const { orderPackagingType, orderFullfillmentType } = require('../../../../enums/market_linkage/enums/buyerEnum');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const validation_result = sales_order_schema.validate(req.body);
        if (validation_result.error) throw new ValidationError(validation_result.error.message);
        const {
            buyerOrderId,
            buyerId,
            deliveryInfo,
            orderQuantityInTon,
            buyerOfferingPriceQuintal,
            cropId,
            varietyId,
            expDeliveryIn,
            packagingType,
            fullfillmentType,
            qualityChecks,
            licenceNumber,
            buyerFacilityGst,
            cashDiscountPercent,
            bagDeductionPercent,
            soRepaymentTimeline,
            isInvoiceOnGross,
            invoiceSharing,
            unloadingCharges,
            brokerageCharges,
            netPrice,
            eInvoiceRequired,
            isCreditLimitExceed
        } = validation_result.value;

        const { user } = req;
        if (!user || !user.user_profile_id) {
            throw new ValidationError('unauthorised access')
        }
        const added_sales_order = await add_sales_order_service(
            buyerOrderId,
            buyerId,
            deliveryInfo,
            orderQuantityInTon,
            buyerOfferingPriceQuintal,
            cropId,
            varietyId,
            expDeliveryIn,
            packagingType,
            fullfillmentType,
            qualityChecks,
            licenceNumber,
            buyerFacilityGst,
            cashDiscountPercent,
            bagDeductionPercent,
            soRepaymentTimeline,
            isInvoiceOnGross,
            invoiceSharing,
            unloadingCharges,
            brokerageCharges,
            netPrice,
            eInvoiceRequired,
            user.user_profile_id,
            isCreditLimitExceed
        );
        const added_sales_order_response = create_api_response(true, 'successfull', added_sales_order);
        return res.status(http_status_code_enum.ok).json(added_sales_order_response);
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}

const delivery_info_schema = {
    address: joi.string().trim().required(),
    // pincode always be of 6 digit
    pincode: joi
        .string()
        .trim()
        .length(6)
        .regex(/^[0-9]+$/)
        .required(),
    district: joi.string().trim().required(),
    state: joi.string().trim().required(),
    image: joi
        .string()
        .trim()
        .uri({ scheme: ['http', 'https'] })
};

const quality_check_schema = {
    id: joi.number(),
    qc_type_id: joi.number().required(),
    name: joi.string().trim().required(),
    requiredValue: joi.string().trim().required()
};

const sales_order_schema = joi.object({
    buyerOrderId: joi.number(),
    buyerId: joi.number().required(),
    deliveryInfo: joi.object({ ...delivery_info_schema }).required(),
    orderQuantityInTon: joi.number().positive().required(),
    buyerOfferingPriceQuintal: joi.number().positive().required(),
    expDeliveryIn: joi.number().positive().required(),
    packagingType: joi
        .number()
        .equal(...Object.values(orderPackagingType))
        .required(),
    fullfillmentType: joi
        .number()
        .equal(...Object.values(orderFullfillmentType))
        .required(),
    cropId: joi.number().required(),
    varietyId: joi.number().required(),
    qualityChecks: joi
        .array()
        .items({ ...quality_check_schema })
        .required(),
    licenceNumber: joi.string().trim().required(),
    buyerFacilityGst: joi.string().trim().required(),
    cashDiscountPercent: joi.number().min(0).max(99).required(),
    bagDeductionPercent: joi.number().min(0).max(99).required(),
    soRepaymentTimeline: joi.number().min(0),
    isInvoiceOnGross: joi.boolean(),
    invoiceSharing: joi.number(),
    unloadingCharges: joi.number().required(),
    brokerageCharges: joi.number().required(),
    netPrice: joi.number().required(),
    eInvoiceRequired: joi.boolean(),
    isCreditLimitExceed: joi.boolean().required()
});



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/sales_order/services/fetch_so_for_mapping_service.js
const error_log = require('../../../../middelware/error_log');
const { orderStatus } = require('../../../../enums/market_linkage/enums/buyerEnum');
const get_sales_order_service = require('../../../v1/sales/services/get_sales_order_service');
const buyer_order_detail = require('../../../../database/models_v2/buyer_order/buyer_order_detail');
const buyer_order_crop_info = require('../../../../database/models_v2/buyer_order/buyer_order_crop_info');
const Op = require('sequelize').Op;
const sequelize = require('sequelize');
const crop_detail = require('../../../../database/models_v2/crop/crop_detail');
const crop_varieties_detail = require('../../../../database/models_v2/crop/crop_varieties_detail');
const buyer_order_delivery_info = require('../../../../database/models_v2/buyer_order/buyer_order_delivery_info');
const buyer_order_quality_check = require('../../../../database/models_v2/buyer_order/buyer_order_quality_check');
const user_profile = require('../../../../database/models/user_profile');
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const qc_param_types = require('../../../../database/models_v2/procurement_order/qc_param_types');
const po_pending_inhand_detail_model = require('../../../../database/models_v2/po_unloading/po_pending_inhand_detail');
const convert_kg_to_ton = require('../../../../utilities/unit_conversion/convert_kg_to_ton');
const ml_config_model = require('../../../../database/mongoose/market_linkage_db/ml_config.model');
const { config_ids_enum } = require('../../../../enums/market_linkage/enums/ml_config');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const fetch_so_for_mapping_service = async (po_id, po_pending_inhand_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            let pending_po_data, po_data, so_id;
            if (po_pending_inhand_id) {
                pending_po_data = await po_pending_inhand_detail_model.findOne({
                    where: {
                        id: po_pending_inhand_id,
                        is_active: true
                    },
                    include: {
                        model: purchase_crop_orders_model,
                        where: {
                            is_active: true
                        },
                        required: true
                    }
                });
                if (!pending_po_data) { throw new ValidationError('invalid po pending inhand id'); }
                po_data = pending_po_data.purchase_crop_order;
                so_id = pending_po_data.buyer_order_detail_id ?? null;
            } else {
                po_data = await purchase_crop_orders_model.findOne({
                    where: {
                        id: po_id ?? null,
                        is_active: true
                    }
                });
                if (!po_data) { throw new ValidationError('invalid po id'); }
                so_id = po_data.buyer_order_id ?? null;
            }
            if (so_id) {
                const response = await get_sales_order_service(null, so_id)
                return resolve({ so_list: response.data });
            }
            // eslint-disable-next-line no-unused-vars
            const [crop, variety] = await crop_and_variety_data(po_data);
            const po_quantity = await get_po_quantity_for_mapping(pending_po_data ? (convert_kg_to_ton({ weight_kg: pending_po_data.weight_kg })?.weight_kg || 0) : po_data.quantity);

            const orderData = await buyer_order_detail.findAll({
                include: [
                    {
                        model: buyer_order_crop_info,
                        as: 'crop_info',
                        where: {
                            crop_id: crop?.id || null
                        }
                    },
                    {
                        model: buyer_order_delivery_info,
                        as: 'delivery_info',
                        required: false
                    },
                    {
                        model: buyer_order_quality_check,
                        include: [
                            {
                                model: qc_param_types
                            }
                        ],
                        as: 'quality_checks',
                        required: false
                    },
                    {
                        model: user_profile,
                        as: 'placed_by_user',
                        required: false
                    }
                ],
                where: {
                    remaining_quantity: { [Op.gte]: po_quantity },
                    status: orderStatus.APPROVED_BY_CFO
                },
                order: [
                    ['createdAt', 'ASC'],
                    [sequelize.literal('(buyer_offering_price_quintal * order_quantity_in_ton)'), 'DESC'],
                    ['remaining_quantity', 'ASC']
                ]
            });
            const buyer_orders = generate_response(orderData);
            return resolve({ so_list: buyer_orders });
        } catch (err) {
            error_log(err);
            return reject(err.message);
        }
    })
};

const crop_and_variety_data = async (po_data) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const crop = await crop_detail.findOne({
            where: {
                id: po_data.crop_id || null,
                is_active: true
            }
        });
        const variety = await crop_varieties_detail.findOne({
            where: {
                crop_id: crop?.id || null,
                id: po_data.crop_variety_id || null,
                is_active: true
            }
        });
        return [crop, variety]
    } catch (err) {
        throw err
    }
}

const generate_response = (orderData) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const buyer_orders = orderData.map((order) => {
            const expDeliveryInDate = new Date(order.createdAt);
            expDeliveryInDate.setDate(
                expDeliveryInDate.getDate() + order.exp_delivery_in
            );
            return {
                status: order.status,
                _id: order.id,
                buyerId: order.buyer_id,
                deliveryInfo: order.delivery_info
                    ? {
                        address: order.delivery_info.address,
                        district: order.delivery_info.district_name,
                        pincode: order.delivery_info.pincode,
                        state: order.delivery_info.state_name
                    }
                    : null,
                orderQuantityInTon: order.order_quantity_in_ton,
                buyerOfferingPriceQuintal: order.buyer_offering_price_quintal,
                expDeliveryIn: expDeliveryInDate.toISOString(),
                packagingType: order.packaging_type,
                fullfillmentType: order.fullfillment_type,
                qualityChecks: order.quality_checks?.map((qc) => {
                    return {
                        id: qc.id,
                        qc_type_id: qc.qc_type_id,
                        name: qc.qc_param_type?.name,
                        requiredValue: qc.required_value
                    }
                }),
                placedBy: order.placed_by_user
                    ? {
                        id: order.placed_by_user.id,
                        name: order.placed_by_user.name,
                        mobileNumber: order.placed_by_user.mobile_number
                    }
                    : null,
                licenceNumber: order.licence_number,
                buyerFacilityGst: order.buyer_facility_gst,
                cashDiscountPercent: order.cash_discount_percent,
                bagDeductionPercent: order.bag_deduction_percent,
                soRepaymentTimeline: order.so_repayment_timeline,
                isInvoiceOnGross: order.is_invoice_on_gross,
                invoiceSharing: order.invoice_sharing,
                farmartId: order.farmart_id,
                remainingQuantity: order.remaining_quantity,
                buyerName: order.buyer_name,
                cropInfo: order.crop_info
                    ? {
                        cropId: order.crop_info.crop_id,
                        cropName: order.crop_info.crop_name,
                        varietyId: order.crop_info.variety_id,
                        varietyName: order.crop_info.variety_name
                    }
                    : null,
                createdAt: order.createdAt,
                updatedAt: order.updatedAt
            }
        })
        return buyer_orders;
    } catch (err) {
        throw err
    }
}

const get_po_quantity_for_mapping = async (quantity) => {
    let po_quantity = quantity;
    const additional_ton = await ml_config_model.findOne({
        is_active: true,
        _id: config_ids_enum.so_mapping_additional_ton
    });
    if (additional_ton) {
        po_quantity = quantity - (parseFloat(additional_ton.value) || 0)
        po_quantity = (po_quantity < 0) ? 0 : po_quantity
    }
    return po_quantity;
}

module.exports = {
    fetch_so_for_mapping_service,
    crop_and_variety_data,
    generate_response,
    get_po_quantity_for_mapping
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/sales_order/services/add_sales_order_service.js
const { generate_unique_id } = require('../../../../common_services/unique_id_generation/generate_unique_id');
const { orderStatus } = require('../../../../enums/market_linkage/enums/buyerEnum');
const { categories } = require('../../../../enums/market_linkage/enums/categories');
const error_log = require('../../../../middelware/error_log');
const buyer_detail_model = require('../../../../database/models_v2/buyer/buyer_detail');
const crop_detail_model = require('../../../../database/models_v2/crop/crop_detail');
const crop_varieties_detail_model = require('../../../../database/models_v2/crop/crop_varieties_detail');
const buyer_order_detail_model = require('../../../../database/models_v2/buyer_order/buyer_order_detail');
const buyer_order_crop_info_model = require('../../../../database/models_v2/buyer_order/buyer_order_crop_info');
const master_state_model = require('../../../../database/models_v2/location/master_state');
const master_district_model = require('../../../../database/models_v2/location/master_district');
const buyer_order_delivery_info_model = require('../../../../database/models_v2/buyer_order/buyer_order_delivery_info');
// const qc_param_types_model = require('../../../../database/models_v2/procurement_order/qc_param_types');
const buyer_order_quality_check_model = require('../../../../database/models_v2/buyer_order/buyer_order_quality_check');
const http_status_codes = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const { fetch_sales_order_service } = require('./fetch_sales_order_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const add_sales_order_service = (
    buyerOrderId,
    buyerId,
    deliveryInfo,
    orderQuantityInTon,
    buyerOfferingPriceQuintal,
    cropId,
    varietyId,
    expDeliveryIn,
    packagingType,
    fullfillmentType,
    qualityChecks,
    licenceNumber,
    buyerFacilityGst,
    cashDiscountPercent,
    bagDeductionPercent,
    soRepaymentTimeline,
    isInvoiceOnGross,
    invoiceSharing,
    unloadingCharges,
    brokerageCharges,
    netPrice,
    eInvoiceRequired,
    user_profile_id,
    isCreditLimitExceed
) => {
    return new Promise(async (resolve, reject) => {
        try {
            let sales_order_data = {
                farmart_id: '',
                buyer_name: '',
                order_quantity_in_ton: orderQuantityInTon,
                buyer_offering_price_quintal: buyerOfferingPriceQuintal,
                exp_delivery_in: expDeliveryIn,
                packaging_type: packagingType,
                fullfillment_type: fullfillmentType,
                status: orderStatus.SO_CREATED,
                remaining_quantity: orderQuantityInTon,
                licence_number: licenceNumber,
                buyer_facility_gst: buyerFacilityGst,
                cash_discount_percent: cashDiscountPercent,
                bag_deduction_percent: bagDeductionPercent,
                so_repayment_timeline: soRepaymentTimeline,
                is_invoice_on_gross: isInvoiceOnGross,
                invoice_sharing: invoiceSharing,
                unloading_charges: unloadingCharges,
                brokerage_charges: brokerageCharges,
                net_price: netPrice,
                e_invoice_required: eInvoiceRequired ?? false,
                is_active: true,
                buyer_id: buyerId,
                placed_by: user_profile_id,
                is_credit_limit_exceed: isCreditLimitExceed
            }
            if (buyerOrderId) {
                sales_order_data = await buyer_order_detail_model.findOne({
                    where: {
                        id: buyerOrderId,
                        is_active: true
                    }
                });
                sales_order_data.order_quantity_in_ton = orderQuantityInTon;
                sales_order_data.buyer_offering_price_quintal = buyerOfferingPriceQuintal;
                sales_order_data.exp_delivery_in = expDeliveryIn;
                sales_order_data.packaging_type = packagingType;
                sales_order_data.fullfillment_type = fullfillmentType;
                sales_order_data.remaining_quantity = orderQuantityInTon;
                sales_order_data.licence_number = licenceNumber;
                sales_order_data.buyer_facility_gst = buyerFacilityGst;
                sales_order_data.cash_discount_percent = cashDiscountPercent;
                sales_order_data.bag_deduction_percent = bagDeductionPercent;
                sales_order_data.so_repayment_timeline = soRepaymentTimeline;
                sales_order_data.is_invoice_on_gross = isInvoiceOnGross;
                sales_order_data.invoice_sharing = invoiceSharing;
                sales_order_data.unloading_charges = unloadingCharges;
                sales_order_data.brokerage_charges = brokerageCharges;
                sales_order_data.net_price = netPrice;
                sales_order_data.e_invoice_required = eInvoiceRequired ?? false;
                sales_order_data.status = orderStatus.SO_CREATED;
                sales_order_data.is_credit_limit_exceed = isCreditLimitExceed;
            }
            if (!sales_order_data.farmart_id) {
                const uniqueIdResult = await generate_unique_id({
                    state: deliveryInfo?.state,
                    district: deliveryInfo?.district,
                    category: categories.SalesOrder
                });
                if (uniqueIdResult.status === http_status_codes.internal_server_error) {
                    throw new ValidationError(uniqueIdResult.data.error);
                }
                sales_order_data.farmart_id = uniqueIdResult.data;
            }

            const [crop, variety, buyer] = await Promise.all([
                crop_detail_model.findOne({
                    where: {
                        id: cropId,
                        is_active: true
                    }
                }),
                crop_varieties_detail_model.findOne({
                    where: {
                        id: varietyId,
                        is_active: true
                    }
                }),
                buyer_detail_model.findOne({
                    where: {
                        id: buyerId,
                        is_active: true
                    }
                })
            ]);
            if (!crop) throw new ValidationError('invalid crop id');
            if (!variety) throw new ValidationError('invalid variety id');
            if (!buyer) throw new ValidationError('invalid buyer id');
            sales_order_data.buyer_name = buyer.trader_name;

            let added_order;
            if (buyerOrderId) {
                added_order = await sales_order_data.save();
            } else {
                added_order = await buyer_order_detail_model.build(sales_order_data).save();
            }
            await Promise.all([
                add_order_crop_info({
                    cropId: crop.id,
                    cropName: crop.name || '',
                    varietyId: variety.id,
                    varietyName: variety.name || ''
                }, added_order.id),
                add_order_delivery_info(deliveryInfo, added_order.id),
                add_quality_checks(qualityChecks, added_order.id)
            ])
            const response = await fetch_sales_order_service(null, added_order.id);
            return resolve(response.buyer_orders[0]);
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

const add_order_crop_info = async (crop_info, buyer_order_id) => {
    // eslint-disable-next-line no-useless-catch
    try {
        let order_crops_data = await buyer_order_crop_info_model.findOne({
            where: {
                is_active: true,
                buyer_order_id
            }
        });
        if (order_crops_data) {
            order_crops_data.crop_name = crop_info.cropName;
            order_crops_data.crop_id = crop_info.cropId;
            order_crops_data.variety_name = crop_info.varietyName;
            order_crops_data.variety_id = crop_info.varietyId;
            await order_crops_data.save();
        } else {
            order_crops_data = {
                crop_name: crop_info.cropName,
                crop_id: crop_info.cropId,
                buyer_order_id,
                variety_name: crop_info.varietyName,
                variety_id: crop_info.varietyId,
                is_active: true
            }
            await buyer_order_crop_info_model.build(order_crops_data).save();
        }
    } catch (err) {
        throw err
    }
}

const add_quality_checks = async (quality_checks, buyer_order_id) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const buyer_quality_checks = await buyer_order_quality_check_model.findAll({
            where: {
                is_active: true,
                buyer_order_id
            }
        });
        for (let index = 0; index < buyer_quality_checks.length; index++) {
            const qc = buyer_quality_checks[index];
            const new_qc = quality_checks.find((nqc) => nqc.qc_type_id === qc.qc_type_id);
            if (new_qc) {
                if (new_qc.requiredValue !== qc.required_value) {
                    qc.required_value = new_qc.requiredValue;
                    await qc.save();
                }
                quality_checks = quality_checks.filter((doc) => doc.qc_type_id !== new_qc.qc_type_id);
            } else {
                qc.is_active = false;
                await qc.save();
            }
        }
        const qc_to_be_added = quality_checks.map((qc) => {
            return {
                qc_type_id: qc.qc_type_id,
                buyer_order_id,
                required_value: qc.requiredValue,
                is_active: true
            }
        })

        await buyer_order_quality_check_model.bulkCreate(qc_to_be_added);
    } catch (err) {
        throw err
    }
}

const add_order_delivery_info = async (delivery_info, buyer_order_id) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const state_data = await master_state_model.findOne({
            where: {
                name: delivery_info.state,
                is_active: true
            }
        });
        const district_data = await master_district_model.findOne({
            where: {
                name: delivery_info.district,
                master_state_id: state_data?.id || null,
                is_active: true
            }
        });
        let order_delivery_data = await buyer_order_delivery_info_model.findOne({
            where: {
                is_active: true,
                buyer_order_id
            }
        })
        if (order_delivery_data) {
            order_delivery_data.address = delivery_info.address;
            order_delivery_data.pincode = delivery_info.pincode;
            order_delivery_data.state_name = delivery_info.state;
            order_delivery_data.state_id = state_data?.id || null;
            order_delivery_data.district_name = delivery_info.district;
            order_delivery_data.district_id = district_data?.id || null;
            order_delivery_data.image = delivery_info.image || null;
            await order_delivery_data.save();
        } else {
            order_delivery_data = {
                address: delivery_info.address,
                pincode: delivery_info.pincode,
                buyer_order_id,
                state_name: delivery_info.state,
                state_id: state_data?.id || null,
                district_name: delivery_info.district,
                district_id: district_data?.id || null,
                image: delivery_info.image || null,
                is_active: true
            }
            await buyer_order_delivery_info_model.build(order_delivery_data).save();
        }
    } catch (err) {
        throw err
    }
}

module.exports = {
    add_sales_order_service,
    add_order_crop_info,
    add_quality_checks,
    add_order_delivery_info
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/sales_order/services/fetch_sales_order_service.js
const error_log = require('../../../../middelware/error_log');
const buyer_order_detail_model = require('../../../../database/models_v2/buyer_order/buyer_order_detail');
const buyer_order_crop_info_model = require('../../../../database/models_v2/buyer_order/buyer_order_crop_info');
const buyer_order_delivery_info_model = require('../../../../database/models_v2/buyer_order/buyer_order_delivery_info');
const qc_param_types_model = require('../../../../database/models_v2/procurement_order/qc_param_types');
const buyer_order_quality_check_model = require('../../../../database/models_v2/buyer_order/buyer_order_quality_check');
const user_profile_model = require('../../../../database/models/user_profile');
const { Op } = require('sequelize');

const fetch_sales_order_service = (placed_by_id, buyer_order_id, page, limit, status = null, search = null, placed_by = null) => {
    return new Promise(async (resolve, reject) => {
        try {
            const user_filter = {
                is_active: true
            }
            const main_filter = {
                is_active: true
            };
            if (placed_by_id) {
                user_filter.id = placed_by_id;
            }
            if (buyer_order_id) {
                main_filter.id = buyer_order_id;
            }
            if (status) {
                const status_array = status.split(',')
                main_filter.status = {
                    [Op.in]: status_array
                }
            }
            if (search) {
                main_filter.farmart_id = {
                    [Op.like]: '%' + search + '%'
                }
            }

            if (placed_by) {
                const placed_by_array = placed_by.split(',')
                main_filter.placed_by = {
                    [Op.in]: placed_by_array
                }
            }

            const order_data = await buyer_order_detail_model.findAndCountAll({
                where: main_filter,
                include: [
                    {
                        model: buyer_order_delivery_info_model,
                        where: {
                            is_active: true
                        },
                        as: 'delivery_info',
                        required: false
                    },
                    {
                        model: buyer_order_quality_check_model,
                        where: {
                            is_active: true
                        },
                        include: [
                            {
                                model: qc_param_types_model,
                                where: {
                                    is_active: true
                                },
                                required: false
                            }
                        ],
                        as: 'quality_checks',
                        required: false
                    },
                    {
                        model: buyer_order_crop_info_model,
                        where: {
                            is_active: true
                        },
                        as: 'crop_info',
                        required: false
                    },
                    {
                        model: user_profile_model,
                        // where: {
                        //     is_active: true
                        // },
                        as: 'placed_by_user',
                        where: user_filter,
                        required: true
                    }
                ],
                distinct: ['id'],
                limit,
                order: [['updated_at', 'DESC']],
                offset: ((page - 1) * limit) || 0
            });

            const buyer_orders = generate_reponse(order_data.rows);
            return resolve({
                buyer_orders,
                total_records: order_data.count
            });
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

const generate_reponse = (order_data) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const response = order_data.map((order) => {
            const expDeliveryInDate = new Date(order.createdAt);
            expDeliveryInDate.setDate(
                expDeliveryInDate.getDate() + order.exp_delivery_in
            );
            return {
                status: order.status,
                _id: order.id,
                buyerId: order.buyer_id,
                deliveryInfo: order.delivery_info
                    ? {
                        address: order.delivery_info.address,
                        district: order.delivery_info.district_name,
                        pincode: order.delivery_info.pincode,
                        state: order.delivery_info.state_name
                    }
                    : null,
                orderQuantityInTon: order.order_quantity_in_ton,
                buyerOfferingPriceQuintal: order.buyer_offering_price_quintal,
                expDeliveryIn: expDeliveryInDate.toISOString(),
                packagingType: order.packaging_type,
                fullfillmentType: order.fullfillment_type,
                qualityChecks: order.quality_checks?.map((qc) => {
                    return {
                        id: qc.id,
                        name: qc.qc_param_type?.name,
                        qc_type_id: qc.qc_type_id,
                        requiredValue: qc.required_value
                    }
                }),
                placedBy: order.placed_by_user
                    ? {
                        id: order.placed_by_user.id,
                        name: order.placed_by_user.name,
                        mobileNumber: order.placed_by_user.mobile_number
                    }
                    : null,
                licenceNumber: order.licence_number,
                buyerFacilityGst: order.buyer_facility_gst,
                cashDiscountPercent: order.cash_discount_percent,
                bagDeductionPercent: order.bag_deduction_percent,
                soRepaymentTimeline: order.so_repayment_timeline,
                isInvoiceOnGross: order.is_invoice_on_gross,
                invoiceSharing: order.invoice_sharing,
                farmartId: order.farmart_id,
                remainingQuantity: order.remaining_quantity,
                buyerName: order.buyer_name,
                cropInfo: order.crop_info
                    ? {
                        cropId: order.crop_info.crop_id,
                        cropName: order.crop_info.crop_name,
                        varietyId: order.crop_info.variety_id,
                        varietyName: order.crop_info.variety_name
                    }
                    : null,
                unloadingCharges: order.unloading_charges,
                brokerageCharges: order.brokerage_charges,
                netPrice: order.net_price,
                eInvoiceRequired: order.e_invoice_required,
                createdAt: order.createdAt,
                updatedAt: order.updatedAt
            }
        })
        return response;
    } catch (err) {
        throw err
    }
}

module.exports = {
    fetch_sales_order_service
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/story/swagger/index.js
module.exports = {
    tags: {
      name: "story",
    },
    paths: {
      "/app":{
        get: {
          tags: ["story"],
          summary: "get shorts stories",
          description: "",
          operationId: "get_shorts stories",
          security: [{ Bearer: ["read"] }],
          parameters: [
            {
              in: "query",
              name: "page_no",
              description: "",
              required: false,
              type: "integer",
            },
            {
              in: "query",
              name: "limit",
              description: "",
              required: false,
              type: "integer",
            },
            {
              in: "header",
              name: "language_id",
              description: "",
              required: true,
              type: "integer",
            },
          ],
          responses: {
            405: {
              description: "Invalid input",
            },
            200: {
              description: "success",
            },
          },
        },
      },
    },
  };
  


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/story/index.js
const router = require("express").Router();
const authorize = require("../../../middelware/authorized_routes");
const user_roles_enum = require("../../../entities/metadata/enums/user_roles");
const get_stories_controller_v2=require('./controllers/get_stories_controller_v2');

router.get("/app", authorize([user_roles_enum.Merchant]),get_stories_controller_v2 );

module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/story/controllers/get_stories_controller_v2.js
const error_log=require('../../../../middelware/error_log');
const create_api_response=require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const get_stories_service=require('../../../v1/story/services/get_stories_service');
const langauge = require('../../../../entities_v2/metadata/enums/global/langauge');

module.exports=async (req,res)=>{
    try{
        let page_no=+req.query.page_no || 1, limit=+req.query.limit||20 ,language_id=+req.headers.language_id || langauge.default,merchant_detail_id=req.user.user_profile_id;
        let shorts =await get_stories_service(page_no,limit,language_id,merchant_detail_id);
        let shorts_response=create_api_response(true,"successfull",shorts);
        return res.status(http_status_code_enum.ok).json(shorts_response);
    }catch(ex){
        error_log(ex);
       return res.status(http_status_code_enum.bad_request).json(create_api_response(false,ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/buyer/swagger/index.js
module.exports = {
  tags: {
    name: "buyer",
  },
  paths: {
    "/": {
      post: {
        tags: ["buyer"],
        summary: "get all buyer",
        description: "",
        operationId: "get_all_buyer",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "properties": {
                "limit": {
                  "type": "number",
                },
                "page": {
                  "type": "number",
                },
                "isAllBuyer": {
                  "type": "boolean"
                },
                "buyerStatus": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                },
                "sortByName": {
                  "type": "boolean",
                },
                "sortByDate": {
                  "type": "boolean",
                },
                "workingCrops": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          }
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      }
    },
    "/credit_details": {
      get: {
        tags: ["buyer"],
        summary: "get buyer credit details",
        description: "",
        operationId: "get_buyer_credit_details",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "buyer_id",
            description: "",
            required: true,
            type: "number"
          }
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          }
        }
      }
    }
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/buyer/index.js
const router = require("express").Router();
const get_buyer_controller = require("./controllers/get_buyer_controller");
const get_buyer_credit_details_controller = require("./controllers/get_buyer_credit_details_controller");

router.post("/", get_buyer_controller);
router.get("/credit_details", get_buyer_credit_details_controller);

module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/buyer/controllers/get_buyer_credit_details_controller.js
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const { get_buyer_credit_details_service } = require('../services/get_buyer_credit_details_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { buyer_id } = req.query;
        if (!buyer_id) {
            throw new ValidationError('buyer_id is required');
        }
        const buyer_detail = await get_buyer_credit_details_service({ buyer_id })
        const response = create_api_response(true, 'success', buyer_detail);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/buyer/controllers/get_buyer_controller.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const { type } = require("../../../../enums/market_linkage/enums/appLogEnum");
const appLogService = require("../../../../common_services/market_linkage/logging/app_log_service");
const get_buyer_service = require("../services/get_buyer_service");

const get_buyer_controller = async (req, res) => {
  try {
    let { limit, page, buyerStatus, sortByName, sortByDate, workingCrops, isAllBuyer, search } = req.body;
    limit = (limit && parseInt(limit) <= 50 && parseInt(limit) >= 0) ? parseInt(limit) : 50;
    page = (page && parseInt(page) >= 1) ? parseInt(page) : 1;

    const { user_profile_id } = req.user

    const allBuyerResult = await get_buyer_service({ limit, page, buyerStatus, sortByName, sortByDate, workingCrops, user_profile_id, isAllBuyer, search });
    return res.status(allBuyerResult.status).json(allBuyerResult.data);

  } catch (e) {
    appLogService({ type: type.error, err: e });
    return res.status(HTTP_status_codes.internalServerError).json({
      message: e.message,
    });
  }
};

module.exports = get_buyer_controller;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/buyer/services/get_buyer_service.js
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const buyer_detail = require("../../../../database/models_v2/buyer/buyer_detail");
const buyer_working_crop = require("../../../../database/models_v2/buyer/buyer_working_crop");
const error_log = require("../../../../middelware/error_log");
const { Op } = require("sequelize");
const user_profile = require("../../../../database/models/user_profile");
const user_role = require("../../../../enums/user_profile/user_role");
const buyer_document = require("../../../../database/models_v2/buyer/buyer_document");
const { docType } = require("../../../../enums/market_linkage/enums/buyerEnum");
const buyer_ledger = require("../../../../database/models_v2/buyer/buyer_ledger");
const zoho_buyer_invoices = require("../../../../database/models_v2/zoho_buyer_invoices");
const buyer_permission_enum = require("../../../../enums/market_linkage/enums/buyerEnum").PERMISSIONS
const get_user_id_list = async function ({ user_filter }) {

    try {
        const user_Ids = await user_profile.findAll({
            where: {
                reports_to: {
                    [Op.in]: user_filter
                },
                user_role_id: {
                    [Op.in]: [user_role.SALES_VP, user_role.SALES_ASSOCIATE, user_role.STATE_HEAD_SALES, user_role.REGIONAL_MANAGER_SALES]
                }
            },
            attributes: ["id"]
        })

        return user_Ids

    } catch (error) {
        error_log(error);
    }

}

module.exports = async function ({ limit, page, buyerStatus, sortByName, sortByDate, workingCrops, user_profile_id, isAllBuyer = true, search }) {
    try {
        const filter = {};

        if (isAllBuyer === false) {
            let user_filter = [user_profile_id]

            const user_Ids_level_one = await get_user_id_list({ user_filter })

            if (user_Ids_level_one && user_Ids_level_one.length > 0) {
                user_Ids_level_one.forEach((user) => {
                    user_filter.push(user.dataValues.id)
                })
            }

            const user_Ids_level_two = await get_user_id_list({ user_filter })

            if (user_Ids_level_two && user_Ids_level_two.length > 0) {
                user_Ids_level_two.forEach((user) => {
                    user_filter.push(user.dataValues.id)
                })
            }

            filter.onboarded_by = {
                [Op.in]: user_filter
            }
        }

        if (buyerStatus)
            filter.status = {
                [Op.in]: buyerStatus
            };

        const orderArray = []

        if (sortByName)
            orderArray.push(['legal_name', 'ASC'])

        if (sortByDate)
            orderArray.push(['updated_at', 'DESC'])

        if (workingCrops && Array.isArray(workingCrops) && workingCrops.length > 0) {
            const buyerIds = await buyer_working_crop.findAll({
                where: {
                    id: {
                        [Op.in]: workingCrops
                    }
                },
                attributes: ["buyer_id"],
                raw: true
            })
            filter.id = {
                [Op.in]: buyerIds.map(buyer => buyer.buyer_id)
            }
        }

        if (search) {
            const searchString = search.toString().trim()
            filter[Op.or] = [
                {
                    legal_name: {
                        [Op.like]: '%' + searchString + '%'
                    }
                },
                {
                    trader_name: {
                        [Op.like]: '%' + searchString + '%'
                    }
                },
                {
                    farmart_id: {
                        [Op.like]: '%' + searchString + '%'
                    }
                },
                {
                    address: {
                        [Op.like]: '%' + searchString + '%'
                    }
                },
                {
                    state_name: {
                        [Op.like]: '%' + searchString + '%'
                    }
                },
                {
                    district_name: {
                        [Op.like]: '%' + searchString + '%'
                    }
                },
                {
                    email: {
                        [Op.like]: '%' + searchString + '%'
                    }
                }
            ]

            if ((parseInt(searchString)).toString() !== 'NaN') {
                filter[Op.or].push({
                    mobile_number: {
                        [Op.like]: '%' + parseInt(searchString) + '%'
                    }
                })
            }
        }


        const buyer_data = await buyer_detail.findAll({
            where: filter,
            include: [
                {
                    model: buyer_document,
                    as: "docs"
                },
                {
                    model: buyer_ledger,
                    as: 'ledger'
                }, {
                    model: zoho_buyer_invoices,
                    as: 'invoices'
                }
            ],
            attributes: ["id", "trader_name", "farmart_id", "recommended_credit_limit", "credit_limit", "status", "address", "state_name", "district_name", "pincode", "country", "restricted_permissions"],
            order: orderArray,
            limit: limit,
            offset: ((page - 1) * limit) || 0
        });

        const buyer_response = buyer_data.map((buyer) => {
            const permissions = {};
            Object.keys(buyer_permission_enum).forEach(ele => { permissions[buyer_permission_enum[ele]] = true })
            const restricted_permissions = buyer?.restricted_permissions?.split(",") || "";
            restricted_permissions.forEach((ele) => {
                if (Object.values(buyer_permission_enum).includes(+ele))
                    permissions[ele] = false
            });
            let gst_no = ''
            if (buyer.docs && buyer.docs.length > 0) {
                buyer.docs.forEach(doc => {
                    if (doc.type === docType.gst)
                        gst_no = doc.dataValues.value
                })
            }
            const outstanding_amount = (buyer.dataValues.ledger && buyer.dataValues.ledger.dataValues && buyer.dataValues.ledger.dataValues.outstanding_amount ? buyer.dataValues.ledger.dataValues.outstanding_amount : 0) - (buyer.dataValues.ledger && buyer.dataValues.ledger.dataValues && buyer.dataValues.ledger.dataValues.unused_credits ? buyer.dataValues.ledger.dataValues.unused_credits : 0)
            const credit_limit = buyer.dataValues.ledger && buyer.dataValues.ledger.dataValues && buyer.dataValues.ledger.dataValues.customer_credit_limit ? buyer.dataValues.ledger.dataValues.customer_credit_limit : 0

            return {
                permissions,
                _id: buyer.id,
                farmartId: buyer.farmart_id,
                creditLimit: buyer.credit_limit,
                status: buyer.status,
                recommended_credit_limit: buyer.recommended_credit_limit,
                traderName: buyer.trader_name,
                address: buyer.address,
                gst_no: gst_no,
                state: buyer.state_name,
                district: buyer.district_name,
                pincode: buyer.pincode,
                country: buyer.country,
                available_credit_limit: credit_limit - outstanding_amount,
            }
        });

        return { status: HTTP_status_codes.ok, data: buyer_response };
    } catch (err) {
        error_log(err);
        return {
            status: HTTP_status_codes.internalServerError,
            data: {
                message: "Something bad happened",
                error: err.message,
            },
        };
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/buyer/services/get_buyer_credit_details_service.js
const buyer_detail_model = require('../../../../database/models_v2/buyer/buyer_detail');
const buyer_ledger_model = require('../../../../database/models_v2/buyer/buyer_ledger');
const zoho_buyer_invoices_model = require('../../../../database/models_v2/zoho_buyer_invoices');
const error_log = require('../../../../middelware/error_log');
const round_off_to_two_decimal = require('../../../v1/utilities/round_off/round_off_to_two_decimal');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const get_buyer_credit_details_service = async ({ buyer_id }) => {
    return new Promise(async (resolve, reject) => {
        try {
            const buyer = await buyer_detail_model.findOne({
                where: {
                    is_active: true,
                    id: buyer_id
                },
                include: [
                    {
                        model: buyer_ledger_model,
                        as: 'ledger'
                    },
                    {
                        model: zoho_buyer_invoices_model,
                        as: 'invoices'
                    }
                ]
            });
            if (!buyer) {
                throw new ValidationError('invalid buyer id');
            }
            const credit_details = generate_response(buyer);
            return resolve(credit_details);
        } catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    })
}

const generate_response = (buyer) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const invoices = buyer.invoices;
        let due_date = new Date(new Date().toLocaleDateString());
        let overdue_amount = 0;
        // calculate overdue amount
        for (let i = 0; i < invoices.length; i++) {
            if (invoices[i] && invoices[i].balance > 0 && invoices[i].due_date < new Date(new Date().toLocaleDateString())) {
                overdue_amount += invoices[i].balance;
                if (invoices[i].due_date <= due_date) {
                    due_date = invoices[i].due_date;
                    // eslint-disable-next-line no-undef
                    due_by = invoices[i].due_days;
                }
            }
        }
        const response = {
            overdue_amount: round_off_to_two_decimal(overdue_amount),
            outstanding_amount: round_off_to_two_decimal(buyer.ledger && buyer.ledger && buyer.ledger.outstanding_amount ? buyer.ledger.outstanding_amount : 0) - (buyer.ledger && buyer.ledger && buyer.ledger.unused_credits ? buyer.ledger.unused_credits : 0),
            allocated_credit_limit: buyer.ledger && buyer.ledger && buyer.ledger.customer_credit_limit ? buyer.ledger.customer_credit_limit : 0,
            balance_to_be_adjusted: buyer.ledger && buyer.ledger && buyer.ledger.unused_credits ? buyer.ledger.unused_credits : 0
        }
        return response;

    } catch (err) {
        throw err;
    }
}

module.exports = {
    get_buyer_credit_details_service,
    generate_response
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/retailer/swagger/index.js
module.exports = {
    tags: {
        name: 'retailer'
    },
    paths: {
        '/': {
            post: {
                tags: ['retailer'],
                summary: 'add retailer',
                description: '',
                operationId: 'add_retailer',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'header',
                        name: 'geolocation',
                        description: '',
                        required: true,
                        type: 'string'
                    },
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        required: true,
                        schema: {
                            required: [
                                'name',
                                'type',
                                'business_name',
                                'email',
                                'mobile_number',
                                'full_address',
                                'state_id',
                                'district_id',
                                'pincode',
                                'lat',
                                'long',
                                'accuracy',
                                'category'
                            ],
                            type: 'object',
                            properties: {
                                retailer_id: {
                                    type: 'number'
                                },
                                name: {
                                    type: 'string'
                                },
                                type: {
                                    type: 'number'
                                },
                                business_name: {
                                    type: 'string'
                                },
                                email: {
                                    type: 'string'
                                },
                                mobile_number: {
                                    type: 'string'
                                },
                                full_address: {
                                    type: 'string'
                                },
                                state_id: {
                                    type: 'number'
                                },
                                district_id: {
                                    type: 'number'
                                },
                                pincode: {
                                    type: 'string'
                                },
                                lat: {
                                    type: 'string'
                                },
                                long: {
                                    type: 'string'
                                },
                                accuracy: {
                                    type: 'number'
                                },
                                category: {
                                    type: 'number'
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            },
            get: {
                tags: ['retailer'],
                summary: 'fetch all retailers details',
                description: '',
                operationId: 'fetch_all_retailers',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'limit',
                        description: '',
                        type: 'number',
                        required: false
                    },
                    {
                        in: 'query',
                        name: 'page',
                        description: '',
                        type: 'number',
                        required: false
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        },
        '/panel': {
            post: {
                tags: ['retailer'],
                summary: 'add retailer by panel',
                description: '',
                operationId: 'add_retailer_by_panel',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        required: true,
                        schema: {
                            required: [
                                'name',
                                'type',
                                'business_name',
                                'email',
                                'mobile_number',
                                'full_address',
                                'state_id',
                                'district_id',
                                'pincode',
                                'lat',
                                'long',
                                'category',
                                'referred_by'
                            ],
                            type: 'object',
                            properties: {
                                retailer_id: {
                                    type: 'number'
                                },
                                name: {
                                    type: 'string'
                                },
                                type: {
                                    type: 'number'
                                },
                                business_name: {
                                    type: 'string'
                                },
                                email: {
                                    type: 'string'
                                },
                                mobile_number: {
                                    type: 'string'
                                },
                                full_address: {
                                    type: 'string'
                                },
                                state_id: {
                                    type: 'number'
                                },
                                district_id: {
                                    type: 'number'
                                },
                                pincode: {
                                    type: 'string'
                                },
                                lat: {
                                    type: 'string'
                                },
                                long: {
                                    type: 'string'
                                },
                                category: {
                                    type: 'number'
                                },
                                referred_by: {
                                    type: 'number'
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/detail': {
            get: {
                tags: ['retailer'],
                summary: 'fetch retailer details',
                description: '',
                operationId: 'fetch_retailer_details',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'retailer_id',
                        description: '',
                        type: 'number',
                        required: true
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/types': {
            get: {
                tags: ['retailer'],
                summary: 'fetch all types of retailer',
                description: '',
                operationId: 'fetch_type_of_retailer',
                security: [{ Bearer: ['read'] }],
                parameters: [],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/update_doc': {
            post: {
                tags: ['retailer'],
                summary: 'update retailer documents',
                description: '',
                operationId: 'update_retailer_docs',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'header',
                        name: 'geolocation',
                        description: '',
                        required: true,
                        type: 'string'
                    },
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        required: true,
                        schema: {
                            required: [
                                'retailer_id',
                                'doc_id',
                                'type',
                                'number',
                                'front_url',
                                'status'
                            ],
                            type: 'object',
                            properties: {
                                retailer_id: {
                                    type: 'number'
                                },
                                doc_id: {
                                    type: 'number'
                                },
                                type: {
                                    type: 'number'
                                },
                                number: {
                                    type: 'string'
                                },
                                additional_data: {
                                    type: 'string'
                                },
                                front_url: {
                                    type: 'string'
                                },
                                back_url: {
                                    type: 'string'
                                },
                                status: {
                                    type: 'number'
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/update_doc/panel': {
            post: {
                tags: ['retailer'],
                summary: 'update retailer documents by panel',
                description: '',
                operationId: 'update_retailer_docs_by_panel',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'body',
                        name: 'body',
                        description: '',
                        required: true,
                        schema: {
                            required: [
                                'retailer_id',
                                'doc_id',
                                'type',
                                'number',
                                'front_url',
                                'status'
                            ],
                            type: 'object',
                            properties: {
                                retailer_id: {
                                    type: 'number'
                                },
                                doc_id: {
                                    type: 'number'
                                },
                                type: {
                                    type: 'number'
                                },
                                number: {
                                    type: 'string'
                                },
                                additional_data: {
                                    type: 'string'
                                },
                                front_url: {
                                    type: 'string'
                                },
                                back_url: {
                                    type: 'string'
                                },
                                status: {
                                    type: 'number'
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/docs': {
            get: {
                tags: ['retailer'],
                summary: 'fetch retailer documents',
                description: '',
                operationId: 'fetch_all_retailer_docs',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'retailer_id',
                        description: '',
                        type: 'number',
                        required: true
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/mobile_number_check': {
            get: {
                tags: ['retailer'],
                summary: 'check if mobile number already exist',
                description: '',
                operationId: 'check_mobile_number_exist',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'mobile_number',
                        description: '',
                        type: 'string',
                        required: true
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        }
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/retailer/index.js
const router = require('express').Router();
const fetch_all_retailer_docs_controller = require('./controllers/fetch_all_retailer_docs_controller');
const add_retailer_controller = require('./controllers/add_retailer_controller');
const check_mobile_number_exist_controller = require('./controllers/check_mobile_number_exist_controller');
const fetch_retailer_details_controller = require('./controllers/fetch_retailer_details_controller');
const fetch_type_of_retailer_controller = require('./controllers/fetch_type_of_retailer_controller');
const update_retailer_docs_controller = require('./controllers/update_retailer_docs_controller');
// const fetch_all_retailers_controller = require('./controllers/fetch_all_retailers_controller');
const add_retailer_by_panel_controller = require('./controllers/add_retailer_by_panel_controller');
const update_retailer_docs_by_panel_controller = require('./controllers/update_retailer_docs_by_panel_controller');

router.get('/types', fetch_type_of_retailer_controller);
router.post('/', add_retailer_controller);
router.post('/update_doc', update_retailer_docs_controller);
router.post('/panel', add_retailer_by_panel_controller);
router.post('/update_doc/panel', update_retailer_docs_by_panel_controller);
router.get('/docs', fetch_all_retailer_docs_controller);
router.get('/detail', fetch_retailer_details_controller);
/** @deprecated */
// router.get("/", fetch_all_retailers_controller);
router.get('/mobile_number_check', check_mobile_number_exist_controller)

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/retailer/controllers/check_mobile_number_exist_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const check_mobile_number_exist_service = require('../services/check_mobile_number_exist_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { mobile_number } = req.query;
        if (!mobile_number) {
            throw new ValidationError('mobile_number is mandatory query param');
        }
        const mobile_number_exist = await check_mobile_number_exist_service(mobile_number);
        const response = create_api_response(true, 'successfull', mobile_number_exist);
        return res.status(http_status_code_enum.ok).json(response);
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/retailer/controllers/fetch_all_retailer_docs_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const fetch_all_retailer_docs_service = require('../services/fetch_all_retailer_docs_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { retailer_id } = req.query;
        if (!retailer_id) {
            throw new ValidationError('retailer_id is mandatory query param');
        }
        const retailer_docs = await fetch_all_retailer_docs_service(retailer_id);
        const retailer_docs_response = create_api_response(true, 'successfull', retailer_docs);
        return res.status(http_status_code_enum.ok).json(retailer_docs_response);
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/retailer/controllers/fetch_type_of_retailer_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const fetch_type_of_retailer_service = require('../services/fetch_type_of_retailer_service');

module.exports = async (req, res) => {
    try {
        let retailer_types = await fetch_type_of_retailer_service();
        let retailer_types_response = create_api_response(true, "successfull", retailer_types);
        return res.status(http_status_code_enum.ok).json(retailer_types_response);
    }
    catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}




File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/retailer/controllers/add_retailer_by_panel_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const add_retailer_service = require('../services/add_retailer_service');
const joi = require('joi');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const validation_result = reatiler_schema.validate(req.body);
        if (validation_result.error) throw new ValidationError(validation_result.error.message);
        const {
            retailer_id,
            name,
            type,
            business_name,
            email,
            mobile_number,
            full_address,
            state_id,
            district_id,
            pincode,
            lat,
            long,
            category,
            referred_by
        } = validation_result.value;

        const { user_profile_id } = req.user || {};

        const added_retailer = await add_retailer_service(
            retailer_id,
            name,
            // eslint-disable-next-line no-undef
            profession_id = type,
            business_name,
            email,
            mobile_number,
            full_address,
            state_id,
            district_id,
            null, // taluk_id
            pincode,
            lat,
            long,
            null, // accuracy
            category,
            referred_by,
            user_profile_id,
            null // req_location
        );
        const added_retailer_response = create_api_response(true, 'successfull', added_retailer);
        return res.status(http_status_code_enum.ok).json(added_retailer_response);
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}

const reatiler_schema = joi.object({
    retailer_id: joi.number().positive(),
    name: joi.string().trim().required(),
    type: joi.number().required(),
    business_name: joi.string().trim().required(),
    email: joi.string().trim().email().required(),
    mobile_number: joi.string().trim().length(10).regex(/^[0-9]+$/).required(),
    full_address: joi.string().trim().required(),
    state_id: joi.number().positive().required(),
    district_id: joi.number().positive().required(),
    pincode: joi.string().trim().length(6).regex(/^[0-9]+$/).required(),
    category: joi.number().required(),
    referred_by: joi.number().positive().required(),
    lat: joi.string().trim().required(),
    long: joi.string().trim().required()
});



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/retailer/controllers/update_retailer_docs_by_panel_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const update_retailer_docs_service = require('../services/update_retailer_docs_service');
const joi = require('joi');
const { documentNameToTypeApp } = require('../../../../enums/market_linkage/enums/procurementSources');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const validation_result = retailer_docs_schema.validate(req.body);
        if (validation_result.error) throw new ValidationError(validation_result.error.message);
        const {
            retailer_id,
            doc_id,
            type,
            number,
            additional_data,
            front_url,
            back_url,
            status
        } = validation_result.value;

        const updated_retailer_docs = await update_retailer_docs_service(
            retailer_id,
            doc_id,
            type,
            number,
            additional_data,
            front_url,
            back_url,
            status,
            null // req_location
        );
        const updated_retailer_docs_response = create_api_response(true, 'successfull', updated_retailer_docs);
        return res.status(http_status_code_enum.ok).json(updated_retailer_docs_response);
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}

const retailer_docs_schema = joi.object({
    retailer_id: joi.number().positive().required(),
    doc_id: joi.number().positive().required(),
    type: joi
        .number()
        .equal(...Object.values(documentNameToTypeApp))
        .required(),
    number: joi.string().trim().allow('').required(),
    additional_data: joi
        .alternatives()
        .conditional('type', {
            is: documentNameToTypeApp.bankAccount,
            then: joi.string().trim().allow('').required(),
            otherwise: joi.string().trim().allow('')
        }),
    front_url: joi.string().trim().allow('').required(),
    back_url: joi.string().trim().allow(''),
    status: joi.number().required()
});



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/retailer/controllers/fetch_retailer_details_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const fetch_retailer_details_service = require('../services/fetch_retailer_details_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const { retailer_id } = req.query;
        if (!retailer_id) {
            throw new ValidationError('retailer_id is mandatory query param');
        }
        const retailer_detail = await fetch_retailer_details_service(retailer_id);
        const retailer_detail_response = create_api_response(true, 'successfull', retailer_detail);
        return res.status(http_status_code_enum.ok).json(retailer_detail_response);
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/retailer/controllers/fetch_all_retailers_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const fetch_all_retailers_service = require('../services/fetch_all_retailers_service');

module.exports = async (req, res) => {
    try {
        let { limit, page } = req.query;
        limit = (limit && parseInt(limit) <= 50 && parseInt(limit) >= 0) ? parseInt(limit) : 50;
        page = (page && parseInt(page) >= 1) ? parseInt(page) : 1;
        let retailer_detail = await fetch_all_retailers_service(limit, page);
        let retailer_detail_response = create_api_response(true, "successfull", retailer_detail);
        return res.status(http_status_code_enum.ok).json(retailer_detail_response);
    }
    catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/retailer/controllers/update_retailer_docs_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const update_retailer_docs_service = require('../services/update_retailer_docs_service');
const joi = require('joi');
const { documentNameToTypeApp } = require('../../../../enums/market_linkage/enums/procurementSources');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const validation_result = retailer_docs_schema.validate(req.body);
        if (validation_result.error) throw new ValidationError(validation_result.error.message);
        const {
            retailer_id,
            doc_id,
            type,
            number,
            additional_data,
            front_url,
            back_url,
            status
        } = validation_result.value;

        if (!req.headers.geolocation) { throw new ValidationError('geolocation header missing'); }
        const req_location = JSON.parse(req.headers.geolocation);

        const updated_retailer_docs = await update_retailer_docs_service(
            retailer_id,
            doc_id,
            type,
            number,
            additional_data,
            front_url,
            back_url,
            status,
            req_location
        );
        const updated_retailer_docs_response = create_api_response(true, 'successfull', updated_retailer_docs);
        return res.status(http_status_code_enum.ok).json(updated_retailer_docs_response);
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}

const retailer_docs_schema = joi.object({
    retailer_id: joi.number().positive().required(),
    doc_id: joi.number().positive().required(),
    type: joi
        .number()
        .equal(...Object.values(documentNameToTypeApp))
        .required(),
    number: joi.string().trim().allow('').required(),
    additional_data: joi
        .alternatives()
        .conditional('type', {
            is: documentNameToTypeApp.bankAccount,
            then: joi.string().trim().allow('').required(),
            otherwise: joi.string().trim().allow('')
        }),
    front_url: joi.string().trim().allow('').required(),
    back_url: joi.string().trim().allow(''),
    status: joi.number().required()
});



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/retailer/controllers/add_retailer_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const add_retailer_service = require('../services/add_retailer_service');
const joi = require('joi');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const validation_result = reatiler_schema.validate(req.body);
        if (validation_result.error) throw new ValidationError(validation_result.error.message);
        const {
            retailer_id,
            name,
            type,
            business_name,
            email,
            mobile_number,
            full_address,
            state_id,
            district_id,
            taluk_id,
            pincode,
            lat,
            long,
            accuracy,
            category
        } = validation_result.value;

        const { user_profile_id } = req.user || {};

        if (!req.headers.geolocation) { throw new ValidationError('geolocation header missing'); }
        const req_location = JSON.parse(req.headers.geolocation);

        const added_retailer = await add_retailer_service(
            retailer_id,
            name,
            // eslint-disable-next-line no-undef
            profession_id = type,
            business_name,
            email,
            mobile_number,
            full_address,
            state_id,
            district_id,
            taluk_id,
            pincode,
            lat,
            long,
            accuracy,
            category,
            null, // referred_by
            user_profile_id,
            req_location
        );
        const added_retailer_response = create_api_response(true, 'successfull', added_retailer);
        return res.status(http_status_code_enum.ok).json(added_retailer_response);
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}

const reatiler_schema = joi.object({
    retailer_id: joi.number().positive(),
    name: joi.string().trim().required(),
    type: joi.number().required(),
    business_name: joi.string().trim().required(),
    email: joi.string().trim().email().required(),
    mobile_number: joi.string().trim().length(10).regex(/^[0-9]+$/).required(),
    full_address: joi.string().trim().required(),
    state_id: joi.number().positive().required(),
    district_id: joi.number().positive().required(),
    taluk_id: joi.number().positive().required(),
    pincode: joi.string().trim().length(6).regex(/^[0-9]+$/).required(),
    category: joi.number().required(),
    lat: joi.string().trim().required(),
    long: joi.string().trim().required(),
    accuracy: joi.number().required()
});



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/retailer/services/fetch_retailer_details_service.js
const locations_model = require('../../../../database/models_v2/global/locations');
const master_district_model = require('../../../../database/models_v2/location/master_district');
const master_state_model = require('../../../../database/models_v2/location/master_state');
const master_taluka_model = require('../../../../database/models_v2/location/master_taluka');
const master_merchant_detail_model = require('../../../../database/models_v2/merchant/master_merchant_detail');
const error_log = require('../../../../middelware/error_log');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const fetch_retailer_details_service = (retailer_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            const merchant_details = await master_merchant_detail_model.findOne({
                where: {
                    is_active: true,
                    id: retailer_id
                },
                include: [
                    {
                        model: locations_model,
                        where: {
                            is_active: true
                        },
                        required: false
                    },
                    {
                        model: master_state_model,
                        where: {
                            is_active: true
                        },
                        required: false
                    },
                    {
                        model: master_district_model,
                        where: {
                            is_active: true
                        },
                        required: false
                    },
                    {
                        model: master_taluka_model,
                        where: {
                            is_active: true
                        },
                        required: false
                    }
                ]
            })
            if (!merchant_details) {
                throw new ValidationError('invalid retailer id')
            }
            const merchant_details_reponse = {
                retailer_id: merchant_details.id,
                farmart_id: merchant_details.farmart_id,
                name: merchant_details.name,
                type: merchant_details.profession_id,
                business_name: merchant_details.business_name,
                email: merchant_details.email,
                mobile_number: merchant_details.mobile_number,
                full_address: merchant_details.full_address,
                state_id: merchant_details.state_id,
                district_id: merchant_details.district_id,
                taluk_id: merchant_details.taluk_id,
                state_name: merchant_details.master_state?.name,
                district_name: merchant_details.master_district?.name,
                taluk_name: merchant_details.master_taluka?.name ?? null,
                pincode: merchant_details.pincode,
                lat: merchant_details.location?.latitude || null,
                long: merchant_details.location?.longitude || null,
                accuracy: merchant_details.location?.accuracy || null,
                category: merchant_details.category,
                referred_by: merchant_details.referred_by,
                status_of_retailer: merchant_details.status
            }
            resolve(merchant_details_reponse);
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

module.exports = fetch_retailer_details_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/retailer/services/add_retailer_service.js
const master_merchant_detail_model = require('../../../../database/models_v2/merchant/master_merchant_detail');
const merchant_detail_model = require('../../../../database/models/merchant_detail');
const master_state_model = require('../../../../database/models_v2/location/master_state');
const master_district_model = require('../../../../database/models_v2/location/master_district');
const locations_model = require('../../../../database/models_v2/global/locations');
const { categories } = require('../../../../enums/market_linkage/enums/categories');
const error_log = require('../../../../middelware/error_log');
const merchant_platform = require('../../../../enums/merchant/merchant_platform');
const { documentNameToTypeApp, documentStatus } = require('../../../../enums/market_linkage/enums/procurementSources');
const { generate_unique_id } = require('../../../../common_services/unique_id_generation/generate_unique_id');
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const merchant_verification_docs_model = require('../../../../database/models_v2/merchant/merchant_verification_docs');
const merchant_stages = require('../../../../enums/market_linkage/enums/v2/merchant_stages');
const { pa_activity_log_service } = require('../../../../common_services/market_linkage/logging/pa_activity_log_service');
const { actionPerformed } = require('../../../../enums/market_linkage/enums/paActivityEnum');
const master_taluka_model = require('../../../../database/models_v2/location/master_taluka');
const sync_master_merchant_detail = require('../../../../common_services/merchant/sync_master_merchant_detail');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const add_retailer_service = (
    retailer_id,
    name,
    profession_id,
    business_name,
    email,
    mobile_number,
    full_address,
    state_id,
    district_id,
    taluk_id,
    pincode,
    lat,
    long,
    accuracy,
    category,
    referred_by,
    user_profile_id,
    req_location
) => {
    return new Promise(async (resolve, reject) => {
        try {
            mobile_number = parseInt(mobile_number);
            let master_merchant_detail = {
                name,
                farmart_id: '',
                profession_id,
                status: merchant_stages.PENDING_FOR_DOCS,
                business_name,
                mobile_number,
                platform_id: merchant_platform.ML,
                stage: 1, // activated or deactivated stage
                merchant_profile_pic: '',
                full_address,
                state_name: '',
                district_name: '',
                pincode,
                taluk_name: '',
                email,
                whatsapp_number: null,
                onboarded_on_ml: Date.now(),
                onboarded_on_retailer: null,
                is_active: true,
                merchant_detail_id: null,
                location_id: null,
                added_by: user_profile_id,
                state_id,
                district_id,
                taluk_id,
                category,
                referred_by: referred_by ?? user_profile_id
            }
            if (retailer_id) {
                master_merchant_detail = await master_merchant_detail_model.findOne({
                    where: {
                        id: retailer_id,
                        is_active: true
                    }
                });
                if (master_merchant_detail.status === merchant_stages.LEAD_ASSIGNED) {
                    master_merchant_detail.status = merchant_stages.PENDING_FOR_DOCS;
                }
                if (!master_merchant_detail.platform_id) {
                    master_merchant_detail.platform_id = merchant_platform.ML;
                    // already a merchant check
                    const merchant_detail_exist = await merchant_detail_model.findOne({
                        where: {
                            mobile_number: master_merchant_detail.mobile_number
                        }
                    });
                    if (merchant_detail_exist) {
                        master_merchant_detail.merchant_detail_id = merchant_detail_exist.id;
                        master_merchant_detail.onboarded_on_retailer = merchant_detail_exist.createdAt;
                        master_merchant_detail.platform_id = merchant_platform.Both;
                    }
                }
                if (!master_merchant_detail.stage) {
                    master_merchant_detail.stage = 1;
                }
                if (!master_merchant_detail.onboarded_on_ml) {
                    master_merchant_detail.onboarded_on_ml = Date.now();
                }
                master_merchant_detail.name = name;
                master_merchant_detail.profession_id = profession_id;
                master_merchant_detail.business_name = business_name;
                master_merchant_detail.email = email;
                // master_merchant_detail.mobile_number = mobile_number;
                master_merchant_detail.full_address = full_address;
                master_merchant_detail.pincode = pincode;
                master_merchant_detail.category = category;
                master_merchant_detail.referred_by = referred_by ?? user_profile_id;
                master_merchant_detail.state_id = state_id;
                master_merchant_detail.district_id = district_id;
                master_merchant_detail.taluk_id = taluk_id;
            }
            if (!retailer_id || (retailer_id && master_merchant_detail.mobile_number !== mobile_number)) {
                const mobile_exist = await master_merchant_detail_model.findOne({
                    where: {
                        mobile_number,
                        is_active: true
                    }
                });
                if (mobile_exist) {
                    throw new ValidationError('mobile number already exist');
                } else {
                    master_merchant_detail.mobile_number = mobile_number;
                }
            }

            // state
            const state_exist = await master_state_model.findOne({
                where: {
                    id: master_merchant_detail.state_id,
                    is_active: true
                }
            });
            if (state_exist) {
                master_merchant_detail.state_name = state_exist.name;
            }
            // district
            const district_exist = await master_district_model.findOne({
                where: {
                    id: master_merchant_detail.district_id,
                    master_state_id: master_merchant_detail.state_id,
                    is_active: true
                }
            });
            if (district_exist) {
                master_merchant_detail.district_name = district_exist.name;
            }
            // taluk
            if (taluk_id) {
                const taluk_exist = await master_taluka_model.findOne({
                    where: {
                        id: master_merchant_detail.taluk_id,
                        master_state_id: master_merchant_detail.state_id,
                        master_district_id: master_merchant_detail.district_id,
                        is_active: true
                    }
                });
                if (taluk_exist) {
                    master_merchant_detail.taluk_name = taluk_exist.name;
                }
            }
            // unique id generation
            if (!master_merchant_detail.farmart_id) {
                const uniqueIdResult = await generate_unique_id({
                    state: master_merchant_detail.state_name,
                    district: master_merchant_detail.district_name,
                    category: categories.ProcurementSources
                })

                if (uniqueIdResult.status !== HTTP_status_codes.ok) {
                    throw new ValidationError(uniqueIdResult.data.error)
                }
                master_merchant_detail.farmart_id = uniqueIdResult.data;
            }
            // location
            const location_obj_added = await locations_model.findOrCreate({
                where: {
                    latitude: lat,
                    longitude: long,
                    accuracy: accuracy ?? 1000,
                    is_active: true
                }
            });
            master_merchant_detail.location_id = location_obj_added[0].id;
            // already a merchant check
            const merchant_detail_exist = await merchant_detail_model.findOne({
                where: {
                    mobile_number: master_merchant_detail.mobile_number
                }
            });
            if (merchant_detail_exist) {
                master_merchant_detail.merchant_detail_id = merchant_detail_exist.id;
                master_merchant_detail.onboarded_on_retailer = merchant_detail_exist.createdAt;
                master_merchant_detail.platform_id = merchant_platform.Both;
            }

            let added_master_merchant;
            if (retailer_id) {
                added_master_merchant = await master_merchant_detail.save();
            } else {
                added_master_merchant = await master_merchant_detail_model.build(master_merchant_detail).save();
                if (req_location) {
                    pa_activity_log_service({
                        paId: added_master_merchant.added_by,
                        actionLocation: req_location,
                        actionTimestamp: new Date(Date.now()),
                        actionPerformed: actionPerformed.RetailerOnboarding,
                        retailerId: added_master_merchant.id
                    }).catch((err) => {
                        error_log(err);
                    })
                }
                // add empty documents
                const document_list = Object.entries(documentNameToTypeApp).map((doc_type) => {
                    return {
                        front_image: '',
                        back_image: '',
                        remarks: '',
                        value: '',
                        document_type: doc_type[1],
                        status: documentStatus.PENDING,
                        master_merchant_id: added_master_merchant.id,
                        is_active: true
                    }
                })
                await merchant_verification_docs_model.bulkCreate(document_list);
            }
            sync_master_merchant_detail(mobile_number)
                .catch(err => {
                    error_log(err);
                });

            return resolve({
                id: added_master_merchant.id,
                farmart_id: added_master_merchant.farmart_id,
                status: added_master_merchant.status
            });
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

module.exports = add_retailer_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/retailer/services/update_retailer_docs_service.js
const { pa_activity_log_service } = require('../../../../common_services/market_linkage/logging/pa_activity_log_service');
const master_merchant_detail_model = require('../../../../database/models_v2/merchant/master_merchant_detail');
const merchant_verification_docs_model = require('../../../../database/models_v2/merchant/merchant_verification_docs');
const bank_account_detail_model = require('../../../../database/models_v2/transactions/account_details');
const { actionPerformed } = require('../../../../enums/market_linkage/enums/paActivityEnum');
const { documentNameToTypeApp, documentStatus } = require('../../../../enums/market_linkage/enums/procurementSources');
const merchant_stages = require('../../../../enums/market_linkage/enums/v2/merchant_stages');
const error_log = require('../../../../middelware/error_log');
const { send_notification_for_ml } = require('../../../../notifier/firebase_admin_ml');
const ml_notification_event_enum = require('../../../../enums/notification/ml_notification_event_enum');
const langauge = require('../../../../entities_v2/metadata/enums/global/langauge');
const fetch_ml_notification_string = require('../../../../entities_v2/notification/services/fetch_ml_notification_string');
const check_gst_pan_exist_service = require('../../../v3/retailer/services/check_gst_pan_exist_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const update_retailer_docs_service = (
    retailer_id,
    doc_id,
    type,
    number,
    additional_data,
    front_url,
    back_url,
    status,
    req_location
) => {
    return new Promise(async (resolve, reject) => {
        try {
            let [retailer_detail, retailer_docs] = await Promise.all([
                master_merchant_detail_model.findOne({
                    where: {
                        is_active: true,
                        id: retailer_id
                    }
                }),
                merchant_verification_docs_model.findAll({
                    where: {
                        is_active: true,
                        master_merchant_id: retailer_id
                    }
                })
            ]);
            if (!retailer_detail) {
                throw new ValidationError('invalid retailer id');
            }

            // check if pancard and gst already exist
            if ((type === documentNameToTypeApp.pancard || type === documentNameToTypeApp.gst) &&
                retailer_docs.find((doc) => doc.id === doc_id && doc.document_type === type)?.value !== number) {
                const gst_pan_exist = await check_gst_pan_exist_service(type, number);
                if (gst_pan_exist?.exists) { throw new ValidationError('retailer already exist with same pan or gst'); }
            } else if (!(retailer_detail.name && retailer_detail.profession_id && retailer_detail.business_name && retailer_detail.email && retailer_detail.mobile_number &&
                // check if mandatory details of retailer exist
                retailer_detail.full_address && retailer_detail.state_id && retailer_detail.district_id && retailer_detail.pincode && retailer_detail.category &&
                retailer_detail.referred_by && retailer_detail.location_id)) {
                throw new ValidationError('retailer part 1 details are not submitted completely');
            }

            if (!retailer_docs.length) {
                throw new ValidationError('no document found');
            }

            if (req_location) {
                pa_activity_log_service({
                    paId: retailer_detail.added_by,
                    actionLocation: req_location,
                    actionTimestamp: new Date(Date.now()),
                    actionPerformed: actionPerformed.RetailerDocumentSubmission,
                    retailerId: retailer_detail.id
                }).catch((err) => {
                    error_log(err);
                })
            }

            let doc_to_update = retailer_docs
                .find((doc) => doc.id === doc_id && doc.document_type === type);
            if (!doc_to_update) {
                throw new ValidationError('invalid doc id or type');
            }

            if (type === documentNameToTypeApp.bankAccount) {
                const bank_account = await bank_account_detail_model.findOne({
                    where: {
                        is_active: true,
                        master_merchant_id: retailer_detail.id
                    }
                })
                if (bank_account) {
                    bank_account.account_number = number;
                    bank_account.ifsc_code = additional_data;
                    await bank_account.save();
                } else {
                    await bank_account_detail_model.build({
                        account_number: number,
                        ifsc_code: additional_data,
                        account_holder_name: '',
                        is_active: true,
                        master_merchant_id: retailer_detail.id
                    }).save();
                }
            }
            doc_to_update.value = number;
            doc_to_update.front_image = front_url;
            doc_to_update.back_image = back_url;
            doc_to_update.status = status;
            doc_to_update = await doc_to_update.save();
            retailer_detail.status = set_retailer_status(retailer_docs);
            retailer_detail = await retailer_detail.save();

            // push notification for rejected doc
            if (doc_to_update.status === documentStatus.REJECTED) {
                const variables = {
                    retailer_farmart_id: retailer_detail.farmart_id,
                    document_name: 'Retailer',
                    retailer_name: retailer_detail.name
                }
                const notification = await fetch_ml_notification_string(ml_notification_event_enum.retailer_document_rejected, langauge.english, variables);
                if (notification) {
                    send_notification_for_ml([retailer_detail.added_by], notification.title, notification.message, notification.image)
                        .catch(err => {
                            error_log(err);
                        });
                }
            }

            // push notification for retailer approved
            if (retailer_detail.status === merchant_stages.APPROVED) {
                const variables = {
                    retailer_farmart_id: retailer_detail.farmart_id,
                    retailer_name: retailer_detail.name
                }
                const notification = await fetch_ml_notification_string(ml_notification_event_enum.retailer_approved, langauge.english, variables);
                if (notification) {
                    send_notification_for_ml([retailer_detail.added_by], notification.title, notification.message, notification.image)
                        .catch(err => {
                            error_log(err);
                        });
                }
            }

            resolve({
                status_of_doc: doc_to_update.status,
                retailer_status: retailer_detail.status
            });
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

const set_retailer_status = (retailer_docs) => {
    let retailer_status = merchant_stages.PENDING_FOR_DOCS;
    // if any of the document is rejected, retailer is rejected
    const rejected_doc = retailer_docs.find((doc) => doc.status === documentStatus.REJECTED);
    if (rejected_doc) {
        retailer_status = merchant_stages.DOC_REJECTED;
    } else {
        // seperating gst and license docs
        const gst_doc = retailer_docs.find((doc) => doc.document_type === documentNameToTypeApp.gst);
        const license_doc = retailer_docs.find((doc) => doc.document_type === documentNameToTypeApp.licence);
        const remaining_docs = retailer_docs
            .filter((doc) => doc.document_type !== documentNameToTypeApp.gst &&
                doc.document_type !== documentNameToTypeApp.licence)

        // check for any unuploaded document
        const unuploaded_doc = remaining_docs
            .find((doc) => !doc.front_image);

        // if all documents and (gst or license) is uploaded, retailer is pending for approval
        if (!unuploaded_doc &&
            (gst_doc.front_image || license_doc.front_image)) {
            retailer_status = merchant_stages.PENDING_FOR_APPROVAL;
        }

        // check for any unapproved document
        const unapproved_doc = remaining_docs
            .find((doc) => doc.status !== documentStatus.APPROVED);

        // if all documents and (gst or license) is approved, retailer is approved
        if (!unapproved_doc &&
            (gst_doc.status === documentStatus.APPROVED || license_doc.status === documentStatus.APPROVED)) {
            retailer_status = merchant_stages.APPROVED;
        }
    }
    return retailer_status;
}

module.exports = update_retailer_docs_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/retailer/services/check_mobile_number_exist_service.js
const master_merchant_detail_model = require('../../../../database/models_v2/merchant/master_merchant_detail');
const error_log = require('../../../../middelware/error_log');

const check_mobile_number_exist_service = (mobile_number) => {
    return new Promise(async (resolve, reject) => {
        try {
            const mobile_exist = await master_merchant_detail_model.findOne({
                where: {
                    is_active: true,
                    mobile_number
                }
            })
            resolve({ exists: mobile_exist ? true : false });
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

module.exports = check_mobile_number_exist_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/retailer/services/fetch_all_retailers_service.js
const user_profile_model = require('../../../../database/models/user_profile');
const master_district_model = require('../../../../database/models_v2/location/master_district');
const master_state_model = require('../../../../database/models_v2/location/master_state');
const master_taluka_model = require('../../../../database/models_v2/location/master_taluka');
const master_merchant_detail_model = require('../../../../database/models_v2/merchant/master_merchant_detail');
const error_log = require('../../../../middelware/error_log');

const fetch_all_retailers_service = (limit, page) => {
    return new Promise(async (resolve, reject) => {
        try {
            const all_merchant_details = await master_merchant_detail_model.findAndCountAll({
                where: {
                    is_active: true
                },
                include: [
                    {
                        model: user_profile_model,
                        as: 'added_by_user',
                        where: {
                            is_active: true
                        },
                        required: true
                    },
                    {
                        model: master_state_model,
                        where: {
                            is_active: true
                        },
                        required: false
                    },
                    {
                        model: master_district_model,
                        where: {
                            is_active: true
                        },
                        required: false
                    },
                    {
                        model: master_taluka_model,
                        where: {
                            is_active: true
                        },
                        required: false
                    }
                ],
                distinct: ['id'],
                order: [["updated_at", "DESC"]],
                limit: limit,
                offset: ((page - 1) * limit) || 0
            })
            const merchant_details_reponse = (all_merchant_details.rows).map((merchant) => {
                return {
                    retailer_id: merchant.id,
                    farmart_id: merchant.farmart_id,
                    name: merchant.name,
                    business_name: merchant.business_name,
                    mobile_number: merchant.mobile_number,
                    state_id: merchant.state_id,
                    district_id: merchant.district_id,
                    taluk_id: merchant.taluk_id,
                    pa_name: merchant.added_by_user?.name,
                    pa_id: merchant.added_by_user?.id,
                    state_name: merchant.master_state?.name,
                    district_name: merchant.master_district?.name,
                    taluk_name: merchant.master_taluka?.name ?? null,
                    pa_mobile_number: merchant.added_by_user?.mobile_number,
                    status: merchant.status,
                    created_date: merchant.createdAt
                }
            })
            resolve({ retailers: merchant_details_reponse,  total_records: all_merchant_details.count});
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

module.exports = fetch_all_retailers_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/retailer/services/fetch_type_of_retailer_service.js
const { procurementTypeToName } = require('../../../../enums/market_linkage/enums/procurementSources');
const error_log = require('../../../../middelware/error_log');

const fetch_type_of_retailer_service = () => {
    return new Promise(async (resolve, reject) => {
        try {
            const retailer_types = Object.entries(procurementTypeToName);
            const response_data = retailer_types.map((type) => {
                return {
                    id: parseInt(type[0]),
                    name: type[1]
                }
            })
            resolve({ retailer_types: response_data });
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

module.exports = fetch_type_of_retailer_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/retailer/services/fetch_all_retailer_docs_service.js
const master_merchant_detail_model = require('../../../../database/models_v2/merchant/master_merchant_detail');
const merchant_verification_docs_model = require('../../../../database/models_v2/merchant/merchant_verification_docs');
const bank_account_details_model = require('../../../../database/models_v2/transactions/account_details');
const { documentNameToTypeApp } = require('../../../../enums/market_linkage/enums/procurementSources');
const error_log = require('../../../../middelware/error_log');

const fetch_all_retailer_docs_service = (retailer_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            const merchant_docs = await merchant_verification_docs_model.findAll({
                where: {
                    is_active: true,
                    master_merchant_id: retailer_id
                },
                include: [
                    {
                        model: master_merchant_detail_model,
                        where: {
                            is_active: true
                        },
                        include: [
                            {
                                model: bank_account_details_model,
                                where: {
                                    is_active: true
                                },
                                required: false,
                                order: ['updated_at', 'DESC']
                            }
                        ],
                        required: true
                    }
                ]
            })
            const merchant_docs_reponse = merchant_docs.map((doc) => {
                return {
                    doc_id: doc.id,
                    type: doc.document_type,
                    number: doc.value ? doc.value : "",
                    front_url: doc.front_image ? doc.front_image : "",
                    back_url: doc.back_image ? doc.back_image : "",
                    status_of_doc: doc.status,
                    additional_data: (doc.document_type === documentNameToTypeApp.bankAccount) ? (doc.master_merchant_detail?.bank_account_details?.[0]?.ifsc_code || "") : undefined
                }
            })
            resolve({ retailer_docs: merchant_docs_reponse });
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

module.exports = fetch_all_retailer_docs_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/swagger-config/index.js
const swagger_json = require("./swagger.json");
// const global_config = require("../../../config/global_config");
// const { readdir } = require("fs").promises;
// const path = require("path");
const error_log = require("../../../middelware/error_log");
const swagger_controller = require("../../../common_services/swagger/swagger_controller");

module.exports = async (req, res) => {
  try {
    let url_slicing_number=-1
    swagger_controller(req,res,__dirname,swagger_json,url_slicing_number);
    // let directory_str = __dirname;
    // directory_str = directory_str.split(path.sep).slice(0, -1).join(path.sep);
    // let directories = await readdir(directory_str, { withFileTypes: true });
    // directories = directories.filter((e) => {
    //   if (e.name.indexOf(".") < 0) return true;
    //   return false;
    // });
    // let swagger_tags = [];
    // let swagger_paths = {};
    // for (let index = 0; index < directories.length; index++) {
    //   const entity_dir_path = [directory_str, directories[index].name].join(
    //     path.sep
    //   );
    //   const entity_dirs = await readdir(entity_dir_path, { withFileTypes: true });
    //   if (entity_dirs.map((e) => e.name).indexOf("swagger") > 0) {
    //     const swagger_def = require(`${entity_dir_path}${path.sep}swagger`);
    //     swagger_tags = [...swagger_tags, swagger_def.tags];
    //     Object.keys(swagger_def.paths).forEach((ele) => {
    //       swagger_paths[`/${swagger_def.tags.name}${ele}`] =
    //         swagger_def.paths[ele];
    //     });
    //   }
    // }
    // const host = req.get("host") || "localhost:3000";
    // const swagger_base_url = `${host}`;
    // swagger_json["host"] = swagger_base_url;
    // swagger_json["tags"] = [...swagger_json["tags"], ...swagger_tags];
    // swagger_json.paths = { ...swagger_json.paths, ...swagger_paths };
    // res.send(swagger_json);
  }
  catch (err) {
    error_log(err);
    res.status(400).json({
      message: "swagger error"
    });
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/mandi_taxation/swagger/index.js
module.exports = {
    tags: {
        name: "mandi_taxation",
    },
    paths: {
        "/": {
            get: {
                tags: ["mandi_taxation"],
                summary: "fetch all mandi tax documents",
                description: "",
                operationId: "fetch_mandi_tax_docs",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "query",
                        name: "limit",
                        description: "max limit is 10",
                        type: "number",
                        required: false
                    },
                    {
                        in: "query",
                        name: "page",
                        description: "",
                        type: "number",
                        required: false
                    },
                    {
                        in: "query",
                        name: "search_param",
                        description: "",
                        type: "string",
                        required: false
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        }
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/mandi_taxation/index.js
const router = require("express").Router();
const fetch_mandi_tax_docs_controller = require("./controllers/fetch_mandi_tax_docs_controller");

router.get("/", fetch_mandi_tax_docs_controller);

module.exports=router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/mandi_taxation/controllers/fetch_mandi_tax_docs_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const { fetch_mandi_tax_docs_service } = require('../services/fetch_mandi_tax_docs_service');
module.exports = async (req, res) => {

    try {
        let { limit, page, search_param } = req.query;
        limit = (limit && parseInt(limit) <= 10 && parseInt(limit) >= 0) ? parseInt(limit) : 10;
        page = (page && parseInt(page) >= 1) ? parseInt(page) : 1;
        let mandi_taxes_list = await fetch_mandi_tax_docs_service(limit, page, search_param);
        let mandi_tax_response = create_api_response(true, "successfull", mandi_taxes_list);
        return res.status(http_status_code_enum.ok).json(mandi_tax_response);
    }
    catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v2/mandi_taxation/services/fetch_mandi_tax_docs_service.js
const { Op } = require('sequelize');
const error_log = require('../../../../middelware/error_log');
const mandi_taxation_model = require('../../../../database/models_v2/mandi_taxation/mandi_taxation');
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const procurment_crop_sample_model = require('../../../../database/models_v2/procurement_sample/procurment_crop_sample');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const order_delivery_documents_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_documents');
const procurement_bill_components_model = require('../../../../database/models_v2/procurement_payments/procurement_bill_components');
const buyer_order_detail_model = require('../../../../database/models_v2/buyer_order/buyer_order_detail');
const buyer_order_delivery_info_model = require('../../../../database/models_v2/buyer_order/buyer_order_delivery_info');
const master_merchant_detail_model = require('../../../../database/models_v2/merchant/master_merchant_detail');
const po_unloading_qty_detail_model = require('../../../../database/models_v2/po_unloading/po_unloading_qty_detail');
const po_unloading_docs_model = require('../../../../database/models_v2/po_unloading/po_unloading_docs');
const buyer_detail_model = require('../../../../database/models_v2/buyer/buyer_detail');
const purchase_crop_bill_component_enum = require('../../../../enums/market_linkage/enums/purchase_crop_bill_component_enum');
const { procurementTypeToName } = require('../../../../enums/market_linkage/enums/procurementSources');
const { UnloadingQuantityType } = require('../../../../enums/market_linkage/enums/unloading_quantity_enum');
const dispatch_doc_type = require('../../../../enums/market_linkage/enums/dispatch_doc_type');
const unloading_doc_type_enum = require('../../../../enums/market_linkage/enums/unloading_doc_type_enum');
const identify_file_type_from_url = require('../../../../common_services/url_to_file_type/identify_file_type_from_url');
const purchase_crop_orders = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');

const fetch_mandi_tax_docs_service = (limit, page, search_param) => {
    return new Promise(async (resolve, reject) => {
        try {
            const resp = {
                mandi_tax_docs: [],
                total_records: 0
            };

            const where_obj = {
                is_active: true
            }

            if (search_param) {
                where_obj[Op.or] = [
                    {
                        farmart_id: {
                            [Op.like]: '%' + search_param + '%'
                        }
                    },
                    {
                        zoho_po_id: {
                            [Op.like]: '%' + search_param + '%'
                        }
                    }
                ]
            }

            const mandi_tax_docs = await mandi_taxation_model.findAll({
                where: { is_active: true },
                order: [['createdAt', 'DESC']],
                include: [{
                    model: purchase_crop_orders,
                    where: where_obj
                }]
            });

            if (mandi_tax_docs.length > 0) {
                const sorted_mandi_docs = get_sorted_mandi_docs(mandi_tax_docs, page, limit);
                const mandi_doc_ids = sorted_mandi_docs.map((doc) => doc.id);
                const [purchase_orders, buyer_orders] = await get_purchase_and_buyer_order(mandi_doc_ids);
                resp.mandi_tax_docs = await generate_response(sorted_mandi_docs, purchase_orders, buyer_orders);
                resp.total_records = mandi_tax_docs.length
            }
            return resolve(resp);
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

function get_sorted_mandi_docs (mandi_tax_docs, page, limit) {
    // eslint-disable-next-line no-useless-catch
    try {
        const pending_stock_transfer_9r = mandi_tax_docs
            .filter((doc) => doc.status === 0 &&
                (doc.url_stock_transfer_9r === null ||
                    doc.url_stock_transfer_9r_gate_pass === null));

        const pending_url_3rd_9r = mandi_tax_docs
            .filter((doc) => doc.status === 0 &&
                (doc.url_3rd_9r === null ||
                    doc.url_3rd_9r_gate_pass === null) &&
                !pending_stock_transfer_9r.includes(doc));

        const pending_mandatory_docs = pending_stock_transfer_9r.concat(pending_url_3rd_9r);
        const remaining_docs = mandi_tax_docs.filter((doc) => !pending_mandatory_docs.includes(doc));
        const sorted_mandi_docs = pending_mandatory_docs.concat(remaining_docs);
        return sorted_mandi_docs.slice((page - 1) * limit, page * limit);
    } catch (error) {
        throw error
    }
}

async function get_purchase_and_buyer_order (mandi_doc_ids) {
    // eslint-disable-next-line no-useless-catch
    try {
        const [purchase_orders, buyer_orders] = await Promise.all([
            purchase_crop_orders_model.findAll({
                where: {
                    is_active: true
                },
                include: [
                    {
                        model: mandi_taxation_model,
                        where: {
                            is_active: true,
                            id: { [Op.in]: mandi_doc_ids }
                        },
                        required: true
                    },
                    {
                        model: procurment_crop_sample_model,
                        attributes: ['id', 'is_mandi_tax_paid'],
                        where: {
                            is_active: true
                        }
                    },
                    {
                        model: order_delivery_detail_model,
                        required: false,
                        where: {
                            is_active: true
                        },
                        include: {
                            model: order_delivery_documents_model,
                            required: false,
                            where: {
                                is_active: 1,
                                order_delivery_document_type_id: dispatch_doc_type['handover document']
                            }
                        }
                    },
                    {
                        model: master_merchant_detail_model,
                        where: {
                            is_active: true
                        },
                        required: true
                    },
                    {
                        model: procurement_bill_components_model,
                        where: {
                            order_bill_component_id: purchase_crop_bill_component_enum.mandi_tax,
                            is_active: true
                        },
                        required: false
                    }
                ]
            }),
            buyer_order_detail_model.findAll({
                where: {
                    is_active: true
                },
                include: [
                    {
                        model: mandi_taxation_model,
                        where: {
                            is_active: true,
                            id: { [Op.in]: mandi_doc_ids }
                        },
                        required: true
                    },
                    {
                        model: po_unloading_qty_detail_model,
                        required: false,
                        where: {
                            is_active: true,
                            po_unloading_qty_type_id: {
                                [Op.in]: [UnloadingQuantityType.ACCEPTED_WEIGHT, UnloadingQuantityType.DAMAGE_WEIGHT]
                            }
                        }
                    },
                    {
                        model: po_unloading_docs_model,
                        required: false,
                        where: {
                            is_active: true,
                            po_unloading_doc_type_id: unloading_doc_type_enum['UNLOADING RECEIPT']
                        }
                    },
                    {
                        model: buyer_detail_model,
                        where: {
                            is_active: true
                        }
                    },
                    {
                        model: buyer_order_delivery_info_model,
                        as: 'delivery_info',
                        where: {
                            is_active: true
                        }
                    }
                ]
            })
        ])
        return [purchase_orders, buyer_orders]
    } catch (error) {
        throw error
    }
}

async function generate_response (mandi_taxes_list, purchase_orders, buyer_orders) {
    // eslint-disable-next-line no-useless-catch
    try {
        const resp = [];
        for (let index = 0; index < mandi_taxes_list.length; index++) {
            const mandi_tax = mandi_taxes_list[index];
            const purchase_order = purchase_orders
                .find((po) => po.mandi_taxations
                    ?.find((doc) => doc.id === mandi_tax.id)) ?? {};
            const sales_order = buyer_orders
                .find((so) => so.mandi_taxations
                    ?.find((doc) => doc.id === mandi_tax.id)) ?? {};
            const order_delivery_detail = purchase_order.order_delivery_detail ?? {};
            const order_delivery_docs = order_delivery_detail.order_delivery_documents ?? [];
            const buyer_accept_weight = (sales_order.po_unloading_qty_details || []).find(doc => doc.po_unloading_qty_type_id === UnloadingQuantityType.ACCEPTED_WEIGHT)?.value;
            const buyer_damage_weight = (sales_order.po_unloading_qty_details || []).find(doc => doc.po_unloading_qty_type_id === UnloadingQuantityType.DAMAGE_WEIGHT)?.value;
            const unloading_docs = sales_order.po_unloading_docs ?? [];
            const unloading_receipt_doc = unloading_docs?.find(doc => doc.purchase_crop_order_id === purchase_order.id) ?? {};

            const [
                type_of_1st_9r,
                type_of_1st_9r_gate_pass,
                type_of_3rd_9r,
                type_of_3rd_9r_gate_pass,
                type_of_6r,
                type_of_stock_transfer_9r,
                type_of_stock_transfer_9r_gate_pass
            ] = await Promise.all([
                identify_file_type_from_url(mandi_tax?.url_1st_9r),
                identify_file_type_from_url(mandi_tax?.url_1st_9r_gate_pass),
                identify_file_type_from_url(mandi_tax?.url_3rd_9r),
                identify_file_type_from_url(mandi_tax?.url_3rd_9r_gate_pass),
                identify_file_type_from_url(mandi_tax?.url_6r),
                identify_file_type_from_url(mandi_tax?.url_stock_transfer_9r),
                identify_file_type_from_url(mandi_tax?.url_stock_transfer_9r_gate_pass)
            ]);

            const _mandi_tax = {
                id: mandi_tax.id,
                source_state_name: purchase_order?.master_merchant_detail?.state_name ?? '',
                destination_state_name: sales_order?.buyer_detail?.state_name ?? '',
                po_id: purchase_order.id ?? 0,
                po_number: purchase_order?.farmart_id ?? '',
                so_Id: sales_order?.id ?? 0,
                so_number: sales_order?.farmart_id ?? '',
                status_of_po: purchase_order?.status ?? 0,
                mandi_tax_paid_at_source: purchase_order?.procurment_crop_sample?.is_mandi_tax_paid ?? false,
                po_type: procurementTypeToName[purchase_order?.master_merchant_detail?.profession_id ?? 0],
                handover_weight: order_delivery_detail?.gross_weight ?? 0,
                handover_document_url: order_delivery_docs[0]?.doc_url ?? '', // add handover doc from loading detail PO
                buyer_name: sales_order?.buyer_detail?.legal_name ?? '',
                delivery_location: sales_order?.delivery_info?.address ?? '',
                buyer_mandi_license: sales_order?.licence_number ?? '', // add buyer mandi licence SO
                unloading_weight: buyer_accept_weight + buyer_damage_weight, // add unloading weight from unloading detail A+R+D
                unloading_receipt: unloading_receipt_doc.doc_url ?? '', // add unloading receipt from unloading detail
                buyer_accept_weight, // add buyer accepted weight
                url_6r: mandi_tax?.url_6r ?? '',
                name_6r: mandi_tax?.name_6r ?? '',
                url_1st_9r: mandi_tax?.url_1st_9r ?? '',
                name_1st_9r: mandi_tax?.name_1st_9r ?? '',
                url_1st_9r_gate_pass: mandi_tax?.url_1st_9r_gate_pass ?? '',
                name_1st_9r_gate_pass: mandi_tax?.name_1st_9r_gate_pass ?? '',
                url_stock_transfer_9r: mandi_tax?.url_stock_transfer_9r ?? '',
                name_stock_transfer_9r: mandi_tax?.name_stock_transfer_9r ?? '',
                url_stock_transfer_9r_gate_pass: mandi_tax?.url_stock_transfer_9r_gate_pass ?? '',
                name_stock_transfer_9r_gate_pass: mandi_tax?.name_stock_transfer_9r_gate_pass ?? '',
                url_3rd_9r: mandi_tax?.url_3rd_9r ?? '',
                name_3rd_9r: mandi_tax?.name_3rd_9r ?? '',
                url_3rd_9r_gate_pass: mandi_tax?.url_3rd_9r_gate_pass ?? '',
                name_3rd_9r_gate_pass: mandi_tax?.name_3rd_9r_gate_pass ?? '',
                type_of_1st_9r,
                type_of_1st_9r_gate_pass,
                type_of_3rd_9r,
                type_of_3rd_9r_gate_pass,
                type_of_6r,
                type_of_stock_transfer_9r,
                type_of_stock_transfer_9r_gate_pass,
                status: mandi_tax?.status ?? 0
            };
            resp.push(_mandi_tax);
        }
        return resp;
    } catch (error) {
        throw error
    }
}

module.exports = {
    fetch_mandi_tax_docs_service,
    get_sorted_mandi_docs,
    get_purchase_and_buyer_order,
    generate_response
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v4/index.js
const router = require("express").Router();

const swagger = require("./swagger-config");
const bucket_testing = require("./bucket_testing");
const app_banner = require("./app_banner");
const message = require("./message");
const merchant = require("./merchant");


router.use("/swagger", swagger);
router.use("/bucket_testing", bucket_testing);
router.use("/app_banner", app_banner);
router.use("/message", message);
router.use("/merchant", merchant);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v4/message/swagger/index.js
module.exports = {
  tags: {
    name: "message",
  },
  paths: {
    "/languages": {
      get: {
          tags: ["message"],
          summary: "sms languages",
          description: '',
          operationId: "sms_languages",
          security: [{ Bearer: ["read"] }],
          parameters: [],
          responses: {
              400: {
                  description: "Invalid input",
              },
              200: {
                  description: "success",
              },
          }
      }
  },
  "/send": {
    post: {
        tags: ["message"],
        summary: "send message based on sms_type_id and language",
        description: '',
        operationId: "send_sms_template",
        security: [{ Bearer: ["read"] }],
        parameters: [
            {
                "in": "body",
                "name": "body",
                "required": ["sms_type_id", "mobile_numbers"],
                "properties": {
                    "mobile_numbers": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "sms_type_id": {
                        "type": "number"
                    },
                    "send_to_all": {
                      "type": "boolean"
                  },
                    "variables": {
                        "type": "object"
                    },
                    "send_on_whatsapp": {
                        "type": "boolean"
                    },
                    "whatsapp_variables": {
                        "type": "object"
                    }
                }
            }
        ],
        responses: {
            400: {
                description: "Invalid input",
            },
            200: {
                description: "success",
            },
        }
    }
},
  },
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v4/message/index.js
const router = require("express").Router();
const authorize = require("../../../middelware/authorized_routes");
const user_roles_enum = require("../../../entities/metadata/enums/user_roles");
const get_all_sms_languages_controller = require("./controllers/get_all_sms_languages_controller");
const send_sms_controller = require("./controllers/send_sms_controller");

router.get("/languages", authorize([user_roles_enum.Merchant]), get_all_sms_languages_controller);
router.post("/send", authorize([user_roles_enum.Merchant]), send_sms_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v4/message/controllers/send_sms_controller.js
const error_log = require('../../../../middelware/error_log');
const language_enum = require('../../../../enums/global/language');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const send_sms_service = require('../services/send_sms_service');
const country_code_enum = require('../../../../enums/global/country_code');
const checking_merchant_name_and_shop_name = require('../../../../common_services/merchant/checking_merchant_name_and_shop_name');
const feature_usage_counter_service = require('../../../../common_services/features/feature_usage_counter_service');
const features_enum = require('../../../../enums/features/features_enum');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const merchant_detail_id = req.user.user_profile_id;
        const send_to_all = req.body.send_to_all || false;
        const sms_type_id = req.body.sms_type_id;
        const language_id = req.body.language || req.headers.language || language_enum.hindi;
        const variables = req.body.variables || {};
        const mobile_numbers = req.body.mobile_numbers || [];
        const send_on_whatsapp = req.body.send_on_whatsapp || false;
        const country_code = req.user?.country?.country_code || country_code_enum.india;
        if (mobile_numbers.length === 0 && !send_to_all) {
            throw new ValidationError('required mobile_numbers or send to all ');
        }
        const shop_name_merchant_name_exists = await checking_merchant_name_and_shop_name({
            merchant_detail_id,
            shop_name: true,
            merchant_name: true
        });
        if (!shop_name_merchant_name_exists) {
            throw new ValidationError('shop name and merchant name are required !!');
        }
        const data = await send_sms_service(
            merchant_detail_id,
            language_id,
            mobile_numbers,
            sms_type_id,
            variables,
            send_on_whatsapp,
            country_code,
            send_to_all);
        // calling feature_usage_counter service
        feature_usage_counter_service({ feature_id: features_enum.shop_promotion, merchant_detail_id })
            .catch(err => {
                error_log(err);
            });
        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'success', data));
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v4/message/controllers/get_all_sms_languages_controller.js
const error_log = require("../../../../middelware/error_log");
// const get_sms_langauge_service = require('../services/get_sms_language_service');
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const http_status_code_enum = require("../../../../enums/global/http_status_codes");
const get_all_sms_languages_service = require("../services/get_all_sms_languages_service");

module.exports = async (req, res) => {
    try {
        let sms_languages = await get_all_sms_languages_service();
        return res.status(http_status_code_enum.ok).json(create_api_response(true, "success", { sms_languages }));
    }
    catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v4/message/services/send_sms_service.js
const error_log = require('../../../../middelware/error_log');
const submit_sms_from_app_service = require('../../../../entities_v2/sms/service/submit_sms_from_app');
const check_and_send_opt_out_message_service = require('../../../../entities_v2/sms/service/check_and_sent_opt_out_message');
const khaad_beej_dawai_bonus_sms_send = require('../../../../entities_v2/sms/service/khaad_beej_dawai_bonus_sms_send');
const register_merchant_game_task_progress = require('../../../../entities_v2/gamification/services/register_merchant_game_task_progress');
const gamification_task_enum = require('../../../../entities_v2/metadata/enums/gamification/task_enum');
const filter_farmer_mobile_numbers_service = require('../../../../entities/sms/service/v5/filter_farmer_mobile_numbers');
const sms_type_enum = require('../../../../entities/metadata/enums/sms_template_enum');
const custom_sms_format_variables = require('../../../../entities_v2/sms/service/custom_sms/custom_sms_format_variables');
const { get_farmers_mobile_number_of_merchant } = require('../../../../data_abstraction_layer/farmer/farmer_details');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (merchant_detail_id, language_id, mobile_numbers, sms_type_id, variables, send_on_whatsapp, country_code, send_to_all) => {
    try {
        if (send_to_all) {
            mobile_numbers = await get_farmers_mobile_number_of_merchant({ merchant_detail_id })
        } else {
            mobile_numbers = await filter_farmer_mobile_numbers_service(
                merchant_detail_id,
                mobile_numbers
            );
        }
        if (mobile_numbers.length === 0) {
            throw new ValidationError('mobile_numbers is a mandatory parameter');
        }
        if (sms_type_id === sms_type_enum.custom_message) {
            variables.formatted_with_commas = await custom_sms_format_variables(
                variables.formatted_with_commas
            );
        }
        const sms_submission_result = await submit_sms_from_app_service(
            merchant_detail_id,
            language_id,
            mobile_numbers,
            sms_type_id,
            variables,
            null,
            send_on_whatsapp,
            true,
            country_code
        );
        check_and_send_opt_out_message_service(
            merchant_detail_id,
            mobile_numbers
        ).catch((err) => {
            error_log(err);
        });
        khaad_beej_dawai_bonus_sms_send(
            merchant_detail_id,
            sms_type_id,
            mobile_numbers,
            80
        ).catch((err) => {
            error_log(err);
        });
        register_merchant_game_task_progress(
            gamification_task_enum['Send SMS'],
            merchant_detail_id
        ).catch((err) => {
            error_log(err);
        });
        return sms_submission_result;
    } catch (err) {
        error_log(err);
        throw err;
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v4/message/services/get_all_sms_languages_service.js
const error_log = require("../../../../middelware/error_log");
const get_language_service = require("../../../../common_services/global/get_languages_service")
module.exports = async () => {
    try {
        let sms_languages = await get_language_service(true)
        sms_languages = sms_languages.map(ele => {
            return {
                language_name: ele.dataValues.language_name,
                language_id: ele.dataValues.language_id,
                langauge_code: ele.dataValues.language_code
            }
        });
        return sms_languages;
    }
    catch (err) {
        error_log(err);
        return [];
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v4/app_banner/swagger/index.js
module.exports = {
  tags: {
    name: "app_banner"
  },
  paths: {
    "/": {
      get: {
        tags: ["app_banner"],
        summary: "fetch app_banner",
        description: '',
        operationId: "fetch_app_banner",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            "in": "query",
            "name": "state_id",
            type: "number",
            required: true
          },
          {
            "in": "query",
            "name": "district_id",
            type: "number",
            required: true
          }
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        }
      }
    },
    "/app_banner_log": {
      post: {
        tags: ["app_banner"],
        summary: "add app_banner log",
        description: '',
        operationId: "app_banner_log",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            "in": "formData",
            "name": "app_banner_id",
            type: "number",
          }
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        }
      }
    }
  }
}   


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v4/app_banner/index.js
const router = require("express").Router();
const authorize = require("../../../middelware/authorized_routes");
const user_roles_enum = require("../../../entities/metadata/enums/user_roles");
const get_app_banner_controller = require('./controllers/get_app_banner_controller');
const add_app_banner_log_controller = require("./controllers/add_app_banner_log_controller");

router.get("/", authorize([user_roles_enum.Merchant]), get_app_banner_controller);
router.post("/app_banner_log", authorize([user_roles_enum.Merchant]), add_app_banner_log_controller);

module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v4/app_banner/controllers/add_app_banner_log_controller.js
const error_log = require("../../../../middelware/error_log");
const add_app_banner_log_service = require("../services/add_app_banner_log_service");
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");

module.exports = async (req, res) => {
    try {
        const merchant_detail_id = +req.user.user_profile_id;
        const app_banner_id = +req.body.app_banner_id || null;

        if (!app_banner_id) {
            let err_message = "app_banner_id is missing"
            return res.status(http_status_code_enum.bad_request)
                .json(create_api_response(false, err_message, null));
        }

        await add_app_banner_log_service(merchant_detail_id, app_banner_id);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, "success"));
    }
    catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message, null));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v4/app_banner/controllers/get_app_banner_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const get_app_banner_service = require('../services/get_app_banner_service');
module.exports = async (req, res) => {
    try {
        const state_id = +req.query.state_id;
        const district_id = +req.query.district_id;
        const master_merchant_id = +req.user.master_merchant_id || null;
        if (!state_id || !district_id) {
            let err_message = "state_id and district_id are mandatory params";
            return res.status(http_status_code_enum.bad_request)
                .json(create_api_response(false, err_message, null));
        }
        let config = {};
        if (master_merchant_id)
            config.for_ml = true;
        else
            config.for_non_ml = true;
        // let app_banner_data = await get_app_banner_service(state_id, district_id, config);
        let app_banner_response = create_api_response(true, "successfull", { "app_banner_data": [] });
        res.status(http_status_code_enum.ok).json(app_banner_response);
    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v4/app_banner/services/add_app_banner_log_service.js
const app_banner_log_model = require("../../../../database/models_v2/app_banner/app_banner_log");
const error_log = require("../../../../middelware/error_log");

module.exports = async (merchant_detail_id, app_banner_id) => {
    try {
        const app_banner_log = await app_banner_log_model.findOrCreate({
            where: {
                merchant_detail_id: merchant_detail_id,
                app_banner_id: app_banner_id,
                is_active: 1
            }
        });
        return app_banner_log;
    }
    catch (ex) {
        error_log(ex);
        return null;
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v4/app_banner/services/get_app_banner_service.js
const error_log = require('../../../../middelware/error_log');
const app_banners_model = require('../../../../database/models/metadata_model/app_banners');
const app_banner_state_district_map_model = require('../../../../database/models_v2/app_banner/app_banner_state_district_map');
const { Op } = require('sequelize');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const get_app_banner_service = async (state_id, district_id, { for_ml = false, for_non_ml = false }) => {
    try {
        const now = new Date();
        const app_banner_where_query = {
            is_active: true,
            live_from: {
                [Op.lte]: now
            },
            live_till: {
                [Op.gte]: now
            }
        }
        if (for_ml) { app_banner_where_query.for_ml = true; }
        if (for_non_ml) { app_banner_where_query.for_non_ml = true; }
        const app_banner_data = await app_banners_model.findAll({
            where: app_banner_where_query,
            include: [
                {
                    model: app_banner_state_district_map_model,
                    attributes: [],
                    where: {
                        [Op.or]: [
                            {
                                state_id,
                                district_id
                            },
                            {
                                state_id: null,
                                district_id: null
                            },
                            {
                                state_id,
                                district_id: null
                            }
                        ],
                        is_active: true
                    }
                }
            ],
            order: [['created_at', 'desc']]
        });
        if (app_banner_data.length === 0) {
            throw new ValidationError('no banner for this state and district')
        }
        const response_data = []
        for (let i = 0; i < app_banner_data.length; i++) {
            const response = {
                id: app_banner_data[i].id,
                screen_name: app_banner_data[i].screen_name,
                tab_name: app_banner_data[i].tab_name,
                action_link: app_banner_data[i].action_link,
                app_banner_link: app_banner_data[i].app_banner_link,
                params: null,
                promotional: app_banner_data[i].promotional
            }
            try {
                if (app_banner_data[i].params) { response.params = app_banner_data[i].params }
            } catch (err) {
                response.params = null;
                error_log(err);
            }

            if (response.tab_name) { response.action_link = null; }
            response_data.push(response);
        }
        return ({ app_banner_data: response_data })
    } catch (ex) {
        error_log(ex);
        return ({ message: ex.message });
    }
}

module.exports = get_app_banner_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v4/bucket_testing/swagger/index.js
module.exports = {
  tags: {
    name: "bucket_testing",
  },
  paths: {
    "/marketing_sections": {
      get: {
        tags: ["bucket_testing"],
        summary: "get order of marketing sections",
        description: "",
        operationId: "get_marketing_sections_order",
        security: [{ Bearer: ["read"] }],
        parameters: [],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
  },
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v4/bucket_testing/index.js
const router = require("express").Router();
const authorize = require("../../../middelware/authorized_routes");
const user_roles_enum = require("../../../entities/metadata/enums/user_roles");
const get_marketing_sections_order_for_all_controller = require("./controllers/get_marketing_sections_order_for_all_controller");

router.get("/marketing_sections",authorize([user_roles_enum.Merchant]),get_marketing_sections_order_for_all_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v4/bucket_testing/controllers/get_marketing_sections_order_for_all_controller.js
const error_log = require("../../../../middelware/error_log");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const http_status_code_enum = require("../../../../enums/global/http_status_codes");
const get_marketing_sections_order_for_all_service = require("../services/get_marketing_sections_order_for_all_service");
const country_code_enum = require("../../../../enums/global/country_code");

module.exports = async (req, res) => {
    try {
        const merchant_detail_id = +req.user.user_profile_id;
        const country_code = req.user.country?.country_code || country_code_enum.india;
        const marketing_section_order = await get_marketing_sections_order_for_all_service(merchant_detail_id, country_code);
        if (req.headers.appversion >= "7.10.2") {
            marketing_section_order.sections = marketing_section_order.sections.filter((ele) => ele !== "sell_crops");
        }
        return res.status(http_status_code_enum.ok).json(create_api_response(true, "success", { marketing_section_order }));
    }
    catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v4/bucket_testing/services/remove_sell_crop_wrt_banner.js
const error_log = require("../../../../middelware/error_log");
const is_banner_active = require("../../../../data_abstraction_layer/campaign/is_banner_active");

module.exports = async (merchant_detail_id,section=[]) => {
  try {
    const banner_active = await is_banner_active(merchant_detail_id);
    // const banner_active = false;
    if (!banner_active)
      section = section.filter(ele => ele != "sell_crops")
    return  section
  } catch (err) {
    error_log(err);
    return []
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v4/bucket_testing/services/get_marketing_sections_order_for_all_service.js
const error_log = require("../../../../middelware/error_log");
const marketing_section_order_enum = require("../../../../enums/retailer_homepage/marketing_section_order_enum");
const marketing_section_order_mongo_model = require("../../../../database/mongoose/mongoose_models/bench_testing/marketing_screen_section_orders");
const read_mongo_document = require("../../../../database/mongoose/read_document");
const merchant_occupation_type_enum = require('../../../../enums/merchant/merchant_occupation_type_enum');
const get_marketing_sections_order_service = require("../../../v3/bucket_testing/services/get_marketing_sections_order_service");
const get_merchant_occupation = require("../../../../data_abstraction_layer/merchant/get_merchant_occupation");
const country_code_enum = require("../../../../enums/global/country_code");
const remove_sell_crop_wrt_banner = require("./remove_sell_crop_wrt_banner");


const bangladesh_exclusion = ["gamification", "sell_crops", "quiz", "price_polling"]


module.exports = async (merchant_detail_id, country_code) => {
  try {
    const merchant_occupation = await get_merchant_occupation(merchant_detail_id);
    let marketing_section = {
      sections: []
    }
    //for farmer
    if (merchant_occupation?.occupation_id == merchant_occupation_type_enum.Farmer) {
      let marketing_section_order = await fetch_marketing_section_list({marketing_section_for:marketing_section_order_enum.only_farmer});
      if (marketing_section_order?.length)
        if (country_code == country_code_enum.bangladesh)
          marketing_section.sections = marketing_section_order[0].sections.filter(item => !bangladesh_exclusion.includes(item))
        else
          marketing_section.sections = marketing_section_order[0].sections;
      marketing_section.sections =await remove_sell_crop_wrt_banner(merchant_detail_id,marketing_section.sections )
    }
    //for farmer_producer_company
    else if (merchant_occupation?.occupation_id == merchant_occupation_type_enum.Farmer_Producer_Company) {
      let marketing_section_order = await fetch_marketing_section_list({marketing_section_for:marketing_section_order_enum.farmer_producer_company});
      marketing_section.sections=await remove_sell_crop_wrt_banner(merchant_detail_id,marketing_section_order[0]?.sections)
    }
    // for rest of the roles
    else {
      marketing_section = await get_marketing_sections_order_service(merchant_detail_id);
      if (country_code == country_code_enum.bangladesh)
        marketing_section.sections = marketing_section.sections.filter(item => !bangladesh_exclusion.includes(item))
      else
        marketing_section.sections = marketing_section.sections;
    }
    return marketing_section;
  } catch (err) {
    error_log(err);
    return {
      sections: []
    };
  }
};

const fetch_marketing_section_list=async({marketing_section_for})=>{
  const marketing_section_order = await read_mongo_document(marketing_section_order_mongo_model, {
    id: marketing_section_for,
    is_active: 1
  });
  return marketing_section_order;
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v4/swagger-config/index.js
const swagger_json = require("./swagger.json");
const global_config = require("../../../config/global_config");
const { readdir } = require("fs").promises;
const path = require("path");
const error_log = require("../../../middelware/error_log");
const swagger_controller = require("../../../common_services/swagger/swagger_controller");

module.exports = async (req, res) => {
  try {
    let url_slicing_number=-1
    swagger_controller(req,res,__dirname,swagger_json,url_slicing_number);
    // let directory_str = __dirname;
    // directory_str = directory_str.split(path.sep).slice(0, -1).join(path.sep);
    // let directories = await readdir(directory_str, { withFileTypes: true });
    // directories = directories.filter((e) => {
    //   if (e.name.indexOf(".") < 0) return true;
    //   return false;
    // });
    // let swagger_tags = [];
    // let swagger_paths = {};
    // for (let index = 0; index < directories.length; index++) {
    //   const entity_dir_path = [directory_str, directories[index].name].join(
    //     path.sep
    //   );
    //   const entity_dirs = await readdir(entity_dir_path, { withFileTypes: true });
    //   if (entity_dirs.map((e) => e.name).indexOf("swagger") > 0) {
    //     const swagger_def = require(`${entity_dir_path}${path.sep}swagger`);
    //     swagger_tags = [...swagger_tags, swagger_def.tags];
    //     Object.keys(swagger_def.paths).forEach((ele) => {
    //       swagger_paths[`/${swagger_def.tags.name}${ele}`] =
    //         swagger_def.paths[ele];
    //     });
    //   }
    // }
    // const host = req.get("host") || "localhost:3000";
    // const swagger_base_url = `${host}`;
    // swagger_json["host"] = swagger_base_url;
    // swagger_json["tags"] = [...swagger_json["tags"], ...swagger_tags];
    // swagger_json.paths = { ...swagger_json.paths, ...swagger_paths };
    // res.send(swagger_json);
  }
  catch (err) {
    error_log(err);
    res.status(400).json({
      message: "swagger error"
    });
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v4/merchant/swagger/index.js
module.exports = {
  tags: {
    name: "merchant",
  },
  paths: {
    "/profile": {
      put: {
        tags: ["merchant"],
        summary: "for update merchant initial stage",
        description: "update the merchant on initial stage ",
        operationId: "update_merchant_profile_v4",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "formData",
            name: "merchant_name",
            description: "this is name of the merchant",
            required: false,
            type: "string",
          },
          {
            in: "formData",
            name: "shop_address",
            description: "this is the address of the shop",
            required: false,
            type: "string",
          },
          {
            in: "formData",
            name: "occupation_id",
            description:
              "1-Agri_Retailer\n 2-Agri_Distributor_Wholesaler\n 3-Farmer_Cooperative_Society\n 4-Farmer_Producer_Company\n 5-Farmer\n 6-other",
            required: false,
            type: "string",
            enum: [1, 2, 3, 4, 5, 6],
          },
          {
            in: "formData",
            name: "business_name",
            description: "this is the merchant's business name",
            required: false,
            type: "string",
          },
          {
            in: "formData",
            name: "other_description",
            description: "",
            required: false,
            type: "string",
          },
          {
            in: "formData",
            name: "deal_in_med",
            description: "boolean",
            required: false,
            type: "boolean",
          },
          {
            in: "formData",
            name: "deal_in_fert",
            description: "boolean",
            required: false,
            type: "boolean",
          },
          {
            in: "formData",
            name: "deal_in_seed",
            description: "boolean",
            required: false,
            type: "boolean",
          },
          {
            in: "formData",
            name: "merchant_prof_pic",
            description: "string",
            required: false,
            type: "string",
          },
          {
            name: "shop_pic_url",
            in: "formData",
            description: "string",
            required: false,
            type: "string",
          },
        ],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
  },
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v4/merchant/index.js
const router = require("express").Router();
const authorize = require("../../../middelware/authorized_routes");
const user_roles_enum = require("../../../enums/user_profile/user_role");
const update_merchant_profile_v4_controller=require('./controllers/update_merchant_profile_v4_controller');

router.put("/profile", authorize([user_roles_enum.Merchant]), update_merchant_profile_v4_controller);

module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v4/merchant/controllers/update_merchant_profile_v4_controller.js
const error_log = require("../../../../middelware/error_log");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const update_merchant_profile_v3_service = require("../../../v3/merchant/services/update_merchant_profile_v3_service");
const add_occupation_of_merchant_service = require("../../../../entities/merchant/service/v4/add_occupation_of_merchant");
const language_enum = require("../../../../entities_v2/metadata/enums/global/langauge");
const country_code_enum = require("../../../../enums/global/country_code");
const occupation_type_enum = require("../../../../entities/metadata/enums/occupation_type");
module.exports = async (req, res) => {
  try {
    const country_code =
      req.user?.country?.country_code || country_code_enum.india;
    let user_profile_id = req.user.user_profile_id;
    let business_name = req.body.business_name || "";
    let merchant_name = req.body.merchant_name;
    let shop_address = req.body.shop_address;
    let occupation_id = req.body.occupation_id;
    let other_description = req.body.other_description;
    let deal_in_med = req.body.deal_in_med || false;
    let deal_in_fert = req.body.deal_in_fert || false;
    let deal_in_seed = req.body.deal_in_seed || false;
    let merchant_prof_pic = req.body.merchant_prof_pic;
    let shop_pic_url = req.body.shop_pic_url;
    const language_id = +req.headers.language || language_enum.default;
    merchant_name = merchant_name?.trim();
    // if farmer is updating then copying farmaer name in business_name
    if (occupation_id == occupation_type_enum.Farmer) {
      business_name = merchant_name;
    }
    let merchant_data = await update_merchant_profile_v3_service(
      user_profile_id,
      business_name,
      merchant_name,
      shop_address,
      deal_in_med,
      deal_in_fert,
      deal_in_seed,
      merchant_prof_pic,
      shop_pic_url,
      occupation_id,
      language_id,
      country_code
    );
    await add_occupation_of_merchant_service(
      user_profile_id,
      occupation_id,
      other_description
    );
    return res.json(create_api_response(true, merchant_data.message));
  } catch (ex) {
    error_log(ex);
    return res
      .status(http_status_code_enum.bad_request)
      .json(create_api_response(false, ex.message, null));
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/farmer/swagger/index.js
module.exports = {
  tags: {
    name: "farmer",
  },
  paths: {
    "/": {
      post: {
        tags: ["farmer"],
        summary: "add farmer",
        description: "",
        operationId: "add_farmer",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "body",
            name: "body",
            description: "",
            required: true,
            schema: {
              properties: {
                farmer_to_add: {
                  type: "array",
                  items: {
                    required: ["name", "mobile_number"],
                    properties: {
                      name: {
                        type: "string",
                      },
                      mobile_number: {
                        type: "string",
                      },
                    },
                  },
                },
              },
            },
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
      get: {
        tags: ["farmer"],
        summary: "fetch farmers",
        description: "",
        operationId: "fetch_farmers",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "page_number",
            type: "number",
          },
          {
            in: "query",
            name: "limit",
            type: "number",
          },
          {
            in: "query",
            name: "search",
            type: "string",
          },
          {
            in: "query",
            description:
              "1 - added_on, \n 2 - recent transaction first, \n 3 - descending pending amount, \n 4 - alphabetically",
            name: "sorting_param",
            type: "number",
          },
          {
            in: "query",
            description: "asc for ascending \n desc for descending",
            name: "sort_fashion",
            type: "string",
            default: "asc",
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/mobile_numbers": {
      get: {
        tags: ["farmer"],
        summary: "fetch farmers mobile numbers",
        description: "api to fetch farmer mobile numbers which are mapped to current merchant, auth= > merchant",
        operationId: "fetch_farmers_mobile_numbers",
        security: [{ Bearer: ["read"] }],
        parameters: [],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    }
  },
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/farmer/index.js
const router = require("express").Router();
const authorize = require("../../../middelware/authorized_routes");
const user_roles_enum = require("../../../enums/user_profile/user_role");
const add_farmer_controller = require('./controllers/add_farmer_controller');
const get_farmer_controller = require('./controllers/get_farmer_controller');
const get_farmer_mobile_numbers = require("./controllers/get_farmer_mobile_numbers_controller")

router.post("/", authorize([user_roles_enum.Merchant]), add_farmer_controller);
router.get("/", authorize([user_roles_enum.Merchant]), get_farmer_controller);
router.get("/mobile_numbers", authorize([user_roles_enum.Merchant]), get_farmer_mobile_numbers);

module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/farmer/controllers/get_farmer_controller.js
const error_log=require('../../../../middelware/error_log');
const create_api_response=require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const get_farmer_in_sorted_order_service=require('../services/get_farmer_in_sorted_order_service');

module.exports=async (req,res)=>{
    try{
        const merchant_detail_id=req.user.user_profile_id;
        const page_no=+req.query.page_number || 1;
        const limit=+req.query.limit || 20;
        const search=req.query.search ;
        const sorting_param=+req.query.sorting_param || 4;
        const sort_fashion=req.query.sort_fashion || 'asc';

        let farmers_of_merchant =await get_farmer_in_sorted_order_service(merchant_detail_id,page_no,limit,search,sorting_param,sort_fashion);
        let farmers_of_merchant_response=create_api_response(true,"successfull",farmers_of_merchant);
        res.status(http_status_code_enum.ok).json(farmers_of_merchant_response);
    }catch(ex){
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false,ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/farmer/controllers/get_farmer_mobile_numbers_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const get_farmer_mobile_numbers = require("../services/get_farmer_mobile_number_service")
module.exports = async (req, res) => {
    try {
        const merchant_detail_id = req.user.user_profile_id;

        let farmers_of_merchant = await get_farmer_mobile_numbers(merchant_detail_id);
        let farmers_of_merchant_response = create_api_response(true, "successfull", farmers_of_merchant);
        res.status(http_status_code_enum.ok).json(farmers_of_merchant_response);
    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/farmer/controllers/add_farmer_controller.js
// we have depricated the register_merchant_game_task_progress service on 18th jun 2024.
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const { adding_farmer_service } = require('../../../../entities/farmers/service/v4/adding_farmer_service');
const country_code_enum = require('../../../../enums/global/country_code');

const adding_farmer_controller = async (req, res) => {
    try {
        // Extract the merchant profile ID from the request user object
        const merchant_profile_id = +req.user.user_profile_id;

        // Extract the list of farmers to add from the request body
        let farmers_to_add = req.body.farmer_to_add || [];
        const farmers_to_add_length = farmers_to_add.length;

        // Extract the country code from the request user object or default to India
        const country_code = req.user?.country?.country_code || country_code_enum.india;

        let added_farmers = [];

        // Check if there are any farmers to add
        if (farmers_to_add.length > 0) {
            /* This code snippet is filtering out duplicate entries in the `farmers_to_add` array based
            on the `mobile_number` property and ensuring that the `mobile_number` is a valid
            10-digit number. Here's a breakdown of what it does: */
            farmers_to_add = [
                ...new Map( // spread operator here converts the iterators into array
                    farmers_to_add
                        .filter(obj => obj.mobile_number >= 1000000000 && obj.mobile_number < 10000000000)
                        .map(obj => [`${obj.mobile_number}`, obj]) // By using the mobile number as the key, we ensure that each key in the Map is unique.
                ).values()
            ];

            // Call the service to add farmers
            if (farmers_to_add.length > 0) { added_farmers = await adding_farmer_service({ merchant_profile_id, farmers_to_add, country_code }); }
        }

        // Create a success message
        const message = `${added_farmers.length} new farmers added from your selected ${farmers_to_add_length} successfully.`;

        // Send the success response
        return res.status(http_status_code_enum.ok).json(create_api_response(true, message, { farmers_added: added_farmers }));

    } catch (err) {
        // Log the error and send a bad request response
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}

module.exports = adding_farmer_controller



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/farmer/services/get_farmer_mobile_number_service.js
const farmer_detail_model = require("../../../../database/models/farmer_detail");
const merchant_farmer_map_model = require("../../../../database/models/merchant_farmer_map");
const error_log = require("../../../../middelware/error_log");

/**
 * 
 * @param {number} merchant_detail_id 
 * @returns [number] mobile_numbers of farmers mapped to given merchant_detail_id, [] if error
 */
module.exports = async (merchant_detail_id) => {
    try {
        const merchant_farmer_maps = await merchant_farmer_map_model.findAll({
            where: {
                merchant_detail_id,
                is_active: 1
            },
            attributes: ["farmer_detail_id"],
            include: [
                {
                    as: "farmer_detail",
                    model: farmer_detail_model,
                    where: {
                        is_active: 1
                    },
                    attributes: ["mobile_number"]
                }
            ]
        });
        const farmer_mobile_numbers = merchant_farmer_maps.map((merchant_farmer_map) => {
            return merchant_farmer_map?.farmer_detail?.mobile_number;
        })
        return farmer_mobile_numbers;
    }
    catch (err) {
        // handling fail scenario
        error_log(err);
        return [];
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/farmer/services/add_farmer_in_bulk_service.js
const error_log = require('../../../../middelware/error_log');

const user_verification_code_enum = require('../../../../entities/metadata/enums/user_verification_code');
const add_farmer_service_v4 = require('../../../../entities/farmers/service/v4/add_farmer_service_v4');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (merchant_and_farmers_maps, mapped_by_panel) => {
    return new Promise(async (resolve, reject) => {
        try {
            let added_farmers_count = 0
            const failed_records = [];
            for (let index = 0; index < merchant_and_farmers_maps.length; index++) {
                const element = merchant_and_farmers_maps[index];
                try {
                    element.farmer_mobile_number = +element.farmer_mobile_number;
                    if (!element.farmer_mobile_number) {
                        throw new ValidationError('Wrong value in mobile_number')
                    }
                    const farmer_detail = {
                        name: element.farmer_name || ' ',
                        mobile_number: element.farmer_mobile_number,
                        village: '',
                        father_name: '',
                        farmer_status_code: user_verification_code_enum.not_verified,
                        total_in_cash: 0,
                        total_in_credit: 0,
                        is_active: true
                    }
                    await add_farmer_service_v4(farmer_detail, element.merchant_detail_id, mapped_by_panel);
                    added_farmers_count = added_farmers_count + 1;
                } catch (err) {
                    failed_records.push(element);
                    error_log(err);
                }
            }
            resolve({
                added_farmers_count,
                failed_records
            });
        } catch (err) {
            error_log(err);
            reject({ message: err.message });
        }
    })
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/farmer/services/get_farmer_in_sorted_order_service.js
const error_log = require("../../../../middelware/error_log");
const farmer_detail_model = require("../../../../database/models/farmer_detail");
const merchant_farmer_map_model = require("../../../../database/models/merchant_farmer_map");
const farmer_wallet_model = require("../../../../database/models/farmer_wallet");
const shop_wallet_model = require("../../../../database/models/shop_wallet");
const sort_on_the_basis_of_enum = require("../../../../enums/farmer/sort_on_the_basis_of");
const Op = require("sequelize").Op;

module.exports = async (
  merchant_detail_id,
  page_no,
  limit,
  search,
  sorting_param,
  sort_fashion
) => {
  return new Promise(async (resolve, reject) => {
    try {
      const farmers_list = await fetching_farmers(
        merchant_detail_id,
        page_no,
        limit,
        search,
        sorting_param,
        sort_fashion
      );
      const formatted_farmer_details = await formatting_farmer_details(
        merchant_detail_id,
        farmers_list
      );
      resolve(formatted_farmer_details);
    } catch (err) {
      error_log(err);
      reject({ message: err.message });
    }
  });
};
const fetching_farmers = async (merchant_detail_id, page_no, limit, search, sorting_param, sort_fashion) => {
  let offset = (page_no - 1) * limit;
  let condition = {
    where: {
      merchant_detail_id,
      is_active: true,
      farmer_detail_id: {
        [Op.ne]: null,
      },
    },
    include: [
      {
        model: farmer_detail_model,
        as: "farmer_detail",
        where: {
          is_active: 1,
        },
        attributes: [
          "id",
          "name",
          "mobile_number",
          "total_in_cash",
          "total_in_credit",
          "whatsapp_enabled",
        ],
      },
    ],
    attributes: [
      "dnd_activated",
      "createdAt",
      "farmer_name",
      "is_opt_out",
      "farmer_detail_id",
    ],
  };

  switch (sorting_param) {
    case sort_on_the_basis_of_enum.ADDED_ON:
      condition.order = [["created_at", sort_fashion]];
      break;

    default:
      condition.order = [["farmer_name", sort_fashion]];
      break;
  }
  let farmer_ids = [];

  if (search) {
    condition.include[0].where[Op.or] = [
      {
        mobile_number: {
          [Op.like]: "%" + search + "%",
        },
      },
    ];
    let farmers_of_merchant_list = await merchant_farmer_map_model.findAll(
      condition
    );
    delete condition.include[0].where[Op.or]
    farmer_ids = farmers_of_merchant_list.map((farmer) => {
      return farmer.farmer_detail_id;
    });
    condition.where[Op.or] = [
      {
        farmer_detail_id: { [Op.in]: farmer_ids },
      },
      {
        farmer_name: {
          [Op.like]: "%" + search + "%",
        },
      },
    ];
  }
  condition.limit = limit;
  condition.offset = offset;
  let farmers_of_merchant_list = await merchant_farmer_map_model.findAndCountAll(
    condition
  );
  return farmers_of_merchant_list;
}
const formatting_farmer_details = async (user_profile_id, farmers_of_merchant_list) => {
  const is_merchant_using_whatsapp = await shop_wallet_model.findOne({
    where: {
      marchant_detail_id: user_profile_id,
      is_active: 1,
    },
    attributes: ["id", "marchant_detail_id", "whatsapp_enabled"],
  });
  let new_farmers_of_merchant_list = [];
  let farmer_list = farmers_of_merchant_list.rows
  if (farmer_list) {
    for (let index = 0; index < farmer_list.length; index++) {
      const element = farmer_list[index];
      //if mapped farmer has name then assign it as the original farmer name
      let new_farmer_name = element["dataValues"]["farmer_name"];
      element["dataValues"]["farmer_detail"]["dataValues"]["name"] = new_farmer_name;
      if (element.farmer_detail.dataValues.whatsapp_enabled == null)
        element.farmer_detail.dataValues.whatsapp_enabled = 1;
      if (
        is_merchant_using_whatsapp.dataValues.whatsapp_enabled == 0 ||
        is_merchant_using_whatsapp.dataValues.whatsapp_enabled == false
      ) {
        element["dataValues"]["farmer_detail"]["dataValues"][
          "whatsapp_enabled"
        ] = 0;
      }
      let farmer_pending_credit = await farmer_wallet_model.findOne({
        where: {
          merchant_detail_id: user_profile_id,
          farmer_detail_id: element.farmer_detail.id,
          is_active: true,
        },
      });
      if (farmer_pending_credit) {
        element.setDataValue(
          "pending_amount",
          farmer_pending_credit.total_credit_amount
        );
        element.setDataValue(
          "cash_amount",
          farmer_pending_credit.total_cash_amount
        );
        element.setDataValue(
          "payment_receive_amount",
          farmer_pending_credit.total_payment_received
        );
      } else {
        element.setDataValue("pending_amount", 0);
        element.setDataValue("cash_amount", 0);
        element.setDataValue("payment_receive_amount", 0);
      }
      if (!element.dataValues.is_opt_out) {
        element.setDataValue("is_opt_out", false);
      }
      new_farmers_of_merchant_list.push(element);
    }
  }
  return { total_farmers: farmers_of_merchant_list.count, farmers: new_farmers_of_merchant_list };
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/auth/swagger/index.js
module.exports = {
    tags: {
        name: 'auth'
    },
    paths: {
        '/verify_otp': {
            post: {
                tags: ['auth'],
                summary: 'validate otp and generate token',
                description: 'validate otp send to the merchant mobile number and provide token to them',
                operationId: 'validate_otp',
                security: [],
                parameters: [
                    {
                        in: 'formData',
                        name: 'mobile_number',
                        description: 'mandatory',
                        required: true,
                        type: 'integer',
                        format: 'int64'
                    },
                    {
                        in: 'formData',
                        name: 'otp',
                        description: 'mandatory only if one_tap_token not available',
                        required: false,
                        type: 'integer',
                        format: 'int32'
                    },
                    {
                        in: 'formData',
                        name: 'role_id',
                        description: '1->Super_Admin\n2->Op_Manager\n3->Call_Center_Agent\n4->Finance_Manager \n5->Tiktok_Agent\n6->Merchant\n7->accounts\n8->digital_marketing\n9->District_Manager',
                        required: false,
                        type: 'string',
                        enum: [1, 2, 3, 4, 5, 6, 7, 8, 9]
                    },
                    {
                        in: 'formData',
                        name: 'referral_code',
                        description: '',
                        required: false,
                        type: 'string'
                    }
                ],
                responses: {
                    405: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/EcMHB9bZkwy8Njhabdkanskkqpek': {
            post: {
                tags: ['auth'],
                summary: 'initialise otp and generate token',
                description: 'initialise otp send to the merchant mobile number and provide token to them',
                operationId: 'initialise_otp',
                security: [],
                parameters: [
                    {
                        in: 'formData',
                        name: 'mobile_number',
                        description: 'mandatory',
                        required: true,
                        type: 'string'
                    }
                ],
                responses: {
                    405: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        }
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/auth/index.js
const router = require('express').Router();

const validate_otp = require('./controllers/validate_otp');
const initiate_otp_controller = require('./controllers/initialize_otp');

router.post('/verify_otp', validate_otp);
router.post('/EcMHB9bZkwy8Njhabdkanskkqpek', initiate_otp_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/auth/controllers/initialize_otp.js
const error_log = require('../../../../middelware/error_log');
const send_otp_via_text_service = require('../../../../entities/auth/service/send_otp_via_text');
const send_otp_via_whatsapp_service = require('../../../../entities_v2/auth/service/otp/send_otp_via_whatsapp');
const otp_send_medium_enum = require('../../../../entities_v2/metadata/enums/auth/otp_send_medium_enum');
const language_enum = require('../../../../entities_v2/metadata/enums/global/langauge');
const country_code_enum = require('../../../../enums/global/country_code');
const { generate_otp } = require('../services/auth_service');
const BLACK_LISTED = [9825031150];
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const store_sign_up_log_service = require('../../../../common_services/sign_up/sign_up_logs');
const http_headers_enums = require('../../../../enums/global/http_headers');
const update_utm_detail = require('../../../../common_services/utm/update_utm_detail_service');
const signup_log_stage_enum = require('../../../../enums/signup_log/signup_log_stage_enum');
const { check_merchant_status } = require('../../../../data_abstraction_layer/merchant/merchant_details');
const { ValidationError } = require('../../../../utilities/error/custom_error');
const error = require('../../../../config/errors');
const sms_constants = require('../../../../constants/sms');
const global_config = require('../../../../config/global_config');
const env_enum = require('../../../../enums/env/env_enum');

const env = global_config.env
const DEFAULT_MESSAGE_ID = (env === env_enum.development)
    ? sms_constants.MESSAGE_ID_DEV
    : (
        (env === env_enum.staging)
            ? sms_constants.MESSAGE_ID_STAGE
            : sms_constants.MESSAGE_ID_PROD
    );

module.exports = async (req, res) => {
    let mobile_number = null
    try {
        const installation_id = req.headers[http_headers_enums['fmt-installation-id']];
        const device_id = req.headers[http_headers_enums['fmt-device-id']];
        const current_app_version = req.headers.appversion;
        const otp_last_requested_at = new Date();

        const mobile_number_hash = req.body.mobile_number;

        if (!mobile_number_hash) {
            throw new ValidationError(error?.missing_mandatory_params)
        }
        mobile_number = await extract_mobile_number(mobile_number_hash);
        mobile_number = +mobile_number;
        if (!mobile_number) {
            return res.status(http_status_code_enum.bad_request).json({
                message: error?.message_not_sent
            });
        }
        // checking for if the user is blocked or not
        const is_user_blocked = await check_merchant_status({ mobile_number });
        if (is_user_blocked) {
            return res.status(http_status_code_enum.not_found).json({
                message: error?.user_blocked
            });
        }
        if (BLACK_LISTED.indexOf(mobile_number) >= 0) {
            store_sign_up_log_service({ signup_log_stage: signup_log_stage_enum.otp_request, installation_id, device_id, mobile_number, otp_last_requested_at, current_app_version })
                .catch(err => {
                    error_log(err);
                });
            return res.status(http_status_code_enum.bad_request)
                .json(create_api_response(false, error?.number_blacklist, null));
        }
        const country_code = +req.body.country_code || country_code_enum.india;
        const send_over_medium = req.body.send_over_medium ?? otp_send_medium_enum.all;
        const language_id = +req.headers.language || language_enum.hindi;
        // have to call is_mobile_number function
        if (typeof mobile_number !== 'number' || Number(mobile_number) < 1000000000) {
            throw new ValidationError(error?.invalid_mobile_number)
        }
        const message_id = DEFAULT_MESSAGE_ID;
        if (mobile_number) {
            const { otp } = await generate_otp(mobile_number, country_code);
            if (mobile_number !== 9896111054) {
                if (send_over_medium === otp_send_medium_enum.whatsapp) {
                    send_otp_via_whatsapp_service(mobile_number, otp, language_id, country_code)
                        .catch(err => {
                            error_log(err);
                        });
                } else if (send_over_medium === otp_send_medium_enum.all) {
                    send_otp_via_whatsapp_service(mobile_number, otp, language_id, country_code)
                        .catch(err => {
                            error_log(err);
                        });
                    send_otp_via_text_service(mobile_number, message_id, otp, language_id, country_code, sms_constants.SMS_OTP_EXPIRY_V3)
                        .catch(err => {
                            error_log(err);
                        });
                } else {
                    send_otp_via_text_service(mobile_number, message_id, otp, language_id, country_code, sms_constants.SMS_OTP_EXPIRY_V3)
                        .catch(err => {
                            error_log(err);
                        });
                }
                store_sign_up_log_service({ signup_log_stage: signup_log_stage_enum.otp_request, installation_id, device_id, mobile_number, otp_last_requested_at, current_app_version })
                    .catch(err => {
                        error_log(err);
                    });
            } else {
                store_sign_up_log_service({ signup_log_stage: signup_log_stage_enum.otp_request, installation_id, device_id, mobile_number, otp_last_requested_at, current_app_version })
                    .catch(err => {
                        error_log(err);
                    });
                update_utm_detail(device_id, mobile_number)
                    .catch(err => {
                        error_log(err);
                    });
            }
            res.json({
                status: true,
                message: 'OTP send to ' + mobile_number
            })
        } else {
            res.json({
                status: false,
                message: 'send mobile number',
                error_code: error_code.EMPTY_MOBILE
            })
        }
    } catch (ex) {
        /** logging */
        error_log(ex);
        res.json({
            status: false,
            message: ex.message,
            data: { mobile_number_received: mobile_number },
            error_code: error_code.EX_MESSAGE
        })
    }
}

const extract_mobile_number = async (mobile_number_hash) => {
    try {
        const { OTP_KEY } = require('../../../../constants/config');
        const decrypt_service = require('../../../../utilities/decrypt');

        const mobile_number_checksum = await decrypt_service(mobile_number_hash, OTP_KEY);
        const today = new Date();
        const date = today.getDate();
        const month = today.getMonth();
        const revisedDate = String(date < 10 ? '0' + date : date);
        const revisedMonthString = String(month < 10 ? '0' + month : month);

        if (mobile_number_checksum.slice(0, 2) === revisedDate && mobile_number_checksum.slice(-2) === revisedMonthString) {
            return +mobile_number_checksum.slice(2, -2);
        }
        return null;
    } catch (err) {
        error_log(err);
        throw err;
    }
}

const error_code = {
    EMPTY_MOBILE: 111,
    EX_MESSAGE: 112
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/auth/controllers/validate_otp.js
const country_code_enum = require('../../../../enums/global/country_code');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const validate_otp_service = require('../services/validate_otp_service');
const store_sign_up_log_service = require('../../../../common_services/sign_up/sign_up_logs');
const get_merchant_by_mobile_number = require('../../../../data_abstraction_layer/merchant/get_merchant_by_mobile_number')
const http_headers_enums = require('../../../../enums/global/http_headers');
const is_mobile_number_exist = require('../../../../data_abstraction_layer/merchant/is_mobile_number_exist');
const signup_log_stage_enum = require('../../../../enums/signup_log/signup_log_stage_enum');
const error_log = require('../../../../middelware/error_log');
const { check_merchant_status } = require('../../../../data_abstraction_layer/merchant/merchant_details');
const error = require('../../../../config/errors');

module.exports = async (req, res) => {
    try {
        let installation_id = req.headers[http_headers_enums['fmt-installation-id']];
        let device_id = req.headers[http_headers_enums['fmt-device-id']];
        let mobile_number = +req.body.mobile_number;
        let current_app_version = req.headers.appversion;
        let otp = req.body.otp;
        let role_id = +req.body.role_id;
        let country_code = +req.body.country_code || country_code_enum.india;
        let referral_code = req.body.referral_code || null;
        /** check user exist and activated else add merchant and generate secret */
        // checking mandatory parameters
        if (!otp && !mobile_number) {
            let message = error?.number_or_otp_missing;
            res.status(http_status_code_enum.bad_request).json(create_api_response(false, message));
        } else {
            let new_user_verified = 0;
            let is_user_blocked=await check_merchant_status({mobile_number});
            if (is_user_blocked) {
                return res.status(http_status_code_enum.not_found).json({
                    message: error?.user_blocked
                });
            }
            let existed_merchant = await is_mobile_number_exist(mobile_number);
            if (!existed_merchant) {
                new_user_verified = 1;
            }
            let token = await validate_otp_service(mobile_number, otp, role_id, country_code, referral_code)
            let merchant_detail = await get_merchant_by_mobile_number({ mobile_number });
            let merchant_detail_id = merchant_detail?.id || null;
            store_sign_up_log_service({ signup_log_stage: signup_log_stage_enum.otp_verify, installation_id, device_id, mobile_number, new_user_verified, merchant_detail_id, current_app_version })
                .catch(err => {
                    error_log(err);
                });
            res.status(http_status_code_enum.ok).json(create_api_response(true, '', { token }));
        }
    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/auth/services/auth_service.js
const Speakeasy = require('speakeasy');
const otp_verification_secret_model = require('../../../../database/models/otp_verification_secret');
const error_log = require('../../../../middelware/error_log');
const error = require('../../../../config/errors');
const sms_constants = require('../../../../constants/sms');

const generate_user_secret = () => {
    try {
        const secret = Speakeasy.generateSecret({ length: 32 });
        return secret.base32;
    } catch (ex) {
        /** logging */
        error_log(ex);
        throw ex;
    }
}

/**
 * @param  {} mobile_number = 'Mobile no to send otp'
 * @param  {} country_code = 'Country code for mobile no'
 * @param  {} expireAfter = 'Time in milliseconds to expire the otp. Default value is 858165600 which is 10 days'
 */
const generate_otp = (mobile_number, country_code = '', expireAfter = sms_constants.SMS_SECRET_EXPIRY_V3) => {
    return new Promise(async (resolve, reject) => {
        try {
            // get secret from db for that user on mobile number
            // if not found then add and save seret for the user
            const checking_mno = is_mobile_number(mobile_number);
            if (!checking_mno) {
                return reject({ message: error?.invalid_mobile_number });
            }
            const today = Date.now()
            const expire_day = new Date(today + expireAfter);
            const secret_obj = await otp_verification_secret_model.findOne({
                where: {
                    mobile_number: `${country_code}${mobile_number}`
                }
            });
            let secret = '';
            if (!secret_obj) {
                secret = generate_user_secret().toString();
                await otp_verification_secret_model.build({
                    mobile_number: `${country_code}${mobile_number}`,
                    secret,
                    is_active: true,
                    expire_time: expire_day
                }).save();
            } else if (secret_obj?.expire_time < today || secret_obj?.expire_time === null) {
                secret = generate_user_secret().toString();
                secret_obj.secret = secret;
                secret_obj.expire_time = expire_day;
                await secret_obj.save();
            } else {
                // @ts-ignore
                secret = secret_obj.secret;
            }
            const otp = Speakeasy.totp({
                secret,
                encoding: 'base32',
                step: 60,
                digits: sms_constants.SMS_OTP_DIGITS_V3,
                window: sms_constants.SMS_OTP_EXPIRY_V3
            });
            return resolve({ otp })
        } catch (ex) {
            /** add logging */
            error_log(ex);
            reject(ex)
        }
    })

}

const validate_otp = (mobile_number, otp, country_code = '') => {
    return new Promise(async (resolve, reject) => {
        try {
            otp = otp + '';
            while (otp.length < 6) {
                otp = '0' + otp;
            }
            const secret_obj = await otp_verification_secret_model.findOne({
                where: {
                    mobile_number: `${country_code}${mobile_number}`
                }
            });
            if (secret_obj) {
                if (secret_obj.expire_time < Date.now()) {
                    reject({ message: error?.otp_expired });
                } else {
                    const valid = await Speakeasy.totp.verify({
                        // @ts-ignore
                        secret: secret_obj.secret,
                        encoding: 'base32',
                        token: otp,
                        step: 60,
                        digits: sms_constants.SMS_OTP_DIGITS_V3,
                        window: sms_constants.SMS_OTP_EXPIRY_V3
                    })
                    resolve(valid);
                }
            } else {
                reject({ message: error?.user_not_found })
            }
        } catch (ex) {
            /** log error */
            error_log(ex);
            reject(ex);
        }
    })

}

const is_mobile_number = (mobile_number) => {
    const mobile_number_length = Math.floor(JSON.parse((Math.log10(mobile_number))) + 1);
    if (mobile_number_length !== 10 || typeof (mobile_number) !== 'number') {
        return false;
    }
    return true;
}
exports.validate_otp = validate_otp;
exports.generate_otp = generate_otp;
exports.generate_user_secret = generate_user_secret;
// exports.verify_password = verify_password;
// exports.validate_one_tap = validate_one_tap;
exports.is_mobile_number = is_mobile_number;
// exports.comparePassword = comparePassword;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/auth/services/validate_otp_service.js
const error_log = require('../../../../middelware/error_log');
const auth_service = require('../services/auth_service');
const create_authentication_log_service = require('../../../../entities_v2/auth/service/create_authentication_log');
const authentication_agent_enum = require('../../../../enums/authorization/authentication_agent_enum');
const {
    generate_token
} = require('../../../../entities/auth/service/generate_token');
const env = require('../../../../config/global_config').env;
const env_enum = require('../../../../enums/env/env_enum');
const { ValidationError } = require('../../../../utilities/error/custom_error');
const error = require('../../../../config/errors');

const validate_otp_service = async (mobile_number, otp, role_id, country_code, referral_code) => {
    try {
        let valid;
        // designated otp for our internal login
        if (
            (otp === '000000' && env !== env_enum.production) ||
          (mobile_number === 8810452155 && otp === '881045') ||
          (mobile_number === 9999999999 && otp === '000000')
        ) { valid = true; } else
        // validating otp
        // eslint-disable-next-line brace-style
        {
            valid = await auth_service.validate_otp(
                mobile_number,
                otp,
                country_code
            );
        }
        if (valid) {
            create_authentication_log_service(
                mobile_number,
                authentication_agent_enum.otp
            ).catch((err) => {
                error_log(err);
            });
            try {
                const token = await generate_token(
                    mobile_number,
                    role_id,
                    country_code,
                    referral_code
                );
                return token
            } catch (ex) {
                /** logging */
                //   error_log(ex);
                throw new Error(ex);
            }
        } else {
            throw new ValidationError(error?.Invalid_OTP);
        }
    } catch (ex) {
        error_log(ex);
        return ({ message: ex.message });
    }
};
module.exports = validate_otp_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/location/swagger/index.js
module.exports = {
    tags: {
        name: 'location'
    },
    paths: {
        '/states': {
            get: {
                tags: ['location'],
                summary: 'state list',
                description: '',
                operationId: 'states',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'country_id',
                        required: false,
                        type: 'Integer',
                        description: 'country_id non mandatory, only to be used in case of panel'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/districts': {
            get: {
                tags: ['location'],
                summary: 'districts list',
                description: '',
                operationId: 'districts',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'formData',
                        name: 'country_id',
                        required: false,
                        type: 'Integer',
                        description: 'country_id non mandatory, only to be used in case of panel'
                    },
                    {
                        in: 'formData',
                        name: 'state_id',
                        required: true,
                        type: 'Integer',
                        description: ''
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        },
        '/search_pincode': {
            get: {
                tags: ['location'],
                summary: 'get pincodes upon searching',
                description: 'get pincodes upon searching',
                operationId: 'get_search_pincode',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'search_param',
                        description: 'pincode',
                        required: true,
                        type: 'string'
                    },
                    {
                        in: 'query',
                        name: 'page_no',
                        description: 'page_no',
                        required: false,
                        type: 'number'
                    },
                    {
                        in: 'query',
                        name: 'limit',
                        description: 'limit',
                        required: false,
                        type: 'number'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                }
            }
        }
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/location/index.js
const router = require('express').Router();
const authorize = require('../../../middelware/authorized_routes');
const user_roles_enum = require('../../../enums/user_profile/user_role');
const get_states_controller = require('./controllers/get_states_controller');
const get_districts_controller = require('./controllers/get_districts_controller.js');
const search_pincode_controller = require('./controllers/search_pincode_controller.js');

router.get('/states', authorize([...Object.values(user_roles_enum)]), get_states_controller);
router.get('/districts', authorize([...Object.values(user_roles_enum)]), get_districts_controller);
router.get('/search_pincode', authorize([...Object.values(user_roles_enum)]), search_pincode_controller); // in v3

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/location/controllers/search_pincode_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const search_pincode_service_v3 = require('../services/search_pincode_service_v3');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const search_param = req.query.search_param || ''; // takes pincode as a string
        const page_no = +req.query.page_no || 1;
        const limit = +req.query.limit || 10;
        if (search_param) {
            if (search_param.trim().length >= 4) {
                const pincodes_list = await search_pincode_service_v3(
                    search_param,
                    page_no,
                    limit
                );

                const response = create_api_response(true, 'success', pincodes_list);
                return res.status(http_status_code_enum.ok).json(response);
            } else {
                throw new ValidationError('Please enter atleast 4 characters.');
            }
        } else {
            return res.json(
                create_api_response(false, 'please provide your pincode')
            );
        }
    } catch (err) {
        error_log(err);
        return res
            .status(http_status_code_enum.bad_request)
            .json(create_api_response(false, err.message));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/location/controllers/get_states_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../enums/global//http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const get_states_service = require("../../../../entities/metadata/service/get_states");

module.exports = async (req, res) => {
    try {
        let country_id = +req.query.country_id || null;
        country_id = +req.user?.country?.id || null;
        const param = +req.body.param || 0
        let states = await get_states_service(param, country_id);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, "success", states));
    }
    catch (err) {
        error_log(err);
        return res
            .status(http_status_code_enum.bad_request)
            .json(create_api_response(false, err.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/location/controllers/get_districts_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../enums/global//http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const get_districts_service = require("../../../../entities/metadata/service/get_district");

module.exports = async (req, res) => {
    try {
        let country_id = +req.query.country_id || null;
        country_id = +req.user?.country?.id || null;
        const state_id = +req.query.state_id || 0;
        if (!state_id)
            return res
                .status(http_status_code_enum.bad_request)
                .json(create_api_response(false, "state_id is a mandatory param"));
        const param = +req.body.param || 0
        let districts = await get_districts_service(state_id, param, country_id);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, "success", districts));
    }
    catch (err) {
        error_log(err);
        return res
            .status(http_status_code_enum.bad_request)
            .json(create_api_response(false, err.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/location/services/search_pincode_service_v3.js
const error_log = require('../../../../middelware/error_log');
const LocationManager = require('../../../../common_services/location/LocationManager');

const search_pincode_service_v3 = async (search_param, page_no, limit) => {
    try {
        /* The code snippet is creating an instance of the `LocationManager` class and then calling
     the `searchPincode` method on that instance with the provided `search_param`, `page_no`, and
     `limit` parameters. The `searchPincode` method is likely responsible for searching for a
     pincode based on the given parameters. */
        const locationManager = new LocationManager();
        return await locationManager.searchPincode(search_param, page_no, limit);
    } catch (err) {
        error_log(err);
        throw err;
    }
};

module.exports = search_pincode_service_v3;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/payment/swagger/index.js
module.exports = {
    tags: {
        name: "payment",
    },
    paths: {
        "/": {
            get: {
                tags: ["payment"],
                summary: "fetch all payments",
                description: "",
                operationId: "fetch_payments",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "query",
                        name: "limit",
                        description: "",
                        type: "number",
                        required: false
                    },
                    {
                        in: "query",
                        name: "page",
                        description: "",
                        type: "number",
                        required: false
                    },
                    {
                        in: "query",
                        name: "search_param",
                        description: "",
                        type: "string",
                        required: false
                    },
                    {
                        in: "query",
                        name: "with_gst",
                        description: "",
                        type: "string",
                        required: false
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        },
        "/invoices": {
            get: {
                tags: ["payment"],
                summary: "fetch invoice listing",
                description: "",
                operationId: "fetch_invoice_list",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "query",
                        name: "limit",
                        description: "",
                        type: "number",
                        required: false
                    },
                    {
                        in: "query",
                        name: "page_no",
                        description: "",
                        type: "number",
                        required: false
                    },
                    {
                        in: "query",
                        name: "search_param",
                        description: "",
                        type: "string",
                        required: false
                    },
                    {
                        in: "query",
                        name: "po_creation_date_from",
                        description: "javascript date time format",
                        type: "string",
                        required: false
                    },
                    {
                        in: "query",
                        name: "po_creation_date_till",
                        description: "javascript date time format",
                        type: "string",
                        required: false
                    },
                    {
                        in: "query",
                        name: "po_dispatch_date_from",
                        description: "javascript date time format",
                        type: "string",
                        required: false
                    },
                    {
                        in: "query",
                        name: "po_dispatch_date_till",
                        description: "javascript date time format",
                        type: "string",
                        required: false
                    },
                    {
                        in: "query",
                        name: "po_state_ids",
                        description: "comma seperated state_ids ",
                        type: "string",
                        required: false
                    },
                    {
                        in: "query",
                        name: "po_status",
                        description: "",
                        type: "string",
                        required: false
                    },
                    {
                        in: "query",
                        name: "invoice_status",
                        description: " 0-> first tab(mandi tax) 1-> completed, 2-> credit and debit note, null-> all ",
                        type: "string",
                        required: false
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        }
    }
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/payment/index.js
const router = require("express").Router();
const fetch_payments_controller = require("./controllers/fetch_payments_controller");
const invoice_listing_controller = require("./controllers/invoice_listing_controller");
router.get("/", fetch_payments_controller);
router.get("/invoices", invoice_listing_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/payment/controllers/fetch_payments_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const { fetch_payments_service } = require("../services/fetch_payments_service");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");

module.exports = async (req, res) => {
    try {
        let { limit, page, search_param, with_gst} = req.query;
        limit = (limit && parseInt(limit) <= 50 && parseInt(limit) >= 0) ? parseInt(limit) : 50;
        page = (page && parseInt(page) >= 1) ? parseInt(page) : 1;
        const payments = await fetch_payments_service(limit, page, search_param, with_gst);
        let response = create_api_response(true, "success", payments);
        res.status(http_status_code_enum.ok).json(response);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/payment/controllers/invoice_listing_controller.js
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const http_status_codes = require("../../../../enums/global/http_status_codes");
const error_log = require("../../../../middelware/error_log");
const get_invoice_list_service = require("../services/get_invoice_list_service");

module.exports = async (req, res) => {
    try {
        const page_no = +req.query.page_no || 1;
        const limit = +req.query.limit || 10;
        const search_param = req.query.search_param;
        const po_creation_date_from = req.query.po_creation_date_from || "";
        const po_creation_date_till = req.query.po_creation_date_till || "";
        const po_dispatch_date_from = req.query.po_dispatch_date_from || "";
        const po_dispatch_date_till = req.query.po_dispatch_date_till || "";
        const po_state_ids = req.query.po_state_ids || "";
        const po_statuses = req.query.po_statuses || "";
        const invoice_status = req.query.invoice_status || null;

        const invoices = await get_invoice_list_service({
            page_no,
            limit,
            search_param,
            po_creation_date_from,
            po_creation_date_till,
            po_dispatch_date_from,
            po_dispatch_date_till,
            po_state_ids: po_state_ids ? po_state_ids.split(",") : [],
            po_statuses: po_statuses ? po_statuses.split(",") : [],
            invoice_status
        });
        return res.status(http_status_codes.ok).json(
            create_api_response(true, "sucess", invoices)
        );
    }
    catch (err) {
        error_log(err);
        return res.status(http_status_codes.bad_request).json(create_api_response(false, err.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/payment/services/get_invoice_list_service.js
const error_log = require("../../../../middelware/error_log");
const fetch_invoicing_list = require("../../../../data_abstraction_layer/payment/fetch_invoice_list")
const get_purchase_crop_order_ids = require("../../../../data_abstraction_layer/purchase_order/get_purchase_crop_order_ids");
const get_buyer_order_ids = require("../../../../data_abstraction_layer/buyer_order/get_buyer_order_ids");
const get_po_detail_by_id = require("../../../../data_abstraction_layer/purchase_order/get_po_detail_by_id");
const get_so_detail_by_id = require("../../../../data_abstraction_layer/buyer_order/get_so_detail_by_id");
const { procurementTypeToName } = require("../../../../enums/market_linkage/enums/procurementSources");
const get_buyer_detail_by_id = require("../../../../data_abstraction_layer/buyer/get_buyer_by_id");
const get_one_delivery_location = require("../../../../data_abstraction_layer/buyer_order/get_one_delivery_location");
const po_so_doc_type_enum = require("../../../../enums/market_linkage/enums/po_so_doc_type_enum");
const get_one_po_unloading_qty_details = require("../../../../data_abstraction_layer/purchase_order/get_one_po_unloading_qty_details");
const get_one_order_delivery_detail = require("../../../../data_abstraction_layer/order_delivery_detail/get_one_order_delivery_detail");
const get_one_po_unloading_doc = require("../../../../data_abstraction_layer/purchase_order/get_one_po_unloading_doc");
const get_invoice_ids = require("../../../../data_abstraction_layer/payment/fetch_po_so_invoice_ids");
const fetch_order_delivery_logs = require("../../../../data_abstraction_layer/order_delivery_detail/fetch_order_delivery_logs");
const order_delivery_stage_enums = require("../../../../enums/purchase_order/order_delivery_stage_enum");
const fetch_order_delivery_details = require("../../../../data_abstraction_layer/order_delivery_detail/fetch_order_delivery_details");
const fetch_order_delivery_documents = require("../../../../data_abstraction_layer/order_delivery_detail/fetch_order_delivery_documents");
const order_delivery_document_enum = require("../../../../enums/market_linkage/enums/dispatch_doc_type");

module.exports = async ({
    page_no = 1, limit = 10, search_param = "", po_creation_date_from, po_creation_date_till,
    po_dispatch_date_from, po_dispatch_date_till, po_state_ids = [], po_statuses = [], invoice_status = null
}) => {
    try {
        let purchase_crop_order_ids = [];
        let po_ids = [];
        let invoices = null;
        if (po_dispatch_date_from || po_dispatch_date_till) {
            const order_delivery_logs = await fetch_order_delivery_logs({ order_delivery_stage_id: order_delivery_stage_enums.dispatched, log_time_after: po_dispatch_date_from, log_time_before: po_dispatch_date_till })
            let order_delivery_ids = order_delivery_logs.map(ele => ele.order_detail_id);
            let order_deliveries = await fetch_order_delivery_details({
                order_delivery_ids: order_delivery_ids,
                attributes: ["id", "purchase_crop_order_id"]
            })
            po_ids = order_deliveries.map(ele => ele.purchase_crop_order_id);
            po_ids = po_ids.filter(ele => ele);
            if (po_ids.length === 0)
                invoices = { rows: [], count: 0 }
        }

        if (search_param || po_creation_date_from || po_creation_date_till || po_state_ids.length || po_statuses.length) {
            purchase_crop_order_ids = await get_purchase_crop_order_ids({
                po_number: search_param,
                po_creation_date_from, po_creation_date_till, po_state_ids, po_statuses, po_ids
            })
            if (po_dispatch_date_from || po_dispatch_date_till)
                purchase_crop_order_ids = purchase_crop_order_ids.filter(ele => po_ids.indexOf(ele) >= 0);
            if (!search_param && purchase_crop_order_ids.length == 0)
                invoices = { rows: [], count: 0 }
        }
        else
            purchase_crop_order_ids = po_ids;

        let buyer_order_ids;
        if (search_param)
            buyer_order_ids = await get_buyer_order_ids({ so_number: search_param });

        let invoice_ids;

        if (search_param)
            invoice_ids = await get_invoice_ids({ doc_name: search_param });

        if (invoices == null) {
            invoices = await fetch_invoicing_list({
                or: search_param ? true : false,
                invoice_ids,
                page_no, limit, po_ids: [...purchase_crop_order_ids], so_ids: buyer_order_ids, invoice_status
            });
            invoices.rows = await Promise.all(invoices.rows.map(async (invoice) => {
                let invoice_element = {
                    id: invoice.id,
                    po_id: invoice.purchase_crop_order_id,
                    so_id: invoice.buyer_order_detail_id,
                    created_at: invoice.createdAt,
                    updated_at: invoice.updatedAt,
                    po_so_map_no: invoice.po_so_map_no,
                    status: invoice.status
                }
                const purchase_order = await get_po_detail_by_id(invoice.purchase_crop_order_id, ["farmart_id", "status", "master_merchant_id"]);
                const buyer_order = await get_so_detail_by_id(invoice.buyer_order_detail_id, ["farmart_id", "buyer_id", "is_invoice_on_gross", "invoice_sharing", "e_invoice_required"]);
                const buyer_detail = await get_buyer_detail_by_id(buyer_order.buyer_id, ["legal_name"]);
                const buyer_delivery_info = await get_one_delivery_location({ buyer_order_id: invoice.buyer_order_detail_id, attributes: ["address"] });
                invoice_element.po_number = purchase_order?.farmart_id;
                invoice_element.status_of_po = purchase_order?.status;
                invoice_element.so_number = buyer_order?.farmart_id;
                invoice_element.po_type = await get_po_type(purchase_order?.master_merchant_id);
                invoice_element.buyer_name = buyer_detail?.legal_name;
                invoice_element.invoice_on_gross = buyer_order?.is_invoice_on_gross || null;
                invoice_element.delivery_location = buyer_delivery_info.address;
                invoice_element.invoicing_stage = buyer_order?.invoice_sharing || null;
                const invoice_docs = await attach_invoice_docs(invoice.id);
                invoice_element = { ...invoice_element, ...invoice_docs };
                invoice_element.mandi_tax_paid_at_source = purchase_order?.is_mandi_tax_paid;
                const po_unloading_qty_detail = await get_one_po_unloading_qty_details(invoice.purchase_crop_order_id, invoice.buyer_order_detail_id, ["value"]);
                invoice_element.buyer_accepted_weight = po_unloading_qty_detail?.value;
                const order_delivery_detail = await get_one_order_delivery_detail(invoice.purchase_crop_order_id, ["gross_weight", "id"]);
                invoice_element.handover_weight = order_delivery_detail?.gross_weight;
                const order_delivery_documents = await fetch_order_delivery_documents({ order_delivery_detail_id: order_delivery_detail?.id, order_delivery_document_type_id: order_delivery_document_enum["handover document"] });
                invoice_element.handover_document_url = order_delivery_documents?.[0]?.doc_url || "";
                const po_unloading_doc = await get_one_po_unloading_doc(invoice.purchase_crop_order_id, invoice.buyer_order_detail_id, ["doc_url"]);
                invoice_element.unloading_doc_url = po_unloading_doc?.doc_url;
                invoice_element.e_invoice_required = buyer_order?.e_invoice_required || false;
                return invoice_element;
            }));
        }
        return invoices;
    }
    catch (err) {
        error_log(err);
        return {
            rows: [],
            count: 0
        }
    }
}


const get_po_type = async (master_merchant_id) => {
    try {
        const get_master_merchant_detail_by_id = require("../../../../data_abstraction_layer/master_merchant/get_master_merchant_detail_by_id");
        const master_merchant = await get_master_merchant_detail_by_id({master_merchant_id}, ["profession_id"]);
        return procurementTypeToName[master_merchant?.profession_id || 0];
    }
    catch (err) {
        error_log(err);
        return null;
    }
}

const attach_invoice_docs = async (po_so_invoice_id) => {
    try {
        const fetch_po_so_invoice_docs = require("../../../../data_abstraction_layer/payment/fetch_po_so_invoice_docs");
        let po_so_invoice_docs = await fetch_po_so_invoice_docs({ po_so_invoice_id });
        let po_so_invoice_docs_enum_rev = {}
        Object.keys(po_so_doc_type_enum)
            .forEach(ele => { po_so_invoice_docs_enum_rev[po_so_doc_type_enum[ele]] = ele })
        let docs = {
            "po_so_invoice_doc_url": null,
            "po_so_invoice_doc_name": null,
            "po_so_invoice_doc_value": null,
            "po_so_invoice_currency": null,
            "po_so_invoice_doc_created_date": null,
            "po_so_invoice_file_type": null,
            "po_so_credit_note_doc_url": null,
            "po_so_credit_note_doc_name": null,
            "po_so_credit_note_doc_value": null,
            "po_so_credit_note_currency": null,
            "po_so_credit_note_doc_created_date": null,
            "po_so_credit_note_file_type": null,
            "po_so_debit_note_doc_url": null,
            "po_so_debit_note_doc_name": null,
            "po_so_debit_note_doc_value": null,
            "po_so_debit_note_currency": null,
            "po_so_debit_note_doc_created_date": null,
            "po_so_debit_note_file_type": null,
            "po_so_eway_bill_doc_url": null,
            "po_so_eway_bill_doc_name": null,
            "po_so_eway_bill_doc_value": null,
            "po_so_eway_bill_currency": null,
            "po_so_eway_bill_doc_created_date": null,
            "po_so_eway_bill_file_type": null
        };
        await Promise.all(po_so_invoice_docs.map(async (element) => {
            let document = element?.dataValues || element;
            let doc_type = po_so_invoice_docs_enum_rev[document.doc_type].toLowerCase();
            Object.keys(document).forEach(property => {
                docs[`po_so_${doc_type}_${property}`] = document[property] || "";
            });
        }));
        return docs;
    }
    catch (err) {
        error_log(err);
        return {};
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/payment/services/fetch_payments_service.js
const procurement_payments_model = require('../../../../database/models_v2/procurement_payments/procurement_payments');
const purchase_crop_orders_model = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const master_merchant_detail_model = require('../../../../database/models_v2/merchant/master_merchant_detail');
const order_delivery_detail_model = require('../../../../database/models_v2/procurement_order_deliveries/order_delivery_detail');
const procurement_bill_components_model = require('../../../../database/models_v2/procurement_payments/procurement_bill_components');
const procurement_lots_model = require('../../../../database/models_v2/procurement_sample/procurement_lots');
const error_log = require('../../../../middelware/error_log');
const bill_operation_enum = require('../../../../enums/purchase_order/bill_operation_enum');
const { payment_for, installment_number } = require('../../../../enums/purchase_order/procurement_payment_enum');
const payment_deductions_for_transport_model = require('../../../../database/models_v2/procurement_payments/payment_deduction_for_transport');
const payment_deductions_for_retailer_model = require('../../../../database/models_v2/procurement_payments/payment_deduction_for_retailer');
const buyer_order_detail_model = require('../../../../database/models_v2/buyer_order/buyer_order_detail');
const crop_detail_model = require('../../../../database/models_v2/crop/crop_detail');
const crop_varieties_detail_model = require('../../../../database/models_v2/crop/crop_varieties_detail');
const buyer_detail_model = require('../../../../database/models_v2/buyer/buyer_detail');
const Op = require('sequelize').Op;

const fetch_payments_service = (limit, page, search_param, with_gst) => {
    return new Promise(async (resolve, reject) => {
        try {
            const po_query = {
                is_active: true
            }
            if (search_param) {
                po_query.farmart_id = { [Op.like]: '%' + search_param + '%' }
            }
            const resp = {
                payments: [],
                total_records: 0
            };

            const where_obj = {
                is_active: true
            }

            if (with_gst && with_gst.trim().toLowerCase() === 'yes') { where_obj.installment_number = 3 } else if (with_gst && with_gst.trim().toLowerCase() === 'no') {
                where_obj.installment_number = {
                    [Op.ne]: 3
                }
            }

            const payments = await procurement_payments_model.findAll({
                where: where_obj,
                include: [
                    {
                        model: purchase_crop_orders_model,
                        where: po_query,
                        required: true
                    }
                ],
                order: [['status', 'asc'], ['created_at', 'desc']]
            });
            if (payments.length) {
                const sorted_payment = sort_by_pending_for_utr(payments, page, limit);
                const payment_ids = sorted_payment.map((doc) => doc.id);
                const [purchase_orders, order_deliveries] = await get_po_and_order_delivery(payment_ids);
                resp.payments = await generate_response(sorted_payment, purchase_orders, order_deliveries);
                resp.total_records = payments.length;
            }
            return resolve(resp);
        } catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    });
};

const sort_by_pending_for_utr = (payments, page, limit) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const pending_for_utr = payments
            .filter((payment) => !payment.utr_number);
        const remaining_payments = payments.filter((payment) => !pending_for_utr.includes(payment));
        const sorted_payment = pending_for_utr.concat(remaining_payments);
        return sorted_payment.slice((page - 1) * limit, page * limit);
    } catch (error) {
        throw error
    }
}

const get_po_and_order_delivery = async (payment_ids) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const [purchase_orders, order_deliveries] = await Promise.all([
            purchase_crop_orders_model.findAll({
                where: {
                    is_active: true
                },
                include: [
                    {
                        model: crop_detail_model,
                        where: {
                            is_active: true
                        },
                        required: false
                    },
                    {
                        model: crop_varieties_detail_model,
                        where: {
                            is_active: true
                        },
                        required: false
                    },
                    {
                        model: buyer_order_detail_model,
                        where: {
                            is_active: true
                        },
                        include: {
                            model: buyer_detail_model,
                            where: {
                                is_active: true
                            },
                            required: false
                        },
                        required: false
                    },
                    {
                        model: procurement_payments_model,
                        where: {
                            is_active: true,
                            id: { [Op.in]: payment_ids }
                        },
                        required: true
                    },
                    {
                        model: master_merchant_detail_model,
                        where: {
                            is_active: true
                        },
                        required: true
                    },
                    {
                        model: procurement_lots_model,
                        where: {
                            is_active: true
                        },
                        include: [
                            {
                                model: procurement_bill_components_model,
                                where: {
                                    is_active: true
                                },
                                required: false
                            }
                        ],
                        required: false
                    },
                    {
                        model: payment_deductions_for_transport_model,
                        where: {
                            is_active: 1
                        },
                        required: false
                    },
                    {
                        model: payment_deductions_for_retailer_model,
                        where: {
                            is_active: 1
                        },
                        required: false
                    }
                ]
            }),
            order_delivery_detail_model.findAll({
                where: {
                    is_active: true
                },
                include: {
                    model: procurement_payments_model,
                    where: {
                        is_active: true,
                        id: { [Op.in]: payment_ids }
                    },
                    required: true
                }
            })
        ])
        return [purchase_orders, order_deliveries]
    } catch (error) {
        throw error
    }
}

const generate_response = async (payments, purchase_orders, order_deliveries) => {
    const payment_response = [];
    for (let i = 0; i < payments.length; i++) {
        const payment = payments[i];
        const purchase_order = purchase_orders
            .find((po) => po.procurement_payments
                ?.find((doc) => doc.id === payment.id));
        const order_delivery = order_deliveries
            .find((o) => o.procurement_payments
                ?.find((doc) => doc.id === payment.id));
        const payment_object = {
            po_number: purchase_order?.farmart_id || null,
            so_number: purchase_order?.buyer_order_detail?.farmart_id ?? null,
            crop_name: purchase_order?.crop_detail?.name ?? null,
            variety_name: purchase_order?.crop_varieties_detail?.name ?? null,
            buyer_name: purchase_order?.buyer_order_detail?.buyer_detail?.legal_name ?? null,
            retailer_business_name: purchase_order?.master_merchant_detail?.business_name ?? null,
            retailer_number: purchase_order?.master_merchant_detail?.farmart_id ?? null,
            name: purchase_order?.master_merchant_detail?.name || null,
            installment_number: payment?.installment_number || null,
            payable_amount: parseFloat(payment?.revised_payment ?? payment?.amount ?? 0),
            deduction_amount: 0,
            utr_number: payment?.utr_number || '',
            id: payment?.id,
            is_bank_information_available: !!payment.account_detail_id,
            zoho_po_id: purchase_order?.zoho_po_id || null,
            reason_for_payment: payment?.reason_for_payment,
            total_amount: parseFloat(payment?.amount || 0),
            payment_for: payment?.payment_for ?? null,
            status: payment?.status ?? null,
            is_additional_payment: payment?.is_additional_payment ?? null,
            payment_created_date: payment?.createdAt
        };
        if (payment.payment_for === payment_for.PO && payment.installment_number !== installment_number.THREE) {
            payment_object.total_amount = purchase_order?.total_payment || 0;
            payment_object.deduction_amount = (payment.installment_number === 2) ? purchase_order?.payment_deductions_for_retailers?.[0]?.deduction_amount || 0 : 0;
        } else if (payment.payment_for === payment_for.ORDER_DELIVERY) {
            payment_object.total_amount = order_delivery?.total_transport_cost || 0;
            payment_object.deduction_amount = (payment.installment_number === 2) ? purchase_order?.payment_deductions_for_transports?.[0]?.deduction_amount || 0 : 0;
        }

        if (payment.installment_number === 2 && payment?.payment_for === 2) { payment_object.total_amount = purchase_order?.payment_deductions_for_transports[0].dataValues.revised_transport_cost || 0 }
        payment_response.push(payment_object);
    }
    return payment_response;
}

const calculate_deduction = (bill_component = []) => {
    let total_deduction = 0;
    for (let i = 0; i < bill_component.length; i++) {
        if (bill_component[i]?.order_bill_operation_id === bill_operation_enum.addition) {
            total_deduction += bill_component[i]?.amount;
        } else {
            total_deduction -= bill_component[i]?.amount;
        }
    }
    return total_deduction;
};

module.exports = {
    fetch_payments_service,
    sort_by_pending_for_utr,
    get_po_and_order_delivery,
    generate_response,
    calculate_deduction
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/rake/swagger/index.js
module.exports = {
    tags: {
        name: "rake",
    },
    paths: {
        "/history": {
            get: {
                tags: ["rake"],
                summary: "get rake list",
                description: "",
                operationId: "get_rake_history",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "query",
                        name: "master_state_id",
                        description: "",
                        required: true,
                        type: "number",
                    },
                    {
                        in: "query",
                        name: "master_district_id",
                        description: "",
                        required: true,
                        type: "number",
                    },
                ],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    },
                },
            },
        },
        "/result_stats": {
            get: {
                tags: ["quiz"],
                summary: "get quiz result stats",
                description: "",
                operationId: "get_quiz_result_stats",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "query",
                        name: "quiz_detail_id",
                        description: "",
                        required: true,
                        type: "number",
                    },
                    {
                        in: "query",
                        name: "page_no",
                        description: "",
                        required: false,
                        type: "number",
                    },
                    {
                        in: "query",
                        name: "limit",
                        description: "",
                        required: false,
                        type: "number",
                    },
                ],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    },
                },
            },
        },
    },
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/rake/index.js
const router = require('express').Router();
const { Merchant, Guest_user_b2c_app } = require('../../../enums/user_profile/user_role');
const authorize = require('../../../middelware/authorized_routes');

const get_rake_history = require('./controller/get_rake_history');

router.get('/history', authorize([Merchant, Guest_user_b2c_app]), get_rake_history);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/rake/controller/get_rake_history.js
const error_log = require('../../../../middelware/error_log');

const user_role_enum = require('../../../../enums/user_profile/user_role');
// const language_enum = require('../../../../enums/global/language');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_codes = require('../../../../enums/global/http_status_codes');
const post_rake_access_logs = require('../../../v1/rake/services/post_rake_access_logs_service');
const RakeManager = require('../../../../common_services/rake/RakeManager');

module.exports = async (req, res) => {
    try {
        let error_message = '';
        const master_state_id = +req.query.master_state_id || 0;
        const master_district_id = +req.query.master_district_id || 0;
        const user_role_id = req.user.user_role_id;
        const user_profile_id = req.user.user_profile_id;
        // const language_id = +req.headers.language || language_enum.hindi;
        const page_no = +req.query.page_no || 1;
        const limit = +req.query.limit || 10;
        if (!master_state_id) error_message = 'master_state_id mandatory param';
        if (!master_district_id) error_message = 'master_district_id mandatory param';

        let merchant_detail_id = null;
        if (user_role_id === user_role_enum.Merchant) {
            merchant_detail_id = user_profile_id
        }
        if (error_message) { return res.status(http_status_codes.bad_request).json(create_api_response(false, error_message, null)); }

        const data = await new RakeManager().fetchRakeHistory(master_state_id, master_district_id, merchant_detail_id, page_no, limit)

        post_rake_access_logs(master_state_id, master_district_id, merchant_detail_id)
            .catch(err => {
                error_log(err);
            })
        const response = create_api_response(true, 'success', data);
        return res.status(http_status_codes.ok).json(response);
    } catch (err) {
        error_log(err);
        return res.status(http_status_codes.bad_request).json(create_api_response(false, err.message, null));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/rake/service/get_rake_history.js
const error_log = require('../../../../middelware/error_log');
const rake_extracted_data_model = require('../../../../database/models_v2/rake/rake_extracted_data');
const consignor_code_model = require('../../../../database/mongoose/mongoose_models/rake_data/consignor_codes');
const Op = require('sequelize').Op;
const read_mongo_document = require('../../../../database/mongoose/read_document');
const { get_districts } = require('../../../../data_abstraction_layer/location/get_districts');
const { key_gen_redis, write_string, read_string } = require('../../../../database/redis/helper_redis_methods');
const redis_key_entities_enum = require('../../../../database/redis/redis_key_entities');
const redis_key_type_enum = require('../../../../database/redis/redis_key_type');
const zlib = require('zlib')
const Buffer = require('buffer').Buffer;

const prior_no_of_days = 3;
// this function is fetching the rake_history in pagination on the basis of master_state_id and master_district_id.
const fetch_rake_history = async function (master_state_id, master_district_id, page_no = 1, limit = 10, language_id) {
    return new Promise(async (resolve, reject) => {
        try {
            let count;
            const master_state_district_id = master_state_id + '_' + master_district_id;
            const redis_key = await key_gen_redis(redis_key_entities_enum.RAKE_HISTORY, master_state_district_id, redis_key_type_enum.data);
            let rake_history_list = [];
            let rake_list_response = await read_string(redis_key);
            /* This code snippet is checking if `rake_list_response` is truthy (not null or undefined). If
            `rake_list_response` exists, it is assumed to be a base64 encoded string representing some
            data. The code then decodes the base64 string into a buffer using
            `Buffer.from(rake_list_response, 'base64')`, inflates the buffer using
            `zlib.inflateSync(buffer)`, and then parses the inflated data as a JSON object using
            `JSON.parse(redisValue.toString())`. Finally, it returns the parsed JSON object
            `location_details_obj`. */
            if (rake_list_response) {
                const buffer = Buffer.from(rake_list_response, 'base64');
                const redis_value = zlib.inflateSync(buffer);
                rake_list_response = JSON.parse(redis_value.toString());
                rake_history_list = rake_list_response?.rake_history_list || [];
                count = rake_list_response?.count || 0;
            } else {
                // this is to fetch district_id upon master_district_id
                const districts = await get_districts({ master_state_id, master_district_id })
                const district_ids = districts.map(ele => ele.id);
                // Using Promise.all to fetch both records in parallel
                const [rake_record_for_fullfiled_null, rake_record_for_fullfiled_not_null] = await Promise.all([
                    fetch_record_for_null_fullfill_date(district_ids, prior_no_of_days),
                    fetch_record_for_not_null_fullfill_date(district_ids, prior_no_of_days)
                ]);
                rake_history_list = [...rake_record_for_fullfiled_null, ...rake_record_for_fullfiled_not_null]
                count = rake_history_list?.length || 0;
                rake_list_response = {
                    rake_history_list,
                    count
                }
                const ttl = 60 * 60 * 4; // 4 hours in seconds
                zlib.deflate(JSON.stringify(rake_list_response), function (err, zippedValue) { // deflate means compression here
                    if (err) {
                    // console.log('Error deflating!');
                        error_log(err)
                        return null;
                    }
                    write_string(
                        redis_key,
                        zippedValue.toString('base64'),
                        ttl
                    ).catch((err) => {
                        error_log(err);
                    });

                })
            }
            const start = (page_no - 1) * limit;
            const end = start + limit;
            let merged_rake_list = rake_history_list?.slice(start, end) || []
            if (merged_rake_list?.length > 0) { merged_rake_list = await add_brand_alias_code_to_list(merged_rake_list); }
            // Construct the rake history response
            const rake_history = { locked: false, sms_remaining_to_unlock: 0, rows: merged_rake_list, count };
            return resolve(rake_history);
        } catch (err) {
            error_log(err);
            reject({ message: err.message });
        }
    })
}

// Fetch records with null fullfiled_on_date_info for the given district_ids within the specified prior number of days
const fetch_record_for_null_fullfill_date = async function (district_ids, prior_no_of_days) {
    // eslint-disable-next-line no-useless-catch
    try {
        const current_date = new Date();
        const prior_date = new Date(new Date().setDate(current_date.getDate() - prior_no_of_days));
        const date = ('0' + (prior_date.getDate())).slice(-2);
        const month = ('0' + (prior_date.getMonth() + 1)).slice(-2);
        const new_date_string = prior_date.getFullYear() + '-' + month + '-' + date;
        // Query the rake_extracted_data_model for records with null fullfiled_on_date_info
        let rake_data_list_for_fullfiled_null = await rake_extracted_data_model.findAll({
            where: {
                is_active: 1,
                fullfiled_on_date_info: null,
                district_id: {
                    [Op.in]: district_ids
                },
                demand_date: {
                    [Op.gte]: new_date_string
                }
            },
            attributes: ['id',
                'demand_date',
                'fullfiled_on_date_info',
                'brand_name',
                ['station_name', 'from_station'],
                ['is_matured_indents', 'is_matured'],
                'consignor_code',
                'to_name'
            ],
            order: [['demand_date', 'desc']],
            raw: true
        });
        // Assign demand_date_info, the formatted demand_date value and delete the original demand_date field
        rake_data_list_for_fullfiled_null = await Promise.all(rake_data_list_for_fullfiled_null.map(async (record, i) => {
            record.demand_date_info = format_demand_date(record.demand_date);
            delete record.demand_date;
            return record;
        }));
        return rake_data_list_for_fullfiled_null;
    } catch (err) {
        throw err;
    }
}

// Helper function to format demand_date into demand_date_info
const format_demand_date = (demand_date) => {
    try {
        return demand_date.split('-').reverse().join('-');
    } catch (err) {
        error_log(err);
        throw err;
    }
}

// Fetch records with non-null fullfiled_on_date_info for the given district_ids within the specified prior number of days
const fetch_record_for_not_null_fullfill_date = async function (district_ids, prior_no_of_days) {
    // eslint-disable-next-line no-useless-catch
    try {
        const current_date = new Date();
        const prior_date = new Date(new Date().setDate(current_date.getDate() - prior_no_of_days));
        const date = ('0' + (prior_date.getDate())).slice(-2);
        const month = ('0' + (prior_date.getMonth() + 1)).slice(-2);
        const new_date_string = prior_date.getFullYear() + '-' + month + '-' + date;
        // Query the rake_extracted_data_model for records with non-null fullfiled_on_date_info
        let rake_data_list_for_fullfiled_not_null = await rake_extracted_data_model.findAll({
            where: {
                is_active: 1,
                district_id: {
                    [Op.in]: district_ids
                },
                fullfiled_on_date_info: {
                    [Op.not]: null
                },
                fullfiled_on_date: {
                    [Op.gte]: new_date_string
                }
            },
            attributes: ['id',
                'demand_date',
                'fullfiled_on_date_info',
                'brand_name',
                ['station_name', 'from_station'],
                ['is_matured_indents', 'is_matured'],
                'consignor_code',
                'to_name'
            ],
            order: [['fullfiled_on_date_info', 'desc']],
            raw: true
        });
        // Assign demand_date_info, the formatted demand_date value and delete the original demand_date field
        rake_data_list_for_fullfiled_not_null = await Promise.all(rake_data_list_for_fullfiled_not_null.map(async (record, i) => {
            record.demand_date_info = format_demand_date(record.demand_date);
            delete record.demand_date;
            return record;
        }));
        return rake_data_list_for_fullfiled_not_null;
    } catch (ex) {
        throw ex
    }
}
// Add brand alias code to each element in the rake_data_list
const add_brand_alias_code_to_list = async function (rake_data_list) {
    // eslint-disable-next-line no-useless-catch
    try {
        if (rake_data_list?.length > 0) {
            // Creating an array of promises for fetching consignor code documents
            const mongo_query_promises = rake_data_list.map(element =>
                read_mongo_document(consignor_code_model, {
                    consignor_code: element?.consignor_code
                })
            );

            // Execute all MongoDB queries in parallel
            const consignor_code_detail = await Promise.all(mongo_query_promises);

            // Process results
            return rake_data_list.map((element, index) => {
                const consignor_code_mongo_document = consignor_code_detail[index];
                element.brand_alias_code = consignor_code_mongo_document?.[0]?.alias_name || '';
                delete element.consignor_code;
                return element;
            });
        }

    } catch (ex) {
        throw ex
    }
}
exports.fetch_rake_history = fetch_rake_history;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/rake/service/get_rake_data.js
const error_log = require("../../../middelware/error_log");
const rake_extracted_data_model = require("../../../database/models_v2/rake/rake_extracted_data");
const Op = require("sequelize").Op;
const consignor_code_model = require("../../../database/mongoose/mongoose_models/rake_data/consignor_codes");
const read_mongo_document = require("../../../database/mongoose/read_document");

const {get_total_sms_count_service} = require("../../sms/service/get_total_sms_count_service");
const { get_data_from_settings } = require("../../../entities/metadata/service/application_version_service");
const settings_enum = require("../../../entities/metadata/enums/settings_enum");
const language_enum = require("../../metadata/enums/global/langauge");
const rake_category_enum = require("../../metadata/enums/rake/rake_commodity_category_enum")

module.exports = (state_id, district_id, language_id, merchant_detail_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            let locked = {
                status: false
            };
            let rake_data = {};
            if (merchant_detail_id) {
                let sms_check_start_date = await get_data_from_settings(settings_enum.rake_sms_check_date);
                sms_check_start_date = new Date(sms_check_start_date);
                const sms_count = await get_total_sms_count_service(merchant_detail_id, 0, sms_check_start_date);
                let rake_sms_count_criteria = await get_data_from_settings(settings_enum.rake_sms_count_criteria);
                rake_sms_count_criteria = +rake_sms_count_criteria || 0;
                if (sms_count < rake_sms_count_criteria) {
                    locked.status = true;
                }
            }
            if (locked.status) {
                let rake_data_array = [
                    {
                        "id": 40326,
                        "brand_name": "KRISHAK BHARAT CO-OP LTD., KOSAD",
                        "commodity_from_info": "FERT",
                        "commodity_name": "FERTILIZER",
                        "consignee_code": "KRIB",
                        "consignee_name": "M/S KRIBHCO",
                        "consignor_code": "KRIB",
                        "consignor_name": "M/S KRIBHCO",
                        "demand_date_info": "25-12-21 08:56",
                        "state_name": "Uttar Pradesh",
                        "district_name": "Jhansi",
                        "demand_date": "2021-12-26",
                        "fullfiled_on_date": null,
                    }
                ]
                if (language_id == language_enum.hindi) {
                    rake_data_array[0]["to_name"] = "अपने 100 किसानो को SMS भेजे";
                    rake_data_array[0]["alias_name"] = "Locked"
                    rake_data_array[0]["brand_code"] = "बंद"
                    locked.message = "अपने 100 किसानो को SMS भेजे";
                }
                else {
                    rake_data_array[0]["to_name"] = "Send SMS to 100 Farmers";
                    rake_data_array[0]["alias_name"] = "बंद"
                    rake_data_array[0]["brand_code"] = "Locked"
                    locked.message = "Send SMS to 100 Farmers";
                }
                let today_date = new Date()
                date_key = today_date.getFullYear() + "-" + (today_date.getMonth() + 1) + "-" + today_date.getDate();
                rake_data[date_key] = rake_data_array;

            }
            else {
                rake_data = await get_rake_unlocked_data(state_id, district_id);
            }
            return resolve({ rake_data, locked });
        }
        catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    });
}

const get_rake_unlocked_data = async (state_id, district_id) => {
    try {
        let d = new Date();
        d.setHours(0, 0, 0, 0);
        d.setDate(d.getDate() - 3);
        const rake_data_list = await rake_extracted_data_model.findAll({
            where: {
                is_active: 1,
                [Op.or]: [
                    {
                        demand_date: {
                            [Op.gte]: d
                        }
                    },
                    {
                        fullfiled_on_date: {
                            [Op.gte]: d
                        }
                    }
                ],
                state_id: state_id,
                district_id: district_id,
                rake_comdty_cat : rake_category_enum.fertilizer
            },
            attributes: ["id"
                , "brand_name"
                , "commodity_from_info"
                , "commodity_name"
                , "consignee_code" // add consignee_alias_name else NA
                , "consignee_name"
                , ["consignor_code", "brand_code"]
                , "consignor_code"
                , "consignor_name"
                , "demand_date_info"
                , "state_name"
                , "district_name"
                , "is_matured_indents"
                , "demand_date"
                , "fullfiled_on_date"
                , "to_name"]
        });
        let rake_data_obj = {};
        if (rake_data_list && rake_data_list.length > 0) {
            for (let index = 0; index < rake_data_list.length; index++) {
                const element = rake_data_list[index];
                const consignor_code_mongo_document = await read_mongo_document(consignor_code_model, {
                    consignor_code: element.consignor_code
                });
                if (consignor_code_mongo_document?.length) {
                    element.dataValues.alias_name = consignor_code_mongo_document[0].alias_name || "NA";
                }
                if (element.is_matured_indents) {
                    if (!rake_data_obj[element.fullfiled_on_date]) {
                        rake_data_obj[element.fullfiled_on_date] = [];
                    }
                    rake_data_obj[element.fullfiled_on_date].push(element);
                }
                else {
                    if (!rake_data_obj[element.demand_date]) {
                        rake_data_obj[element.demand_date] = [];
                    }
                    rake_data_obj[element.demand_date].push(element);
                }
            }
        }
        return rake_data_obj;
    }
    catch (err) {
        throw err;
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/master_sample/swagger/index.js
const procurment_payments_enum = require("../../../../enums/purchase_order/procurement_payment_enum");
module.exports = {
  tags: {
    name: "master_sample",
  },
  paths: {
    "/detail": {
      get: {
        tags: ["master_sample"],
        summary: "fetch sample details",
        description: "",
        operationId: "fetch_master_sample_details",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "lot_id",
            description: "number",
            required: true,
            type: "string",
          }
        ],
        responses: {
          400: {
            description: "Invalid input"
          },
          200: {
            description: "success"
          }
        }
      }
    },
    "/list": {
      get: {
        tags: ["master_sample"],
        summary: "fetch sample details",
        description: "",
        operationId: "fetch_master_sample_list",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "search_param",
            description: "po_number and retailer name",
            required: false,
            type: "string",
          },
          {
            in: "query",
            name: "business_type",
            description: "FNV: 1, SALES: 2, PROCUREMENT: 3",
            required: false,
            type: "number",
          },
          {
            in: "query",
            name: "stage_type",
            description: "",
            required: false,
            type: "number",
          },
          {
            in: "query",
            name: "state_ids",
            description: "comma seperated string",
            required: false,
            type: "string",
          },
          {
            in: "query",
            name: "sample_status",
            description: "comma seperated string",
            required: false,
            type: "string",
          },
          {
            in: "query",
            name: "po_status",
            description: "comma seperated string",
            required: false,
            type: "string",
          },
          {
            in: "query",
            name: "district_ids",
            description: "comma seperated string",
            required: false,
            type: "string",
          },
          {
            in: "query",
            name: "payment_1",
            description: JSON.stringify(procurment_payments_enum.status),
            required: false,
            type: "number",
          },
          {
            in: "query",
            name: "payment_2",
            description: JSON.stringify(procurment_payments_enum.status),
            required: false,
            type: "number",
          },
          {
            in: "query",
            name: "pa_ids",
            description: "comma seperated string",
            required: false,
            type: "string",
          },
          {
            in: "query",
            name: "page_no",
            description: "",
            required: false,
            type: "number",
          },
          {
            in: "query",
            name: "limit",
            description: "",
            required: false,
            type: "number",
          }
        ],
        responses: {
          400: {
            description: "Invalid input"
          },
          200: {
            description: "success"
          }
        }
      }
    },
    "/qc_detail": {
      get: {
        tags: ["master_sample"],
        summary: "fetch qc details",
        description: "",
        operationId: "fetch_qc_details",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "master_sample_id",
            description: "number",
            required: true,
            type: "string",
          },
          {
            in: "query",
            name: "crop_variety_id",
            description: "number",
            required: true,
            type: "string",
          },
          {
            in: "query",
            name: "purchase_order_id",
            description: "number",
            required: false,
            type: "string",
          }
        ],
        responses: {
          400: {
            description: "Invalid input"
          },
          200: {
            description: "success"
          }
        }
      }
    },
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/master_sample/index.js
const router = require("express").Router();
const get_sample_detail_controller = require("./controllers/get_sample_detail_controller");
const get_qc_detail_controller = require("./controllers/get_qc_detail_controller.js");
const get_master_sample_list_controller = require("./controllers/get_master_sample_list_controller");

router.get("/detail", get_sample_detail_controller)
router.get("/qc_detail", get_qc_detail_controller)
router.get("/list", get_master_sample_list_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/master_sample/controllers/get_master_sample_list_controller.js
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");
const get_lot_list_service = require("../services/get_lot_list_service.js");

module.exports = async (req, res) => {
    try {
        const search_param = req.query.search_param || "";
        const business_type = +req.query.business_type || null;
        const stage_type = +req.query.stage_type || null;
        const state_ids = req.query.state_ids || null;
        const district_ids = req.query.district_ids || null;
        const pa_ids = req.query.pa_ids || null;
        const page_no = +req.query.page_no || 1;
        const limit = +req.query.limit || 20;
        const sample_status = req.query.sample_status || "";
        const po_status = req.query.po_status || "";
        let payment_1 = +req.query.payment_1;
        let payment_2 = +req.query.payment_2;
        if (Number.isNaN(payment_1) == true)
            payment_1 = null;
        if (Number.isNaN(payment_2) == true)
            payment_2 = null;
        const filter_query = {
            page_no, limit,
            payment_1, payment_2
        };
        if (sample_status)
            filter_query.lot_status = sample_status.split(",");
        if (po_status)
            filter_query.po_status = po_status.split(",");
        if (search_param)
            filter_query.search_param = search_param;
        if (business_type)
            filter_query.business_type = business_type;
        if (stage_type)
            filter_query.stage_type = stage_type;

        if (state_ids)
            filter_query.state_ids = state_ids.split(",");
        if (district_ids)
            filter_query.district_ids = district_ids.split(",");
        if (pa_ids)
            filter_query.pa_ids = pa_ids.split(",");

        const data = await get_lot_list_service(filter_query);

        return res.status(HTTP_status_codes.ok).json(
            create_api_response(true, "success", data)
        )

    } catch (error) {
        error_log(error)
        return res.status(HTTP_status_codes.badRequest).json({
            message: error.message,
        });
    }

}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/master_sample/controllers/get_sample_detail_controller.js
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");
const { get_sample_details_service } = require("../services/get_sample_details_service");

module.exports = async (req, res) => {
    try {
        const lot_id = req.query.lot_id
        if (!lot_id) {
            return res.status(HTTP_status_codes.badRequest).json(
                create_api_response(false, "lot_id is a mandatory param")
            )
        }
        const data = await get_sample_details_service(lot_id);

        return res.status(HTTP_status_codes.ok).json(create_api_response(true, HTTP_status_codes.ok, data));

    } catch (error) {
        error_log(error)
        return res.status(HTTP_status_codes.badRequest).json({
            message: error.message,
        });
    }

}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/master_sample/controllers/get_qc_detail_controller.js
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const HTTP_status_codes = require("../../../../enums/market_linkage/constants/HTTP_status_codes");
const error_log = require("../../../../middelware/error_log");
const get_qc_details_service = require("../services/get_qc_details_service.js");

module.exports = async (req, res) => {
    try {
        const master_sample_id = +req.query.master_sample_id || null;
        const purchase_order_id = +req.query.purchase_order_id || null;
        const crop_variety_id = +req.query.crop_variety_id || null;
        if (!master_sample_id) {
            return res.status(HTTP_status_codes.badRequest).json(
                create_api_response(false, "master_sample_id are mandatory param")
            )
        }
        const data = await get_qc_details_service(master_sample_id, crop_variety_id, purchase_order_id);

        return res.status(HTTP_status_codes.ok).json(
            create_api_response(true, "success", data)
        )

    } catch (error) {
        error_log(error)
        return res.status(HTTP_status_codes.badRequest).json({
            message: error.message,
        });
    }

}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/master_sample/services/get_sample_details_service.js
const user_profile = require('../../../../database/models/user_profile');
const crop_detail = require('../../../../database/models_v2/crop/crop_detail');
const crop_varieties_detail = require('../../../../database/models_v2/crop/crop_varieties_detail');
const purchase_qc_report = require('../../../../database/models_v2/crop/purchase_qc_report');
const locations = require('../../../../database/models_v2/global/locations');
const master_merchant_detail = require('../../../../database/models_v2/merchant/master_merchant_detail');
const purchase_crop_orders = require('../../../../database/models_v2/procurement_order/purchase_crop_orders');
const procurement_order_bill_components = require('../../../../database/models_v2/procurement_payments/procurement_bill_components');
const procurement_lots = require('../../../../database/models_v2/procurement_sample/procurement_lots');
const procurment_crop_sample = require('../../../../database/models_v2/procurement_sample/procurment_crop_sample');
const purchase_crop_sample_images = require('../../../../database/models_v2/procurement_sample/purchase_sample_images');
const error_log = require('../../../../middelware/error_log');
const procurement_order_bill_component_enums = require('../../../../database/models_v2/procurement_payments/procurement_order_bill_component_enums');
const purchase_crop_bill_component_enum = require('../../../../enums/market_linkage/enums/purchase_crop_bill_component_enum');
const crop_variety_qc_param_maps = require('../../../../database/models_v2/procurement_order/crop_variety_qc_param_maps');
const qc_param_types = require('../../../../database/models_v2/procurement_order/qc_param_types');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const get_sample_details_service = async (lot_Id) => {
    return new Promise(async (resolve, reject) => {
        try {
            const lot = await procurement_lots.findOne({
                where: {
                    is_active: true,
                    id: lot_Id
                },
                include: [
                    {
                        model: purchase_crop_orders,
                        where: {
                            is_active: true
                        },
                        required: false
                    },
                    {
                        model: procurement_order_bill_components,
                        where: {
                            is_active: true
                        },
                        required: false
                    }
                ]
            })
            if (!lot) {
                throw new ValidationError('invalid lot id')
            }
            const sample = await procurment_crop_sample.findOne({
                where: {
                    is_active: true,
                    id: lot.procurment_crop_sample_id
                },
                include: [
                    {
                        model: purchase_crop_sample_images,
                        where: {
                            is_active: true
                        },
                        required: false
                    },
                    {
                        model: master_merchant_detail,
                        where: {
                            is_active: true
                        }
                    },
                    {
                        model: user_profile,
                        where: {
                            is_active: true
                        }
                    },
                    {
                        model: locations,
                        where: {
                            is_active: true
                        },
                        required: false
                    },
                    {
                        model: crop_detail,
                        where: {
                            is_active: true
                        },
                        required: false
                    },
                    {
                        model: crop_varieties_detail,
                        where: {
                            is_active: true
                        },
                        required: false
                    },
                    {
                        model: purchase_qc_report,
                        where: {
                            is_active: true
                        },
                        include: [{
                            model: crop_variety_qc_param_maps,
                            where: {
                                is_active: true
                            },
                            include: [
                                {
                                    model: qc_param_types,
                                    where: {
                                        is_active: true
                                    }
                                }
                            ]
                        }],
                        required: false
                    },
                    {
                        model: procurement_order_bill_components,
                        where: {
                            is_active: true
                        },
                        include: [
                            {
                                model: procurement_order_bill_component_enums,
                                where: {
                                    is_active: true
                                }
                            }
                        ],
                        required: false
                    }
                ]
            });
            const lot_response_data = generate_response(sample, lot);
            return resolve(lot_response_data)
        } catch (err) {
            error_log(err);
            return reject(err)
        }
    })
};

const generate_response = (sample, lot) => {
    try {
        let final_mandi_tax = 0;
        let final_commission = 0;
        let final_labour_and_gunnybag_deduction = 0;
        for (let index = 0; index < lot.procurement_order_bill_components.length; index++) {
            const element = lot.procurement_order_bill_components[index];
            if (element.order_bill_component_id === purchase_crop_bill_component_enum.mandi_tax) {
                final_mandi_tax = element.amount;
            }
            if (element.order_bill_component_id === purchase_crop_bill_component_enum.retailer_commision) {
                final_commission = element.amount;
            }
            if (element.order_bill_component_id === purchase_crop_bill_component_enum.labour_and_bag_cost) {
                final_labour_and_gunnybag_deduction = element.amount;
            }
        }
        const lot_response_data = {
            retailerGeoLocation: sample.location
                ? {
                    accuracy: sample.location.accuracy,
                    lat: sample.location.latitude,
                    long: sample.location.longitude
                }
                : {},
            isActive: sample.is_active,
            sampleImages: sample.purchase_crop_sample_images.map((image) => image.image),
            _id: sample.id,
            retailerId: sample.master_merchant_detail?.id,
            retailerMobileNumber: sample.master_merchant_detail?.mobile_number,
            retailerName: sample.master_merchant_detail?.name,
            retailerDistrictName: sample.master_merchant_detail?.district_name,
            retailerStateName: sample.master_merchant_detail?.state_name,
            retailerPincode: sample.master_merchant_detail?.pincode,
            cropName: sample.crop_detail?.name,
            cropVariety: sample.crop_varieties_detail?.id,
            cropVarietyName: sample.crop_varieties_detail?.name,
            sampleWeight: sample.sample_weight / 1000,
            purchasePrice: sample.purchase_price,
            transportCostEst: sample.transport_cost_est,
            createdBy: sample.user_profile
                ? {
                    id: sample.user_profile.id,
                    name: sample.user_profile.name,
                    mobileNumber: sample.user_profile.mobile_number
                }
                : {},
            qcReport: sample.purchase_qc_reports
                ? sample.purchase_qc_reports.map((qc_report) => {
                    return {
                        name: qc_report?.crop_variety_qc_param_map?.qc_param_type?.name,
                        value: qc_report?.value,
                        qcReportId: qc_report?.crop_variety_qc_param_map_id,
                        image: qc_report?.image,
                        thresholdCondition: qc_report?.crop_variety_qc_param_map?.condition,
                        thresholdValue: qc_report?.crop_variety_qc_param_map?.threshold_value
                    }
                })
                : [],
            cropId: sample.crop_detail?.id,
            bagType: sample.bag_type,
            emptyBagWeight: sample.empty_bag_weight * 1000,
            loadedBagWeight: sample.loaded_bag_weight,
            bagDeduction: sample.bag_deduction,
            isMandiTaxPaid: sample.is_mandi_tax_paid,
            mandiTax: sample.procurement_order_bill_components?.find(o => o.procurement_order_bill_component_enum.name === 'mandi_tax')?.amount,
            retailerCommision: sample.procurement_order_bill_components?.find(o => o.procurement_order_bill_component_enum.name === 'retailer_commision')?.amount,
            labourAndBagCost: sample.procurement_order_bill_components?.find(o => o.procurement_order_bill_component_enum.name === 'labour_and_bag_cost')?.amount,
            farmartId: sample.farmart_id,
            createdAt: sample.createdAt,
            updatedAt: sample.updatedAt,
            leadId: sample.purchase_crop_lead_id,
            retailerEmail: sample.master_merchant_detail?.email,
            retailerBusinessName: sample.master_merchant_detail?.business_name,
            retailerFarmartId: sample.master_merchant_detail?.farmart_id,
            FOR: sample.f_o_r,
            dispatch_by: sample.dispatch_by,
            category: sample.category,
            lotId: lot.id,
            totalAvailableQuantity: lot.weight / 1000,
            retailerLockedPrice: lot.retailer_locked_price ?? sample.retailerLockedPrice,
            procurableTon: lot.procurable_ton ?? sample.procurableTon,
            finalTransportCost: lot.transport_cost_est ?? sample.transportCostEst,
            finalBagDeduction: lot.bag_deduction ?? sample.bagDeduction,
            zohoPoId: lot.zoho_po_id,
            status: lot.status,
            poStatus: (lot.purchase_crop_orders) ? lot.purchase_crop_orders[0]?.status : null,
            poId: (lot.purchase_crop_orders) ? lot.purchase_crop_orders[0]?.id : null,
            poNumber: (lot.purchase_crop_orders) ? lot.purchase_crop_orders[0]?.farmart_id : null,
            finalMandiTax: final_mandi_tax,
            finalCommission: final_commission,
            finalLabourAndGunnybagDeduction: final_labour_and_gunnybag_deduction
        };
        return lot_response_data
    } catch (err) {
        error_log(err);
        throw err;
    }
}

module.exports = {
    get_sample_details_service,
    generate_response
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/master_sample/services/get_lot_list_service.js
const crop_detail_model = require("../../../../database/models_v2/crop/crop_detail");
const crop_varieties_detail_model = require("../../../../database/models_v2/crop/crop_varieties_detail");
const get_one_master_merchant = require("../../../../data_abstraction_layer/merchant/get_one_master_merchant");
const procurment_crop_sample_model = require("../../../../database/models_v2/procurement_sample/procurment_crop_sample");
const fetch_procurment_lots = require("../../../../data_abstraction_layer/procurment_lots/fetch_procurment_lots");
const error_log = require("../../../../middelware/error_log");
const fetch_one_purchase_crop_order = require("../../../../data_abstraction_layer/purchase_crop_orders/fetch_one_purchase_order");
const get_one_user_profile = require("../../../../data_abstraction_layer/user_profile/get_one_user_profile");
const { get_master_merchants } = require("../../../../data_abstraction_layer/merchant/master_merchant_details");
const fetch_master_sample_ids = require("../../../../data_abstraction_layer/procurment_master_sample/fetch_master_sample_ids")
const fetch_puchase_crop_order_ids = require("../../../../data_abstraction_layer/purchase_crop_orders/fetch_purchase_orders");
const procurment_payment_enum = require("../../../../enums/purchase_order/procurement_payment_enum");
const get_procurement_payments = require("../../../../data_abstraction_layer/procurment_payment/get_procurement_payments");

module.exports = async ({ search_param, business_type, lot_status = [], sample_status = [], po_status = [], payment_1 = null, payment_2 = null, state_ids = [], district_ids = [], pa_ids, page_no, limit }) => {
    try {
        let retailers = null;
        if (search_param || state_ids.length || district_ids.length)
            retailers = await get_master_merchants({ search_param, state_ids, district_ids, attributes: ["id"] })

        if (search_param && retailers?.rows?.length === 0)
            retailers = null;
        //three cases = [], null, [....]
        let sample_ids = null;
        if (search_param) {
            //sample status, retailers, pa_ids
            if (retailers == null || retailers?.rows?.length == 0)
                sample_ids = await fetch_master_sample_ids({ business_category: business_type, search_param, retailer_ids: [], pa_ids });
            else
                sample_ids = await fetch_master_sample_ids({ business_category: business_type, or: true, search_param, retailer_ids: retailers.rows.map(ele => ele.id), pa_ids });
        }
        else {
            if (retailers == null && business_type == null)
                sample_ids = null;
            else if (retailers?.rows?.length === 0)
                sample_ids = [];
            else
                sample_ids = await fetch_master_sample_ids({ business_category: business_type, retailer_ids: retailers?.rows ? retailers.rows.map(ele => ele.id) : [], pa_ids });
        }

        let po_ids = null;
        let include_po_ids = null;
        if (payment_1 != null || payment_2 != null) {
            let payment_1_po_ids = null;
            let payment_2_po_ids = null;
            if (payment_1 != null) {
                let retailer_payment_ids = await get_procurement_payments({ status: payment_1, installment_number: 1, payment_for: procurment_payment_enum.payment_for.PO, attributes: ["purchase_crop_order_id"] });
                retailer_payment_ids = retailer_payment_ids.map(ele => ele.purchase_crop_order_id);
                let transport_payment_ids = await get_procurement_payments({ status: payment_1, installment_number: 1, payment_for: procurment_payment_enum.payment_for.ORDER_DELIVERY, attributes: ["purchase_crop_order_id"] });
                transport_payment_ids = transport_payment_ids.map(ele => ele.purchase_crop_order_id);
                if (payment_1 == procurment_payment_enum.status.COMPLETED || payment_1 == procurment_payment_enum.status.DECLINED) {
                    let transport_id_set = new Set(transport_payment_ids);
                    payment_1_po_ids = retailer_payment_ids.filter((ele) => transport_id_set.has(ele));
                }
                else {
                    const uninitiated_po_ids = await get_uninitated_po_ids();
                    payment_1_po_ids = [...retailer_payment_ids, ...transport_payment_ids, ...uninitiated_po_ids];
                }
            }
            if (payment_2 != null) {
                let retailer_payment_ids = await get_procurement_payments({ status: payment_2, installment_number: 2, payment_for: procurment_payment_enum.payment_for.PO, attributes: ["purchase_crop_order_id"] });
                retailer_payment_ids = retailer_payment_ids.map(ele => ele.purchase_crop_order_id);
                let transport_payment_ids = await get_procurement_payments({ status: payment_2, installment_number: 2, payment_for: procurment_payment_enum.payment_for.ORDER_DELIVERY, attributes: ["purchase_crop_order_id"] });
                transport_payment_ids = transport_payment_ids.map(ele => ele.purchase_crop_order_id);
                if (payment_2 == procurment_payment_enum.status.COMPLETED || payment_2 == procurment_payment_enum.status.DECLINED) {
                    let transport_id_set = new Set(transport_payment_ids);
                    payment_2_po_ids = retailer_payment_ids.filter((ele) => transport_id_set.has(ele));
                }
                else
                    payment_2_po_ids = [...retailer_payment_ids, ...transport_payment_ids];
            }
            if (payment_1_po_ids && payment_2_po_ids) {
                payment_1_po_ids_set = new Set(payment_1_po_ids);
                include_po_ids = payment_2_po_ids.filter(ele => payment_1_po_ids_set.has(ele));
            }
            else
                include_po_ids = payment_1_po_ids || payment_2_po_ids || []
        }
        if (include_po_ids?.length == 0)
            po_ids = [];
        if (lot_status?.length)
            po_ids = [];
        else if (po_status?.length || search_param || include_po_ids?.length)
            po_ids = await fetch_puchase_crop_order_ids({ ids: include_po_ids || [], status: po_status, po_number: search_param, attributes: ["id", "procurement_lot_id"] });

        let procurement_lots = null;
        if (!search_param) {
            if (sample_ids?.length == 0)
                procurement_lots = {
                    rows: [], count: 0
                }
            else if (lot_status?.length == 0 && po_ids?.length === 0) {
                procurement_lots = {
                    rows: [], count: 0
                }
            }
            else
                procurement_lots = await fetch_procurment_lots({ status: lot_status, or: search_param ? true : false, lot_ids: po_ids ? po_ids.map(ele => ele.procurement_lot_id) : [], sample_ids, page_no, limit });
        }
        else {
            if (sample_ids?.length !== 0 || po_ids?.length !== 0)
                procurement_lots = await fetch_procurment_lots({ status: lot_status, or: search_param ? true : false, lot_ids: po_ids ? po_ids.map(ele => ele.procurement_lot_id) : [], sample_ids, page_no, limit });
            else
                procurement_lots = {
                    rows: [], count: 0
                }
        }
        let sample_listing = await Promise.all(procurement_lots.rows.map(async (procurement_lot) => {
            let sample_element = {
                status: procurement_lot.status,
                lot_id: procurement_lot.id,
                available_lot_weight: procurement_lot.procurable_ton,
                sample_id: procurement_lot.procurment_crop_sample_id
            };
            const sample_detail = await procurment_crop_sample_model.findOne({
                where: {
                    id: sample_element.sample_id,
                    is_active: 1
                },
                attributes: ["farmart_id", "id", "created_at", "purchase_price", "master_merchant_id", "crop_id", "crop_variety_id", "created_by"]
            });
            sample_element.farmart_sample_id = sample_detail?.farmart_id;
            sample_element.sample_created_at = sample_detail?.dataValues?.created_at;
            sample_element.retailer_price = sample_detail?.purchase_price;
            sample_element.lot_weight_in_ton = (procurement_lot?.weight / 1000).toFixed(2);
            const retailer = await get_one_master_merchant({ master_merchant_id: sample_detail.master_merchant_id, attributes: ["name", "state_name", "district_name"] });
            const crop = await crop_detail_model.findOne({ where: { id: sample_detail.crop_id } });
            const crop_variety = await crop_varieties_detail_model.findOne({ where: { id: sample_detail.crop_variety_id } });
            sample_element.crop = {
                id: sample_detail.crop_id,
                crop_name: crop.name,
                crop_variety_name: crop_variety.name,
                crop_variety_id: crop_variety.id
            }
            sample_element.retailer = retailer.dataValues;
            const purchase_crop_order = await fetch_one_purchase_crop_order({ procurement_lot_id: sample_element.lot_id, attributes: ["id", "price", "farmart_id", "status", "user_profile_id"] });
            sample_element.po_id = purchase_crop_order?.id || null;
            sample_element.po_number = purchase_crop_order?.farmart_id || null;
            sample_element.po_status = purchase_crop_order?.status || null;
            sample_element.commodity_price = purchase_crop_order?.price || null;
            // sample_element.user_profile_id = purchase_crop_order?.user_profile_id;
            sample_element.user_profile_id = sample_detail.created_by;
            const user_profile = await get_one_user_profile({ user_profile_id: sample_element.user_profile_id });
            sample_element.pa_name = user_profile.name;
            sample_element.rpm_name = user_profile.reports_to;
            if (sample_element.rpm_name) {
                let rpm_data = await get_one_user_profile({ user_profile_id: sample_element.rpm_name });
                sample_element.rpm_name = rpm_data?.name || "";
            }
            return sample_element;
        }));
        return { count: procurement_lots.count, rows: sample_listing };
    }
    catch (err) {
        error_log(err);
        throw err;
    }
}


const get_uninitated_po_ids = async () => {
    try {
        const { Op } = require("sequelize");
        const purchase_order_status_enum = require("../../../../enums/market_linkage/enums/po").POStatus;
        const purchase_crop_order_model = require("../../../../database/models_v2/procurement_order/purchase_crop_orders");
        const procurement_payment_model = require("../../../../database/models_v2/procurement_payments/procurement_payments");
        let purchase_orders = await purchase_crop_order_model.findAll({
            where: {
                is_active: 1,
                "$procurement_payments.id$": null,
                status: {
                    [Op.in]: [purchase_order_status_enum.READY_TO_DISPATCH, purchase_order_status_enum.DISPATCHED]
                }
            },
            include: [
                {
                    model: procurement_payment_model,
                    where: {
                        is_active: 1
                    },
                    required: false
                }
            ]
        })
        return purchase_orders = purchase_orders.map(ele => ele.id);
    }
    catch (err) {
        error_log(err);
        return null;
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/master_sample/services/get_qc_details_service.js
const error_log = require("../../../../middelware/error_log");
const get_sample_qc_reports = require("../../../../data_abstraction_layer/qc_reports/get_master_sample_qc_reports");
const get_purchase_order_qc_reports = require("../../../../data_abstraction_layer/qc_reports/get_purchase_order_qc_reports");
const get_qc_param_type_maps = require('../../../../data_abstraction_layer/qc_reports/get_qc_param_type_maps');
const get_qc_param_type = require("../../../../data_abstraction_layer/qc_reports/get_qc_param_type_name_by_id");

module.exports = async (master_sample_id, crop_variety_id, purchase_order_id) => {
    try {
        const qc_param_type_maps = await get_qc_param_type_maps({ crop_variety_id });

        const sample_qc_reports = await get_sample_qc_reports({
            master_sample_id,
            attributes: ["id", "value", "image", "crop_variety_qc_param_map_id"]
        });

        let qc_reports = [];

        let purchase_order_qc_reports = [];
        if (purchase_order_id) {
            purchase_order_qc_reports = await get_purchase_order_qc_reports(purchase_order_id);
        }
        const qc_param_types = await get_qc_param_type({
            qc_param_type_ids: qc_param_type_maps.map(ele => ele.qc_param_type_id)
        });
        for (let index = 0; index < sample_qc_reports.length; index++) {
            let crop_variety_qc_param_map_id = sample_qc_reports[index].crop_variety_qc_param_map_id;
            const qc_param_type_map = qc_param_type_maps.find((element) => element.id == crop_variety_qc_param_map_id);
            const qc_param_type = qc_param_types.find((ele) => ele.id == qc_param_type_map.qc_param_type_id).name;
            const purchase_order_qc_report = purchase_order_qc_reports.find((ele) => ele.crop_variety_qc_param_map_id == crop_variety_qc_param_map_id)
            qc_reports.push({
                qc_name: qc_param_type,
                target_value: {
                    value: qc_param_type_map.threshold_value,
                    condition: qc_param_type_map.condition
                },
                sample_qc: {
                    value: sample_qc_reports[index].value,
                    url: sample_qc_reports[index].image
                },
                dispatch_qc: purchase_order_qc_report ? {
                    value: purchase_order_qc_report.value,
                    url: purchase_order_qc_report.image
                } : null
            });
        }
        return qc_reports;

    } catch (error) {
        error_log(error)
        throw error;
    }

}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/quiz/swagger/index.js
module.exports = {
    tags: {
      name: "quiz",
    },
    paths: {
      "/result": {
        get: {
          tags: ["quiz"],
          summary: "get quiz result",
          description: "",
          operationId: "get_quiz_result",
          security: [{ Bearer: ["read"] }],
          parameters: [
            {
              in: "query",
              name: "quiz_detail_id",
              description: "",
              required: true,
              type: "number",
            },
          ],
          responses: {
            400: {
              description: "Invalid input",
            },
            200: {
              description: "success",
            },
          },
        },
      },
      "/result_stats": {
        get: {
          tags: ["quiz"],
          summary: "get quiz result stats",
          description: "",
          operationId: "get_quiz_result_stats",
          security: [{ Bearer: ["read"] }],
          parameters: [
            {
              in: "query",
              name: "quiz_detail_id",
              description: "",
              required: true,
              type: "number",
            },
            {
              in: "query",
              name: "page_no",
              description: "",
              required: false,
              type: "number",
            },
            {
              in: "query",
              name: "limit",
              description: "",
              required: false,
              type: "number",
            },
          ],
          responses: {
            400: {
              description: "Invalid input",
            },
            200: {
              description: "success",
            },
          },
        },
      },
    },
  };


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/quiz/index.js
const router = require("express").Router();
const authorize = require("../../../middelware/authorized_routes");
const user_roles_enum = require("../../../entities/metadata/enums/user_roles");
const get_completed_quiz_result_controller = require("./controllers/get_completed_quiz_result_controller");
const get_quiz_stats_controller = require("./controllers/get_quiz_result_stats_controller");

router.get("/result",authorize([user_roles_enum.Merchant]),get_completed_quiz_result_controller);
router.get("/result_stats",authorize([user_roles_enum.digital_marketing]),get_quiz_stats_controller);
module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/quiz/controllers/get_quiz_result_stats_controller.js
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const get_quiz_result_stats_service = require('../services/get_quiz_result_stats_service')
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const quiz_detail_id = req.query.quiz_detail_id;
        const limit = +req.query.limit || 10;
        const page_no = +req.query.page_no || 1;
        if (!quiz_detail_id) {
            throw new ValidationError('quiz_detail_id is a compulsory parameter');
        }
        const quiz_result_stats = await get_quiz_result_stats_service(quiz_detail_id, page_no, limit)
        const quiz_result_stats_response = create_api_response(true, 'success', quiz_result_stats);
        return res.status(http_status_code_enum.ok).json(quiz_result_stats_response);
    } catch (err) {
        return res.status(http_status_code_enum.bad_request).json({
            message: err.message
        });
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/quiz/controllers/get_completed_quiz_result_controller.js
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const get_completed_quiz_result_service = require('../services/get_completed_quiz_result_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const quiz_detail_id = req.query.quiz_detail_id;
        const merchant_detail_id = req.user.user_profile_id
        if (!quiz_detail_id) {
            throw new ValidationError('quiz_detail_id is a compulsory parameter');
        }
        const quiz_result = await get_completed_quiz_result_service(quiz_detail_id, merchant_detail_id)
        const quiz_result_response = create_api_response(true, 'success', quiz_result);
        return res.status(http_status_code_enum.ok).json(quiz_result_response);
    } catch (err) {
        return res.status(http_status_code_enum.bad_request).json({
            message: err.message
        });
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/quiz/services/get_quiz_result_stats_service.js
const error_log = require("../../../../middelware/error_log");
const {get_quiz_details}=require('../../../../data_abstraction_layer/quiz/quiz_detail')
const {quiz_merchant_submission}=require('../../../../data_abstraction_layer/quiz/quiz_merchant_submission');
const { get_merchants } = require("../../../../data_abstraction_layer/merchant/merchant_details");
const { get_shop_details } = require("../../../../data_abstraction_layer/merchant/shop_details");
const get_quiz_result_stats_service =async (quiz_detail_id, page_no=1,limit=10) => {
    try {
        let quiz_detail=await get_quiz_details({quiz_detail_id,attributes:["total_questions"]})
      let quiz_submission=await quiz_merchant_submission({quiz_detail_id,page_no,limit,attributes:["correct_questions_answered","is_reward_awarded","created_at","merchant_detail_id"]})
      let all_stats=[]
      for(let i=0;i<quiz_submission.rows.length;i++)
      {
        let merchant_detail=await get_merchants({merchant_detail_id:quiz_submission.rows[i].merchant_detail_id,attributes:["name","mobile_number","state_name","district_name"]});
        let shop_detail=await get_shop_details({merchant_detail_id:quiz_submission.rows[i].merchant_detail_id ,attributes:["shop_name"]})
        let stat_obj={
          correct_questions_answered:quiz_submission.rows[i].correct_questions_answered,
          total_questions:quiz_detail.rows[0].total_questions,
          is_reward_awarded:quiz_submission.rows[i].is_reward_awarded,
          created_at:quiz_submission.rows[i].dataValues.created_at,
          quiz_detail_id:quiz_detail_id,
          merchant:{
            id:merchant_detail.rows[0].id,
            name:merchant_detail.rows[0].name,
            mobile_number:merchant_detail.rows[0].mobile_number,
            state_name:merchant_detail.rows[0].state_name,
            district_name:merchant_detail.rows[0].district_name,
            shop_name:shop_detail.rows[0].shop_name,
          }
        }
        all_stats.push(stat_obj)
      }
      return({quiz_result:all_stats,total_quiz_count:quiz_submission.count});
    } catch (ex) {
      error_log(ex);
      return({ quiz_result: [],total_quiz_count:0 });
    }
};

module.exports = get_quiz_result_stats_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/quiz/services/get_completed_quiz_result_service.js
const error_log = require('../../../../middelware/error_log');
const get_quiz_result_service = require('../../../v1/quiz/services/get_quiz_result_service')
const quiz_detail_model = require('../../../../database/models_v2/quiz/quiz_detail');
const quiz_status_enum = require('../../../../enums/quiz/quiz_status');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const get_completed_quiz_result_service = async (quiz_detail_id, merchant_detail_id) => {
    try {
        const quiz_status = await get_status_of_quiz(quiz_detail_id)
        let quiz_result;
        if (quiz_status && quiz_status.status === quiz_status_enum.expired) {
            quiz_result = await get_quiz_result_service(quiz_detail_id, merchant_detail_id)
        } else {
            throw new ValidationError(' quiz not completed ')
        }
        return (quiz_result);
    } catch (ex) {
        error_log(ex);
        return ({ message: ex.message });
    }
};

const get_status_of_quiz = async (quiz_detail_id) => {
    try {
        const quiz_detail = await quiz_detail_model.findOne({
            where: {
                id: quiz_detail_id,
                is_active: 1
            }
        })
        if (!quiz_detail) {
            throw new ValidationError('something went wrong in quiz')
        }
        const current_date = new Date();
        if (current_date < new Date(quiz_detail.live_from)) {
            return { status: quiz_status_enum.not_started }
        } else if (current_date > new Date(quiz_detail.live_till)) {
            return { status: quiz_status_enum.expired }
        } else {
            return { status: quiz_status_enum.running }
        }
    } catch (err) {
        error_log(err)
        return (null)
    }
}

module.exports = get_completed_quiz_result_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/index.js
const router = require("express").Router();

const swagger = require("./swagger-config");
const message = require("./message");
const news_feed = require("./news_feed");
const weather = require("./weather");
const bucket_testing = require("./bucket_testing");
const app_banner = require("./app_banner");
const distributer = require('./distributer');
const farmer = require("./farmer");
const buyer = require("./buyer");
const quiz = require("./quiz");
const location = require("./location");
const merchant = require("./merchant");
const retailer = require("./retailer");
const payment = require("./payment");
const campaign = require("./campaign");
const auth = require("./auth");

router.use("/master_sample", require("./master_sample"));
router.use("/message", message);
router.use("/sms_recharge", require("./sms_recharge"));
router.use("/swagger", swagger);
router.use("/news_feed", news_feed);
router.use("/weather", weather);
router.use("/bucket_testing", bucket_testing);
router.use("/app_banner", app_banner);
router.use("/distributer", distributer);
router.use("/farmer", farmer);
router.use("/buyer", buyer);
router.use("/quiz", quiz);
router.use("/location", location);
router.use("/merchant", merchant);
router.use("/retailer", retailer);
router.use("/payment", payment);
router.use("/sales_order", require('./sales_order'));
router.use("/campaign", campaign);
router.use("/rake", require("./rake"))
router.use("/auth", auth);

module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/message/swagger/index.js
module.exports = {
    tags: {
        name: "message"
    },
    paths: {
        "/languages": {
            get: {
                tags: ["message"],
                summary: "sms languages",
                description: '',
                operationId: "sms_languages",
                security: [{ Bearer: ["read"] }],
                parameters: [],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    },
                }
            }
        },
        "/send": {
            post: {
                tags: ["message"],
                summary: "send message based on sms_type_id and language",
                description: '',
                operationId: "send_sms_template",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        "in": "body",
                        "name": "body",
                        "required": ["sms_type_id", "mobile_numbers"],
                        "properties": {
                            "mobile_numbers": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                }
                            },
                            "sms_type_id": {
                                "type": "number"
                            },
                            "variables": {
                                "type": "object"
                            },
                            "send_on_whatsapp": {
                                "type": "boolean"
                            },
                            "whatsapp_variables": {
                                "type": "object"
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    },
                }
            }
        },
        "/template": {
            get: {
                tags: ["message"],
                summary: "get message template based on sms_type_id and language",
                description: '',
                operationId: "get_sms_template",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        "in": "header",
                        "name": "appversion",
                        required: true,
                        type: "string",
                        description: ""
                    },
                    {
                        "in": "query",
                        "name": "language",
                        required: true,
                        type: "number",
                        description: "1->hindi\n2->english\n3->marathi\n4->bengali",
                    },
                    {
                        "in": "query",
                        "name": "sms_type_id",
                        required: true,
                        type: "number",
                        format: "int64"
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    },
                }
            }
        },
        "/resend": {
            post: {
                tags: ["message"],
                summary: "resend sms based on transaction id",
                description: 'custom sms with status 2(i.e approved) will be sent',
                operationId: "resend_sms",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        "in": "formData",
                        "name": "sms_passbook_id",
                        required: true,
                        type: "number",
                        format: "int64"
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    },
                }
            }
        },
        "/template/all": {
            get: {
                tags: ["message"],
                summary: "get message template based on sms_type_id and language",
                description: '',
                operationId: "get_all_sms_template",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        "in": "header",
                        "name": "appversion",
                        required: true,
                        type: "string",
                        description: ""
                    },
                    {
                        "in": "query",
                        "name": "language",
                        required: true,
                        type: "number",
                        description: "1->hindi\n2->english\n3->marathi\n4->bengali",
                        format: "int64"
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    },
                }
            }
        },
        "/fertilizer_dropdown": {
            get: {
                tags: ["message"],
                summary: "get fertilizer_dropdown for fertilizer message",
                description: '',
                operationId: "fertilizer_dropdown",
                security: [{ Bearer: ["read"] }],
                parameters: [],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    },
                }
            }
        },
        "/crop_dropdown": {
            get: {
                tags: ["message"],
                summary: "get crop_dropdown for message",
                description: '',
                operationId: "crop_dropdown",
                security: [{ Bearer: ["read"] }],
                parameters: [],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    },
                }
            }
        },
        "/operator_switch": {
            patch: {
                tags: ["message"],
                summary: "operator switch",
                description: '',
                operationId: "operator_switch",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        "in": "formData",
                        "name": "operator_id",
                        required: true,
                        type: "number",
                        description: "1->gupshup \n2-> ameyo",
                        format: "int64"
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    },
                }
            }
        },
    }
}   


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/message/index.js
const router = require("express").Router();
const authorize = require("../../../middelware/authorized_routes");
const user_roles_enum = require("../../../entities/metadata/enums/user_roles");

const get_template_controller = require("./controllers/get_sms_template");
const fertilizer_dropdown_controller = require("./controllers/fertilizer_dropdown_controller")
const crop_dropdown_controller = require("./controllers/crop_dropdown_controller")
const operator_switch_controller = require("./controllers/operator_switch_controller")
const get_all_sms_template_controller = require("./controllers/get_all_sms_template_controller");
const send_sms_controller = require("./controllers/send_sms_controller");
const get_sms_languages_controller = require("./controllers/get_sms_languages_controller");
const resend_message_controller = require("./controllers/resend_message_controller");

router.get("/template", authorize([user_roles_enum.Merchant]), get_template_controller);
router.get("/fertilizer_dropdown", authorize([user_roles_enum.Merchant]), fertilizer_dropdown_controller);
router.get("/crop_dropdown", authorize([user_roles_enum.Merchant]), crop_dropdown_controller);
router.get("/template/all", authorize([user_roles_enum.Merchant]), get_all_sms_template_controller);
router.patch("/operator_switch", authorize([user_roles_enum.Super_Admin]), operator_switch_controller);
router.post("/send", authorize([user_roles_enum.Merchant]), send_sms_controller);
router.get("/languages", authorize([user_roles_enum.Merchant]), get_sms_languages_controller);
router.post("/resend", authorize([user_roles_enum.Merchant]), resend_message_controller);

module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/message/controllers/send_sms_controller.js
const error_log = require('../../../../middelware/error_log');
const language_enum = require('../../../../enums/global/language');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const submit_sms_from_app_service = require('../services/submit_sms_from_app_service');
const country_code_enum = require('../../../../enums/global/country_code');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const merchant_detail_id = req.user.user_profile_id;
        const sms_type_id = req.body.sms_type_id;
        const language_id = req.body.language || req.headers.language || language_enum.hindi;
        const variables = req.body.variables || {};
        const mobile_numbers = req.body.mobile_numbers || [];
        const send_on_whatsapp = req.body.send_on_whatsapp || false;
        const country_code = req.user?.country?.country_code || country_code_enum.india;
        if (mobile_numbers.length === 0) {
            throw new ValidationError('mobile_numbers is a mandatory parameter');
        }

        const data = await submit_sms_from_app_service(
            merchant_detail_id,
            language_id,
            mobile_numbers,
            sms_type_id,
            variables,
            send_on_whatsapp,
            country_code);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'success', data));
    } catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/message/controllers/get_sms_template.js
const error_log = require("../../../../middelware/error_log");
const get_sms_template_service = require("../services/get_message_template");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const http_status_code_enum = require("../../../../enums/global/http_status_codes");
const language_enum = require("../../../../enums/global/language");
const update_merchant_message_language_service = require("../../../../common_services/message/update_merchant_message_language");
const global_config = require("../../../../config/global_config");
const env_enum = require("../../../../enums/env/env_enum")


module.exports = async (req, res) => {
    try {
        const language_id = +req.query.language || language_enum.default;
        const merchant_detail_id = req.user.user_profile_id;
        const appversion = req.headers.appversion;
        update_merchant_message_language_service(merchant_detail_id, language_id)
            .catch(err => {
                error_log(err);
            });
        const sms_type_id = +req.query.sms_type_id;
        if (!sms_type_id) {
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false, "sms_type_id is a mandatory param", null));
        }
        let whatsapp_disabled = false;
        if (env_enum.production === global_config.env) {
            if (whatsapp_disabled_app_versions.production.indexOf(appversion) >= 0) {
                whatsapp_disabled = true;
            }
        }
        else {
            if (whatsapp_disabled_app_versions.development.indexOf(appversion) >= 0) {
                whatsapp_disabled = true;
            }
        }
        const sms_template = await get_sms_template_service(sms_type_id, language_id, merchant_detail_id, whatsapp_disabled);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, "success", { sms_template }));
    }
    catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}

const whatsapp_disabled_app_versions = {
    "production": ["6.7.1", "6.8.0"],
    "development": ["6.5.3"]
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/message/controllers/get_sms_languages_controller.js
const error_log = require("../../../../middelware/error_log");
// const get_sms_langauge_service = require('../services/get_sms_language_service');
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const http_status_code_enum = require("../../../../enums/global/http_status_codes");
const get_language_service = require("../services/get_sms_languages_service");

module.exports = async (req, res) => {
    try {
        let sms_languages = await get_language_service();
        return res.status(http_status_code_enum.ok).json(create_api_response(true, "success", { sms_languages }));
    }
    catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/message/controllers/get_all_sms_template_controller.js
const error_log = require('../../../../middelware/error_log');
const get_all_templates_service = require("../services/get_all_templates_service");
const language_enum = require("../../../../enums/global/language");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const http_status_code_enum = require("../../../../enums/global/http_status_codes");
const update_merchant_message_language_service = require("../../../../common_services/message/update_merchant_message_language");
const global_config = require("../../../../config/global_config");
const env_enum = require("../../../../enums/env/env_enum")

module.exports = async (req, res) => {
    try {
        const language_id = +req.query.language || language_enum.hindi;
        const merchant_detail_id = +req.user.user_profile_id;
        const appversion = req.headers.appversion;
        update_merchant_message_language_service(merchant_detail_id, language_id)
            .catch(err => {
                error_log(err);
            });

        let whatsapp_disabled = false;
        if (env_enum.production === global_config.env) {
            if (whatsapp_disabled_app_versions.production.indexOf(appversion) >= 0) {
                whatsapp_disabled = true;
            }
        }
        else {
            if (whatsapp_disabled_app_versions.development.indexOf(appversion) >= 0) {
                whatsapp_disabled = true;
            }
        }
        const templates = await get_all_templates_service(merchant_detail_id, language_id, whatsapp_disabled);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, "success", { templates }));
    }
    catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, "success", null));
    }
}

const whatsapp_disabled_app_versions = {
    "production": ["6.7.1", "6.8.0"],
    "development": ["6.5.3"]
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/message/controllers/fertilizer_dropdown_controller.js
const error_log = require("../../../../middelware/error_log");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const fertilizer_dropdown_service = require("../services/fertilizer_dropdown_service");
const http_status_code_enum = require("../../../../enums/global/http_status_codes");

module.exports = async (req, res) => {
    try {

        const dropdown_data = await fertilizer_dropdown_service();
        return res.status(http_status_code_enum.ok).json(create_api_response(true, "success", { dropdown_data }));
    }
    catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/message/controllers/resend_message_controller.js
const error_log = require("../../../../middelware/error_log");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const http_status_code_enum = require("../../../../enums/global/http_status_codes");
const resend_message_service=require('../services/resend_message_service');
module.exports = async (req, res) => {
    try {
        const sms_passbook_id = +req.body.sms_passbook_id;
        const merchant_detail_id = req.user.user_profile_id;
        if (!sms_passbook_id) {
            const err_message = "sms_passbook_id is a mandatory param";
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err_message));
        }
        const data =await resend_message_service(sms_passbook_id,merchant_detail_id);
        if(data)
        return res.status(http_status_code_enum.ok).json(create_api_response(true, "success",data));
        else
        {
            const err_message = "sms not found to send or custom sms is in pending or rejected state";
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err_message));
        }

    }
    catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/message/controllers/operator_switch_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const operator_switch_service = require('../services/operator_switch_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {

        const operator_id = req.body.operator_id;
        if (!operator_id) {
            throw new ValidationError('operator id missing ')
        }
        const response = await operator_switch_service(operator_id);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, 'success', response));
    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/message/controllers/crop_dropdown_controller.js
const error_log = require("../../../../middelware/error_log");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const crop_dropdown_service = require("../services/crop_dropdown_service");
const http_status_code_enum = require("../../../../enums/global/http_status_codes");

module.exports = async (req, res) => {
    try {

        const dropdown_data = await crop_dropdown_service();
        return res.status(http_status_code_enum.ok).json(create_api_response(true, "success", { dropdown_data }));
    }
    catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/message/services/prepare_sms_template_for_app.js
const shop_detail_model = require('../../../../database/models/shop_detail');
const merchant_detail_model = require('../../../../database/models/merchant_detail');
const error_log = require('../../../../middelware/error_log');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (merchant_detail_id, mongo_sms_template) => {
    try {
        const merchant_detail = await merchant_detail_model.findOne({
            where: {
                id: merchant_detail_id,
                is_active: 1
            },
            attributes: ['mobile_number']
        });
        const shop_detail = await shop_detail_model.findOne({
            where: {
                merchant_detail_id,
                is_active: 1
            },
            attributes: ['shop_name']
        });
        if (merchant_detail && shop_detail) {
            const mobile_number = merchant_detail?.mobile_number || '';
            const shop_name = shop_detail?.shop_name || ' ';
            const variables = {
                $mobile_number: mobile_number,
                $shop_name: shop_name
            }
            const prepared_template = generate_template_from_variables(mongo_sms_template, variables);
            return prepared_template;
        } else {
            throw new ValidationError('invalid merchant_detail_id');
        }
    } catch (err) {
        error_log(err);
        return mongo_sms_template;
    }
}

const generate_template_from_variables = (template, variables) => {
    try {
        const preprocessed_template = template.body.map((ele) => {
            let template = ele.text;
            const variable_keys = Object.keys(variables);
            variable_keys.forEach(variable => {
                template = template.replace(variable, variables[variable]);
            });
            ele.text = template;
            return ele;
        })

        return preprocessed_template;
    } catch (err) {
        error_log(err);
        return template;
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/message/services/operator_switch_service.js
const error_log = require("../../../../middelware/error_log");
const settings_model = require("../../../../database/models/settings");
const settings_enum = require("../../../../entities/metadata/enums/settings_enum");
const redis_delete_service = require("../../../../database/redis/helper_redis_methods").delete_key;
const redis_key_entities = require("../../../../database/redis/redis_key_entities");
const { write_string,key_gen_redis,read_string } = require('../../../../database/redis/helper_redis_methods');

const operator_switch_service=(operator_id)=>{
    return new Promise(async (resolve, reject)=>{
        try{
            const current_settings = await settings_model.findOne({
                where:{
                    id:settings_enum.send_sms_from,
                    is_active:1
                }
            })
            // console.log(current_settings.value);
            let settings_cache_key = await key_gen_redis(redis_key_entities.SETTINGS,current_settings.value);
            let settings_cache_response = await read_string(settings_cache_key);
            if(settings_cache_response)
            {
                await redis_delete_service(settings_cache_key)
            }
                settings_cache_key = await key_gen_redis(redis_key_entities.SETTINGS,operator_id);
                settings_cache_response = JSON.stringify(operator_id);
                        write_string(settings_cache_key,settings_cache_response)
                            .catch(err=>{
                                error_log(err);
                            });

            const settings = await settings_model.update(
                {
                    value:operator_id
                }
                ,{
                    where:{
                        id:settings_enum.send_sms_from,
                        is_active:1
                    }
                }
            );
         resolve({"current_operator_id":settings})
        }
        catch(ex){
            error_log(ex);
            reject({message:ex.message});
        }
    })
}


module.exports=operator_switch_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/message/services/crop_dropdown_service.js
const error_log = require("../../../../middelware/error_log");
const crop_names_model = require("../../../../database/models/crop_name");

module.exports = async () => {
    try {
        const crop_names = await crop_names_model.findAll({
            where: {
                is_active: 1
            },
            attributes: [["name", "label"], ["crop_image_webp", "image_url"], "id"]
        });
        return crop_names;
    }
    catch (err) {
        error_log(err)
        return [];
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/message/services/get_sms_languages_service.js
const error_log = require("../../../../middelware/error_log");
const get_language_service = require("../../../../common_services/global/get_languages_service")
const language_enum = require("../../../../entities_v2/metadata/enums/global/langauge");
module.exports = async () => {
    try {
        let sms_languages = await get_language_service(true)
        sms_languages = sms_languages.filter((language) => {
            let language_id=language.dataValues.language_id
        if(language_id ==language_enum.english ||language_id ==language_enum.hindi||language_id ==language_enum.bengali||language_id ==language_enum.marathi ){
          return language  
        }
    });
        sms_languages = sms_languages.map(ele => {
            return {
                language_name: ele.dataValues.language_name,
                language_id: ele.dataValues.language_id,
                langauge_code: ele.dataValues.language_code
            }
        });
        return sms_languages;
    }
    catch (err) {
        error_log(err);
        return [];
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/message/services/get_all_templates_service.js
const error_log = require("../../../../middelware/error_log");
const sms_category_type_map_model = require("../../../../database/models_v2/sms/v2_module/sms_category_type_map");
const fetch_sms_template_service = require("./get_message_template");
const sms_type_enum = require('../../../../entities/metadata/enums/sms_template_enum');
module.exports = async (merchant_detail_id, language_id, whatsapp_disabled = false) => {
    try {
        const sms_category_type_maps = await sms_category_type_map_model.findAll({
            where: {
                is_active: 1
            },
            attributes: ["sms_type_id"]
        });
        const sms_type_ids = sms_category_type_maps.map(sms_category_type_map => {
            return sms_category_type_map.sms_type_id;
        });
        const sms_templates = {};
        for (let index = 0; index < sms_type_ids.length; index++) {
            const sms_type_id = sms_type_ids[index];
            if (sms_type_id == sms_type_enum.send_weather_info_for_weather_change) {
                continue;
            }
            let sms_template = await fetch_sms_template_service(sms_type_id, language_id, merchant_detail_id,whatsapp_disabled);
            sms_templates[sms_type_id] = sms_template;
        }
        return { sms_templates };
    }
    catch (err) {
        error_log(err);
        return { sms_templates: null };
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/message/services/get_sms_type_details.js
const error_log = require('../../../../middelware/error_log');
const sms_type_v2_model = require('../../../../database/models_v2/sms/v2_module/sms_type_v2');
const sms_type_vernacular_data_model = require('../../../../database/models_v2/sms/v2_module/sms_types_vernacular_metadata');
const language_enum = require('../../../../enums/global/language');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (sms_type_id, language_id) => {
    try {
        const sms_type_v2 = await sms_type_v2_model.findOne({
            where: {
                id: sms_type_id,
                is_active: 1
            },
            attributes: ['cost']
        });
        if (!sms_type_v2) {
            throw new ValidationError('sms not found for type_id = ' + sms_type_id);
        }
        let sms_type_vernacular_data = await sms_type_vernacular_data_model.findOne({
            where: {
                sms_type_id,
                language_id,
                is_active: 1
            },
            attributes: ['form_page_heading', 'disclaimer']
        });
        if (!sms_type_vernacular_data) {
            sms_type_vernacular_data = await sms_type_vernacular_data_model.findOne({
                where: {
                    sms_type_id,
                    language_id: language_enum.default,
                    is_active: 1
                },
                attributes: ['form_page_heading', 'disclaimer']
            })
        }
        return {
            sms_type_id,
            language_id,
            cost: sms_type_v2.cost,
            form_page_heading: sms_type_vernacular_data.form_page_heading,
            whatsapp_template_available: false
        }
    } catch (err) {
        error_log(err);
        return null;
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/message/services/submit_sms_from_app_service.js
const error_log = require('../../../../middelware/error_log');
const submit_sms_from_app_service = require('../../../../entities_v2/sms/service/submit_sms_from_app');
const check_and_send_opt_out_message_service = require('../../../../entities_v2/sms/service/check_and_sent_opt_out_message');
const khaad_beej_dawai_bonus_sms_send = require('../../../../entities_v2/sms/service/khaad_beej_dawai_bonus_sms_send');
const register_merchant_game_task_progress = require('../../../../entities_v2/gamification/services/register_merchant_game_task_progress');
const gamification_task_enum = require('../../../../entities_v2/metadata/enums/gamification/task_enum');
const filter_farmer_mobile_numbers_service = require('../../../../entities/sms/service/v5/filter_farmer_mobile_numbers');
const sms_type_enum = require('../../../../entities/metadata/enums/sms_template_enum');
const custom_sms_format_variables = require('../../../../entities_v2/sms/service/custom_sms/custom_sms_format_variables');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (merchant_detail_id, language_id, mobile_numbers, sms_type_id, variables, send_on_whatsapp, country_code) => {
    try {
        mobile_numbers = await filter_farmer_mobile_numbers_service(
            merchant_detail_id,
            mobile_numbers
        );
        if (mobile_numbers.length === 0) {
            throw new ValidationError('mobile_numbers is a mandatory parameter');
        }
        if (sms_type_id === sms_type_enum.custom_message) {
            variables.formatted_with_commas = await custom_sms_format_variables(
                variables.formatted_with_commas
            );
        }
        const sms_submission_result = await submit_sms_from_app_service(
            merchant_detail_id,
            language_id,
            mobile_numbers,
            sms_type_id,
            variables,
            null,
            send_on_whatsapp,
            true,
            country_code
        );
        khaad_beej_dawai_bonus_sms_send(
            merchant_detail_id,
            sms_type_id,
            mobile_numbers,
            50
        ).catch((err) => {
            error_log(err);
        });
        check_and_send_opt_out_message_service(
            merchant_detail_id,
            mobile_numbers
        ).catch((err) => {
            error_log(err);
        });
        register_merchant_game_task_progress(
            gamification_task_enum['Send SMS'],
            merchant_detail_id
        ).catch((err) => {
            error_log(err);
        });
        return sms_submission_result;
    } catch (err) {
        error_log(err);
        throw err;
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/message/services/fertilizer_dropdown_service.js
const error_log = require("../../../../middelware/error_log");
const fertilizer_product_model = require("../../../../database/models_v2/distributer/fertilizer_product");

module.exports = async () => {
    try {
        const fertilizer_products = await fertilizer_product_model.findAll({
            where: {
                is_active: 1
            },
            attributes: [["name", "label"], "image_url", "id"]
        });
        for(let i=0;i<fertilizer_products.length;i++)
        {
            fertilizer_products[i].dataValues.regional_label=fertilizer_products[i].dataValues.label
        }
        return fertilizer_products;
    }
    catch (err) {
        error_log(err)
        return [];
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/message/services/resend_message_service.js
const error_log = require('../../../../middelware/error_log');
const fetch_sms_detail = require('../../../../common_services/sms/fetch_sms_detail')
const send_bulk_sms = require('../../../../entities/sms/service/v4/send_bulk_sms_from_merchant');
const { get_data_from_settings } = require('../../../../entities/metadata/service/application_version_service');
const settings_enum = require('../../../../entities/metadata/enums/settings_enum');
const sms_template_enum = require('../../../../entities/metadata/enums/sms_template_enum');
const sms_acknowledgement_enum = require('../../../../entities_v2/metadata/enums/sms/sms_acknowledgement_enum');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (sms_passbook_id, merchant_detail_id) => {
    try {
        const sms_detail = await fetch_sms_detail(sms_passbook_id, merchant_detail_id);
        if (!sms_detail) {
            throw new ValidationError('something went wrong ');
        }
        const message = sms_detail.message_string
        const sms_type_id = sms_detail.sms_type_id
        const mobile_numbers = sms_detail.recipent_mobile_numbers
        const language_id = sms_detail.language_id
        const country_code = sms_detail.country_code
        const data = await send_bulk_sms(merchant_detail_id, message, sms_type_id, mobile_numbers, language_id, country_code);
        let acknowledgement_text;
        if (sms_type_id === sms_template_enum.custom_message) {
            acknowledgement_text = sms_acknowledgement_enum.pending[language_id];
        } else {
            acknowledgement_text = sms_acknowledgement_enum.sent[language_id];
        }
        data.acknowledgement_text = acknowledgement_text;
        const icon_lock_value = await get_data_from_settings(settings_enum.sms_icon_lock);
        data.icon_lock_value = icon_lock_value;
        return data
    } catch (err) {
        error_log(err);
        return null;
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/message/services/get_message_variable_form.js
const error_log = require("../../../../middelware/error_log");
const sms_template_variable_model = require("../../../../database/mongoose/mongoose_models/sms/sms_template_variables");
const read_mongo_document = require("../../../../database/mongoose/read_document");
const language_enum = require("../../../../enums/global/language");

module.exports = async (sms_type_id, language_id) => {
    try {
        let sms_variable_forms = await read_mongo_document(sms_template_variable_model, {
            sms_type_id: sms_type_id,
            language_id: language_id,
            // is_active: true
        });
        if (sms_variable_forms.length === 0) {
            sms_variable_forms = await read_mongo_document(sms_template_variable_model, {
                sms_type_id: sms_type_id,
                language_id: language_enum.default,
                // is_active: true
            });
        }
        if (sms_variable_forms.length === 0) {
            return null;
        }
        return {
            variables: sms_variable_forms[0].variables,
            sms_type_id: sms_variable_forms[0].sms_type_id,
            template: sms_variable_forms[0].template,
            language_id: sms_variable_forms[0].language_id
        }
    }
    catch (err) {
        error_log(err);
        return null;
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/message/services/get_message_template.js
const error_log = require('../../../../middelware/error_log');
const get_sms_type_details = require('./get_sms_type_details');
const get_message_variable_form = require('./get_message_variable_form');
const prepare_sms_template_for_app = require('./prepare_sms_template_for_app');
const fetch_whatsapp_template_service = require('../../../v1/whatsapp/services/fetch_whatsapp_template');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (sms_type_id, language_id, merchant_detail_id, whatsapp_disabled = false) => {
    try {
        const message_template = {
            sms_type_id,
            language_id: null,
            cost: null,
            form_page_heading: null,
            whatsapp_template_available: false,
            variables: null,
            template: null
        }
        const sms_type = await get_sms_type_details(sms_type_id, language_id);
        if (!sms_type) {
            throw new ValidationError('sms_type detail not found');
        }
        message_template.language_id = sms_type.language_id;
        message_template.cost = sms_type.cost;
        message_template.form_page_heading = sms_type.form_page_heading;
        const variables = await get_message_variable_form(sms_type_id, language_id);
        if (variables) {
            if (variables.template) {
                const processed_template = await prepare_sms_template_for_app(merchant_detail_id, variables.template);
                if (processed_template) { message_template.template = processed_template; }
            }
            message_template.variables = variables.variables;
        }
        if (whatsapp_disabled === false) {
            const whatsapp_template = await fetch_whatsapp_template_service(
                sms_type_id,
                language_id
            );
            if (whatsapp_template?.whatsapp_template_id) {
                message_template.whatsapp_template_available = true;
            }
        }
        return message_template;
    } catch (err) {
        error_log(err);
        return null;
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/sms_recharge/swagger/index.js
module.exports = {
  tags: {
    name: "sms_recharge",
  },
  paths: {
    "/webhook_razorpay": {
      get: {
        tags: ["sms_recharge"],
        summary: "",
        description: "",
        operationId: "sms_recharge_webhook",
        security: [],
        parameters: [],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
  },
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/sms_recharge/index.js
const router = require("express").Router();
const razorpay_webhook_controller = require("./controllers/razorpay_webhook_controller");

router.get("/webhook_razorpay", razorpay_webhook_controller);
router.post("/webhook_razorpay/captured", razorpay_webhook_controller);

module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/sms_recharge/controllers/razorpay_webhook_controller.js
const error_log = require("../../../../middelware/error_log")
const post_request_service = require("../../../../utilities/external_API_calls/post_request");
const initiate_recharge_from_payment_service = require("../../../../common_services/sms_recharge/intitiate_recharge_from_payment");
const is_payment_log_exists_service = require("../../../../data_abstraction_layer/sms_recharge/is_payment_log_exists");
const add_razorpay_payment_log_service = require("../../../../data_abstraction_layer/sms_recharge/add_razorpay_payment_log");
const payment_failure_alert_service = require("../../../../common_services/payment/payment_failure_alert_service");
const auth_razorpay = require("../../../../config/global_config").auth_razorpay;

module.exports = async (req, res) => {
    try {
        const payment_id = req.body.payload.payment.entity.id;
        let payment_log_object = {
            mobile_number: req.body.payload.payment.entity.contact,
            amount: req.body.payload.payment.entity.amount,
            currency: req.body.payload.payment.entity.currency,
            email: req.body.payload.payment.entity.email,
            payment_id: req.body.payload.payment.entity.id,
            status: "CAPTURED"
        }
        const is_payment_log_exists = await is_payment_log_exists_service({ payment_id: payment_log_object.payment_id });
        if (!is_payment_log_exists) {
            const recharge_object = {
                mobile_number: req.body.payload.payment.entity.contact.slice(-10),
                country_code: req.body.payload.payment.entity.contact.slice(1, -10),
                amount: Math.floor(req.body.payload.payment.entity.amount / 100),
                currency: req.body.payload.payment.entity.currency,
                email: req.body.payload.payment.entity.email,
                payment_id
            }
            try {
                const recharge_response = await initiate_recharge_from_payment_service(recharge_object);
            }
            catch (err) {
                error_log(err);
                await payment_failure_alert_service(recharge_object);
            }
            payment_log_object = await add_razorpay_payment_log_service(payment_log_object);
        }

        await capture_payment({ payment_id, amount: payment_log_object.amount, currency: payment_log_object.currency });
        console.log("payment captured");
        return res.status(200).json({
            message: 'success'
        })
    }
    catch (err) {
        error_log(err);
        res.status(200).json({
            message: err.message,
            status: false
        })
    }
}

const capture_payment = async ({ payment_id, amount, currency }) => {
    try {
        const url = `https://api.razorpay.com/v1/payments/${payment_id}/capture`;

        const body = {
            amount,
            currency
        }
        const auth = {
            username: auth_razorpay.username,
            password: auth_razorpay.password
        }
        const token = Buffer.from(`${auth.username}:${auth.password}`).toString('base64')
        const response = await post_request_service(url, body, {
            "Authorization": `Basic ${token}`
        });
        console.log(response);
        return response;
    }
    catch (err) {
        error_log(err);
        throw err;
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/app_banner/swagger/index.js
module.exports = {
    tags: {
        name: "app_banner"
    },
    paths: {
        "/": {
            post: {
                tags: ["app_banner"],
                summary: "create app_banner",
                description: '',
                operationId: "create_app_banner",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                          "properties": {
                            "state_id": {
                                "type": "integer",
                              },
                            "district_ids": {
                              "type": "array",
                              "items": {
                                "type": "integer",
                              }
                            },
                            "live_from" : {
                                "type" : "integer",
                                "format":"int64"
                              },
                              "live_till" : {
                                "type" : "integer",
                                "format" : "int64"
                              },
                            "screen_name": {
                              type: "string",
                            },
                            "tab_name": {
                              type: "string",
                            },
                            "params": {
                              type: "string",
                            },
                            "action_link": {
                              "type": "string",
                            },
                          }
                        }
                      },
                ],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    },
                }
            },
            get: {
                tags: ["app_banner"],
                summary: "fetch app_banner",
                description: '',
                operationId: "fetch_app_banner",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        "in": "query",
                        "name": "state_id",
                        type: "number",
                    },
                    {
                        "in": "query",
                        "name": "district_id",
                        type: "number",
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    },
                }
            },
            put: {
              tags: ["app_banner"],
              summary: "update app_banner",
              description: '',
              operationId: "update_app_banner",
              security: [{ Bearer: ["read"] }],
              parameters: [
                {
                  "in": "formData",
                  "name": "screen_name",
                  type: "string",
                },
                {
                "in": "formData",
                "name": "tab_name",
                type: "string",
                },
                {
                  "in": "formData",
                  "name": "params",
                  type: "string",
                  },
              ],
              responses: {
                  400: {
                      description: "Invalid input",
                  },
                  200: {
                      description: "success",
                  },
              }
          },
        },
        "/campaign":{
          post: {
            tags: ["app_banner"],
            summary: "create app_banner for campaign",
            description: '',
            operationId: "create_app_banner_for_campaign",
            security: [{ Bearer: ["read"] }],
            parameters: [
                {
                    "in": "body",
                    "name": "body",
                    "description": "",
                    "required": true,
                    "schema": {
                      "properties": {
                        "country_id": {
                          "type": "integer",
                        },
                        "state_id": {
                            "type": "integer",
                          },
                        "master_district_ids": {
                          "type": "array",
                          "items": {
                            "type": "integer",
                          }
                        },
                        "live_from" : {
                            "type" : "integer",
                            "format":"int64"
                          },
                          "live_till" : {
                            "type" : "integer",
                            "format" : "int64"
                          },
                        "banner_image_url": {
                          type: "string",
                        },
                        "campaign_id": {
                          type: "string",
                        },
                        "min_price": {
                          type: "number",
                        },
                        "max_price": {
                          "type": "number",
                        },
                        "crop_id": {
                          "type": "number",
                        },
                      }
                    }
                  },
            ],
            responses: {
                400: {
                    description: "Invalid input",
                },
                200: {
                    description: "success",
                },
            }
        },
        },
        "/screen_names":{
          get: {
            tags: ["app_banner"],
            summary: "fetch screen_name",
            description: '',
            operationId: "fetch_screen_name",
            security: [{ Bearer: ["read"] }],
            parameters: [
                {
                    "in": "query",
                    "name": "tab_name_id",
                    type: "number",
                },
            ],
            responses: {
                400: {
                    description: "Invalid input",
                },
                200: {
                    description: "success",
                },
            }
        },
        },
        "/tab_names":{
          get: {
            tags: ["app_banner"],
            summary: "fetch tab_names",
            description: '',
            operationId: "fetch_tab_names",
            security: [{ Bearer: ["read"] }],
            parameters: [],
            responses: {
                400: {
                    description: "Invalid input",
                },
                200: {
                    description: "success",
                },
            }
        },
        }
    }
}   


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/app_banner/index.js
const router = require("express").Router();
const authorize = require("../../../middelware/authorized_routes");
const user_roles_enum = require("../../../enums/user_profile/user_role");
const create_app_banner_controller = require('./controllers/create_app_banner_controller');
const create_app_banner_for_campaign_controller = require('./controllers/create_app_banner_for_campaign_controller');
const get_app_banner_controller = require('./controllers/get_app_banner_controller');
const update_app_banner_controller = require('./controllers/update_app_banner_controller');
const get_screen_names_controller = require('./controllers/get_screen_names_controller');
const get_tab_names_controller = require('./controllers/get_tab_names_controller');

router.post("/", authorize([user_roles_enum.digital_marketing]), create_app_banner_controller);
router.post("/campaign", authorize([user_roles_enum.digital_marketing,user_roles_enum.market_linkage_system]), create_app_banner_for_campaign_controller);
router.get("/", authorize([user_roles_enum.Merchant]), get_app_banner_controller);
router.put("/", authorize([user_roles_enum.digital_marketing]), update_app_banner_controller);
router.get("/screen_names", authorize([user_roles_enum.digital_marketing]), get_screen_names_controller);
router.get("/tab_names", authorize([user_roles_enum.digital_marketing]), get_tab_names_controller);

module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/app_banner/controllers/create_app_banner_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_app_banner_service = require('../services/create_app_banner_service');
const country_enum = require('../../../../enums/location/country_enum');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const country_id = +req.body.country_id || country_enum.india;
        const state_id = +req.body.state_id || null
        const district_ids = req.body.district_ids || []
        const live_from = +req.body.live_from || 0
        const live_till = +req.body.live_till || 0
        const screen_name = req.body.screen_name
        const tab_name = req.body.tab_name
        const params = req.body.params
        const action_link = req.body.action_link
        const app_banner_link = req.body.app_banner_link;
        const app_banner_name = req.body.app_banner_name;
        const promotional = req.body.promotional || false;

        if (!action_link && !(screen_name && tab_name)) {
            throw new ValidationError('either action_link or screen_name ,tab_name is mandatory')
        }
        const app_banner = await create_app_banner_service(state_id, district_ids, live_from, live_till, screen_name, tab_name, params, action_link, app_banner_link, app_banner_name, country_id, promotional);
        const app_banner_response = create_api_response(true, 'successfull', app_banner);
        res.status(http_status_code_enum.ok).json(app_banner_response);
    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/app_banner/controllers/get_screen_names_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const get_screen_name_service = require('../services/get_screen_name_service')
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const retailer_tab_id = +req.query.retailer_tab_id;
        if (!retailer_tab_id) {
            throw new ValidationError('retailer_tab_id is mandatory param')
        }
        const screen_name_data = await get_screen_name_service(retailer_tab_id);
        const screen_name_response = create_api_response(true, 'successfull', screen_name_data);
        res.status(http_status_code_enum.ok).json(screen_name_response);
    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/app_banner/controllers/update_app_banner_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const update_app_banner_service = require('../services/update_app_banner_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {

        const app_banner_link = req.body.app_banner_link;
        const action_link = req.body.action_link;
        const screen_name = req.body.screen_name;
        const tab_name = req.body.tab_name;
        const params = req.body.params;
        const live_from = +req.body.live_from;
        const live_till = +req.body.live_till;
        const app_banner_id = req.body.app_banner_id;
        const promotional = req.body.promotional || false;
        if (!app_banner_id) {
            throw new ValidationError('app_banner_id is mandatory to update')
        }
        const updated_app_banner_data = await update_app_banner_service(app_banner_link, action_link, screen_name, tab_name, params, live_from, live_till, app_banner_id, promotional);
        const updated_app_banner_response = create_api_response(true, 'successfull', updated_app_banner_data);
        res.status(http_status_code_enum.ok).json(updated_app_banner_response);
    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/app_banner/controllers/create_app_banner_for_campaign_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_app_banner_for_campaign_service = require('../services/create_app_banner_for_campaign_service');
const country_enum = require('../../../../enums/location/country_enum');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {

        const country_id = +req.body.country_id || country_enum.india;
        const master_state_id = +req.body.master_state_id || null
        const master_district_ids = req.body.master_district_ids || []
        let live_from = req.body.live_from || ''
        let live_till = req.body.live_till || ''
        const banner_image_url = req.body.banner_image_url
        const campaign_id = req.body.campaign_id
        const min_price = req.body.min_price
        const max_price = req.body.max_price
        const crop_id = req.body.crop_id;

        live_from = live_from ? new Date(live_from) : new Date();
        live_till = live_from ? new Date(live_till) : new Date();

        if (!master_state_id || master_district_ids.length === 0 || !banner_image_url || !campaign_id || !crop_id) {
            throw new ValidationError('state_id , live_from , live_till , banner_image_url ,campaign_id , min_price , max_price ,crop_id is mandatory')
        }
        const app_banner = await create_app_banner_for_campaign_service(country_id, master_state_id, master_district_ids, live_from, live_till, banner_image_url, campaign_id, min_price, max_price, crop_id);
        const app_banner_response = create_api_response(true, 'successfull', app_banner);
        res.status(http_status_code_enum.ok).json(app_banner_response);
    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/app_banner/controllers/get_tab_names_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const get_tab_names_service = require('../services/get_tab_name_service');

module.exports = async (req, res) => {
    try {
        let tab_name_data = await get_tab_names_service();
        let tab_name_response = create_api_response(true, "successfull", tab_name_data);
        res.status(http_status_code_enum.ok).json(tab_name_response);
    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/app_banner/controllers/get_app_banner_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const get_app_banner_service = require('../services/get_app_banner_service');
const countries_enum = require("../../../../enums/location/country_enum");
module.exports = async (req, res) => {
    try {
        const state_id = +req.query.state_id;
        const district_id = +req.query.district_id;
        const country_id = +req.user?.country?.id || countries_enum.india;
        const master_merchant_id = +req.user.master_merchant_id || null;
        if (!state_id || !district_id) {
            let err_message = "state_id and district_id is mandatory";
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err_message));
        }
        let config = {};
        if (master_merchant_id)
            config.for_ml = true;
        else
            config.for_non_ml = true;
        // let app_banner_data = await get_app_banner_service(state_id, district_id, country_id, config);
        let app_banner_response = create_api_response(true, "successfull", { "app_banner_data": [] });
        res.status(http_status_code_enum.ok).json(app_banner_response);
    } catch (ex) {

        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/app_banner/services/get_app_banner_service.js
const error_log = require('../../../../middelware/error_log');
const app_banners_model = require('../../../../database/models/metadata_model/app_banners');
const app_banner_state_district_map_model = require('../../../../database/models_v2/app_banner/app_banner_state_district_map');
const { Op } = require('sequelize');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const get_app_banner_service = async (state_id, district_id, country_id, { for_ml = false, for_non_ml = false }) => {
    try {
        const now = new Date();
        const app_banner_where_query = {
            is_active: true,
            live_from: {
                [Op.lte]: now
            },
            live_till: {
                [Op.gte]: now
            },
            promotional: {
                [Op.ne]: true
            }
        }
        if (for_ml) { app_banner_where_query.for_ml = true; }
        if (for_non_ml) { app_banner_where_query.for_non_ml = true; }
        const app_banner_data = await app_banners_model.findAll({
            where: app_banner_where_query,
            include: [
                {
                    model: app_banner_state_district_map_model,
                    attributes: [],
                    where: {
                        country_id,
                        [Op.or]: [
                            {
                                state_id,
                                district_id
                            },
                            {
                                state_id,
                                district_id: null
                            },
                            {
                                state_id: null,
                                district_id: null
                            }
                        ],
                        is_active: true
                    }
                }
            ]
        });
        if (app_banner_data.length === 0) {
            throw new ValidationError('no banner for this state and district')
        }
        const response_data = []
        for (let i = 0; i < app_banner_data.length; i++) {
            const response = {
                id: app_banner_data[i].id,
                screen_name: app_banner_data[i].screen_name,
                tab_name: app_banner_data[i].tab_name,
                action_link: app_banner_data[i].action_link,
                app_banner_link: app_banner_data[i].app_banner_link,
                params: null
            }
            try {
                if (app_banner_data[i].params) { response.params = JSON.parse(app_banner_data[i].params) }
            } catch (err) {
                response.params = null;
                error_log(err);
            }

            if (response.tab_name) { response.action_link = null; }
            response_data.push(response);
        }
        return ({ app_banner_data: response_data })
    } catch (ex) {
        error_log(ex);
        return ({ message: ex.message });
    }
}

module.exports = get_app_banner_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/app_banner/services/get_tab_name_service.js
const error_log = require('../../../../middelware/error_log');
const retailer_tab_screen_maps_model = require('../../../../database/mongoose/mongoose_models/app_banner/retailer_tab_screen_maps');

const get_app_banner_service = async () => {
    try {
        let where_condition = {
            is_active: true
        };
        let retailer_tab_screen_maps =
            await retailer_tab_screen_maps_model.find(where_condition).select("id tab_name");

        return ({
            "retailer_tab_screen": retailer_tab_screen_maps.map(ele => {
                return { id: ele.id, tab_name: ele.tab_name };
            })
        });
    }
    catch (ex) {
        error_log(ex);
        return ({ message: ex.message });
    }
}
module.exports = get_app_banner_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/app_banner/services/update_app_banner_service.js
const error_log = require('../../../../middelware/error_log');
const app_banners_model = require('../../../../database/models/metadata_model/app_banners');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const update_app_banner_service = async (app_banner_link, action_link, screen_name, tab_name, params, live_from, live_till, app_banner_id, promotional = false) => {
    try {
        if (live_from) {
            live_from = new Date(live_from);
        }
        if (live_till) {
            live_till = new Date(live_till);
        }
        const app_banner_data = await app_banners_model.findOne({
            where: {
                id: app_banner_id,
                is_active: true
            }
        });
        if (!app_banner_data) {
            throw new ValidationError('not found data to update')
        }
        // if property is undefined then it remains same
        app_banner_data.app_banner_link = app_banner_link || app_banner_data.app_banner_link
        app_banner_data.action_link = action_link || app_banner_data.action_link
        app_banner_data.screen_name = screen_name
        app_banner_data.tab_name = tab_name
        app_banner_data.params = params;
        app_banner_data.promotional = promotional;
        if (live_from) {
            app_banner_data.live_from = live_from
        }
        if (live_till) {
            app_banner_data.live_till = live_till
        }
        await app_banner_data.save();
        return ({ updated_app_banner_data: app_banner_data })
    } catch (ex) {
        error_log(ex);
        return ({ message: ex.message });
    }
}
module.exports = update_app_banner_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/app_banner/services/create_app_banner_for_campaign_service.js
const error_log = require('../../../../middelware/error_log');
const app_banners_model = require('../../../../database/models/metadata_model/app_banners');
const { map_app_banner_to_state_district } = require('../../../../entities/app_banner/service/app_banner_operations');
const { get_crop_details_by_id } = require('../../../../data_abstraction_layer/crop/crop_details');
const { get_merchant_ids } = require('../../../../data_abstraction_layer/merchant/merchant_details');
const { get_district_ids } = require('../../../../data_abstraction_layer/location/districts');
const get_state_service = require("../../../../data_abstraction_layer/location/get_states");

const create_app_banner_service = async (country_id, master_state_id, master_district_ids, live_from, live_till, banner_image_url, campaign_id, min_price, max_price, crop_id) => {
    try {
        const states = await get_state_service(master_state_id);
        let state_district_maps = await Promise.all(states.map(async (state) => {
            const district_ids = await get_district_ids({ state_id: state.id, master_district_ids });
            return { state_id: state.id, district_ids };
        }));
        let app_banner_name = "campaign", promotional = false, action_link = null, screen_name = "CAMPAIGN", tab_name = "MARKETING_TAB";
        let crop_details = await get_crop_details_by_id({ crop_id });

        const merchant_distribution = await Promise.all(state_district_maps.map(async (state_district_map) => {
            let merchants = await get_merchant_ids({ state_id: state_district_map.state_id, district_ids: state_district_map.district_ids })
            return merchants.count;
        }));
        let params = {
            data: {
                name: crop_details.name,
                crop_id,
                crop_img_url: crop_details.app_cover_image_url,
                campaign_id: campaign_id
            }
        }
        params = JSON.stringify(params);
        live_from = new Date(live_from);
        live_till = new Date(live_till);
        let app_banner_data_to_be_saved = {
            live_from,
            live_till,
            is_active: 1,
            app_banner_link: banner_image_url,
            name: app_banner_name,
            promotional,
            for_ml: true,
            for_non_ml: false
        }
        if (action_link) {
            app_banner_data_to_be_saved.action_link = action_link
        }
        else {
            app_banner_data_to_be_saved.screen_name = screen_name
            app_banner_data_to_be_saved.tab_name = tab_name
            app_banner_data_to_be_saved.params = params
        }
        let app_banner_saved_data = await app_banners_model.create(app_banner_data_to_be_saved);
        await Promise.all(state_district_maps.map(async (state_district_map) => {
            return await map_app_banner_to_state_district(app_banner_saved_data.id, state_district_map.state_id, state_district_map.district_ids, country_id);
        }));
        return ({ "audience_count": merchant_distribution.reduce((a, b) => a + b, 0), "app_banner_id": app_banner_saved_data.id })
    }
    catch (ex) {
        error_log(ex);
        return ({ message: ex.message });
    }
}
module.exports = create_app_banner_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/app_banner/services/get_screen_name_service.js
const error_log = require('../../../../middelware/error_log');
const retailer_tab_screen_maps_model = require('../../../../database/mongoose/mongoose_models/app_banner/retailer_tab_screen_maps');

const get_app_banner_service = async (retailer_tab_id) => {
    try {
        let where_condition = {
            is_active: true,
            id: retailer_tab_id
        };
        let retailer_tab_screen_maps = await retailer_tab_screen_maps_model.findOne(where_condition);

        return ({ "retailer_tab_screens": retailer_tab_screen_maps?.screens || [] })
    }
    catch (ex) {
        error_log(ex);
        return ({ message: ex.message });
    }
}
module.exports = get_app_banner_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/app_banner/services/create_app_banner_service.js
const error_log = require('../../../../middelware/error_log');
const app_banners_model = require('../../../../database/models/metadata_model/app_banners');
const { map_app_banner_to_state_district } = require('../../../../entities/app_banner/service/app_banner_operations')
const create_app_banner_service = async (state_id, district_ids, live_from, live_till, screen_name, tab_name, params, action_link, app_banner_link, app_banner_name, country_id, promotional = false) => {
    try {
        live_from = new Date(live_from);
        live_till = new Date(live_till);
        let app_banner_data_to_be_saved = {
            live_from,
            live_till,
            is_active: 1,
            app_banner_link,
            name: app_banner_name,
            promotional,
            for_ml: true,
            for_non_ml: true
        }
        if (action_link) {
            app_banner_data_to_be_saved.action_link = action_link
        }
        else {
            app_banner_data_to_be_saved.screen_name = screen_name
            app_banner_data_to_be_saved.tab_name = tab_name
            app_banner_data_to_be_saved.params = params
        }
        let app_banner_saved_data = await app_banners_model.create(app_banner_data_to_be_saved);
        await map_app_banner_to_state_district(app_banner_saved_data.id, state_id, district_ids, country_id)
        return ({ "app_banner_created": app_banner_saved_data })
    }
    catch (ex) {
        error_log(ex);
        return ({ message: ex.message });
    }
}
module.exports = create_app_banner_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/campaign/swagger/index.js
module.exports = {
  tags: {
    name: "campaign",
  },
  paths: {
    "/inquiry": {
      post: {
        tags: ["campaign"],
        summary: "submit campaign lead",
        description: "",
        operationId: "create_campaign_lead",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "formData",
            name: "campaign_id",
            description: "",
            required: false,
            type: "number",
          },
          {
            in: "formData",
            name: "pincode",
            description: "",
            required: true,
            type: "string",
          },
          {
            in: "formData",
            name: "price",
            description: "",
            required: true,
            type: "number",
          },
          {
            in: "formData",
            name: "quantity",
            description: "",
            required: true,
            type: "number",
          },
          {
            in: "formData",
            name: "crop_type_id",
            description: "mysql crop_id",
            required: true,
            type: "string",
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/campaign/index.js
const user_role = require("../../../enums/user_profile/user_role");
const authorize = require("../../../middelware/authorized_routes");
const router = require("express").Router();
const create_lead_controller = require("./controllers/create_lead_controller");

router.post("/inquiry", authorize([user_role.Merchant]), create_lead_controller);


module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/campaign/controllers/create_lead_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const create_lead_service = require('../services/create_lead_service');
const language_enum = require('../../../../entities_v2/metadata/enums/global/langauge');
const campaign_source_enum = require('../../../../entities_v2/metadata/enums/campaign/source_enum');
const checking_merchant_name_and_shop_name = require('../../../../common_services/merchant/checking_merchant_name_and_shop_name');
const feature_usage_counter_service = require('../../../../common_services/features/feature_usage_counter_service');
const features_enum = require('../../../../enums/features/features_enum');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const campaign_id = req.body.campaign_id;
        const country_code = req.user.country?.country_code;
        const price_per_quintal = +req.body.price || 0;// per quintal
        const quantity_in_tonne = +req.body.quantity || 0;// in tonne
        const crop_type_id = req.body.crop_type_id;
        const merchant_id = req.user.user_profile_id;
        const language_id = +req.headers.language || language_enum.hindi;
        const master_merchant_id = req.user.master_merchant_id || null;
        const mobile_number = req.user.mobile_number + '';
        const pincode = +req.body.pincode;
        if (!price_per_quintal || !quantity_in_tonne || !pincode) {
            throw new ValidationError('pincode,price_per_quintal and quantity_in_tonne are mandatory parameter');
        }
        if (!campaign_id && !crop_type_id) {
            throw new ValidationError('must have either campaign_id or crop_type_id parameter');
        }
        // respective service to be called
        let source = campaign_source_enum.campaign;
        if (!campaign_id) {
            source = campaign_source_enum.retailer;
        }
        const merchant_name_exists = await checking_merchant_name_and_shop_name({
            merchant_detail_id: merchant_id,
            merchant_name: true
        });
        if (!merchant_name_exists) {
            throw new ValidationError('merchant_name is required !!');
        }
        const price_polling_data = await create_lead_service(pincode, campaign_id, price_per_quintal, quantity_in_tonne, crop_type_id, merchant_id, master_merchant_id, language_id, source, country_code, mobile_number)
        // calling feature_usage_counter service
        feature_usage_counter_service({ feature_id: features_enum.sell_crop, merchant_detail_id: merchant_id })
            .catch(err => {
                error_log(err);
            });
        const response = create_api_response(true, 'success', price_polling_data);
        res.status(http_status_code_enum.ok).json(response);
    } catch (err) {
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/campaign/services/create_lead_service.js
const error_log = require('../../../../middelware/error_log');
const campaign_source_enum = require('../../../../entities_v2/metadata/enums/campaign/source_enum');
const whatsapp_campaign_response_ticket_service = require('../../../../entities_v2/campaign/whatsapp_campaign_response_ticket_service');
const post_request_service = require('../../../../utilities/external_API_calls/post_request');
const global_config = require('../../../../config/global_config');
const { clear_leads_cache } = require('../../../../data_abstraction_layer/order_tracking/order_tracking_leads_in_redis');
const get_language_service = require('../../../../data_abstraction_layer/language/get_language_by_id');
const { lead_creation_alert } = require('../../../../common_services/campaign/alert_on_slack');

const {
    get_pincode_details_by_pincode
} = require('../../../../data_abstraction_layer/location/master_pincodes');
const add_business_account_service = require('../../../v1/merchant/services/add_business_account_service');
const merchant_type_enum = require('../../../../enums/merchant/merchant_type');
const merchant_category_enum = require('../../../../enums/market_linkage/enums/v2/merchant_category');
const {
    get_merchant_detail_by_id
} = require('../../../../data_abstraction_layer/merchant/merchant_details');
const { get_shop_detail_by_merchant_id } = require('../../../../data_abstraction_layer/merchant/shop_details');
const get_lat_long_from_pincode = require('../../../../common_services/location/get_lat_long_from_pincode');

module.exports = async (
    pincode,
    campaign_id = null,
    price_per_quintal,
    quantity_in_tonne,
    crop_type_id,
    merchant_detail_id,
    ml_merchant_id,
    language_id,
    source = campaign_source_enum.campaign,
    country_code,
    mobile_number
) => {
    try {
        pincode = pincode + '';
        let lead_data = {};
        const { name } = await get_merchant_detail_by_id({
            merchant_detail_id,
            attributes: ['name']
        });
        if (ml_merchant_id) {
            lead_data = await create_leads({
                ml_merchant_id,
                merchant_detail_id,
                quantity_in_tonne,
                price_per_quintal,
                crop_type_id,
                source,
                campaign_id,
                language_id,
                mobile_number,
                name,
                country_code
            });
        } else {
            // find search pincode in db
            // if not found then call create lead
            // else onboard the retailer on ml
            // get lat long from pincode
            // create a function which will take pincode and return location obj
            let { formatted_address, lat, long } = await get_lat_long_from_pincode(pincode);
            // need lat long as string
            lat = lat + '';
            long = long + '';
            if (pincode) {
                const pincode_details = await get_pincode_details_by_pincode({ pincode });
                if (pincode_details) {
                    // create business account
                    const profession_id = merchant_type_enum.Retailer;
                    const category = merchant_category_enum.PROCUREMENT;
                    const state_id = pincode_details.master_state_id;
                    const district_id = pincode_details.master_district_id;
                    const taluk_id = pincode_details.master_taluka_id;
                    const full_address = formatted_address;
                    const accuracy = 5;// need this

                    const business_account = await add_business_account_service(
                        name,
                        profession_id,
                        mobile_number,
                        full_address,
                        state_id,
                        district_id,
                        taluk_id,
                        pincode,
                        lat,
                        long,
                        accuracy,
                        category
                    );
                    // update this master_merchant_id in shop details
                    const shop_details = await get_shop_detail_by_merchant_id({ merchant_detail_id });
                    if (shop_details) {
                        shop_details.master_merchant_detail_id = business_account?.id
                        await shop_details.save();
                    }
                    // create lead
                    lead_data = await create_leads({
                        ml_merchant_id: business_account?.id,
                        merchant_detail_id,
                        quantity_in_tonne,
                        price_per_quintal,
                        crop_type_id,
                        source,
                        campaign_id,
                        language_id,
                        mobile_number,
                        name,
                        country_code
                    });
                } else {
                    // normal flow of lead generation that will notify ml side
                    lead_data = await create_leads({
                        ml_merchant_id,
                        merchant_detail_id,
                        quantity_in_tonne,
                        price_per_quintal,
                        crop_type_id,
                        source,
                        campaign_id,
                        language_id,
                        mobile_number,
                        name
                    });
                }
            } else {
                // normal flow of lead generation that will notify ml side
                lead_data = await create_leads({
                    ml_merchant_id,
                    merchant_detail_id,
                    quantity_in_tonne,
                    price_per_quintal,
                    crop_type_id,
                    source,
                    campaign_id,
                    language_id,
                    mobile_number,
                    name
                });
            }
        }
        return lead_data;
    } catch (err) {
        error_log(err);
        throw err;
    }
};
const create_leads = async ({
    ml_merchant_id,
    merchant_detail_id,
    quantity_in_tonne,
    price_per_quintal,
    crop_type_id,
    source,
    campaign_id,
    language_id,
    mobile_number,
    name,
    country_code
}) => {
    const token = global_config.retailer_token;
    const url = global_config.market_linkage_system_url;
    const endpoint = '/v2/campaign/lead';
    const body = {
        merchant_detail_id,
        weight_in_kg: quantity_in_tonne * 1000,
        price_per_kg: price_per_quintal / 100,
        crop_id: crop_type_id,
        source
    };
    if (ml_merchant_id) {
        body.master_merchant_detail_id = ml_merchant_id;
    }
    if (campaign_id) body.campaign_id = campaign_id;
    let lead_api_response;
    // eslint-disable-next-line no-useless-catch
    try {
        lead_api_response = await post_request_service(url + endpoint, body, {
            Authorization: token
        });
    } catch (err) {
        throw err;
    }
    const { language_code } = await get_language_service(language_id);
    const lead_data = {
        lead_id: lead_api_response?.data?.data?.lead_id || null,
        farmart_lead_id: lead_api_response?.data?.data?.farmart_lead_id || null,
        message: lead_api_response?.data?.data?.message?.[language_code]
    };
    await clear_leads_cache({
        master_merchant_id: ml_merchant_id,
        merchant_detail_id
    });
    if (lead_data.farmart_lead_id) {
        whatsapp_campaign_response_ticket_service(
            language_id,
            name,
            lead_data.farmart_lead_id,
            crop_type_id,
            quantity_in_tonne,
            price_per_quintal,
            mobile_number,
            country_code
        ).catch((err) => {
            error_log(err);
        });
    } else {
        const channel_id = global_config.lead_non_ml_channel_id;

        lead_creation_alert({
            merchant_detail_id,
            crop_detail_id: crop_type_id,
            quantity_in_tonne,
            price_per_quintal,
            channel_id
        }).catch((err) => {
            error_log(err);
        });
    }
    return lead_data;
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/distributer/swagger/index.js
module.exports = {
    tags: {
        name: "distributer",
    },
    paths: {
        "/fertilizer/products": {
            get: {
                tags: ["distributer"],
                summary: "get distributer product listing",
                description: "",
                operationId: "get_distributer_products",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        "in": "query",
                        "name": "state_id",
                        type: "number",
                        required: true
                    },
                    {
                        "in": "query",
                        "name": "district_id",
                        type: "number",
                        required: true
                    },
                    {
                        "in": "query",
                        "name": "search_term",
                        type: "string",
                        required: false
                    },
                    {
                        "in": "query",
                        "name": "page_no",
                        type: "number",
                        required: false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        type: "number",
                        required: false
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    },
                },
            },
        },
        "/fertilizer/brands": {
            get: {
                tags: ["distributer"],
                summary: "get distributer product listing",
                description: "",
                operationId: "get_distributer_brands",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        "in": "query",
                        "name": "state_id",
                        type: "number",
                        required: true
                    },
                    {
                        "in": "query",
                        "name": "district_id",
                        type: "number",
                        required: true
                    },
                    {
                        "in": "query",
                        "name": "fertilizer_product_id",
                        type: "number",
                        required: true
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    },
                },
            },
        },
        "/fertilizer": {
            get: {
                tags: ["distributer"],
                summary: "get distributers by filters",
                description: "",
                operationId: "get_distributers",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        "in": "query",
                        "name": "state_id",
                        type: "number",
                        required: true
                    },
                    {
                        "in": "query",
                        "name": "district_id",
                        type: "number",
                        required: true
                    },
                    {
                        "in": "query",
                        "name": "fertilizer_product_id",
                        type: "number",
                        required: true
                    },
                    {
                        "in": "query",
                        "name": "brand_ids",
                        type: "string",
                        required: false
                    },
                    {
                        "in": "query",
                        "name": "search_term",
                        type: "string",
                        required: false
                    },
                    {
                        "in": "query",
                        "name": "page_no",
                        type: "number",
                        required: false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        type: "number",
                        required: false
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    },
                },
            },
        },
        "/fertilizer/enquiry": {
            post: {
                tags: ["distributer"],
                summary: "create distributer fertilizer enquiry",
                description: '',
                operationId: "create_distributer_fertilizer_enquiry",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "body",
                        name: "body",
                        description: "",
                        required: true,
                        schema: {
                            properties: {
                                fertilizer_product_id: {
                                    type: "number"
                                },
                                distributer_ids: {
                                    type: "array",
                                    items: {
                                        type: "number",
                                    },
                                },
                                quantity_in_kg: {
                                    type: "number"
                                }
                            },
                        },
                    },
                ],
                responses: {
                    400: {
                        description: "Invalid input",
                    },
                    200: {
                        description: "success",
                    },
                }
            },
        }
    },
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/distributer/index.js
const router = require("express").Router();
const authorize = require("../../../middelware/authorized_routes");
const user_roles_enum = require("../../../entities/metadata/enums/user_roles");

const get_fertilizer_products_controller = require("./controllers/get_fertilizer_products_controller");
const get_fertilizer_brands_controller = require("./controllers/get_fertilizer_brands_controller");

const get_distributer_controller = require("./controllers/get_distributer_controller");
const create_fertilizer_enquiry_controller = require('./controllers/create_fertilizer_enquiry_controller');

router.post("/fertilizer/enquiry", authorize([user_roles_enum.Merchant]), create_fertilizer_enquiry_controller);
router.get("/fertilizer/products", authorize([user_roles_enum.Merchant]), get_fertilizer_products_controller);
router.get("/fertilizer/", authorize([user_roles_enum.Merchant]), get_distributer_controller);
router.get("/fertilizer/brands", authorize([user_roles_enum.Merchant]), get_fertilizer_brands_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/distributer/controllers/create_fertilizer_enquiry_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
// const create_fertilizer_enquiry_services = require('./services/create_fertilizer_enquiry_services');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const fertilizer_product_id = +req.body.fertilizer_product_id// mandatory
        const distributer_ids = req.body.distributer_ids || [] // mandatory
        // const quantity_in_kg = +req.body.quantity_in_kg// optional
        if (!fertilizer_product_id || distributer_ids.length === 0) {
            throw new ValidationError('fertilizer_product_id or distributer_ids is mandatory parameters')
        }
        // let fertilizer_enquiry =await create_fertilizer_enquiry_services(fertilizer_product_id,distributer_ids,quantity_in_kg);
        const fertilizer_enquiry_response = create_api_response(true, 'successfull');
        res.status(http_status_code_enum.ok).json(fertilizer_enquiry_response);
    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/distributer/controllers/get_fertilizer_brands_controller.js
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const get_fertilizer_brand_service = require("../services/get_fertilizer_brand_service");
const http_status_code_enum = require("../../../../enums/global/http_status_codes");

module.exports = async (req, res) => {
    try {
        const state_id = +req.query.state_id;
        const district_id = +req.query.district_id;
        const fertilizer_product_id = +req.query.fertilizer_product_id;
        if (!state_id && !district_id && !fertilizer_product_id) {
            let err_message = "state_id, fertilizer_product_id and district_id are mandatory params"
            return res.status(http_status_code_enum.bad_request)
                .json(create_api_response(false, err_message, null));
        }
        const fertilizer_brands = await get_fertilizer_brand_service(state_id, district_id, fertilizer_product_id);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, "success", { fertilizer_brands }));
    }
    catch (err) {
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/distributer/controllers/get_distributer_controller.js
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const http_status_code_enum = require("../../../../enums/global/http_status_codes");
const get_distributer_service = require("../services/get_distributer_service");

module.exports = async (req, res) => {
    try {
        const state_id = +req.query.state_id || 0;
        const district_id = +req.query.district_id || 0;
        const fertilizer_product_id = +req.query.fertilizer_product_id || 0;
        const page_no = +req.query.page_no || 1;
        const limit = +req.query.limit || 20;
        const search_term = req.query.search_term || "";
        let brand_ids = req.query.brand_ids || "";
        if (brand_ids.trim())
            brand_ids = brand_ids.split(",").map(ele => +ele);
        else
            brand_ids = [];
        if (!state_id || !district_id || !fertilizer_product_id) {
            let error_message = "state_id, district_id and fertilizer_product_id are mandatory params";
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false, error_message, null));
        }
        const data = await get_distributer_service(state_id, district_id, fertilizer_product_id, page_no, limit, search_term, brand_ids);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, "success", data));

    }
    catch (err) {
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/distributer/controllers/get_fertilizer_products_controller.js
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const get_fertilizer_product_service = require("../services/get_fertilizer_product_service");
const http_status_code_enum = require("../../../../enums/global/http_status_codes");
const country_code_enum = require("../../../../enums/global/country_code");

module.exports = async (req, res) => {
    try {
        const state_id = +req.query.state_id;
        const district_id = +req.query.district_id;
        const search_term = req.query.search_term || "";
        const page_no = +req.query.page_no || 1;
        const limit = +req.query.limit || 20;
        const country_code = +req.user.country?.country_code || country_code_enum.india;
        if (!state_id && !district_id) {
            let err_message = "state_id and district_id are mandatory params"
            return res.status(http_status_code_enum.bad_request)
                .json(create_api_response(false, err_message, null));
        }
        const fertilizer_products_with_count = await get_fertilizer_product_service(state_id, district_id, search_term, page_no, limit, country_code);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, "success", { fertilizer_products_with_count }));
    }
    catch (err) {
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/distributer/services/get_fertilizer_brand_service.js
const error_log = require("../../../../middelware/error_log");
const {
    get_fert_brands
} = require("../../../../data_abstraction_layer/distributer/distributer_brands");

module.exports = async (state_id, district_id, fertilizer_product_id) => {
    try {
        let fertilizer_brands = await get_fert_brands({ fertilizer_product_id, state_id, district_id });
        if (!fertilizer_brands)
            fertilizer_brands = [];
        return {
            fertilizer_brands
        }
    }
    catch (err) {
        error_log(err);
        return {
            fertilizer_brands: []
        };
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/distributer/services/get_distributer_service.js
const error_log = require("../../../../middelware/error_log");

const {
    get_distributer_ids
} = require("../../../../data_abstraction_layer/distributer/distributer_fertilizer_brand_state_district_map");
const {
    get_distributers
} = require("../../../../data_abstraction_layer/distributer/distributer_detail");
const {
    get_fert_brands
} = require("../../../../data_abstraction_layer/distributer/distributer_brands");

module.exports = async (state_id, district_id, fertilizer_product_id, page_no, limit, search_term, brand_ids) => {
    let distributer_listing = {
        distributers: [],
        total_count: 0
    }
    try {
        const distributer_detail_ids = await get_distributer_ids({
            state_id,
            district_id,
            fertilizer_product_id,
            brand_ids
        });
        const offset = (page_no - 1) * limit;
        const distributers = await get_distributers({
            distributer_ids: distributer_detail_ids,
            search_term
        })

        const filtered_distributers = await Promise.all(distributers.rows.map(async (ele) => {
            // let brands = await get_fert_brands({ distributer_id: ele.dataValues.distributer_id, fertilizer_product_id, state_id, district_id });
            return {
                distributer_id: ele.dataValues.distributer_id,
                distributer_name: ele.agency_name,
                distributer_address: `${ele.full_address || ""},${ele.village_name || ""},${ele.district_name || ""},${ele.state_name || ""}`,
                // brands: brands || [],
                mobile_number: ele.dataValues.mobile_number
            }
        }));
        distributer_listing.total_count = filtered_distributers.length;
        distributer_listing.distributers = filtered_distributers.slice(offset, offset + limit);
        return distributer_listing;
    }
    catch (err) {
        error_log(err);
        return distributer_listing;
    }
}




File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/distributer/services/get_fertilizer_product_service.js
const error_log = require("../../../../middelware/error_log");
const {
    get_distinct_fertilizer_product_ids
} = require("../../../../data_abstraction_layer/distributer/fertilizer_product_brand_state_district_map");

const {
    get_fertilizer_products_and_count
} = require("../../../../data_abstraction_layer/distributer/fertilizer_product");

const {
    get_distributer_ids
} = require("../../../../data_abstraction_layer/distributer/distributer_fertilizer_brand_state_district_map");

const country_code_enum = require("../../../../enums/global/country_code");

module.exports = async (state_id, district_id, search_term, page_no, limit, country_code) => {
    try {
        if (country_code_enum.bangladesh === country_code) {
            return {
                fertilizer_products: [],
                total_count: 0
            }
        }
        const distinct_fertilizer_product_ids = await get_distinct_fertilizer_product_ids({
            state_id,
            district_id
        });
        const offset = (page_no - 1) * limit;
        const fertilizer_product_listing = await get_fertilizer_products_and_count({
            fertilizer_ids: distinct_fertilizer_product_ids,
            search_term
        });
        let fertilizer_products = await Promise.all(fertilizer_product_listing.rows.map(async (fertilizer_product) => {
            const distributer_ids = await get_distributer_ids({
                state_id,
                district_id,
                fertilizer_product_id: fertilizer_product.dataValues.fertilizer_product_id
            })
            fertilizer_product.dataValues.total_suppliers = distributer_ids.length;
            return fertilizer_product
        }));

        fertilizer_products = fertilizer_products.filter((product) => product.dataValues.total_suppliers > 0);
        let total_count = fertilizer_products.length;
        fertilizer_products = fertilizer_products.slice(offset, offset + limit);
        return {
            fertilizer_products,
            total_count
        }
    }
    catch (err) {
        error_log(err);
        return {
            fertilizer_products: [],
            total_count: 0
        };
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/weather/swagger/index.js
module.exports = {
    tags: {
        name: 'weather'
    },
    paths: {
        '/': {
            get: {
                tags: ['weather'],
                summary: 'get weather data based on language',
                description: '',
                operationId: 'get_weather_data',
                security: [{ Bearer: ['read'] }],
                parameters: [
                    {
                        in: 'query',
                        name: 'lat',
                        required: true,
                        type: 'number',
                        description: '',
                        format: 'int64'
                    },
                    {
                        in: 'query',
                        name: 'long',
                        required: true,
                        type: 'number',
                        description: '',
                        format: 'int64'
                    }
                ],
                responses: {
                    400: {
                        description: 'Invalid input'
                    },
                    200: {
                        description: 'success'
                    }
                },
                deprecated: true
            }
        }
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/weather/constants/index.js
const accuweather_icon_to_fmt_icon_map = {
  
}

const fmt_icon_to_data = {
  rain_thunderstorm_clouds:{
    icon:15,
    weather_phrase:"बारिश आने की संभावना है |",
    weather_short_phrase:"बारिश",
    icon_phrase:"आंधी तूफ़ान बारिश",
    date:Date.now(),
    template:""
  },
  rain_heavy:{
    icon:15,
    weather_phrase:"तेज बारिश आने की संभावना है |",
    weather_short_phrase:"बारिश",
    icon_phrase:"बारिश",
    date:Date.now(),
    template:""
  },
  rain_moderate:{
    icon:15,
    weather_phrase:"बारिश आने की संभावना है |",
    weather_short_phrase:"बारिश",
    icon_phrase:"बारिश",
    date:Date.now(),
    template:""
  },
  rain_light:{
    icon:15,
    weather_phrase:"हल्की बारिश आने की संभावना है |",
    weather_short_phrase:"बारिश",
    icon_phrase:"बारिश",
    date:Date.now(),
    template:""
  },
  thunderstorm_clouds:{
    icon:15,
    weather_phrase:"मौसम खराब रहेगा|",
    weather_short_phrase:"खराब मौसम",
    icon_phrase:"खराब मौसम",
    date:Date.now(),
    template:""
  },
  thunderstorm_maybe_clouds:{
    icon:8,
    weather_phrase:"बादल छाए रहेंगे | तेज हवा चलेगी |",
    weather_short_phrase:"बादल",
    icon_phrase:"खराब मौसम",
    date:Date.now(),
    template:""
  },
  clouds_dense:{
    icon:7,
    weather_phrase:"बादल छाए रहेंगे |",
    weather_short_phrase:"बादल",
    icon_phrase:"बादल",
    date:Date.now(),
    template:""
  },
  clouds_light:{
    icon:4, 
    weather_phrase:"हल्के बादल छाए रहेंगे |",
    weather_short_phrase:"बादल",
    icon_phrase:"बादल",
    date:Date.now(),
    template:""
  },
  fast_winds:{
    icon:5, 
    weather_phrase:"तेज हवा चलेगी |",
    weather_short_phrase:"हवा",
    icon_phrase:"तेज हवा",
    date:Date.now(),
    template:""
  },
  clear_weather:{
    icon:2, 
    weather_phrase:"मौसम साफ़ रहेगा |",
    weather_short_phrase:"साफ़",
    icon_phrase:"साफ़",
    date:Date.now(),
    template:""
  }
}

module.exports = {
  accuweather_icon_to_fmt_icon_map,
  fmt_icon_to_data,
  precipitation_type_rain:"Rain",
  rain_intensity_light:"Light",
  rain_intensity_moderate:"Moderate",
  rain_intensity_heavy:"Heavy",
}




File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/weather/index.js
const router = require('express').Router();
// const authorize = require('../../../middelware/authorized_routes');
// const user_roles_enum = require('../../../entities/metadata/enums/user_roles');

// const get_weather_data_controller = require('./controllers/get_weather_data_controller');
/** @deprecated */
// router.get('/', authorize([user_roles_enum.Merchant]), get_weather_data_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/weather/controllers/get_weather_data_controller.js
const error_log = require("../../../../middelware/error_log");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const http_status_code_enum = require("../../../../enums/global/http_status_codes");
const language_enum = require("../../../../enums/global/language");

const get_weather_data_service = require("../services/get_current_weather_data_service");
const merchant_engage_with_application_service = require("../../../../entities/merchant/service/merchant_engage_with_application_service");

module.exports = async (req, res) => {
    try {
        const language_id = +req.headers.language || language_enum.default;
        const lat = +req.query.lat || 0;
        const long = +req.query.long || 0;
        const merchant_detail_id = req.user.user_profile_id;
        if (!lat || !long) {
            let err_message = "lat and long are mandatory params";
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err_message, null));
        }

        const weather_data = await get_weather_data_service(lat, long, language_id);
        merchant_engage_with_application_service(merchant_detail_id, lat, long)
            .catch(err => {
                error_log(err);
            })
        return res.status(http_status_code_enum.ok).json(create_api_response(true, "success", { weather_data }));
    }
    catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/weather/services/get_weather_data_service.js
const error_log = require("../../../../middelware/error_log");
const kava_weather_service = require("../../../../common_services/weather/kava_weather_service");
const weather_enum = require('../../../../entities_v2/metadata/enums/weather_enum');
const weather_langauge_map_model = require("../../../../database/models_v2/weather_langauge_map");
const weather_model = require("../../../../database/models_v2/weather");
const weather_icon_model = require("../../../../database/models_v2/weather_icon");
const sms_type_v2_model = require("../../../../database/models_v2/sms/v2_module/sms_type_v2");
const sms_template_enum = require("../../../../entities/metadata/enums/sms_template_enum");
const constants = require("../constants");

module.exports = async (lat, long, language, days = 1) => {
    try {
        const kava_weather_data = await kava_weather_service(lat, long, days);

        const weather_data = await generate_weather_report(kava_weather_data, days);
        let weather_response = []
        for (let index = 0; index < weather_data.length; index++) {
            const weather_phrase = await weather_langauge_map_model.findOne({
                where: {
                    weather_id: weather_data[index].weather_condition,
                    language_id: language,
                    is_active: 1
                },
                include: [{
                    model: weather_model,
                    as: "weather",
                    include: [{
                        model: weather_icon_model,
                        as: "weather_icon"
                    }]
                }]
            });

            if (weather_phrase) {
                let weather = {
                    weatherPhrase: weather_phrase.weather_phrase,
                    WeatherDate: weather_data[index].date,
                    temperature: weather_data[index].temperature,
                    min_temp: weather_data[index].min_temp,
                    max_temp: weather_data[index].max_temp,
                    precipitation_chance: weather_data[index].precipitation_chance
                }
                let now_time = new Date();
                if (now_time.getHours() >= 5 && now_time.getHours() < 19) {
                    weather.iconURI = weather_phrase.weather.weather_icon.day_icon_link
                }
                else {
                    weather.iconURI = weather_phrase.weather.weather_icon.night_icon_link
                }
                weather.date = dateTostr(weather_data[index].date);
                weather_response.push(weather);
            }
        }
        const sms_cost=await sms_type_v2_model.findOne({
            where:{
                id:sms_template_enum.weather_template_with_temprature,
                is_active:1
            },
            attributes:['cost']
        })
        return {
            weather: weather_response,
            weather_sms_id: sms_template_enum.weather_template_with_temprature,
            message: "Weather update powered by Kawa Space",
            weather_sms_cost:sms_cost.cost
        };
    }
    catch (err) {
        error_log(err);
        return { weather_data: [] };
    }
}

const generate_weather_report = async (weather_body, days) => {
    try {
        let weather_data = [];
        for (let index = 0; index < days; index++) {
            let weather_day = {}
            weather_day["min_temp"] = weather_body.data.calendarDayTemperatureMin[index];
            weather_day["max_temp"] = weather_body.data.calendarDayTemperatureMax[index];
            weather_day["qpf"] = weather_body.data.qpf[index];
            weather_day["day_temperature"] = weather_body.data.dayPart[0].temperature[2 * index];
            weather_day["night_temperature"] = weather_body.data.dayPart[0].temperature[2 * index + 1];
            weather_day["day_wind_speed"] = weather_body.data.dayPart[0].windSpeed[2 * index];
            weather_day["night_wind_speed"] = weather_body.data.dayPart[0].windSpeed[2 * index + 1];
            weather_day["day_cloud_cover"] = weather_body.data.dayPart[0].cloudCover[2 * index];
            weather_day["night_cloud_cover"] = weather_body.data.dayPart[0].cloudCover[2 * index + 1];
            weather_day["day_precip_chance"] = weather_body.data.dayPart[0].precipChance[2 * index];
            weather_day["night_precip_chance"] = weather_body.data.dayPart[0].precipChance[2 * index + 1];
            weather_day["day_narrative"] = weather_body.data.dayPart[0].narrative[2 * index];
            weather_day["night_narrative"] = weather_body.data.dayPart[0].narrative[2 * index + 1];


            let has_precipitation = weather_day.day_precip_chance > 50 || weather_day.night_precip_chance > 50;
            let precipitation_intensity;
            if (has_precipitation) {
                if (weather_day.qpf <= 2.5) {
                    precipitation_intensity = constants.rain_intensity_light;
                }
                else if (weather_day.qpf > 2.5 && weather_day.qpf < 7.6) {
                    precipitation_intensity = constants.rain_intensity_moderate;
                }
                else {
                    precipitation_intensity = constants.rain_intensity_heavy;
                }
            }

            let thunderstorms = weather_day["day_narrative"].toLowerCase().search("thunderstorm") >= 0 || weather_day["night_narrative"].toLowerCase().search("thunderstorm") >= 0;
            let weather_report = {};
            if (has_precipitation) {
                if (thunderstorms) {
                    weather_report['weather_condition'] = weather_enum.rain_thunderstorm_clouds;
                    weather_report['date'] = new Date(weather_body.data.validTimeLocal[index]).getTime();
                }
                else {
                    if (precipitation_intensity === constants.rain_intensity_heavy) {
                        weather_report['weather_condition'] = weather_enum.rain_heavy;
                        weather_report['date'] = new Date(weather_body.data.validTimeLocal[index]).getTime();
                    }
                    else if (precipitation_intensity === constants.rain_intensity_moderate) {
                        weather_report['weather_condition'] = weather_enum.rain_moderate;
                        weather_report['date'] = new Date(weather_body.data.validTimeLocal[index]).getTime();
                    }
                    else {
                        weather_report['weather_condition'] = weather_enum.rain_light;
                        weather_report['date'] = new Date(weather_body.data.validTimeLocal[index]).getTime();
                    }
                }
            }
            else if (thunderstorms) {
                if (weather_day.day_wind_speed > 12 || weather_day.night_wind_speed > 12) {
                    weather_report['weather_condition'] = weather_enum.thunderstorm_clouds;
                    weather_report['date'] = new Date(weather_body.data.validTimeLocal[index]).getTime();
                }
                else if ((weather_day.day_wind_speed > 6 || weather_day.night_wind_speed > 6) && (weather_day.day_cloud_cover > 50 || weather_day.night_cloud_cover > 50)) {
                    // cloud with fast winds
                    weather_report['weather_condition'] = weather_enum.thunderstorm_maybe_clouds;
                    weather_report['date'] = new Date(weather_body.data.validTimeLocal[index]).getTime();
                }
                else {
                    weather_report['weather_condition'] = weather_enum.thunderstorm_clouds;
                    weather_report['date'] = new Date(weather_body.data.validTimeLocal[index]).getTime();
                }
            }
            else if (weather_day.day_cloud_cover > 50 || weather_day.night_cloud_cover > 50) {
                weather_report['weather_condition'] = weather_enum.clouds_dense;
                weather_report['date'] = new Date(weather_body.data.validTimeLocal[index]).getTime();
            }
            else if (weather_day.day_wind_speed > 6 || weather_day.night_wind_speed > 6) {
                weather_report['weather_condition'] = weather_enum.fast_winds;
                weather_report['date'] = new Date(weather_body.data.validTimeLocal[index]).getTime();
            }
            else {
                weather_report['weather_condition'] = weather_enum.clear_weather;
                weather_report['date'] = new Date(weather_body.data.validTimeLocal[index]).getTime();
            }
            weather_report["min_temp"] = weather_day.min_temp;
            weather_report["max_temp"] = weather_day.max_temp;
            weather_report["precipitation_chance"] = Math.floor((weather_day.day_precip_chance + weather_day.night_precip_chance) / 2);
            weather_report["temperature"] = ((weather_day.min_temp + weather_day.max_temp) / 2).toFixed(2);
            weather_data.push(weather_report);
        }
        return weather_data;
    }
    catch (err) {
        error_log(err);
        return [];
    }
}


const dateTostr = (date) => {
    var d = new Date(date);

    var index = {
        0: "Jan",
        1: "Feb",
        2: "Mar",
        3: "Apr",
        4: "May",
        5: "June",
        6: "July",
        7: "Aug",
        8: "Sep",
        9: "Oct",
        10: "Nov",
        11: "Dec",
    };

    var day = d.getDate();

    var m = d.getMonth();

    return day + " " + index[m];
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/weather/services/get_current_weather_data_service.js
const error_log = require('../../../../middelware/error_log');
const language_enum = require('../../../../enums/global/language');
const sms_type_v2_model = require('../../../../database/models_v2/sms/v2_module/sms_type_v2');
const sms_template_enum = require('../../../../enums/message/sms_template_enum')
const get_date_string_service = require('../../../../common_services/utility/get_date_string');
const accuweather_current_condition_service = require('../../../../common_services/weather/accuweather_current_condition');
const { get_data_from_settings } = require('../../../../entities/metadata/service/application_version_service');
const settings_enum = require('../../../../enums/global/settings_enum');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (lat, long, language_id = language_enum.hindi) => {
    try {
        let weather_access = await get_data_from_settings(settings_enum.weather_service_enable);
        weather_access = +weather_access || 0;
        if (!weather_access) { return null; }
        const date_string = get_date_string_service();
        const accuweather_response = await accuweather_current_condition_service(lat, long, language_id);
        if (!accuweather_response) {
            throw new ValidationError('not able to fetch weather from accuweather');
        }
        const weather = {
            weatherPhrase: accuweather_response?.weather_phrase,
            temperature: Math.floor(accuweather_response?.temperature),
            date: date_string,
            iconURI: accuweather_response?.icon_url,
            WeatherDate: +new Date(date_string),
            min_temp: Math.floor(accuweather_response?.min_temp),
            max_temp: Math.floor(accuweather_response?.max_temp)
        }

        const weather_sms_cost = await get_weather_sms_cost();
        const weather_data = {
            weather: [weather],
            weather_sms_id: sms_template_enum.weather_template_with_temprature,
            message: 'Weather update powered by Accuweather',
            weather_sms_cost
        }
        return weather_data;
    } catch (err) {
        error_log(err)
        return null;
    }
}

const get_weather_sms_cost = async () => {
    try {
        const sms_cost = await sms_type_v2_model.findOne({
            where: {
                id: sms_template_enum.weather_template_with_temprature,
                is_active: 1
            },
            attributes: ['cost']
        })
        return sms_cost.cost;
    } catch (err) {
        error_log(err);
        return 1;
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/swagger/index.js
module.exports = {
  tags: {
    name: "news_feed",
  },
  paths: {
    "/ugc_news_feed": {
      post: {
        tags: ["news_feed"],
        summary: "create ugc newsfeed",
        description: "",
        operationId: "create_news_feed",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "formData",
            name: "heading_text",
            required: true,
            type: "string",
          },
          {
            in: "formData",
            name: "long_description",
            required: true,
            type: "string",
          },
          {
            in: "formData",
            name: "formatted_long_description",
            required: true,
            type: "string",
          },
          {
            in: "formData",
            name: "image_url",
            required: false,
            type: "string",
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
      get: {
        tags: ["news_feed"],
        summary: "fetch ugc newsfeed",
        description: "",
        operationId: "fetch_news_feed",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "page_number",
            type: "number",
          },
          {
            in: "query",
            name: "limit",
            type: "number",
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
      delete: {
        tags: ["news_feed"],
        summary: "delete ugc newsfeed",
        description: "",
        operationId: "delete_news_feed",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "formData",
            name: "news_feed_post_id",
            required: true,
            type: "number",
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/tags": {
      post: {
        tags: ["news_feed"],
        summary: "create newsfeed tags",
        description: "",
        operationId: "create_news_feed_tags",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "body",
            name: "body",
            description: "",
            required: true,
            schema: {
              properties: {
                tag_names: {
                  type: "array",
                  items: {
                    type: "string",
                  },
                },
              },
            },
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
      get: {
        tags: ["news_feed"],
        summary: "fetch newsfeed tags",
        description: "",
        operationId: "fetch_news_feed_tags",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "page_no",
            required: false,
            type: "number",
            default: 1,
          },
          {
            in: "query",
            name: "limit",
            required: false,
            type: "number",
            default: 10,
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/news_feed_tag_details": {
      get: {
        tags: ["news_feed"],
        summary: "fetch newsfeed tags",
        description: "",
        operationId: "fetch_news_feed_tag_by_news_feed_id",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "news_feed_post_id",
            required: true,
            type: "number",
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/tag_mapping": {
      post: {
        tags: ["news_feed"],
        summary: "create newsfeed tags mapping",
        description: "",
        operationId: "create_news_feed_tag_mapping",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "body",
            name: "body",
            description: "",
            required: true,
            schema: {
              properties: {
                tags: {
                  type: "array",
                  items: {
                    type: "integer",
                  },
                },
                news_feed_post_id: {
                  type: "integer",
                },
              },
            },
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
      put: {
        tags: ["news_feed"],
        summary: "edit newsfeed tags mapping",
        description: "",
        operationId: "edit_news_feed_tag_mapping",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "body",
            name: "body",
            description: "",
            required: true,
            schema: {
              properties: {
                tags: {
                  type: "array",
                  items: {
                    type: "integer",
                  },
                },
                news_feed_post_id: {
                  type: "integer",
                },
              },
            },
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/pages": {
      post: {
        tags: ["news_feed"],
        summary: "add newsfeed pages",
        description: "",
        operationId: "add_news_feed_pages",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "formData",
            name: "page_name",
            required: true,
            type: "string",
          },
          {
            in: "formData",
            name: "image_url",
            required: true,
            type: "string",
          },
          {
            in: "formData",
            name: "language_id",
            required: false,
            type: "string",
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
      get: {
        tags: ["news_feed"],
        summary: "get newsfeed pages",
        description: "",
        operationId: "get_news_feed_pages",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "page_no",
            required: true,
            type: "integer",
          },
          {
            in: "query",
            name: "limit",
            required: true,
            type: "integer",
          },
          {
            in: "query",
            name: "language_id",
            required: false,
            type: "integer",
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
      put: {
        tags: ["news_feed"],
        summary: "edit newsfeed page",
        description: "",
        operationId: "edit_news_feed_page",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "formData",
            name: "page_id",
            required: true,
            type: "number",
          },
          {
            in: "formData",
            name: "page_name",
            required: false,
            type: "string",
          },
          {
            in: "formData",
            name: "image_url",
            required: false,
            type: "string",
          },
          {
            in: "formData",
            name: "language_id",
            required: true,
            type: "string",
          },
          {
            in: "formData",
            name: "is_enabled",
            description: "0->disable \n1->enable",
            required: false,
            type: "string",
            enum: [0, 1],
          },
          {
            in: "formData",
            name: "is_verified",
            description: "0->not verified \n1->verified",
            required: false,
            type: "string",
            enum: [0, 1],
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/page_list": {
      get: {
        tags: ["news_feed"],
        summary: "get newsfeed page_list",
        description: "",
        operationId: "get_news_feed_page_list",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "page_no",
            required: false,
            type: "integer",
          },
          {
            in: "query",
            name: "limit",
            required: false,
            type: "integer",
          },
          {
            in: "header",
            name: "language",
            required: false,
            type: "integer",
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/news_feed_posts": {
      post: {
        tags: ["news_feed"],
        summary: "add newsfeed_post",
        description: "",
        operationId: "add_news_feed_post",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "body",
            name: "body",
            description: "",
            required: true,
            schema: {
              properties: {
                heading: {
                  type: "string",
                },
                page_id: {
                  type: "number",
                },
                content_type: {
                  type: "number",
                },
                state_district_mapping: {
                  type: "array",
                  items: {
                    properties: {
                      state_id: {
                        type: "string",
                      },
                      district_id: {
                        type: "string",
                      },
                      country_id: {
                        type: "string",
                      },
                    },
                  },
                },
              },
            },
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
      get: {
        tags: ["news_feed"],
        summary: "fetch newsfeed_post",
        description: "",
        operationId: "fetch_news_feed_post",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "page_no",
            required: false,
            type: "number",
            default: 1,
          },
          {
            in: "query",
            name: "limit",
            required: false,
            type: "number",
            default: 10,
          },
          {
            in: "query",
            name: "page_id",
            required: false,
            type: "number",
          },
          {
            in: "query",
            name: "content_type",
            required: false,
            type: "number",
          },
          {
            in: "query",
            name: "tags_list",
            required: false,
            type: "string",
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
      delete: {
        tags: ["news_feed"],
        summary: "delete newsfeed_post",
        description: "",
        operationId: "delete_news_feed_post",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "formData",
            name: "news_feed_post_id",
            required: true,
            type: "number",
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
      put: {
        tags: ["news_feed"],
        summary: "edit newsfeed_post",
        description: "",
        operationId: "edit_news_feed_post",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "body",
            name: "body",
            description: "",
            required: true,
            schema: {
              properties: {
                heading: {
                  type: "string",
                },
                news_feed_post_id: {
                  type: "number",
                },
                state_district_mapping: {
                  type: "array",
                  items: {
                    properties: {
                      state_id: {
                        type: "string",
                      },
                      district_id: {
                        type: "string",
                      },
                      country_id: {
                        type: "string",
                      },
                    },
                  },
                },
              },
            },
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/news_feed_content": {
      post: {
        tags: ["news_feed"],
        summary: "add news_feed_content",
        description: "date format for from and to 2023-01-26 00:00:00",
        operationId: "add_news_feed_content",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "body",
            name: "body",
            description: "",
            required: true,
            schema: {
              properties: {
                heading_text: {
                  type: "string",
                },
                news_feed_post_id: {
                  type: "number",
                },
                long_description: {
                  type: "string",
                },
                formatted_long_description: {
                  type: "string",
                },
                language_id: {
                  type: "number",
                },
                live_from: {
                  type: "string",
                },
                news_feed_post_media: {
                  type: "array",
                  items: {
                    properties: {
                      news_feed_media_type_id: {
                        type: "number",
                      },
                      media_url: {
                        type: "string",
                      },
                    },
                  },
                },
                draft_payload:{
                  type:"string"
                }
              },
            },
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
      put: {
        tags: ["news_feed"],
        summary: "edit news_feed_content",
        description: "date format for from and to 2023-01-26 00:00:00",
        operationId: "edit_news_feed_content",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "body",
            name: "body",
            description: "",
            required: true,
            schema: {
              properties: {
                heading_text: {
                  type: "string",
                },
                news_feed_content_id: {
                  type: "number",
                },
                news_feed_post_id: {
                  type: "number",
                },
                long_description: {
                  type: "string",
                },
                formatted_long_description: {
                  type: "string",
                },
                language_id: {
                  type: "number",
                },
                live_from: {
                  type: "string",
                },
              },
            },
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
      get: {
        tags: ["news_feed"],
        summary: "fetch news_feed_content",
        description: "",
        operationId: "fetch_news_feed_content",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "news_feed_post_id",
            required: true,
            type: "number",
          },
          {
            in: "query",
            name: "language_id",
            description:
              "1 -> hindi \n2 -> english \n3 -> marathi \n4 -> bengali \n5 -> Kannada",
            required: false,
            type: "integer",
            format: "int64",
            enum: [1, 2, 3, 4, 5],
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/page_vernacular_list": {
      get: {
        tags: ["news_feed"],
        summary: "get newsfeed page vernacular list",
        description: "",
        operationId: "get_news_feed_page_vernacular_list",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "page_id",
            required: true,
            type: "integer",
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/merchant": {
      get: {
        tags: ["news_feed"],
        summary: "fetch_news_feed_app",
        description: "fetch_news_feed_app",
        operationId: "get_fetch_news_feed_app",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "search_for",
            required: false,
            type: "string",
          },
          {
            in: "query",
            name: "page_no",
            required: false,
            type: "number",
          },
          {
            in: "query",
            name: "limit",
            required: false,
            type: "number",
          },
          {
            in: "query",
            name: "state_id",
            required: false,
            type: "number",
          },
          {
            in: "query",
            name: "tags",
            required: false,
            type: "string",
          },
          {
            in: "query",
            name: "page_id",
            required: false,
            type: "number",
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/relevant_post_merchant": {
      get: {
        tags: ["news_feed"],
        summary: "relevant_post_merchant",
        description: "relevant_post_merchant",
        operationId: "relevant_post_merchant",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "page_no",
            required: false,
            type: "number",
          },
          {
            in: "query",
            name: "limit",
            required: false,
            type: "number",
          },
          {
            in: "query",
            name: "state_id",
            required: false,
            type: "number",
          },
          {
            in: "query",
            name: "news_feed_post_id",
            required: false,
            type: "number",
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/news_feed_post": {
      get: {
        tags: ["news_feed"],
        summary: "fetch newsfeed_post",
        description: "",
        operationId: "fetch_news_feed_post_by_id",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "news_feed_post_id",
            required: true,
            type: "number",
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
        "/merchant": {
          get: {
            tags: ["news_feed"],
            summary: "fetch_news_feed_app",
            description: "fetch_news_feed_app",
            operationId: "get_fetch_news_feed_app",
            security: [{ Bearer: ["read"] }],
            parameters: [
              {
                in: "query",
                name: "search_for",
                required: false,
                type: "string",
              },
              {
                in: "query",
                name: "page_no",
                required: false,
                type: "number",
              },
              {
                in: "query",
                name: "limit",
                required: false,
                type: "number",
              },
              {
                in: "query",
                name: "state_id",
                required: false,
                type: "number",
              },
              {
                in: "query",
                name: "tags",
                required: false,
                type: "string",
              },
            ],
            responses: {
              400: {
                description: "Invalid input",
              },
              200: {
                description: "success",
              },
            },
          },
        },
      },
    },
    "/comment": {
      post: {
        tags: ["news_feed"],
        summary: "post a comment on news_feed_post",
        description: "post a comment on news_feed_post",
        operationId: "post_comment_on_news_feed_post",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "formData",
            name: "news_feed_id",
            description: "news feed id",
            required: true,
            type: "number",
          },
          {
            in: "formData",
            name: "comment",
            description: "comment",
            required: true,
            type: "string",
          },
          {
            in: "formData",
            name: "ref_comment_id",
            description: "ref comment id",
            required: false,
            type: "number",
          },
          {
            in: "formData",
            name: "tagged_merchant_id",
            description: "tagged merchant's id",
            required: false,
            type: "number",
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/branch_io_links": {
      get: {
        tags: ["news_feed"],
        summary: "fetch branch_io_links",
        description: "",
        operationId: "fetch_branch_io_links",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "news_feed_post_id",
            required: true,
            type: "number",
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/ugc_posts": {
      get: {
        tags: ["news_feed"],
        summary: "fetch news feed posts for panel",
        description: "",
        operationId: "fetch_news_feed_posts_for_panel",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "status",
            description:
              "1=pending\n2=approved\n3=rejected\n4=deleted_by_farmart\n5=deleted_by_merchant\n6=rejected_deleted",
            required: false,
            type: "number",
            default: 1,
            enum: [1, 2, 3, 4, 5, 6],
          },
          {
            in: "query",
            name: "page_no",
            required: false,
            type: "number",
          },
          {
            in: "query",
            name: "limit",
            required: false,
            type: "number",
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
      put: {
        tags: ["news_feed"],
        summary: "update ugc news feed post",
        description: "",
        operationId: "update_news_feed_post",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "body",
            name: "body",
            description:"status \n 1=pending\n2=approved\n3=rejected\n4=deleted_by_farmart\n5=deleted_by_merchant",
            required: true,
            schema: {
              properties: {
                news_feed_post_id: {
                  type: "integer",
                },
                status: {
                  type: "integer",
                },
              },
            },
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/ugc_news_feed_content": {
      get: {
        tags: ["news_feed"],
        summary: "fetch_news_post_content_by_id",
        description: "",
        operationId: "fetch_news_post_content_by_id",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "news_feed_post_id",
            required: true,
            type: "number",
          },
          {
            in: "query",
            name: "merchant_detail_id",
            required: false,
            type: "number",
          },
          {
            in: "query",
            name: "is_farmart_post",
            required: false,
            type: "number",
            default: 0,
            description: "0-> for ugc 1- for farmart",
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
    "/all_comments": {
      get: {
        tags: ["news_feed"],
        summary: "fetch_all_comments_of_news_feed",
        description: "",
        operationId: "fetch_all_comments_of_news_feed",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "search_param",
            required: false,
            type: "string",
          },
          {
            in: "query",
            name: "status",
            required: false,
            type: "number",
            description:"1 -> live \n 2-> disable",
          },
          {
            in: "query",
            name: "page_no",
            required: false,
            type: "number",
          },
          {
            in: "query",
            name: "limit",
            required: false,
            type: "number",
          },
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
  },
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/index.js
const router = require("express").Router();
const authorize = require("../../../middelware/authorized_routes");
const user_roles_enum = require("../../../enums/user_profile/user_role");
const create_ugc_news_feed_controller = require('./controllers/create_ugc_news_feed_controller');
const fetch_ugc_news_feed_controller = require('./controllers/fetch_ugc_news_feed_controller');
const delete_ugc_news_feed_controller = require('./controllers/delete_ugc_news_feed_controller');
const create_news_feed_tags_controller = require('./controllers/create_news_feed_tags_controller');
const fetch_news_feed_tags_controller = require('./controllers/fetch_news_feed_tags_controller');
const fetch_news_feed_tags_by_news_feed_id_controller = require('./controllers/fetch_news_feed_tags_by_news_feed_id_controller');
const map_news_feed_tags_controller = require('./controllers/map_news_feed_tags_controller');
const edit_map_news_feed_tags_controller = require('./controllers/edit_map_news_feed_tags_controller');
const add_news_feed_pages_controller = require('./controllers/add_news_feed_pages_controller');
const fetch_news_feed_app_controller = require("./controllers/fetch_news_feed_app_controller");
const fetch_relevant_news_feed_app_controller = require("./controllers/fetch_relevant_news_feed_app_controller");
const fetch_news_feed_pages_controller = require('./controllers/fetch_news_feed_pages_controller');
const fetch_news_feed_pages_list_controller = require('./controllers/fetch_news_feed_pages_list_controller');
const fetch_news_feed_pages_vernacular_list_controller = require('./controllers/fetch_news_feed_pages_vernacular_list_controller');
const edit_news_feed_pages_controller = require('./controllers/edit_news_feed_pages_controller');
const create_news_feed_post_v3_controller = require('./controllers/create_news_feed_post_v3_controller');
const fetch_news_feed_post_v3_controller = require('./controllers/fetch_news_feed_post_v3_controller');
const fetch_news_feed_post_by_id_v3_controller = require('./controllers/fetch_news_feed_post_by_id_v3_controller');
const delete_news_feed_post_v3_controller = require('./controllers/delete_news_feed_post_v3_controller');
const edit_news_feed_post_v3_controller = require('./controllers/edit_news_feed_post_v3_controller');
const add_news_feed_content_controller = require('./controllers/add_news_feed_content_controller');
const edit_news_feed_content_controller = require('./controllers/edit_news_feed_content_controller');
const get_news_feed_content_controller = require('./controllers/fetch_news_feed_content_controller');
const add_comment_on_news_feed_v2_controller = require('./controllers/add_comment_on_news_feed_v2_controller')
const fetch_branch_io_links_controller =require('./controllers/fetch_branch_io_links_controller');
const get_ugc_posts_controller =require('./controllers/get_ugc_posts_controller');
const update_ugc_posts_controller =require('./controllers/update_ugc_posts_controller');
const get_ugc_news_feed_content_controller =require('./controllers/get_ugc_news_feed_content_controller');
const get_all_comments_controller =require('./controllers/get_all_comments_controller');

router.post("/ugc_news_feed", authorize([user_roles_enum.Merchant]), create_ugc_news_feed_controller);
router.get("/ugc_news_feed", authorize([user_roles_enum.Merchant]), fetch_ugc_news_feed_controller);
router.delete("/ugc_news_feed", authorize([user_roles_enum.Merchant]), delete_ugc_news_feed_controller);

router.post("/tags", authorize([user_roles_enum.digital_marketing, user_roles_enum.Promotional_Companies_News_Feed]), create_news_feed_tags_controller);
router.get("/tags", authorize([user_roles_enum.digital_marketing, user_roles_enum.Promotional_Companies_News_Feed]), fetch_news_feed_tags_controller);
router.post("/tag_mapping", authorize([user_roles_enum.digital_marketing, user_roles_enum.Promotional_Companies_News_Feed]), map_news_feed_tags_controller);
router.put("/tag_mapping", authorize([user_roles_enum.digital_marketing, user_roles_enum.Promotional_Companies_News_Feed]), edit_map_news_feed_tags_controller);

router.post("/pages", authorize([user_roles_enum.digital_marketing]), add_news_feed_pages_controller);
router.get("/pages", authorize([user_roles_enum.digital_marketing, user_roles_enum.Promotional_Companies_News_Feed]), fetch_news_feed_pages_controller);
router.put("/pages", authorize([user_roles_enum.digital_marketing, user_roles_enum.Promotional_Companies_News_Feed]), edit_news_feed_pages_controller);
router.get("/page_list", authorize([user_roles_enum.Merchant, user_roles_enum.Guest_user_b2c_app]), fetch_news_feed_pages_list_controller);
router.get("/news_feed_tag_details", authorize([user_roles_enum.digital_marketing, user_roles_enum.Promotional_Companies_News_Feed]), fetch_news_feed_tags_by_news_feed_id_controller);

router.post("/news_feed_posts", authorize([user_roles_enum.digital_marketing, user_roles_enum.Promotional_Companies_News_Feed]), create_news_feed_post_v3_controller);
router.get("/news_feed_posts", authorize([user_roles_enum.digital_marketing, user_roles_enum.Promotional_Companies_News_Feed]), fetch_news_feed_post_v3_controller);
router.delete("/news_feed_posts", authorize([user_roles_enum.digital_marketing, user_roles_enum.Promotional_Companies_News_Feed]), delete_news_feed_post_v3_controller);
router.put("/news_feed_posts", authorize([user_roles_enum.digital_marketing, user_roles_enum.Promotional_Companies_News_Feed]), edit_news_feed_post_v3_controller);
router.get("/page_vernacular_list", authorize([user_roles_enum.digital_marketing, user_roles_enum.Promotional_Companies_News_Feed]), fetch_news_feed_pages_vernacular_list_controller);

router.post("/news_feed_content", authorize([user_roles_enum.digital_marketing, user_roles_enum.Promotional_Companies_News_Feed]), add_news_feed_content_controller);
router.put("/news_feed_content", authorize([user_roles_enum.digital_marketing, user_roles_enum.Promotional_Companies_News_Feed]), edit_news_feed_content_controller);
router.get("/news_feed_post", authorize([user_roles_enum.digital_marketing, user_roles_enum.Promotional_Companies_News_Feed]), fetch_news_feed_post_by_id_v3_controller);
router.get("/branch_io_links", authorize([user_roles_enum.digital_marketing, user_roles_enum.Promotional_Companies_News_Feed]), fetch_branch_io_links_controller);

router.get("/merchant", authorize([user_roles_enum.Merchant, user_roles_enum.Guest_user_b2c_app]), fetch_news_feed_app_controller);
router.get("/news_feed_content", authorize([user_roles_enum.digital_marketing, user_roles_enum.Promotional_Companies_News_Feed]), get_news_feed_content_controller);
router.post("/comment", authorize([user_roles_enum.Merchant]), add_comment_on_news_feed_v2_controller);
router.get("/fetch_news_feed_post_by_id", authorize([user_roles_enum.Merchant, user_roles_enum.Guest_user_b2c_app]), require("./controllers/fetch_news_feed_post_by_id_merchant"))
router.get("/relevant_post_merchant", authorize([user_roles_enum.Merchant, user_roles_enum.Guest_user_b2c_app]), fetch_relevant_news_feed_app_controller);
router.get("/ugc_posts", authorize([user_roles_enum.digital_marketing]), get_ugc_posts_controller);
router.put("/ugc_posts", authorize([user_roles_enum.digital_marketing]), update_ugc_posts_controller);
router.get("/ugc_news_feed_content", authorize([user_roles_enum.digital_marketing]), get_ugc_news_feed_content_controller);
router.get("/all_comments", authorize([user_roles_enum.digital_marketing]), get_all_comments_controller);

module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/controllers/fetch_news_feed_post_v3_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const fetch_news_feed_post_v3_service = require('../services/fetch_news_feed_post_v3_service');

module.exports = async (req, res) => {
  try {
    let page_no=+req.query.page_no || 1, 
    limit=+req.query.limit || 10,
    page_id=+req.query.page_id ||0,
    content_type=+req.query.content_type || 0,
    tags_list=req.query.tags_list || '',   
    user_role_id=+req.user.user_role_id,   
    user_profile_id=+req.user.user_profile_id;
    tags_list=tags_list.trim();
    if(!tags_list) tags_list=[]
    else{
        tags_list=tags_list.split(',');
    }
    let news_feed_details = await fetch_news_feed_post_v3_service(page_no,limit,page_id,tags_list,content_type,user_role_id,user_profile_id);
    let news_feed_details_response = create_api_response(true, "successfull",news_feed_details);
    res.status(http_status_code_enum.ok).json(news_feed_details_response);
  } catch (ex) {
    error_log(ex);
    res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
  }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/controllers/fetch_news_feed_pages_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const fetch_news_feed_pages_service = require('../services/fetch_news_feed_pages_service');

module.exports = async (req, res) => {
  try {
    let page_no=+req.query.page_no || 1, 
    limit=+req.query.limit || 10,
    language_id=+req.query.language_id || 0,
    created_by=+req.user.user_profile_id,   
    user_role_id=+req.user.user_role_id;

    let pages_data = await fetch_news_feed_pages_service(page_no,limit,language_id,created_by,user_role_id);
    let pages_data_response = create_api_response(true, "successfull",pages_data);
    res.status(http_status_code_enum.ok).json(pages_data_response);
  } catch (ex) {
    error_log(ex);
    res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
  }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/controllers/fetch_relevant_news_feed_app_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const fetch_relevant_news_feed_app_service = require('../services/fetch_relevant_news_feed_app_service');
const language_enum = require('../../../../enums/global/language');
const country_enum = require('../../../../enums/location/country_enum');
const user_role = require('../../../../enums/user_profile/user_role');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const news_feed_post_id = +req.query.news_feed_post_id || null;
        if (!news_feed_post_id) { return res.status(http_status_code_enum.ok).json(create_api_response(false, 'news_feed_post_id is a mandatory param')); }

        const state_id = +req.query.state_id || null; // when it's not provided news_feed_posts from all states will be returned
        const page_no = +req.query.page_no || 1;
        const limit = +req.query.limit || 10;
        const language = +req.headers.language || language_enum.hindi
        const country_id = country_enum.india
        const user_profile_id = req.user.user_profile_id;
        const user_role_id = req.user.user_role_id;

        let merchant_detail_id = null; let guest_user_b2c_apps_id = null;
        if (user_role_id === user_role.Guest_user_b2c_app) { guest_user_b2c_apps_id = user_profile_id; } else if (user_role_id === user_role.Merchant) { merchant_detail_id = user_profile_id } else { throw new ValidationError('wrong user role id'); }

        const news_feeds = await fetch_relevant_news_feed_app_service({
            state_id,
            page_no,
            limit,
            language,
            country_id,
            merchant_detail_id,
            guest_user_b2c_apps_id,
            news_feed_post_id
        });

        res.status(http_status_code_enum.ok).json(create_api_response(true, 'news_feed_list', news_feeds));

    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/controllers/fetch_news_feed_tags_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const fetch_news_feed_tags_service = require('../services/fetch_news_feed_tags_service');
module.exports = async (req, res) => {
  try {
    let page_no=+req.query.page_no||1;
    let limit=+req.query.limit||10;
    
    let tags_details = await fetch_news_feed_tags_service(page_no,limit);
    let created_tags_response = create_api_response(true, "successfull",tags_details);
    res.status(http_status_code_enum.ok).json(created_tags_response);
  } catch (ex) {
    error_log(ex);
    res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
  }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/controllers/fetch_branch_io_links_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const fetch_branch_io_links_service = require('../services/fetch_branch_io_links_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const news_feed_post_id = +req.query.news_feed_post_id || 0;
        if (!news_feed_post_id) {
            throw new ValidationError('news_feed_post_id is mandatory');
        }
        const branch_io_links = await fetch_branch_io_links_service(news_feed_post_id);
        const branch_io_links_response = create_api_response(true, 'successfull', branch_io_links);
        res.status(http_status_code_enum.ok).json(branch_io_links_response);
    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/controllers/edit_news_feed_post_v3_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const edit_news_feed_post_v3_service = require('../services/edit_news_feed_post_v3_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const heading = req.body.heading || null;
        const news_feed_post_id = +req.body.news_feed_post_id || null;
        const master_state_district_mapping = req.body.state_district_mapping || [];

        if (!news_feed_post_id) {
            throw new ValidationError('news_feed_post_id is mandatory');
        }
        await edit_news_feed_post_v3_service(
            heading,
            news_feed_post_id,
            master_state_district_mapping
        );
        const edited_page_response = create_api_response(true, 'successfull');
        res.status(http_status_code_enum.ok).json(edited_page_response);
    } catch (ex) {
        error_log(ex);
        res
            .status(http_status_code_enum.bad_request)
            .json(create_api_response(false, ex.message));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/controllers/fetch_news_feed_tags_by_news_feed_id_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const fetch_news_feed_tags_by_news_feed_id_service = require('../services/fetch_news_feed_tags_by_news_feed_id_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const news_feed_post_id = +req.query.news_feed_post_id;
        if (!news_feed_post_id) {
            throw new ValidationError('news_feed_post_id is mandatory');
        }
        const news_feed_tags_details = await fetch_news_feed_tags_by_news_feed_id_service(news_feed_post_id);
        const created_tags_response = create_api_response(true, 'successfull', news_feed_tags_details);
        res.status(http_status_code_enum.ok).json(created_tags_response);
    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/controllers/fetch_news_feed_pages_list_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const fetch_news_feed_pages_list_service = require('../services/fetch_news_feed_pages_list_service');
const langauge_enum = require('../../../../entities_v2/metadata/enums/global/langauge');

module.exports = async (req, res) => {
  try {
    let page_no=+req.query.page_no || 1, 
    limit=+req.query.limit || 10,
    language_id=+req.headers.language || langauge_enum.english;

    let pages_data = await fetch_news_feed_pages_list_service(page_no,limit,language_id);
    let pages_data_response = create_api_response(true, "successfull",pages_data);
    res.status(http_status_code_enum.ok).json(pages_data_response);
  } catch (ex) {
    error_log(ex);
    res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
  }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/controllers/delete_news_feed_post_v3_controller.js
const error_log = require('../../../../middelware/error_log');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const delete_news_feed_post_v3_service = require('../services/delete_news_feed_post_v3_service')
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        // not using user_profile_id and role id because when fetching we are showing role wise feeds
        // const user_profile_id=req.user.user_profile_id;
        const news_feed_post_id = +req.body.news_feed_post_id;

        if (!news_feed_post_id) {
            throw new ValidationError('news_feed_post_id is missing');
        }
        await delete_news_feed_post_v3_service(news_feed_post_id);
        const deleted_news_feed_post_response = create_api_response(true, 'successfull');
        res.status(http_status_code_enum.ok).json(deleted_news_feed_post_response);

    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/controllers/get_ugc_posts_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const get_ugc_posts_service = require('../services/get_ugc_posts_service');
const news_feed_post_status_enum = require('../../../../enums/news_feed/news_feed_post_status_enum');

module.exports = async (req, res) => {
    try {
        const status = +req.query.status || news_feed_post_status_enum.pending,
        page_no= +req.query.page_no ||1,
        limit= +req.query.limit || 20;

        let ugc_news_post = await get_ugc_posts_service( status,page_no,limit);
        let ugc_news_post_response = create_api_response(true, "successfull", ugc_news_post);
        res.status(http_status_code_enum.ok).json(ugc_news_post_response);


    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/controllers/fetch_news_feed_pages_vernacular_list_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const fetch_news_feed_pages_vernacular_list_service = require('../services/fetch_news_feed_pages_vernacular_list_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const page_id = +req.query.page_id || null;
        if (!page_id) {
            throw new ValidationError('page id is mandatory');
        }
        const vernacular_page_list = await fetch_news_feed_pages_vernacular_list_service(page_id);
        const vernacular_page_list_response = create_api_response(true, 'successfull', vernacular_page_list);
        res.status(http_status_code_enum.ok).json(vernacular_page_list_response);
    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/controllers/create_news_feed_tags_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_news_feed_tags_service = require('../services/create_news_feed_tags_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const tag_names = req.body.tag_names || [];
        if (tag_names?.length === 0) {
            throw new ValidationError('tag names is mandatory parameter');
        }
        const created_tags = await create_news_feed_tags_service(tag_names);
        const created_tags_response = create_api_response(true, 'successfull', { tags_created: created_tags });
        res.status(http_status_code_enum.ok).json(created_tags_response);
    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/controllers/add_news_feed_pages_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const add_news_feed_pages_service = require('../services/add_news_feed_pages_service');
const langauge_enum = require('../../../../entities_v2/metadata/enums/global/langauge');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const page_name = req.body.page_name;
        const image_url = req.body.image_url;
        const language_id = +req.body.language_id || langauge_enum.english;
        const created_by = req.user.user_profile_id;
        const user_role_id = req.user.user_role_id;

        if (!page_name || !image_url) {
            throw new ValidationError('page_name and image_url are mandatory');
        }
        const added_pages = await add_news_feed_pages_service(page_name, image_url, language_id, created_by, user_role_id);
        const added_pages_response = create_api_response(true, 'successfull', added_pages);
        res.status(http_status_code_enum.ok).json(added_pages_response);
    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/controllers/create_news_feed_post_v3_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const create_news_feed_post_v3_service = require('../services/create_news_feed_post_v3_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const user_profile_id = req.user.user_profile_id;
        const heading = req.body.heading;
        const page_id = req.body.page_id;
        const content_type = req.body.content_type;
        const master_state_district_mapping = req.body.state_district_mapping || [];
        // state_district_mapping is a array of object [{state_id:"string",district_id:"string",country_id:"string"}]
        // taking string just to tackel null values
        if (!heading || !page_id || !content_type) {
            throw new ValidationError('heading,page_id or content_type is missing');
        }

        const created_news_feed_post = await create_news_feed_post_v3_service(
            user_profile_id,
            heading,
            page_id,
            content_type,
            master_state_district_mapping
        );

        const created_news_feed_post_response = create_api_response(true, 'successfull', created_news_feed_post);
        res.status(http_status_code_enum.ok).json(created_news_feed_post_response);
    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/controllers/create_ugc_news_feed_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const news_feed_catagory_enum = require('../../../../entities_v2/metadata/enums/news_feed/news_feed_catagory_enum');
const news_feed_sub_catagory_enum = require('../../../../entities_v2/metadata/enums/news_feed/news_feed_sub_catagory_enum');
const content_type_category_enum = require('../../../../entities_v2/metadata/enums/news_feed/content_type_category_enum');
const create_news_feed_service = require('../../../../entities_v2/news_feed/service/panel_services/create_news_feed_service');
const language_enum = require('../../../../entities_v2/metadata/enums/global/langauge');
const country_enum = require('../../../../enums/location/country_enum');
const checking_merchant_name_and_shop_name = require('../../../../common_services/merchant/checking_merchant_name_and_shop_name');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const merchant_detail_id = req.user.user_profile_id;
        const user_profile_id = null;
        const country_id = req.user?.country?.id || country_enum.india;
        const heading_text = req.body.heading_text;
        const formatted_long_description = req.body.formatted_long_description || '';

        if (typeof formatted_long_description === 'string') {
            if (formatted_long_description.length > 80000) {
                throw new ValidationError('formatted_long_description length greater than 80000');
            }
        }

        const image_thumbnail = req.body.image_url;
        const featured_image = req.body.image_url;

        const long_description = req.body.long_description;
        const short_description = long_description.split(' ').slice(0, 10).join(' ');
        const video = null;
        const video_thumbnail = null;
        const s3_video_link = null;
        const news_feed_language = +req.headers.language || language_enum.default;

        const news_feed_catagory_id = +news_feed_catagory_enum.user_generated_content;
        const news_feed_sub_catagory_id =
      +news_feed_sub_catagory_enum.user_generated_content;
        const content_type_catagory_id = +content_type_category_enum.image;

        const tag_list = [];
        const keyword_list = [];
        const state_list = [];
        const pinned_post = false;
        const pinned_expiry = null;
        const live_from = Date.now();
        const narrative_audio_link = null;

        if (!heading_text) {
            throw new ValidationError('heading_text is mandatory');
        }
        const merchant_name_exists = await checking_merchant_name_and_shop_name({
            merchant_detail_id,
            merchant_name: true
        });
        if (!merchant_name_exists) {
            throw new ValidationError('merchant_name is required !!');
        }
        const ugc_news_post = await create_news_feed_service(
            user_profile_id,
            heading_text,
            short_description,
            long_description,
            image_thumbnail,
            featured_image,
            video,
            news_feed_language,
            news_feed_catagory_id,
            news_feed_sub_catagory_id,
            content_type_catagory_id,
            tag_list,
            keyword_list,
            state_list,
            video_thumbnail,
            s3_video_link,
            pinned_post,
            pinned_expiry,
            formatted_long_description,
            live_from,
            narrative_audio_link,
            merchant_detail_id,
            country_id
        );
        const ugc_news_post_response = create_api_response(
            true,
            'successfull',
            ugc_news_post
        );
        res.status(http_status_code_enum.ok).json(ugc_news_post_response);
    } catch (ex) {
        error_log(ex);
        res
            .status(http_status_code_enum.bad_request)
            .json(create_api_response(false, ex.message));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/controllers/add_comment_on_news_feed_v2_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../enums/global/http_status_codes');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const add_comment_on_news_feed_v2_service = require('../services/add_comment_on_news_feed_v2_service');
module.exports = async (req, res) => {
    try {
        const user_profile_id = req.user.user_profile_id;
        let user_news_comment = req.body.comment;
        const news_id = +req.body.news_feed_id || null;
        const ref_comment_id = +req.body.ref_comment_id || null; // replied on which comment
        const tagged_merchant_id = +req.body.tagged_merchant_id || null; // replied on whose comment
        user_news_comment = user_news_comment.trim();

        if (!news_id) {
            throw new ValidationError('news_feed_id is a mandatory parameter')
        }

        // either a person will comment or will reply on someone's comment
        if ((tagged_merchant_id && !ref_comment_id) || (!tagged_merchant_id && ref_comment_id)) {
            throw new ValidationError('either both tagged_merchant_id and ref_comment_id should be given or neither of them should be given');
        }

        if (user_news_comment && news_id) {
            const added_comment_in_news_feed_v2 = await add_comment_on_news_feed_v2_service(user_profile_id, news_id, user_news_comment, ref_comment_id, tagged_merchant_id);
            return res.status(http_status_code_enum.ok).json(create_api_response(true, 'comment is added.', added_comment_in_news_feed_v2.comment));
        } else {
            return res.status(http_status_code_enum.ok).json(create_api_response(false, 'comment or news_id is not provided'));
        }
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message, null));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/controllers/get_all_comments_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const get_all_comments_service = require('../services/get_all_comments_service');
const news_feed_comment_status = require('../../../../enums/news_feed/news_feed_comment_status');

module.exports = async (req, res) => {
    try {
        const search_param=req.query.search_param || null,
        status=req.query.status || news_feed_comment_status.live,
        page_no=+req.query.page_no || 1,
        limit=+req.query.limit || 10;

        let get_all_comments = await get_all_comments_service(search_param,status,page_no,limit);
        let get_all_comments_response = create_api_response(true, "successfull", get_all_comments);
        res.status(http_status_code_enum.ok).json(get_all_comments_response);


    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/controllers/fetch_news_feed_app_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const fetch_news_feed_app_service = require('../services/fetch_news_feed_app_service');
const language_enum = require('../../../../enums/global/language');
const country_enum = require('../../../../enums/location/country_enum');
const user_role = require('../../../../enums/user_profile/user_role');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const state_id = +req.query.state_id || null; // when it's not provided news_feed_posts from all states will be returned
        const page_no = +req.query.page_no || 1;
        const limit = +req.query.limit || 10;
        const search_for = req.query.search_for;
        const language = +req.headers.language || language_enum.hindi
        const country_id = country_enum.india
        let tags = req.query.tags || '';
        const user_profile_id = req.user.user_profile_id;
        const user_role_id = req.user.user_role_id;
        const page_id = +req.query.page_id || null;

        tags = tags.split(',').filter(ele => ele);
        let merchant_detail_id = null; let guest_user_b2c_apps_id = null;
        if (user_role_id === user_role.Guest_user_b2c_app) { guest_user_b2c_apps_id = user_profile_id; } else if (user_role_id === user_role.Merchant) { merchant_detail_id = user_profile_id } else { throw new ValidationError('wrong user role id'); }

        const news_feeds = await fetch_news_feed_app_service({
            state_id,
            page_no,
            limit,
            search_for,
            language,
            tags,
            country_id,
            merchant_detail_id,
            guest_user_b2c_apps_id,
            page_id
        });

        res.status(http_status_code_enum.ok).json(create_api_response(true, 'news_feed_list', news_feeds));

    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/controllers/fetch_ugc_news_feed_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const fetch_ugc_news_feed_app_service = require('../services/fetch_ugc_news_feed_app_service');
const news_feed_catagory_enum = require("../../../../entities_v2/metadata/enums/news_feed/news_feed_catagory_enum");
const news_feed_sub_catagory_enum = require("../../../../entities_v2/metadata/enums/news_feed/news_feed_sub_catagory_enum");
const language_enum = require('../../../../entities_v2/metadata/enums/global/langauge');
const country_enum = require("../../../../enums/location/country_enum");

module.exports = async (req, res) => {
    try {
        const merchant_detail_id = req.user.user_profile_id;
        const country_id = +req.user?.country?.id || country_enum.india;
        let search_for = null, language = +req.headers.language || language_enum.default, state_id = null, page_number = +req.query.page_number || 1, limit = +req.query.limit || 20;
        let news_feed_catagory_id = news_feed_catagory_enum.user_generated_content,
            news_feed_sub_catagory_id = news_feed_sub_catagory_enum.user_generated_content
        let ugc_news_post = await fetch_ugc_news_feed_app_service(search_for, merchant_detail_id, news_feed_catagory_id, news_feed_sub_catagory_id, language, state_id, page_number, limit, country_id);
        let ugc_news_post_response = create_api_response(true, "successfull", ugc_news_post);
        res.status(http_status_code_enum.ok).json(ugc_news_post_response);


    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/controllers/map_news_feed_tags_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const map_news_feed_tags_service = require('../services/map_news_feed_tags_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const news_feed_post_id = req.body.news_feed_post_id;
        const tags = req.body.tags || [];
        if (!news_feed_post_id || tags.length <= 0) {
            throw new ValidationError('news_feed_post_id and tags are mandatory');
        }
        await map_news_feed_tags_service(news_feed_post_id, tags);
        const tag_mapping_response = create_api_response(true, 'successfull');
        res.status(http_status_code_enum.ok).json(tag_mapping_response);
    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/controllers/fetch_news_feed_post_by_id_merchant.js
const fetch_news_feed_post_by_id_service = require('../services/fetch_news_feed_post_by_id_service');
const error_log = require('../../../../middelware/error_log');
const http_status_codes = require('../../../../enums/global/http_status_codes');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const fetch_news_feed_post_by_id = async (req, res) => {
    try {
        const merchant_detail_id = +req.user.user_profile_id
        const news_feed_id = +req.query.news_feed_id || null
        if (!news_feed_id) {
            throw new ValidationError('News_feed_id is a required parameter and must be a number')
        }

        const language_id = +req.headers.language;

        const user_role_id = req.user.user_role_id;

        let news_feed_post;
        try {
            news_feed_post = await fetch_news_feed_post_by_id_service(merchant_detail_id, news_feed_id, language_id, user_role_id);
        } catch (err) {
            news_feed_post = await fetch_news_feed_post_by_id_service(merchant_detail_id, news_feed_id, null, user_role_id);
        }

        return res.status(http_status_codes.ok).json(
            create_api_response(true, 'news_feed_post_detail', news_feed_post)
        )
    } catch (ex) {
        error_log(ex)
        return res.status(http_status_codes.bad_request).json(create_api_response(false, ex.message));
    }
}

module.exports = fetch_news_feed_post_by_id;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/controllers/edit_news_feed_content_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const edit_news_feed_content_service = require('../services/edit_news_feed_content_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');
const language_enum = require('../../../../entities_v2/metadata/enums/global/langauge');

module.exports = async (req, res) => {
    try {
        const news_feed_content_id = +req.body.news_feed_content_id || null;
        const news_feed_post_id = +req.body.news_feed_post_id || null;
        const heading_text = req.body.heading_text || null;
        const long_description = req.body.long_description || null;
        const formatted_long_description = req.body.formatted_long_description || null;
        const language_id = +req.body.language_id || language_enum.english;
        const live_from = req.body.live_from;

        const draft_payload = req.body.draft_payload || '';
        // if (!draft_payload)
        //   return res.status(http_status_code_enum.bad_request).json(create_api_response(false,
        //     "draft_payload is a mandatory param"));

        if (!news_feed_content_id || !news_feed_post_id) {
            throw new ValidationError('news_feed_content_id or news_feed_post_id are mandatory');
        }
        await edit_news_feed_content_service(
            news_feed_content_id,
            heading_text,
            long_description,
            formatted_long_description,
            language_id,
            live_from,
            draft_payload,
            news_feed_post_id
        );
        const edited_page_response = create_api_response(true, 'successfull');
        res.status(http_status_code_enum.ok).json(edited_page_response);
    } catch (ex) {
        error_log(ex);
        res
            .status(http_status_code_enum.bad_request)
            .json(create_api_response(false, ex.message));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/controllers/fetch_news_feed_post_by_id_v3_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const fetch_news_feed_post_by_id_v3_service = require('../services/fetch_news_feed_post_by_id_v3_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const news_feed_post_id = +req.query.news_feed_post_id;
        const language_id = +req.query.language_id;
        if (!news_feed_post_id) {
            throw new ValidationError('news feed post id is mandatory');
        }
        const news_feed_detail = await fetch_news_feed_post_by_id_v3_service(news_feed_post_id, language_id);
        const news_feed_detail_response = create_api_response(true, 'successfull', news_feed_detail);
        res.status(http_status_code_enum.ok).json(news_feed_detail_response);
    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/controllers/edit_map_news_feed_tags_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const edit_map_news_feed_tags_service = require('../services/edit_map_news_feed_tags_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const news_feed_post_id = +req.body.news_feed_post_id || null;
        const tags = req.body.tags || [];
        if (!news_feed_post_id || tags?.length <= 0) {
            throw new ValidationError('news_feed_post_id and tags are mandatory');
        }
        await edit_map_news_feed_tags_service(news_feed_post_id, tags);
        const tag_mapping_response = create_api_response(true, 'successfull');
        res.status(http_status_code_enum.ok).json(tag_mapping_response);
    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/controllers/delete_ugc_news_feed_controller.js
const error_log = require('../../../../middelware/error_log');
const delete_ugc_news_feed_post_service = require('../services/delete_ugc_news_feed_post_service')
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const news_feed_post_id = +req.body.news_feed_post_id;
        const merchant_detail_id = req.user.user_profile_id;

        if (!news_feed_post_id) {
            throw new ValidationError('news_feed_post_id is missing');
        }
        await delete_ugc_news_feed_post_service(news_feed_post_id, merchant_detail_id);
        return res.status(http_status_code_enum.ok).json({
            status: true,
            message: 'success'
        });
    } catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json({
            status: false,
            message: err.message
        });
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/controllers/edit_news_feed_pages_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const edit_news_feed_pages_service = require('../services/edit_news_feed_pages_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const page_id = +req.body.page_id || null;
        const page_name = req.body.page_name || null;
        const image_url = req.body.image_url || null;
        const language_id = +req.body.language_id || null;
        let is_enabled = req.body.is_enabled || null;
        let is_verified = req.body.is_verified || null;
        const created_by = +req.user.user_profile_id;
        const user_role_id = +req.user.user_role_id;

        if (!page_id || !language_id) {
            throw new ValidationError('page_name and image_url are mandatory');
        }
        // type casting
        if (is_enabled) is_enabled = +is_enabled;
        if (is_verified) is_verified = +is_verified;
        await edit_news_feed_pages_service(
            page_id,
            page_name,
            image_url,
            language_id,
            is_enabled,
            is_verified,
            created_by,
            user_role_id
        );
        const edited_page_response = create_api_response(true, 'successfull');
        res.status(http_status_code_enum.ok).json(edited_page_response);
    } catch (ex) {
        error_log(ex);
        res
            .status(http_status_code_enum.bad_request)
            .json(create_api_response(false, ex.message));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/controllers/add_news_feed_content_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const add_news_feed_content_service = require('../services/add_news_feed_content_service');
const langauge_enum = require('../../../../entities_v2/metadata/enums/global/langauge');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const news_feed_post_id = req.body.news_feed_post_id;
        const heading_text = req.body.heading_text || null;
        const long_description = req.body.long_description || null;
        const formatted_long_description = req.body.formatted_long_description || null;
        const language_id = +req.body.language_id || langauge_enum.english;
        const news_feed_post_media = req.body.news_feed_post_media || [];
        const news_feed_post_thumbnail_media =
        req.body.news_feed_post_thumbnail_media || [];
        const live_from = req.body.live_from;

        const draft_payload = req.body.draft_payload || '';
        if (!draft_payload) {
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false,
                'draft_payload is a mandatory param'));
        }

        if (!news_feed_post_id) {
            throw new ValidationError('news_feed_post_id is mandatory');
        }
        await add_news_feed_content_service(
            news_feed_post_id,
            heading_text,
            long_description,
            formatted_long_description,
            language_id,
            news_feed_post_media,
            news_feed_post_thumbnail_media,
            live_from,
            draft_payload
        );
        const added_news_feed_content_response = create_api_response(
            true,
            'successfull'
        );
        res.status(http_status_code_enum.ok).json(added_news_feed_content_response);
    } catch (ex) {
        error_log(ex);
        res
            .status(http_status_code_enum.bad_request)
            .json(create_api_response(false, ex.message));
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/controllers/update_ugc_posts_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const update_ugc_posts_service = require('../services/update_ugc_posts_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const news_feed_post_id = +req.body.news_feed_post_id || null;
        const status = +req.body.status || null;
        const user_profile_id = +req.user.user_profile_id;
        if (!news_feed_post_id || !status) {
            throw new ValidationError('news_feed_post_id and status are mandatory');
        }
        await update_ugc_posts_service(news_feed_post_id, status, user_profile_id);
        const updated_ugc_post_response = create_api_response(true, 'successfull');
        res.status(http_status_code_enum.ok).json(updated_ugc_post_response);
    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/controllers/get_ugc_news_feed_content_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const get_ugc_news_feed_content_service = require('../services/get_ugc_news_feed_content_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const news_feed_post_id = +req.query.news_feed_post_id || null;
        const merchant_detail_id = +req.query.merchant_detail_id || null;
        const is_farmart_post = +req.query.is_farmart_post || 0;
        if (!news_feed_post_id) {
            throw new ValidationError('news_feed_post_id is mandatory');
        }
        const ugc_news_post_content = await get_ugc_news_feed_content_service(news_feed_post_id, merchant_detail_id, is_farmart_post);
        const ugc_news_post_content_response = create_api_response(true, 'successfull', ugc_news_post_content);
        res.status(http_status_code_enum.ok).json(ugc_news_post_content_response);

    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/controllers/fetch_news_feed_content_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const langauge_enum = require('../../../../entities_v2/metadata/enums/global/langauge');
const fetch_news_feed_content_service = require('../services/fetch_news_feed_content_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
    // default language is set to english
        const news_feed_post_id = +req.query.news_feed_post_id || 0;
        const language_id = +req.query.language_id || langauge_enum.english;
        if (!news_feed_post_id) {
            throw new ValidationError('news_feed_post_id is mandatory');
        }
        const news_feed_content = await fetch_news_feed_content_service(news_feed_post_id, language_id);
        const news_feed_content_response = create_api_response(true, 'successfull', news_feed_content);
        res.status(http_status_code_enum.ok).json(news_feed_content_response);
    } catch (ex) {
        error_log(ex);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/services/fetch_news_feed_post_by_id_v3_service.js
const error_log = require('../../../../middelware/error_log');
const { get_news_feed_post_by_id } = require('../../../../data_abstraction_layer/news_feed/news_feed_posts');
// const user_role_enum = require('../../../../enums/user_profile/user_role');
const { get_news_feed_master_state_district_mapping } = require('../../../../data_abstraction_layer/news_feed/news_feed_state_district_map');
const { get_news_feed_content } = require('../../../../data_abstraction_layer/news_feed/news_feed_content');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (news_feed_post_id, language_id) => {
    try {
        // fetch news feed by id
        const news_feed_post_detail = await get_news_feed_post_by_id({ news_feed_post_id });
        const news_feed_content = await get_news_feed_content({ news_feed_post_id, language_id, attributes: ['language_id'] })
        if (!news_feed_post_detail) {
            throw new ValidationError('news feed post not exists for this news_feed_post_id');
        }
        // fetch news_feed state district mapping
        let master_state_district_mapping = await get_news_feed_master_state_district_mapping({ news_feed_post_id });
        // format state district mapping
        master_state_district_mapping = master_state_district_mapping?.rows.map(element => {
            return {
                state_id: element?.master_state_id,
                district_id: element?.master_district_id,
                country_id: element.country_id
            }
        })
        // formatting the news feed
        const response_obj = {
            heading: news_feed_post_detail?.name,
            state_district_map: master_state_district_mapping,
            page_id: news_feed_post_detail?.news_feed_catagory_id,
            content_type: news_feed_post_detail?.content_type_catagory_id,
            langauge_id: news_feed_content?.dataValues?.language_id
        }
        return response_obj;
    } catch (err) {
        error_log(err);
        return null;
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/services/fetch_branch_io_links_service.js
const error_log = require("../../../../middelware/error_log");
const { get_branch_io_links } = require("../../../../data_abstraction_layer/news_feed/news_feed_content");

module.exports = async (news_feed_post_id) => {
    try {
            // abstraction layer to fetch news feed content
            let branch_io_links = await get_branch_io_links({news_feed_post_id,attributes:["language_id","branch_io_link"]});
        return branch_io_links;
    }
    catch (err) {
        error_log(err);
        return [];
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/services/fetch_news_feed_pages_service.js
const { get_news_feed_pages,get_news_feed_vernacular_pages } = require("../../../../data_abstraction_layer/news_feed/news_feed_pages");
const error_log = require("../../../../middelware/error_log");
module.exports = async (page_no,limit,language_id,created_by,user_role_id) => {
    try {
        let offset = (page_no - 1) * limit;
        // abstraction layer to get pages
        let pages_data=await get_news_feed_pages({offset,limit,created_by,user_role_id});
        //traversing the page data for finding vernacular data 
        let pages_details=await Promise.all(pages_data.rows.map(async(element) =>{
            let vernacular_page_data=await get_news_feed_vernacular_pages({language_id,page_id:element.id});
            vernacular_page_data=vernacular_page_data?.rows.map(ele=>{
                return {language_id:ele?.language_id,name:ele?.name}
            })
            // formatting response
            return {
                page_id:element?.id,
                name:element?.name,
                vernacular_page_list:vernacular_page_data,
                is_enabled:element?.is_enabled,
                is_verified:element?.is_verified,
                image_url:element?.image_url,
            }
        }))
        return {pages:pages_details,count:pages_data?.count};
    }
    catch (err) {
        error_log(err);
        return {pages:[],count:0};
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/services/delete_news_feed_post_v3_service.js
const news_feeds_post_model = require('../../../../database/models_v2/news_feed/news_feeds_post');
const error_log = require('../../../../middelware/error_log');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (news_feed_post_id) => {
    try {
        // delete news feed post
        const news_feeds_post = await news_feeds_post_model.update(
            {
                is_active: 0
            }
            , {
                where: {
                    id: news_feed_post_id,
                    is_active: 1
                }
            }
        );
        if (!news_feeds_post) {
            throw new ValidationError('you have no posts to delete');
        }
        return ({ message: 'deleted news feed' })
    } catch (err) {
        error_log(err);
        throw err
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/services/add_news_feed_content_service.js
const { add_news_feed_content } = require('../../../../data_abstraction_layer/news_feed/news_feed_content');
const map_media_to_news_feed_content = require('../../../../entities_v2/news_feed/service/panel_services/map_media_to_news_feed_content');
const error_log = require('../../../../middelware/error_log');
const sequelize = require('../../../../database/db_connection_initializer');
const { quill } = require('../../../../enums/news_feed/editors_enum');
const news_feed_media_types_enum = require('../../../../entities_v2/metadata/enums/news_feed_media_types_enum');
const { generate_branch_io_link_service } = require('../../../../common_services/branch_io/generate_link_service');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (
    news_feed_post_id,
    heading_text,
    long_description,
    formatted_long_description,
    language_id,
    news_feed_post_media,
    news_feed_post_thumbnail_media,
    live_from,
    draft_payload = ''
) => {
    try {
        await sequelize.transaction(async (t) => {
            // for media thumbnail
            if (news_feed_post_thumbnail_media?.length === 0) {
                news_feed_post_thumbnail_media = news_feed_post_media?.map((media_element) => {
                    if (media_element.news_feed_media_type_id === news_feed_media_types_enum.featured_image) {
                        return {
                            news_feed_media_type_id: news_feed_media_types_enum.image_thumbnail,
                            media_url: media_element?.media_url
                        };
                    }
                    return null; // Add a default return value
                });

                news_feed_post_thumbnail_media = news_feed_post_thumbnail_media.filter(ele => ele);
            }
            // branch io link
            const branch_io_obj = await generate_branch_io_link_service({ news_feed_post_id, heading_text });
            // abstraction layer to add news feed content
            const news_feed_content = await add_news_feed_content({
                heading_text,
                language_id,
                long_description,
                formatted_long_description,
                news_feed_post_id,
                live_from,
                draft_payload,
                editor_type: quill,
                transaction: t,
                branch_io_link: branch_io_obj?.branchUrl
            });
            if (!news_feed_content) {
                throw new ValidationError('not able to add content')
            }
            // now add the news feed media for this content id
            await map_media_to_news_feed_content(news_feed_content.id, news_feed_post_media, t);
            // now add the news feed thumbnail media for this content id
            if (news_feed_post_thumbnail_media?.length) {
                await map_media_to_news_feed_content(news_feed_content.id, news_feed_post_thumbnail_media, t);
            }
            return news_feed_content;
        })
    } catch (err) {
        error_log(err);
        throw err;
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/services/fetch_news_feed_pages_list_service.js
const { Sequelize } = require('sequelize');
const { get_news_feed_page_by_id, get_news_feed_vernacular_pages } = require('../../../../data_abstraction_layer/news_feed/news_feed_pages');
const error_log = require('../../../../middelware/error_log');
const news_feed_post_model = require('../../../../database/models_v2/news_feed/news_feeds_post');
const format_get_cdn_url = require('../../../../common_services/aws/format_get_cdn_url');

module.exports = async (page_no, limit, language_id) => {
    try {
        const offset = (page_no - 1) * limit;
        // getting only news_feed_page_ids where we have content
        const unique_news_feed_category_ids = await get_distinct_news_feed();
        // abstraction layer to get page vernacular data
        const vernacular_page_data = await get_news_feed_vernacular_pages({ offset, limit, page_ids: unique_news_feed_category_ids, language_id, attributes: ['name', 'language_id', 'news_feed_category_id'] });
        // loop through this vernacular_page_data and get_page_detail
        const page_data = await Promise.all(vernacular_page_data?.rows.map(async (element) => {
            const page = await get_news_feed_page_by_id({ page_id: element?.news_feed_category_id });
            // formatting the response
            const cdn_response = await format_get_cdn_url(page?.image_url)
            return {
                page_id: element?.news_feed_category_id,
                page_name: element?.name,
                language_id: element?.language_id,
                is_enabled: page?.is_enabled,
                is_verified: page?.is_verified,
                image_url: cdn_response?.formatted_url || page.image_url
            }
        }))
        return { pages: page_data, count: vernacular_page_data?.count };
    } catch (err) {
        error_log(err);
        return { pages: [], count: 0 };
    }
}

const get_distinct_news_feed = async () => {
    try {
        const news_feed = await news_feed_post_model.findAll({
            where: {
                is_active: 1
            },
            attributes: [[Sequelize.fn('DISTINCT', Sequelize.col('news_feed_catagory_id')), 'news_feed_catagory_id']]
        });
        const category_ids = news_feed.map(ele => ele.news_feed_catagory_id);

        return category_ids;
    } catch (err) {
        error_log(err);
        return [];
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/services/map_news_feed_tags_service.js
const { create_news_feed_tag_mapping } = require("../../../../data_abstraction_layer/news_feed/news_feed_tags");
const error_log = require("../../../../middelware/error_log");
const news_feed_tag_model = require("../../../../database/models/news_feed_tag");

module.exports = async (news_feed_post_id,tags) => {
    try {

        // abstraction layer to create tags mapping 
        let tag_mapping_created=await create_news_feed_tag_mapping({news_feed_post_id,list_of_tags:tags});
        return tag_mapping_created;
    }
    catch (err) {
        error_log(err);
        return null;
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/services/send_notification_for_news_feed_action.js
const error_log = require("../../../../middelware/error_log");
const merchant_details_model = require("../../../../database/models/merchant_detail");
const news_feed_post_model = require("../../../../database/models_v2/news_feed/news_feeds_post");
const news_feed_action_enum = require("../../../../enums/news_feed/news_feed_actions");
const notification_event_enum = require("../../../../enums/notification/notification_event_enum");
const fetch_notification_string_service = require("../../../../entities_v2/notification/services/fetch_notification_string");
const get_merchant_language_selected_service = require("../../../../entities_v2/merchant/services/metadata/get_merchant_language_selected");
const firebase_admin = require("../../../../notifier/firebase_admin");

module.exports = async (news_feed_post_id, merchant_detail_id, news_feed_action) => {
    try {
        const author_merchant_id = await get_merchant_id_from_news_feed_post(news_feed_post_id);
        if (!author_merchant_id)
            return
        let variables = {};
        let notification_event_id = "";
        switch (news_feed_action) {
            case news_feed_action_enum.like:
                notification_event_id = notification_event_enum.news_feed_liked;
                break;
            case news_feed_action_enum.comment:
                notification_event_id = notification_event_enum.news_feed_commented;
                variables.commentor_name = await get_merchant_name(merchant_detail_id);
                break;
            case news_feed_action_enum.share:
            case news_feed_action_enum.share_on_sms:
            case news_feed_action_enum.share_on_whats_app:
                notification_event_id = notification_event_enum.news_feed_shared;
                break;
        }


        const language = await get_merchant_language_selected_service(author_merchant_id);

        const notification = await fetch_notification_string_service(notification_event_id, language, variables);

        firebase_admin.send_notification([author_merchant_id], notification.title, notification.message, "", {
            "new_screen_name": "NEWS_FEED_DETAIL",
            "new_tab_name": "NEWS_FEED_TAB",
            news_feed_id: news_feed_post_id + ""
        }).catch(err => {
            error_log(err);
        });
    }
    catch (err) {
        error_log(err);
    }
}

const get_merchant_name = async (merchant_detail_id) => {
    let merchant_name = null;
    try {
        const merchant = await merchant_details_model.findOne({
            where: {
                id: merchant_detail_id,
                is_active: 1
            },
            attributes: ["name"]
        });
        merchant_name = merchant.name;
    }
    catch (err) {
        error_log(err);
    }
    finally {
        return merchant_name;
    }
}

const get_merchant_id_from_news_feed_post = async (news_feed_post_id) => {
    let merchant_detail_id = null;
    try {
        const news_feed_post = await news_feed_post_model.findOne({
            where: {
                id: news_feed_post_id,
                is_active: 1
            },
            attributes: ["merchant_detail_id"]
        });
        merchant_detail_id = news_feed_post?.merchant_detail_id || null;
    }
    catch (err) {
        error_log(err);
    }
    finally {
        return merchant_detail_id;
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/services/fetch_relevant_news_feed_app_service.js
const error_log = require('../../../../middelware/error_log');
const NewsFeedManager = require('../../../../common_services/news_feed/NewsFeedManager');

const fetch_news_feed_app_service = async ({ country_id, state_id, page_no, limit, language, merchant_detail_id, guest_user_b2c_apps_id, news_feed_post_id }) => {
    try {
        /* `const newsFeedManager = new NewsFeedManager();` is creating a new instance of the
        `NewsFeedManager` class. This instance can then be used to call methods and access
        properties defined within the `NewsFeedManager` class. */
        const newsFeedManager = new NewsFeedManager();
        const NewsFeed = await newsFeedManager.fetchRelevantNewsFeed(country_id, state_id, page_no, limit, language, merchant_detail_id, guest_user_b2c_apps_id, news_feed_post_id);
        return await NewsFeed;
    } catch (err) {
        error_log(err);
        return { rows: [], count: 0 }
    }
}

module.exports = fetch_news_feed_app_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/services/get_ugc_news_feed_content_service.js
const error_log = require('../../../../middelware/error_log');
const {
    get_ugc_post_content_by_id
} = require('../../../../data_abstraction_layer/news_feed/news_feed_content');
const get_merchant_occupation = require('../../../../data_abstraction_layer/merchant/get_merchant_occupation');
const {
    get_merchant_detail_by_id
} = require('../../../../data_abstraction_layer/merchant/merchant_details');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (news_feed_post_id, merchant_detail_id = null, is_farmart_post) => {
    try {
        const attributes = [
            'language_id',
            'heading_text',
            'long_description',
            'formatted_long_description',
            'live_from',
            'editor_type',
            'branch_io_link',
            'news_feed_post_id',
            'draft_payload'
        ];
        const news_feed_post_content = await get_ugc_post_content_by_id({
            news_feed_post_id,
            attributes
        });
        if (!news_feed_post_content) throw new ValidationError('content not found for news_feed_post_id', news_feed_post_id);
        let merchant_details, merchant_occupation;
        if (merchant_detail_id) {
            merchant_details = await get_merchant_detail_by_id({
                merchant_detail_id,
                attributes: ['name', 'mobile_number']
            });
            merchant_occupation = await get_merchant_occupation(merchant_detail_id);
        }
        news_feed_post_content.dataValues.merchant_detail_id = merchant_detail_id || null;
        news_feed_post_content.dataValues.merchant_name = merchant_details?.name || null;
        news_feed_post_content.dataValues.occupation_id =
    merchant_occupation?.occupation_id || null;
        news_feed_post_content.dataValues.is_farmart_post = is_farmart_post;

        return news_feed_post_content;
    } catch (err) {
        error_log(err);
        return null;
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/services/fetch_news_feed_post_by_id_service.js
const error_log = require("../../../../middelware/error_log");
const news_feed_post_model = require("../../../../database/models_v2/news_feed/news_feeds_post");
const news_feed_content_model = require("../../../../database/models_v2/news_feed/news_feed_content");
const create_news_feed_content_query_service = require("../../../../entities_v2/news_feed/service/meta_news_feed_services/create_news_feed_content_query")
const { fetch_news_feed_action_stats } = require("../../../../entities_v2/news_feed/service/meta_news_feed_services/fetch_news_feed_stats_and_media");
const get_claps_on_news_feed_post = require("../../../../data_abstraction_layer/news_feed/get_claps_on_news_feed_post");

const fetch_news_feed_creator_details = require("../../../../data_abstraction_layer/news_feed/fetch_news_feed_creator_details");
const user_role_enum = require("../../../../enums/user_profile/user_role");
const fetch_tags_by_news_feed_id = require("../../../../data_abstraction_layer/news_feed/fetch_tags_by_news_feed_id");
const fetch_news_feed_stats = require("../../../../common_services/news_feed/fetch_news_feed_stats")

module.exports = (user_profile_id, news_feed_post_id, language_id, user_role_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            let _updated_at = "updated_at";
            const news_feed_post_query = {
                id: news_feed_post_id,
                is_active: 1
            };
            const news_feed_content_query = await create_news_feed_content_query_service(language_id);

            const news_feed_post = await news_feed_post_model.findOne({
                where: news_feed_post_query,
                attributes: ["id", "created_at", "updated_at", "news_feed_catagory_id", "news_feed_sub_catagory_id", "content_type_catagory_id", "is_active", "merchant_detail_id", "user_profile_id"],
                include: [
                    {
                        model: news_feed_content_model,
                        where: news_feed_content_query,
                        required: true,
                    }
                ],
                order: [[_updated_at, "desc"]]
            });

            if (!news_feed_post) {
                return reject({ message: "news_feed_post not found" });
            }
            const clap_count = await get_claps_on_news_feed_post(user_role_id == user_role_enum.Merchant ? user_profile_id : null, news_feed_post_id);
            const total_clap_count = clap_count.total_clap_count;
            const merchant_clap_count = clap_count.merchant_clap_count;

            let news_feed_content = news_feed_post.dataValues.news_feed_contents[0];
            delete news_feed_post.dataValues.news_feed_contents;
            const { heading_text, formatted_long_description, editor_type, long_description } = news_feed_content;
            const news_feed_logs = await fetch_news_feed_stats(news_feed_post.id, user_profile_id, user_role_id);
            let news_feed_action_logs = {
                comment_count: news_feed_logs.comment_count,
                is_viewed: news_feed_logs.is_viewed,
                no_of_shares: news_feed_logs.share_count,
                total_clap_count: news_feed_logs.claps,
                merchant_clap_count: news_feed_logs.user_clap_count,
                view_count: news_feed_logs.view_count
            }


            news_feed_post.dataValues = {
                ...news_feed_post.dataValues, heading_text,
                formatted_long_description: formatted_long_description || long_description
                , ...news_feed_action_logs, editor_type
            };
            news_feed_post.dataValues.locked = false;
            news_feed_post.dataValues.tags = await fetch_tags_by_news_feed_id(news_feed_post_id);
            const news_feed_creator = await fetch_news_feed_creator_details({ merchant_detail_id: news_feed_post?.dataValues?.merchant_detail_id, news_feed_category_id: news_feed_post?.dataValues?.news_feed_catagory_id, language_id })
            news_feed_post.dataValues.created_by = news_feed_creator;

            return resolve(news_feed_post);
        }
        catch (err) {
            error_log(err);
            reject({ message: err.message });
        }
    })
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/services/edit_news_feed_post_v3_service.js
const sequelize=require('../../../../database/db_connection_initializer');
const error_log = require("../../../../middelware/error_log");
const news_feed_post_model = require("../../../../database/models_v2/news_feed/news_feeds_post");
const news_feed_master_state_district_map_model = require("../../../../database/models_v2/news_feed/news_feed_master_state_district_map");
const map_news_feed_to_master_state_and_district = require("../../../../entities_v2/news_feed/service/panel_services/map_news_feed_to_master_state_and_district");

  module.exports = async (
    heading,
    news_feed_post_id,
    master_state_district_mapping
  ) => {
    try {
        const result = await sequelize.transaction(async (t) => {
      // update in news feed post
      const updated_news_feed_post = await news_feed_post_model.update(
        {
          name:heading
        },
        {
          where: {
            id: news_feed_post_id,
            is_active: 1,
          },
          transaction:t
        }
      );
        // news feed post is updated then update its mapping with the state and districts
      if(updated_news_feed_post)
      {
        // delete all the mapping 
        const updated_news_feed_state_districts = await news_feed_master_state_district_map_model.update(
            {
              is_active:0
            },
            {
              where: {
                news_feed_post_id,
                is_active: 1,
              },
              transaction:t
            }
          );
          // now bulk create the mapping
          if(updated_news_feed_state_districts)
          await map_news_feed_to_master_state_and_district(news_feed_post_id,master_state_district_mapping,t);
      }
    })
    return result;
    } catch (err) {
      error_log(err);
      throw err;
    }
  };
  


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/services/fetch_news_feed_content_service.js
const error_log = require('../../../../middelware/error_log');
// const user_role_enum = require('../../../../enums/user_profile/user_role');
const { get_news_feed_content, get_news_feed_content_media } = require('../../../../data_abstraction_layer/news_feed/news_feed_content');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (news_feed_post_id, language_id) => {
    try {
        // abstraction layer to fetch news feed content
        const news_feed_content = await get_news_feed_content({ news_feed_post_id, language_id });
        if (!news_feed_content) {
            throw new ValidationError('no content associated with this news_feed_post_id and language_id');
        }
        // now fetch the news feed media for this content id
        let news_feed_content_media_map = await get_news_feed_content_media({ news_feed_content_id: news_feed_content?.id });
        news_feed_content_media_map = news_feed_content_media_map.map(element => {
            return { media_url: element?.media_url, news_feed_media_type_id: element?.news_feed_media_type_id }
        })
        // formatting the news feed
        const response_obj = {
            news_feed_post_content_id: news_feed_content?.id,
            heading_text: news_feed_content?.heading_text,
            long_description: news_feed_content?.long_description,
            formatted_long_description: news_feed_content?.formatted_long_description,
            language_id: news_feed_content?.language_id,
            live_from: news_feed_content?.live_from,
            news_feed_post_media: news_feed_content_media_map
        }
        return response_obj;
    } catch (err) {
        error_log(err);
        return null;
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/services/fetch_ugc_news_feed_app_service.js
const error_log = require("../../../../middelware/error_log");
const news_feed_post_model = require("../../../../database/models_v2/news_feed/news_feeds_post");
const news_feed_content_model = require("../../../../database/models_v2/news_feed/news_feed_content");
const news_feed_state_district_map_model = require("../../../../database/models_v2/news_feed/news_feed_state_district_map");
const create_news_feed_post_query_service = require("../../../../entities_v2/news_feed/service/meta_news_feed_services/create_news_feed_post_query");
const create_news_feed_content_query_service = require("../../../../entities_v2/news_feed/service/meta_news_feed_services/create_news_feed_content_query")
const create_news_feed_state_district_map_query_service = require("../../../../entities_v2/news_feed/service/meta_news_feed_services/create_news_feed_state_district_map_query");
const { fetch_news_feed_action_stats, attach_media_legacy_version } = require("../../../../entities_v2/news_feed/service/meta_news_feed_services/fetch_news_feed_stats_and_media");
const sequelize = require("sequelize");
const Op = sequelize.Op;

//lock rake news imports
const { get_data_from_settings } = require("../../../../entities/metadata/service/application_version_service");
const settings_enum = require("../../../../entities/metadata/enums/settings_enum");
const { get_total_sms_count_service } = require("../../../../entities_v2/sms/service/get_total_sms_count_service");
const news_feed_catagory_enum = require("../../../../entities_v2/metadata/enums/news_feed/news_feed_catagory_enum")
const fetch_merchant_profile = require('../../../../common_services/merchant/fetch_merchant_profile');
const news_feed_post_status_enum = require("../../../../enums/news_feed/news_feed_post_status_enum");

module.exports = (search_for, user_profile_id, news_feed_catagory_id, news_feed_sub_catagory_id, language, state_id, page_number = 1, limit = 20, country_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            let offset = (page_number - 1) * limit;
            const _updated_at = 'updated_at';
            // fetching only approved ugc posts
            let ugc_post_status=news_feed_post_status_enum.approved
            const news_feed_post_query = await create_news_feed_post_query_service(news_feed_catagory_id, news_feed_sub_catagory_id,null,null,ugc_post_status);
            const news_feed_content_query = await create_news_feed_content_query_service(language, search_for);
            const news_feed_state_district_map_query = await create_news_feed_state_district_map_query_service(state_id, null, country_id);

            news_feed_post_query.merchant_detail_id = user_profile_id;
            const news_feeds = await news_feed_post_model.findAndCountAll({
                where: news_feed_post_query,
                attributes: ["id", ["created_at", "createdAt"], ["updated_at", "updatedAt"], "news_feed_catagory_id", "news_feed_sub_catagory_id", "content_type_catagory_id", "is_active", "merchant_detail_id"],
                include: [
                    {
                        model: news_feed_content_model,
                        where: news_feed_content_query,
                        required: true,
                        attributes: ["id", "heading_text", "short_description", "language_id", "long_description"],
                    },
                    {
                        model: news_feed_state_district_map_model,
                        where: news_feed_state_district_map_query,
                        required: true,
                        attributes: []
                    }
                ],
                order: [[_updated_at, "desc"]],
                offset: offset,
                limit: limit
            });

            for (let index = 0; index < news_feeds.rows.length; index++) {
                let news_feed_post = news_feeds.rows[index];
                let news_feed_content = news_feed_post.dataValues.news_feed_contents[0];
                delete news_feed_post.dataValues.news_feed_contents;

                const { heading_text, short_description, long_description } = news_feed_content;
                const news_feed_media = await attach_media_legacy_version(news_feed_content.id);
                const news_feed_action_stats = await fetch_news_feed_action_stats(news_feed_post.id, user_profile_id);

                const merchant = await fetch_merchant_profile(news_feed_post.dataValues.merchant_detail_id);
                news_feed_post.dataValues = { ...news_feed_post.dataValues, heading_text, short_description, long_description, ...news_feed_media, ...news_feed_action_stats };
                news_feed_post.dataValues.merchant = merchant;

                news_feeds.rows[index] = news_feed_post;
            }
            news_feeds.rows = [...news_feeds.rows];
            news_feeds.rows = await lock_rake_news(news_feeds.rows, user_profile_id);
            return resolve(news_feeds);
        }
        catch (err) {
            error_log(err);
            reject({ message: err.message });
        }
    })
}

const lock_rake_news = async (news_feed_posts, merchant_detail_id) => {
    try {
        let news_feed_locked = false;
        let sms_remaining_to_unlock = 0;
        let sms_check_start_date = await get_data_from_settings(settings_enum.rake_sms_check_date);
        sms_check_start_date = new Date(sms_check_start_date);
        const sms_count = await get_total_sms_count_service(merchant_detail_id, 0, sms_check_start_date);
        let rake_sms_count_criteria = await get_data_from_settings(settings_enum.rake_sms_count_criteria);
        rake_sms_count_criteria = +rake_sms_count_criteria || 0;
        if (sms_count < rake_sms_count_criteria) {
            news_feed_locked = true;
            sms_remaining_to_unlock = rake_sms_count_criteria - sms_count

        }
        let processed_news_feed_posts = news_feed_posts.map(news_feed_post => {
            if (news_feed_post.news_feed_catagory_id == news_feed_catagory_enum["Rake News"]) {
                news_feed_post.dataValues.locked = news_feed_locked;
                news_feed_post.dataValues.sms_remaining_to_unlock = sms_remaining_to_unlock;
            }
            else {
                news_feed_post.dataValues.locked = false;
                news_feed_post.dataValues.sms_remaining_to_unlock = 0;
            }
            return news_feed_post;
        });
        return processed_news_feed_posts;
    }
    catch (err) {
        error_log(err);
        return news_feed_posts;
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/services/fetch_news_feed_post_v3_service.js
const error_log = require("../../../../middelware/error_log");
const { get_news_feed_posts } = require("../../../../data_abstraction_layer/news_feed/news_feed_posts");
const user_role_enum = require("../../../../enums/user_profile/user_role");
const { get_news_feed_page_by_id, get_news_feed_page_ids } = require("../../../../data_abstraction_layer/news_feed/news_feed_pages");
const { get_news_feed_ids_by_tags } = require("../../../../data_abstraction_layer/news_feed/news_feed_tags");
const { fetch_news_feed_action_stats } = require("../../../../entities_v2/news_feed/service/meta_news_feed_services/fetch_news_feed_stats_and_media");

module.exports = async (page_no,limit,page_id,tags_list,content_type,user_role_id,user_profile_id) => {
    try {
        let offset = (page_no - 1) * limit;
        let news_feed_details;
        // fetch news feed on the basis of user role 
        if(user_role_id==user_role_enum.Promotional_Companies_News_Feed)
        {
            news_feed_details = await find_news_feed_wrt_page_and_tags({page_id,user_profile_id,user_role_id,content_type,tags_list,offset,limit});
        }
        else{
            news_feed_details = await  find_news_feed_wrt_page_and_tags({page_id,user_role_id,content_type,tags_list,offset,limit});
        }
        // formatting the news feed 
        if(news_feed_details?.rows?.length>0)
        {
            news_feed_details.rows=await Promise.all(news_feed_details?.rows.map(async(element) =>{
           try{
            const news_feed_action_stats = await fetch_news_feed_action_stats(element.id,null);
            let comment_count=news_feed_action_stats?.comment_count||0
            let no_of_shares=news_feed_action_stats?.no_of_shares||0
            let no_of_likes=news_feed_action_stats?.no_of_likes||0
            return {
                post_id:element?.id,
                title:element?.name,
                content_type:element?.content_type_catagory_id,
                impression:news_feed_action_stats?.view_count,
                views:0,// for now there is no provision for Anyone who viewed content for atleast 10 seconds.
                engagement:comment_count+no_of_shares+no_of_likes,
                shares:no_of_shares
            }
        }catch(err)
        {
            error_log(err);
            return;
        }
            }));
        }
        return {news_feed_lists:news_feed_details?.rows,count:news_feed_details?.count};
    }
    catch (err) {
        error_log(err);
        return {news_feed_lists:[],count:0};
    }
}
const find_news_feed_wrt_page_and_tags=async ({page_id,user_profile_id,user_role_id,content_type,tags_list,offset,limit})=>{
    //check if page id is passed or not 
    if(page_id)
    {
        // check if page belong to this user(or user_role) or not
        let page_details=await get_news_feed_page_by_id({page_id,created_by:user_profile_id,user_role_id});
        // if not present return [] else continue
        if(!page_details)
        return {count:0,rows:[]};
    }
    else{
        // get page_ids or page_id  for this user or user_role
        let page_ids=await get_news_feed_page_ids({created_by:user_profile_id,user_role_id});
        page_id=page_ids
    } 

    // look for tags
    if(tags_list?.length>0)
    {
        // check for tags and get_news_feed_post_ids
        let news_feed_post_ids=await get_news_feed_ids_by_tags({tags_list,attributes:["news_feed_post_id"]});
        if(news_feed_post_ids?.length>0)
        {
            //get post for particular news_feed_post_ids related with tags and pages
            let news_feed_details=await get_news_feed_posts({offset,limit,content_type,news_feed_post_ids,page_ids:page_id});
            return news_feed_details;
        }
        else
        return {count:0,rows:[]};
    }
    else{
        //get news feed with this page_id or page_ids
        let news_feed_details=await get_news_feed_posts({offset,limit,content_type,page_ids:page_id});
        return news_feed_details;
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/services/add_news_feed_pages_service.js
const { add_news_feed_page } = require("../../../../data_abstraction_layer/news_feed/news_feed_pages");
const error_log = require("../../../../middelware/error_log");
module.exports = async (page_name,image_url,language_id,created_by,user_role_id) => {
    try {
        // abstraction layer to add pages which will add in both news feed category as well as in news_feed_categories_vernacular_metadata
        let page_created=await add_news_feed_page({page_name,image_url,created_by,user_role_id,language_id});
        return page_created;
    }
    catch (err) {
        error_log(err);
        return null;
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/services/add_comment_on_news_feed_v2_service.js
const error_log = require('../../../../middelware/error_log');
const send_notification_for_news_feed_action = require("../../../../apis/v3/news_feed/services/send_notification_for_news_feed_action");
const news_feed_actions_enum = require('../../../../entities/metadata/enums/news_feed_actions');
const save_news_feed_comments = require('../../../../data_abstraction_layer/news_feed/news_feed_comment').save_news_feed_comments;
const get_merchant_detail = require('../../../../data_abstraction_layer/merchant/merchant_details').get_merchant_detail_by_id;
const comment_notification_service = require("../../../../common_services/news_feed/comment/comment");

const add_comment_in_news_feed = async(user_profile_id, news_feed_id, comment, ref_comment_id, tagged_merchant_id) => {
        try {
            let comment_got_saved = await save_news_feed_comments(user_profile_id, news_feed_id, comment, ref_comment_id, tagged_merchant_id);

            let merchant_detail = await get_merchant_detail({merchant_detail_id:user_profile_id});

            let new_comment = {
                comment_id: comment_got_saved.dataValues.id,
                comment: comment,
                merchant_name: merchant_detail.dataValues.name,
                merchant_pic: merchant_detail.dataValues.profile_pic_url,
                created_at: comment_got_saved.dataValues.createdAt,
                is_pinned: comment_got_saved.dataValues.is_pinned,
                merchant_detail_id: user_profile_id,
            }
            
            //adding base level comment
            if(!ref_comment_id && !tagged_merchant_id){
                send_notification_for_news_feed_action(news_feed_id, user_profile_id, news_feed_actions_enum.comment)
                .catch(err => {
                    error_log(err);
                })
            }
            
            //replying on someone's comment
            if(ref_comment_id && tagged_merchant_id){
                await comment_notification_service(user_profile_id, news_feed_id, ref_comment_id, tagged_merchant_id);
            }

            // resolve({ message: 'success', comment: new_comment });
            return {
                message: 'success',
                comment: new_comment
            }
        }
        catch (ex) {
            error_log(ex);
        }
}
module.exports = add_comment_in_news_feed;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/services/edit_news_feed_content_service.js
const error_log = require("../../../../middelware/error_log");
const sequelize = require("../../../../database/db_connection_initializer");
const news_feed_content_model = require("../../../../database/models_v2/news_feed/news_feed_content");
const { quill } = require("../../../../enums/news_feed/editors_enum");
const { generate_branch_io_link_service } = require("../../../../common_services/branch_io/generate_link_service");

module.exports = async (
  news_feed_content_id,
  heading_text,
  long_description,
  formatted_long_description,
  language_id,
  live_from,
  draft_payload = "",
  news_feed_post_id
) => {
  try {
    // updating the news feed content
    let short_description_length = 10,
      short_description = long_description.trim().split(/\s+/).slice(0, short_description_length).join(' ');
    let branch_io_obj="";
      if(heading_text)
    {
      branch_io_obj=await generate_branch_io_link_service({news_feed_post_id,heading_text});
    }
      const news_feed_content_update = await news_feed_content_model.update(
      {
        heading_text,
        long_description,
        short_description,
        formatted_long_description,
        language_id,
        live_from,
        editor_type: quill,
        draft_payload,
        branch_io_link:branch_io_obj?.branchUrl
      },
      {
        where: {
          news_feed_post_id: news_feed_post_id,
          language_id,
          is_active: 1,
        },
        defaults:{
          heading_text,
          short_description,
          language_id,
          long_description,
          formatted_long_description,
          is_active: 1,
          live_from,
          news_feed_post_id,
          user_generated_content: 0,
          editor_type:quill,
          draft_payload
      },
      }
    );
      if(!created)
      {
        news_feed_content_update.heading_text=heading_text || undefined;
        news_feed_content_update.long_description=long_description|| undefined;
        news_feed_content_update.short_description=short_description|| undefined;
        news_feed_content_update.formatted_long_description=formatted_long_description|| undefined;
        news_feed_content_update.live_from=live_from|| undefined;
        news_feed_content_update.draft_payload=draft_payload|| undefined;
        await news_feed_content_update.save();
      }
    return news_feed_content_update;
  } catch (err) {
    error_log(err);
    throw err;
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/services/get_all_comments_service.js
const { fetch_all_comments } = require("../../../../data_abstraction_layer/news_feed/news_feed_comment");
const error_log = require("../../../../middelware/error_log");
const get_merchant_occupation =require('../../../../data_abstraction_layer/merchant/get_merchant_occupation');
const { get_merchant_ids } = require("../../../../data_abstraction_layer/merchant/merchant_details");
const merchant_status_enum = require("../../../../enums/merchant/merchant_status");
module.exports = async (search_param,status,page_no,limit) => {
  try {
    let offset=(page_no - 1) * limit;
    let response={count:0,rows:[]}
    let all_comments=await fetch_all_comments({search_param,status,offset,limit});
    for(let i=0;i<all_comments.rows.length;i++)
    {
      let merchant_occupation = await get_merchant_occupation(all_comments.rows[i]?.merchant_detail?.id);
      response.rows.push({
        comment_id:all_comments.rows[i]?.id,
        comment:all_comments.rows[i]?.comment,
        merchant_name:all_comments.rows[i]?.merchant_detail?.name,
        merchant_occupation_id:merchant_occupation?.occupation_id,
        created_at:all_comments.rows[i]?.createdAt,
        merchant_detail_id:all_comments.rows[i]?.merchant_detail?.id,
        news_feed_post_id:all_comments.rows[i]?.news_feed_post_id,
        creator_merchant_detail_id:all_comments.rows[i]?.news_feed_post?.merchant_detail_id,
      })
    }
    response.count=all_comments?.count;
    return response;
  } catch (err) {
    error_log(err);
    return ({count:0,rows:[]});
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/services/fetch_news_feed_pages_vernacular_list_service.js
const { get_news_feed_pages,get_news_feed_vernacular_pages } = require("../../../../data_abstraction_layer/news_feed/news_feed_pages");
const error_log = require("../../../../middelware/error_log");
module.exports = async (page_id) => {
    try {
        // abstraction layer to get pages
        let vernacular_page_list=await get_news_feed_vernacular_pages({page_id});
        //traversing vernacular data for formatting response
        vernacular_page_list=vernacular_page_list?.rows.map(ele=>{
            return {language_id:ele?.language_id,name:ele?.name}
        })
        return vernacular_page_list || [];
    }
    catch (err) {
        error_log(err);
        return [];
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/services/delete_ugc_news_feed_post_service.js
const news_feeds_post_model = require('../../../../database/models_v2/news_feed/news_feeds_post');
const error_log = require('../../../../middelware/error_log');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (news_feed_post_id, merchant_detail_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            const news_feeds_post = await news_feeds_post_model.findOne({
                where: {
                    id: news_feed_post_id,
                    merchant_detail_id,
                    is_active: 1
                }
            });
            if (!news_feeds_post) {
                throw new ValidationError('you have no posts to delete');
            }
            news_feeds_post.is_active = 0;
            await news_feeds_post.save();
            resolve({ message: 'deleted news feed' })
        } catch (err) {
            error_log(err);
            reject({ message: err.message });
        }
    })
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/services/get_ugc_posts_service.js
const error_log = require("../../../../middelware/error_log");
const sequelize = require("sequelize");
const { get_ugc_news_feed } = require("../../../../data_abstraction_layer/news_feed/news_feed_posts");
const get_merchant_occupation = require("../../../../data_abstraction_layer/merchant/get_merchant_occupation");

module.exports = async(status,page_no=1,limit=20) => {
        try {
            let offset = (page_no - 1) * limit;
           let ugc_posts=await get_ugc_news_feed({status,limit,offset});
           let response={count:0,ugc_news_feed:[]};
           if(ugc_posts?.count)
           {
            response.count=ugc_posts?.count
           }
           // format the response
           for(let i=0;i<ugc_posts.rows.length;i++)
           {
            let merchant_occupation=await get_merchant_occupation(ugc_posts?.rows[i]?.merchant_detail_id);
            response.ugc_news_feed.push({
                "news_feed_post_id": ugc_posts?.rows[i]?.id,
                "merchant_detail_id": ugc_posts?.rows[i]?.merchant_detail_id,
                "merchant_name": ugc_posts.rows[i]?.merchant_detail?.name,
                "merchant_occupation": merchant_occupation?.occupation_id,
                "long_description": ugc_posts.rows[i].news_feed_contents[0]?.long_description,
                "status":ugc_posts?.rows[i]?.status
            })
           }
           return response;
        }
        catch (err) {
            error_log(err);
            return({count:0,ugc_news_feed:[]});
        }
}




File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/services/fetch_news_feed_tags_by_news_feed_id_service.js
const { get_news_feed_tags_by_id,get_tags_mapping_by_news_feed_id } = require("../../../../data_abstraction_layer/news_feed/news_feed_tags");
const error_log = require("../../../../middelware/error_log");
module.exports = async (news_feed_post_id) => {
    try {
        // abstraction layer to fetch tags by news feed id
        let tags_mapping=await get_tags_mapping_by_news_feed_id({news_feed_post_id});
        let tag_map_reponse=await Promise.all(tags_mapping.map(async (ele)=>{
            let tags=await get_news_feed_tags_by_id({id:ele?.tag_id});
            return {
                id:tags?.id,
                tag_name_english:tags?.tag_name_english,
            }
        }))
        return tag_map_reponse;
    }
    catch (err) {
        error_log(err);
        return [];
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/services/edit_map_news_feed_tags_service.js
const error_log = require("../../../../middelware/error_log");
const { edit_news_feed_tag_mapping } = require("../../../../data_abstraction_layer/news_feed/news_feed_tags");

module.exports = async (news_feed_post_id,tags) => {
    try {

        // abstraction layer to edit tags mapping (will delete previous tags and add new ones)
        let edit_tag_mapping=await edit_news_feed_tag_mapping({news_feed_post_id,list_of_tags:tags});
        return edit_tag_mapping;
    }
    catch (err) {
        error_log(err);
        return null;
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/services/edit_news_feed_pages_service.js
const {
    get_news_feed_page_by_id, get_news_feed_vernacular_page
} = require('../../../../data_abstraction_layer/news_feed/news_feed_pages');
const error_log = require('../../../../middelware/error_log');
const news_feed_categories_vernacular_metadata_model = require('../../../../database/models_v2/news_feed/news_feed_category_vernacular_metadata');
const news_feed_catagories_model = require('../../../../database/models/news_feed_catagories');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (
    page_id,
    name,
    image_url,
    language_id,
    is_enabled,
    is_verified,
    created_by,
    user_role_id
) => {
    try {
    // abstraction layer which will fetch news feed page by id and user_role and created_by
        const page_detail_exists = await get_news_feed_page_by_id({
            page_id,
            created_by,
            user_role_id
        });
        if (!page_detail_exists) {
            throw new ValidationError(
                "page not found or you don't have acces to edit this page"
            );
        }
        if (name) {
            // find the vernacular data
            const vernacular_page_data = await get_news_feed_vernacular_page({ page_id, language_id });
            // if found then update else create
            if (vernacular_page_data) {
                // update page name for language id
                await news_feed_categories_vernacular_metadata_model.update(
                    {
                        name
                    },
                    {
                        where: {
                            language_id,
                            news_feed_category_id: page_id,
                            is_active: 1
                        }
                    }
                );

            } else {
                const vernacular_obj = {
                    language_id,
                    name,
                    is_active: 1,
                    news_feed_category_id: page_id
                }
                // create vernacular data
                await news_feed_categories_vernacular_metadata_model.create(vernacular_obj);
            }
        }
        // update image_url ,is_enabled,is_verified . it will be updated if coming in parameter
        await news_feed_catagories_model.update(
            {
                image_url,
                is_enabled,
                is_verified
            },
            {
                where: {
                    id: page_id,
                    is_active: 1
                }
            }
        );
        return page_detail_exists;
    } catch (err) {
        error_log(err);
        throw err;
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/services/create_news_feed_tags_service.js
const { create_news_feed_tags } = require("../../../../data_abstraction_layer/news_feed/news_feed_tags");
const error_log = require("../../../../middelware/error_log");
module.exports = async (tag_names) => {
    try {
        // abstraction layer to create tags 
        let tags_created=await create_news_feed_tags({tag_names});
        return tags_created;
    }
    catch (err) {
        error_log(err);
        return null;
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/services/fetch_news_feed_tags_service.js
const { get_news_feed_tags } = require("../../../../data_abstraction_layer/news_feed/news_feed_tags");
const error_log = require("../../../../middelware/error_log");
module.exports = async (page_no,limit) => {
    try {
        let offset = (page_no - 1) * limit;
        // abstraction layer to fetch tags 
        let tags_created=await get_news_feed_tags({offset,limit,attributes:["tag_name_english"]});
        return {tags:tags_created.rows,count:tags_created.count};
    }
    catch (err) {
        error_log(err);
        return {tags:[],count:0};
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/services/update_ugc_posts_service.js
const error_log = require("../../../../middelware/error_log");
const { update_ugc_news_post_status } = require("../../../../data_abstraction_layer/news_feed/news_feed_posts");
const save_content_moderation_logs_service = require("../../../../common_services/content_moderation/save_content_moderation_logs_service");

module.exports = async (news_feed_post_id,status,user_profile_id) => {
    try {

        // abs layer for updating the ugc news feed post status
        let updated_ugc_posts=await update_ugc_news_post_status({news_feed_post_id,status});
        await save_content_moderation_logs_service({news_feed_post_id,news_feed_post_status:status,user_profile_id})
        return updated_ugc_posts;
    }
    catch (err) {
        error_log(err);
        return null;
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/services/fetch_news_feed_app_service.js
const error_log = require('../../../../middelware/error_log');
const NewsFeedManager = require('../../../../common_services/news_feed/NewsFeedManager');

const fetch_news_feed_app_service = async ({ country_id, state_id, page_no, limit, search_for, language, tags = [], merchant_detail_id, guest_user_b2c_apps_id, page_id }) => {
    try {
        /* `const newsFeedManager = new NewsFeedManager();` is creating a new instance of the
        `NewsFeedManager` class. This allows you to access the methods and properties defined within
        the `NewsFeedManager` class by using the `newsFeedManager` object. */
        const newsFeedManager = new NewsFeedManager();
        const NewsFeed = await newsFeedManager.fetchNewsFeedApp(country_id, state_id, page_no, limit, search_for, language, tags, merchant_detail_id, guest_user_b2c_apps_id, page_id);
        return await NewsFeed;
    } catch (err) {
        error_log(err);
        return { rows: [], count: 0 }
    }
}

module.exports = fetch_news_feed_app_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/news_feed/services/create_news_feed_post_v3_service.js
const error_log = require('../../../../middelware/error_log');
const sequelize = require('../../../../database/db_connection_initializer');
const { create_news_feed_posts } = require('../../../../data_abstraction_layer/news_feed/news_feed_posts');
const map_news_feed_to_master_state_and_district = require('../../../../entities_v2/news_feed/service/panel_services/map_news_feed_to_master_state_and_district');
const { get_news_feed_page_by_id } = require('../../../../data_abstraction_layer/news_feed/news_feed_pages');
const { get_districts } = require('../../../../data_abstraction_layer/location/get_districts');
const map_news_feed_to_state_and_district = require('../../../../entities_v2/news_feed/service/panel_services/map_news_feed_to_state_and_district');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (user_profile_id, heading, page_id, content_type, master_state_district_mapping) => {
    try {
        const result = await sequelize.transaction(async (t) => {
            // look for page_id if not exists then throw error not found else if exists and if is_enabled =0 then
            // throw error page is currently disbled
            const news_feed_page_detail = await get_news_feed_page_by_id({ page_id });
            if (!news_feed_page_detail) {
                throw new ValidationError('page not found ');
            } else {
                if (!news_feed_page_detail?.is_enabled) { throw new ValidationError('page is currently disbled'); }
            }
            // create news feed
            const news_feed_post = await create_news_feed_posts({ user_profile_id, heading, page_id, content_type, transaction: t });
            if (!news_feed_post) {
                throw new ValidationError('cannot create news feed post');
            }
            // map news feed with master_state_district
            await map_news_feed_to_master_state_and_district(news_feed_post.id, master_state_district_mapping, t);
            let districts;
            if (master_state_district_mapping?.length) {
                districts = await get_districts({ master_state_ids: master_state_district_mapping.state_id });
                if (districts?.length) { await map_news_feed_to_state_and_district(news_feed_post.id, districts, t); }
            } else { await map_news_feed_to_state_and_district(news_feed_post.id, [], t) }

            return news_feed_post;
        })
        return result;
    } catch (err) {
        error_log(err);
        throw (err);
    }
}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/sales_order/swagger/index.js
module.exports = {
    tags: {
        name: "sales_order",
    },
    paths: {
        "/": {
            post: {
                tags: ["sales_order"],
                summary: "add_sales_order",
                description: "",
                operationId: "add_sales_order",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "body",
                        name: "body",
                        description: "",
                        required: true,
                        schema: {
                            properties: {
                                buyerOrderId: {
                                    type: "number"
                                },
                                buyerId: {
                                    type: "number"
                                },
                                orderQuantityInTon: {
                                    type: "number"
                                },
                                buyerOfferingPriceQuintal: {
                                    type: "number"
                                },
                                deliveryInfo: {
                                    properties: {
                                        address: {
                                            type: "string"
                                        },
                                        pincode: {
                                            type: "string"
                                        },
                                        district: {
                                            type: "string"
                                        },
                                        state: {
                                            type: "string"
                                        },
                                        image: {
                                            type: "string"
                                        }
                                    }
                                },
                                cropId: {
                                    type: "number"
                                },
                                varietyId: {
                                    type: "number"
                                },
                                expDeliveryIn: {
                                    type: "number"
                                },
                                packagingType: {
                                    type: "number"
                                },
                                fullfillmentType: {
                                    type: "number"
                                },
                                qualityChecks: {
                                    type: "array",
                                    items: {
                                        properties: {
                                            id: {
                                                type: "number"
                                            },
                                            qc_type_id: {
                                                type: "number"
                                            },
                                            name: {
                                                type: "string"
                                            },
                                            requiredValue: {
                                                type: "string"
                                            }
                                        }
                                    }
                                },
                                licenceNumber: {
                                    type: "string"
                                },
                                buyerFacilityGst: {
                                    type: "string"
                                },
                                cashDiscountPercent: {
                                    type: "number"
                                },
                                bagDeductionPercent: {
                                    type: "number"
                                },
                                soRepaymentTimeline: {
                                    type: "number"
                                },
                                isInvoiceOnGross: {
                                    type: "boolean"
                                },
                                invoiceSharing: {
                                    type: "number"
                                },
                                unloadingCharges: {
                                    type: "number"
                                },
                                brokerageCharges: {
                                    type: "number"
                                },
                                netPrice: {
                                    type: "number"
                                },
                                eInvoiceRequired: {
                                    type: "boolean"
                                },
                                isCreditLimitExceed: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        }
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/sales_order/index.js
const add_sales_order_controller = require("./controllers/add_sales_order_controller");
const router = require("express").Router();

router.post("/", add_sales_order_controller); 

module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/sales_order/controllers/add_sales_order_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const joi = require('joi');
const { add_sales_order_service } = require('../services/add_sales_order_service');
const { orderPackagingType, orderFullfillmentType } = require('../../../../enums/market_linkage/enums/buyerEnum');
const { ValidationError } = require('../../../../utilities/error/custom_error');

module.exports = async (req, res) => {
    try {
        const validation_result = sales_order_schema.validate(req.body);
        if (validation_result.error) throw new ValidationError(validation_result.error.message);
        const {
            buyerOrderId,
            buyerId,
            deliveryInfo,
            orderQuantityInTon,
            buyerOfferingPriceQuintal,
            cropId,
            varietyId,
            expDeliveryIn,
            packagingType,
            fullfillmentType,
            qualityChecks,
            licenceNumber,
            buyerFacilityGst,
            cashDiscountPercent,
            bagDeductionPercent,
            soRepaymentTimeline,
            isInvoiceOnGross,
            invoiceSharing,
            unloadingCharges,
            brokerageCharges,
            netPrice,
            eInvoiceRequired,
            isCreditLimitExceed
        } = validation_result.value;

        const { user } = req;
        if (!user || !user.user_profile_id) {
            throw new ValidationError('unauthorised access')
        }
        const added_sales_order = await add_sales_order_service(
            buyerOrderId,
            buyerId,
            deliveryInfo,
            orderQuantityInTon,
            buyerOfferingPriceQuintal,
            cropId,
            varietyId,
            expDeliveryIn,
            packagingType,
            fullfillmentType,
            qualityChecks,
            licenceNumber,
            buyerFacilityGst,
            cashDiscountPercent,
            bagDeductionPercent,
            soRepaymentTimeline,
            isInvoiceOnGross,
            invoiceSharing,
            unloadingCharges,
            brokerageCharges,
            netPrice,
            eInvoiceRequired,
            user.user_profile_id,
            isCreditLimitExceed
        );
        const added_sales_order_response = create_api_response(true, 'successfull', added_sales_order);
        return res.status(http_status_code_enum.ok).json(added_sales_order_response);
    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}

const delivery_info_schema = {
    address: joi.string().trim().required(),
    // pincode always be of 6 digit
    pincode: joi
        .string()
        .trim()
        .length(6)
        .regex(/^[0-9]+$/)
        .required(),
    district: joi.string().trim().required(),
    state: joi.string().trim().required(),
    image: joi
        .string()
        .trim()
        .uri({ scheme: ['http', 'https'] })
};

const quality_check_schema = {
    id: joi.number(),
    qc_type_id: joi.number().required(),
    name: joi.string().trim().required(),
    requiredValue: joi.string().trim().required()
};

const sales_order_schema = joi.object({
    buyerOrderId: joi.number(),
    buyerId: joi.number().required(),
    deliveryInfo: joi.object({ ...delivery_info_schema }).required(),
    orderQuantityInTon: joi.number().positive().required(),
    buyerOfferingPriceQuintal: joi.number().positive().required(),
    expDeliveryIn: joi.number().positive().required(),
    packagingType: joi
        .number()
        .equal(...Object.values(orderPackagingType))
        .required(),
    fullfillmentType: joi
        .number()
        .equal(...Object.values(orderFullfillmentType))
        .required(),
    cropId: joi.number().required(),
    varietyId: joi.number().required(),
    qualityChecks: joi
        .array()
        .items({ ...quality_check_schema })
        .required(),
    licenceNumber: joi.string().trim().required(),
    buyerFacilityGst: joi.string().trim().required(),
    cashDiscountPercent: joi.number().min(0).max(99).required(),
    bagDeductionPercent: joi.number().min(0).max(99).required(),
    soRepaymentTimeline: joi.number().min(0),
    isInvoiceOnGross: joi.boolean(),
    invoiceSharing: joi.number(),
    unloadingCharges: joi.number().required(),
    brokerageCharges: joi.number().required(),
    netPrice: joi.number().required(),
    eInvoiceRequired: joi.boolean(),
    isCreditLimitExceed: joi.boolean().required()
});



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/sales_order/services/add_sales_order_service.js
const { generate_unique_id } = require('../../../../common_services/unique_id_generation/generate_unique_id');
const { orderStatus } = require('../../../../enums/market_linkage/enums/buyerEnum');
const { categories } = require('../../../../enums/market_linkage/enums/categories');
const error_log = require('../../../../middelware/error_log');
const buyer_detail_model = require('../../../../database/models_v2/buyer/buyer_detail');
const crop_detail_model = require('../../../../database/models_v2/crop/crop_detail');
const crop_varieties_detail_model = require('../../../../database/models_v2/crop/crop_varieties_detail');
const buyer_order_detail_model = require('../../../../database/models_v2/buyer_order/buyer_order_detail');
const buyer_order_crop_info_model = require('../../../../database/models_v2/buyer_order/buyer_order_crop_info');
const master_state_model = require('../../../../database/models_v2/location/master_state');
const master_district_model = require('../../../../database/models_v2/location/master_district');
const buyer_order_delivery_info_model = require('../../../../database/models_v2/buyer_order/buyer_order_delivery_info');
// const qc_param_types_model = require('../../../../database/models_v2/procurement_order/qc_param_types');
const buyer_order_quality_check_model = require('../../../../database/models_v2/buyer_order/buyer_order_quality_check');
const http_status_codes = require('../../../../entities_v2/metadata/enums/global/http_status_codes');
const { fetch_sales_order_service } = require('../../../v2/sales_order/services/fetch_sales_order_service');
const buyer_approval_check = require('../../../../data_abstraction_layer/sales_order/buyer_approval_check');
const check_permission_on_buyer = require('../../../../data_abstraction_layer/buyer/check_permission_on_buyer');
const buyer_permission_enum = require('../../../../enums/market_linkage/enums/buyerEnum').PERMISSIONS;
const { ValidationError } = require('../../../../utilities/error/custom_error');

const add_sales_order_service = (
    buyerOrderId,
    buyerId,
    deliveryInfo,
    orderQuantityInTon,
    buyerOfferingPriceQuintal,
    cropId,
    varietyId,
    expDeliveryIn,
    packagingType,
    fullfillmentType,
    qualityChecks,
    licenceNumber,
    buyerFacilityGst,
    cashDiscountPercent,
    bagDeductionPercent,
    soRepaymentTimeline,
    isInvoiceOnGross,
    invoiceSharing,
    unloadingCharges,
    brokerageCharges,
    netPrice,
    eInvoiceRequired,
    user_profile_id,
    isCreditLimitExceed
) => {
    return new Promise(async (resolve, reject) => {
        try {
            let sales_order_data = {
                farmart_id: '',
                buyer_name: '',
                order_quantity_in_ton: orderQuantityInTon,
                buyer_offering_price_quintal: buyerOfferingPriceQuintal,
                exp_delivery_in: expDeliveryIn,
                packaging_type: packagingType,
                fullfillment_type: fullfillmentType,
                status: orderStatus.SO_CREATED,
                remaining_quantity: orderQuantityInTon,
                licence_number: licenceNumber,
                buyer_facility_gst: buyerFacilityGst,
                cash_discount_percent: cashDiscountPercent,
                bag_deduction_percent: bagDeductionPercent,
                so_repayment_timeline: soRepaymentTimeline,
                is_invoice_on_gross: isInvoiceOnGross,
                invoice_sharing: invoiceSharing,
                unloading_charges: unloadingCharges,
                brokerage_charges: brokerageCharges,
                net_price: netPrice,
                e_invoice_required: eInvoiceRequired ?? false,
                is_active: true,
                buyer_id: buyerId,
                placed_by: user_profile_id,
                is_credit_limit_exceed: isCreditLimitExceed
            }
            const is_buyer_approved = await buyer_approval_check(buyerId);
            const is_buyer_so_approved = await check_permission_on_buyer(buyerId, buyer_permission_enum.CREATE_ORDER);
            if (!is_buyer_approved) {
                throw new ValidationError('Buyer is not approved');
            }
            if (!is_buyer_so_approved) { throw new ValidationError('buyer suspended from creating orders'); }

            if (buyerOrderId) {
                sales_order_data = await buyer_order_detail_model.findOne({
                    where: {
                        id: buyerOrderId,
                        is_active: true
                    }
                });
                sales_order_data.order_quantity_in_ton = orderQuantityInTon;
                sales_order_data.buyer_offering_price_quintal = buyerOfferingPriceQuintal;
                sales_order_data.exp_delivery_in = expDeliveryIn;
                sales_order_data.packaging_type = packagingType;
                sales_order_data.fullfillment_type = fullfillmentType;
                sales_order_data.remaining_quantity = orderQuantityInTon;
                sales_order_data.licence_number = licenceNumber;
                sales_order_data.buyer_facility_gst = buyerFacilityGst;
                sales_order_data.cash_discount_percent = cashDiscountPercent;
                sales_order_data.bag_deduction_percent = bagDeductionPercent;
                sales_order_data.so_repayment_timeline = soRepaymentTimeline;
                sales_order_data.is_invoice_on_gross = isInvoiceOnGross;
                sales_order_data.invoice_sharing = invoiceSharing;
                sales_order_data.unloading_charges = unloadingCharges;
                sales_order_data.brokerage_charges = brokerageCharges;
                sales_order_data.net_price = netPrice;
                sales_order_data.e_invoice_required = eInvoiceRequired ?? false;
                sales_order_data.status = orderStatus.SO_CREATED;
                sales_order_data.is_credit_limit_exceed = isCreditLimitExceed;
            }
            if (!sales_order_data.farmart_id) {
                const uniqueIdResult = await generate_unique_id({
                    state: deliveryInfo?.state,
                    district: deliveryInfo?.district,
                    category: categories.SalesOrder
                });
                if (uniqueIdResult.status === http_status_codes.internal_server_error) {
                    throw new ValidationError(uniqueIdResult.data.error);
                }
                sales_order_data.farmart_id = uniqueIdResult.data;
            }

            const [crop, variety, buyer] = await Promise.all([
                crop_detail_model.findOne({
                    where: {
                        id: cropId,
                        is_active: true
                    }
                }),
                crop_varieties_detail_model.findOne({
                    where: {
                        id: varietyId,
                        is_active: true
                    }
                }),
                buyer_detail_model.findOne({
                    where: {
                        id: buyerId,
                        is_active: true
                    }
                })
            ]);
            if (!crop) throw new ValidationError('invalid crop id');
            if (!variety) throw new ValidationError('invalid variety id');
            if (!buyer) throw new ValidationError('invalid buyer id');
            sales_order_data.buyer_name = buyer.trader_name;

            let added_order;
            if (buyerOrderId) {
                added_order = await sales_order_data.save();
            } else {
                added_order = await buyer_order_detail_model.build(sales_order_data).save();
            }
            await Promise.all([
                add_order_crop_info({
                    cropId: crop.id,
                    cropName: crop.name || '',
                    varietyId: variety.id,
                    varietyName: variety.name || ''
                }, added_order.id),
                add_order_delivery_info(deliveryInfo, added_order.id),
                add_quality_checks(qualityChecks, added_order.id)
            ])
            const response = await fetch_sales_order_service(null, added_order.id);
            return resolve(response.buyer_orders[0]);
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

const add_order_crop_info = async (crop_info, buyer_order_id) => {
    // eslint-disable-next-line no-useless-catch
    try {
        let order_crops_data = await buyer_order_crop_info_model.findOne({
            where: {
                is_active: true,
                buyer_order_id
            }
        });
        if (order_crops_data) {
            order_crops_data.crop_name = crop_info.cropName;
            order_crops_data.crop_id = crop_info.cropId;
            order_crops_data.variety_name = crop_info.varietyName;
            order_crops_data.variety_id = crop_info.varietyId;
            await order_crops_data.save();
        } else {
            order_crops_data = {
                crop_name: crop_info.cropName,
                crop_id: crop_info.cropId,
                buyer_order_id,
                variety_name: crop_info.varietyName,
                variety_id: crop_info.varietyId,
                is_active: true
            }
            await buyer_order_crop_info_model.build(order_crops_data).save();
        }
    } catch (err) {
        throw err;
    }
}

const add_quality_checks = async (quality_checks, buyer_order_id) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const buyer_quality_checks = await buyer_order_quality_check_model.findAll({
            where: {
                is_active: true,
                buyer_order_id
            }
        });
        for (let index = 0; index < buyer_quality_checks.length; index++) {
            const qc = buyer_quality_checks[index];
            const new_qc = quality_checks.find((nqc) => nqc.qc_type_id === qc.qc_type_id);
            if (new_qc) {
                if (new_qc.requiredValue !== qc.required_value) {
                    qc.required_value = new_qc.requiredValue;
                    await qc.save();
                }
                quality_checks = quality_checks.filter((doc) => doc.qc_type_id !== new_qc.qc_type_id);
            } else {
                qc.is_active = false;
                await qc.save();
            }
        }
        const qc_to_be_added = quality_checks.map((qc) => {
            return {
                qc_type_id: qc.qc_type_id,
                buyer_order_id,
                required_value: qc.requiredValue,
                is_active: true
            }
        })

        await buyer_order_quality_check_model.bulkCreate(qc_to_be_added);
    } catch (err) {
        throw err;
    }
}

const add_order_delivery_info = async (delivery_info, buyer_order_id) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const state_data = await master_state_model.findOne({
            where: {
                name: delivery_info.state,
                is_active: true
            }
        });
        const district_data = await master_district_model.findOne({
            where: {
                name: delivery_info.district,
                master_state_id: state_data?.id || null,
                is_active: true
            }
        });
        let order_delivery_data = await buyer_order_delivery_info_model.findOne({
            where: {
                is_active: true,
                buyer_order_id
            }
        })
        if (order_delivery_data) {
            order_delivery_data.address = delivery_info.address;
            order_delivery_data.pincode = delivery_info.pincode;
            order_delivery_data.state_name = delivery_info.state;
            order_delivery_data.state_id = state_data?.id || null;
            order_delivery_data.district_name = delivery_info.district;
            order_delivery_data.district_id = district_data?.id || null;
            order_delivery_data.image = delivery_info.image || null;
            await order_delivery_data.save();
        } else {
            order_delivery_data = {
                address: delivery_info.address,
                pincode: delivery_info.pincode,
                buyer_order_id,
                state_name: delivery_info.state,
                state_id: state_data?.id || null,
                district_name: delivery_info.district,
                district_id: district_data?.id || null,
                image: delivery_info.image || null,
                is_active: true
            }
            await buyer_order_delivery_info_model.build(order_delivery_data).save();
        }
    } catch (err) {
        throw err;
    }
}

module.exports = {
    add_sales_order_service,
    add_order_crop_info,
    add_quality_checks,
    add_order_delivery_info
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/bucket_testing/swagger/index.js
module.exports = {
  tags: {
    name: "bucket_testing",
  },
  paths: {
    "/marketing_sections": {
      get: {
        tags: ["bucket_testing"],
        summary: "get order of marketing sections",
        description: "",
        operationId: "get_marketing_sections_order",
        security: [{ Bearer: ["read"] }],
        parameters: [],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
  },
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/bucket_testing/index.js
const router = require("express").Router();
const authorize = require("../../../middelware/authorized_routes");
const user_roles_enum = require("../../../entities/metadata/enums/user_roles");
const get_marketing_sections_order_controller = require("./controllers/get_marketing_sections_order");

router.get("/marketing_sections",authorize([user_roles_enum.Merchant]),get_marketing_sections_order_controller);

module.exports = router;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/bucket_testing/controllers/get_marketing_sections_order.js
const error_log = require("../../../../middelware/error_log");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const http_status_code_enum = require("../../../../enums/global/http_status_codes");
const get_marketing_sections_order_service = require("../services/get_marketing_sections_order_service");
const country_code_enum = require("../../../../enums/global/country_code");

module.exports = async (req, res) => {
    try {
        const merchant_detail_id = +req.user.user_profile_id;
        const country_code = req.user.country?.country_code || country_code_enum.india;
        const marketing_section_order = await get_marketing_sections_order_service(merchant_detail_id, country_code);
        return res.status(http_status_code_enum.ok).json(create_api_response(true, "success", { marketing_section_order }));
    }
    catch (err) {
        error_log(err);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message, null));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/bucket_testing/services/get_marketing_sections_order_service.js
const error_log = require("../../../../middelware/error_log");
const master_merchant_detail_model = require("../../../../database/models_v2/merchant/master_merchant_detail");
const marketing_section_order_enum = require("../../../../enums/retailer_homepage/marketing_section_order_enum");
const marketing_section_order_mongo_model = require("../../../../database/mongoose/mongoose_models/bench_testing/marketing_screen_section_orders");
const read_mongo_document = require("../../../../database/mongoose/read_document");
const country_code_enum = require("../../../../enums/global/country_code");
const remove_sell_crop_wrt_banner = require("../../../v4/bucket_testing/services/remove_sell_crop_wrt_banner");

const bangladesh_exclusion = ["gamification", "sell_crops", "quiz", "price_polling"]

module.exports = async (merchant_detail_id, country_code) => {
  try {
    const master_merchant_detail = await master_merchant_detail_model.findOne({
      where: {
        merchant_detail_id,
        is_active: 1
      }
    });
    let section = '';
    if (master_merchant_detail) {
      const marketing_section_order = await read_mongo_document(marketing_section_order_mongo_model, {
        id: marketing_section_order_enum.retailer_onboarded_on_ml,
        is_active: 1
      });
      if (marketing_section_order?.length)
        section = marketing_section_order[0].sections
    }
    else {
      const marketing_section_order = await read_mongo_document(marketing_section_order_mongo_model, {
        id: marketing_section_order_enum.only_retailer,
        is_active: 1
      });
      if (marketing_section_order?.length)
        section = marketing_section_order[0].sections

    }
    // const banner_active = await is_banner_active(merchant_detail_id);
    // if (!banner_active)
    //   section = section.filter(ele => ele != "sell_crops")

    section = await remove_sell_crop_wrt_banner(merchant_detail_id, section);

    if (country_code == country_code_enum.bangladesh)
      section = section.filter(item => !bangladesh_exclusion.includes(item))
    return {
      sections: section
    }
  } catch (err) {
    error_log(err);
    return {
      sections: []
    };
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/buyer/swagger/index.js
module.exports = {
  tags: {
    name: "buyer",
  },
  paths: {
    "/order": {
      get: {
        tags: ["buyer"],
        summary: "get all buyer order",
        description: "",
        operationId: "get_all_buyer_order",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "query",
            name: "limit",
            description: "",
            type: "number",
            required: false
          },
          {
            in: "query",
            name: "page",
            description: "",
            type: "number",
            required: false
          }
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          }
        }
      }
    },
    "/order/rpm/{buyer_order_id}": {
      get: {
        tags: ["buyer"],
        summary: "get all rpm for mapping",
        description: "",
        operationId: "get_rpm_for_mapping",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            "in": "path",
            "name": "buyer_order_id",
            "description": "",
            "required": true
          }
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          }
        }
      }
    },
    "/order/so-target": {
      post: {
        tags: ["buyer"],
        summary: "create so target",
        description: "",
        operationId: "create_target_price",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["buyer_order_id", "so_target"],
              "properties": {
                "buyer_order_id": {
                  "type": "number"
                },
                "so_target": {
                  "type": "array",
                  "items": {
                    "required": [, "rpm_id", "target_margin"],
                    "properties": {
                      "rpm_id": {
                        "type": "number"
                      },
                      "target_margin": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        responses: {
          400: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          }
        }
      }
    }
  }
};


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/buyer/index.js
const router = require("express").Router();

const create_target_price_controller = require("./controllers/create_target_price_controller");
const fetch_rm_sales_list_controller = require("./controllers/fetch_rm_sales_list");
const get_all_buyer_order_controller = require("./controllers/get_all_buyer_order_controller");
const get_rpm_for_mapping_controller = require("./controllers/get_rpm_for_mapping_controller.js");

router.get("/order", get_all_buyer_order_controller);
router.get("/order/rpm/:buyer_order_id", get_rpm_for_mapping_controller);
router.post("/order/so-target", create_target_price_controller);
router.get("/rm_sales_list", fetch_rm_sales_list_controller)

module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/buyer/controllers/get_all_buyer_order_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const { get_all_buyer_order_service } = require("../services/get_all_buyer_order_service");

module.exports = async (req, res) => {
    try {
        let { page, limit } = req.query;
        limit = (limit && parseInt(limit) <= 50) ? parseInt(limit) : 50;
        page = page ? parseInt(page) : 1;

        const buyer_orders = await get_all_buyer_order_service(page, limit);
        let response = create_api_response(true, "success", buyer_orders);
        res.status(http_status_code_enum.ok).json(response);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/buyer/controllers/get_rpm_for_mapping_controller.js.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");
const { get_rpm_for_mapping_service } = require("../services/get_rpm_for_mapping_service");

module.exports = async (req, res) => {
    try {
        const { buyer_order_id } = req.params;
        const rpms = await get_rpm_for_mapping_service(buyer_order_id);
        let response = create_api_response(true, "success", rpms);
        res.status(http_status_code_enum.ok).json(response);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/buyer/controllers/fetch_rm_sales_list.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const fetch_rm_sales_list_service = require("../services/fetch_rm_sales_list_service");

const fetch_rm_sales_list_controller = async (req,res) => {

    try {

        const response = await fetch_rm_sales_list_service()

        if(response.status === false)
            return res.status(http_status_code_enum.internal_server_error).json(response)

        return res.status(http_status_code_enum.ok).json(response)
        
    } catch (error) {
        error_log(error)
        return res.status(http_status_code_enum.internal_server_error).json({status:false, data: {}, message: error.message})
    }

}

module.exports = fetch_rm_sales_list_controller


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/buyer/controllers/create_target_price_controller.js
const error_log = require("../../../../middelware/error_log");
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const {create_target_price_service} = require("../services/create_target_price_service");
const create_api_response = require("../../../../common_services/api_responses/create_api_response");

module.exports = async (req, res) => {
    try {
        const { buyer_order_id, so_target } = req.body;
        const so_target_price = await create_target_price_service(buyer_order_id, so_target);
        let response = create_api_response(true, "success", so_target_price);
        res.status(http_status_code_enum.ok).json(response);
    }
    catch (err) {
        error_log(err);
        res.status(http_status_code_enum.bad_request).json(create_api_response(false, err.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/buyer/services/create_target_price_service.js
const buyer_order_detail = require('../../../../database/models_v2/buyer_order/buyer_order_detail');
const so_fulfillment_target_detail = require('../../../../database/models_v2/buyer_order/so_fulfillment_target_detail');
const error_log = require('../../../../middelware/error_log');
const { ValidationError } = require('../../../../utilities/error/custom_error');

const create_target_price_service = (buyer_order_id, so_target = []) => {
    return new Promise(async (resolve, reject) => {
        try {
            const buyer_order = await buyer_order_detail.findOne({
                where: {
                    id: buyer_order_id,
                    is_active: 1
                }
            });
            if (!buyer_order) throw new ValidationError('sales order not found');
            const targets = await so_fulfillment_target_detail.findAll({
                where: {
                    buyer_order_id: buyer_order.id,
                    is_active: 1
                }
            });

            for (let i = 0; i < targets.length; i++) {
                targets[i].is_active = 0;
                await targets[i].save();
            }

            for (const target of so_target) {
                const margin_percent_amount = (buyer_order.buyer_offering_price_quintal * target.target_margin) / 100;
                const target_price = buyer_order.buyer_offering_price_quintal - Math.round(margin_percent_amount);
                const so_target_data = targets.find((so_target) => so_target.rpm_id === target.rpm_id);

                if (!so_target_data || (so_target_data.target_margin !== target.target_margin)) {
                    await so_fulfillment_target_detail.build({
                        ...target,
                        offering_price: buyer_order.buyer_offering_price_quintal,
                        target_price,
                        buyer_order_id,
                        is_active: 1
                    }).save();
                } else {
                    so_target_data.is_active = 1;
                    await so_target_data.save();
                }
            }

            return resolve(true);
        } catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    });
};

module.exports = {
    create_target_price_service
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/buyer/services/get_all_buyer_order_service.js
const user_profile = require('../../../../database/models/user_profile');
const buyer_order_crop_info = require('../../../../database/models_v2/buyer_order/buyer_order_crop_info');
const buyer_order_delivery_info = require('../../../../database/models_v2/buyer_order/buyer_order_delivery_info');
const buyer_order_detail = require('../../../../database/models_v2/buyer_order/buyer_order_detail');
const buyer_order_quality_check = require('../../../../database/models_v2/buyer_order/buyer_order_quality_check');
const qc_param_types = require('../../../../database/models_v2/procurement_order/qc_param_types');
const error_log = require('../../../../middelware/error_log');

const get_all_buyer_order_service = (page, limit) => {
    return new Promise(async (resolve, reject) => {
        try {
            const order_data = await buyer_order_detail.findAndCountAll({
                where: {
                    is_active: true
                },
                include: [
                    {
                        model: buyer_order_crop_info,
                        where: {
                            is_active: true
                        },
                        required: false,
                        as: 'crop_info'
                    },
                    {
                        model: buyer_order_delivery_info,
                        where: {
                            is_active: true
                        },
                        required: false,
                        as: 'delivery_info'
                    },
                    {
                        model: buyer_order_quality_check,
                        where: {
                            is_active: true
                        },
                        required: false,
                        include: [
                            {
                                model: qc_param_types,
                                where: {
                                    is_active: true
                                },
                                required: false
                            }
                        ],
                        as: 'quality_checks'
                    },
                    {
                        model: user_profile,
                        where: {
                            is_active: true
                        },
                        required: true,
                        as: 'placed_by_user'
                    }
                ],
                distinct: ['id'],
                limit,
                offset: ((page - 1) * limit) || 0
            });

            const buyer_orders = generate_reponse(order_data.rows);
            return resolve({
                buyer_orders,
                total_records: order_data.count
            });

        } catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    });
};

const generate_reponse = (order_data) => {
    // eslint-disable-next-line no-useless-catch
    try {
        const response = order_data.map((order) => {
            const expDeliveryInDate = new Date(order.createdAt);
            expDeliveryInDate.setDate(
                expDeliveryInDate.getDate() + order.exp_delivery_in
            );
            return {
                _id: order.id,
                farmartId: order.farmart_id,
                buyerName: order.buyer_name,
                createdAt: order.createdAt,
                remainingQuantity: order.remaining_quantity,
                cropInfo: {
                    cropId: order.crop_info?.crop_id,
                    cropName: order.crop_info?.crop_name,
                    varietyId: order.crop_info?.variety_id,
                    varietyName: order.crop_info?.variety_name
                },
                deliveryInfo: {
                    address: order.delivery_info?.address,
                    pincode: order.delivery_info?.pincode,
                    state: order.delivery_info?.state_name,
                    district: order.delivery_info?.district_name
                },
                expDeliveryIn: expDeliveryInDate.toISOString(),
                orderQuantityInTon: order.order_quantity_in_ton,
                placedBy: {
                    id: order.placed_by_user?.id,
                    name: order.placed_by_user?.name,
                    mobileNumber: order.placed_by_user?.mobile_number
                },
                buyerOfferingPriceQuintal: order.buyer_offering_price_quintal,
                status: order.status,
                targetPrice: order.target_price,
                qualityChecks: order.quality_checks?.map((qc) => {
                    return {
                        id: qc.id,
                        name: qc.qc_param_type?.name,
                        qc_type_id: qc.qc_type_id,
                        requiredValue: qc.required_value
                    }
                }),
                unloadingCharges: order.unloading_charges,
                brokerageCharges: order.brokerage_charges,
                netPrice: order.net_price
            }
        })
        return response;
    } catch (err) {
        throw err;
    }
}

module.exports = {
    get_all_buyer_order_service
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/buyer/services/fetch_rm_sales_list_service.js
const { Op } = require("sequelize")
const user_profile = require("../../../../database/models/user_profile")
const user_role = require("../../../../enums/user_profile/user_role")
const error_log = require("../../../../middelware/error_log")

const fetch_rm_sales_list_service = async () => {

    try {

        const data = {
            rm_sales_list: []
        }

        const users = await user_profile.findAll({
            where: {
                is_active: 1,
                user_role_id: { [Op.or]: [user_role.REGIONAL_MANAGER_SALES, user_role.SALES_ASSOCIATE, user_role.STATE_HEAD_SALES] }
            }
        })

        for(let i=0; i<users.length; i++){
            const user_data = users[i].dataValues
            const obj = {
                rm_sales_name: user_data.name,
                rm_sales_id: user_data.id
            }
            data.rm_sales_list.push(obj)
        }

        return {status: true, data, message: ""}
        
    } catch (error) {
        error_log(error)
        return {status: false, data: {}, message: error.message}
    }

}

module.exports = fetch_rm_sales_list_service


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/buyer/services/get_rpm_for_mapping_service.js
const user_profile = require('../../../../database/models/user_profile');
const user_roles = require('../../../../database/models/user_roles');
const buyer_order_detail = require('../../../../database/models_v2/buyer_order/buyer_order_detail');
const so_fulfillment_target_detail = require('../../../../database/models_v2/buyer_order/so_fulfillment_target_detail');
const error_log = require('../../../../middelware/error_log');

const get_rpm_for_mapping_service = (buyer_order_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            const [buyer_order, so_target_data, rpms] = await Promise.all([
                buyer_order_detail.findOne({
                    where: {
                        id: buyer_order_id,
                        is_active: 1
                    }
                }),
                so_fulfillment_target_detail.findAll({
                    where: {
                        buyer_order_id,
                        is_active: 1
                    },
                    include: [
                        {
                            model: user_profile,
                            as: "rpm",
                            include: [
                                {
                                    model: user_profile,
                                    as: "reports"
                                }
                            ]
                        }
                    ]
                }),
                user_profile.findAll({
                    where: {
                        is_active: 1
                    },
                    include: [
                        {
                            model: user_roles,
                            as: "user_role",
                            where: {
                                name: "REGIONAL_PROCUREMENT_MANAGER"
                            }
                        },
                        {
                            model: user_profile,
                            as: "reports"
                        }
                    ]
                })
            ])
            let rpm_data = so_target_data.map((target) => {
                return {
                    _id: target.rpm?.id,
                    name: target.rpm?.name,
                    reportsTo: {
                        id: target.rpm?.reports?.id,
                        name: target.rpm?.reports?.name,
                    },
                    so_price: buyer_order.buyer_offering_price_quintal,
                    target_margin: target.target_margin,
                    target_price: target.target_price,
                    isChecked: true
                }
            })
            rpm_data = rpm_data.concat(rpms
                .map((rpm) => {
                    return {
                        _id: rpm.id,
                        name: rpm.name,
                        reportsTo: {
                            id: rpm.reports?.id,
                            name: rpm.reports?.name,
                        },
                        so_price: buyer_order.buyer_offering_price_quintal,
                        isChecked: false
                    }
                }));
            rpm_data = rpm_data.filter((value, index, self) =>
                self.findIndex(v => v._id === value._id) === index
            );

            return resolve({ rpms: rpm_data });
        } catch (err) {
            error_log(err);
            return reject({ message: err.message });
        }
    });
};

module.exports = {
    get_rpm_for_mapping_service
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/retailer/swagger/index.js
module.exports = {
    tags: {
        name: "retailer",
    },
    paths: {
        "/": {
            post: {
                tags: ["retailer"],
                summary: "fetch all retailers details",
                description: "",
                operationId: "fetch_all_retailers",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "body",
                        name: "body",
                        description: "",
                        required: false,
                        schema: {
                            type: "object",
                            properties: {
                                limit: {
                                    type: "number",
                                    required: false
                                },
                                page: {
                                    type: "number",
                                    required: false
                                },
                                status: {
                                    type: "number",
                                    required: false
                                },
                                searchBy: {
                                    type: "string",
                                    required: false
                                },
                                states: {
                                    type: "array",
                                    items: {
                                        type: "number"
                                    },
                                    required: false
                                },
                                districts: {
                                    type: "array",
                                    items: {
                                        type: "number"
                                    },
                                    required: false
                                },
                                sortBy: {
                                    type: "number",
                                    required: false
                                },
                                sortOrder: {
                                    type: "number",
                                    required: false
                                },
                                retailerMappedToUser: {
                                    type: "boolean",
                                    required: false
                                },
                            }
                        }
                    },
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        },
        "/gst_pan_check": {
            get: {
                tags: ["retailer"],
                summary: "check if gst or pan already exist",
                description: "",
                operationId: "check_gst_pan_exist",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "query",
                        name: "document_type",
                        description: "",
                        type: "number",
                        required: true
                    },
                    {
                        in: "query",
                        name: "value",
                        description: "",
                        type: "string",
                        required: true
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        },
        "/retailer_app": {
            post: {
                tags: ["retailer"],
                summary: "add retailer by retailer app",
                description: "",
                operationId: "add_retailer_by_retailer_app",
                security: [{ Bearer: ["read"] }],
                parameters: [
                    {
                        in: "body",
                        name: "body",
                        description: "",
                        required: true,
                        schema: {
                            required: [
                                "name",
                                "profession_id",
                                "mobile_number",
                                "full_address",
                                "state_id",
                                "district_id",
                                "taluk_id",
                                "pincode",
                                "lat",
                                "long",
                                "accuracy",
                                "category",
                            ],
                            type: "object",
                            properties: {
                                name: {
                                    type: "string"
                                },
                                profession_id: {
                                    type: "number"
                                },
                                mobile_number: {
                                    type: "string"
                                },
                                full_address: {
                                    type: "string"
                                },
                                state_id: {
                                    type: "number"
                                },
                                district_id: {
                                    type: "number"
                                },
                                taluk_id : {
                                    type: "number"
                                },
                                pincode: {
                                    type: "string"
                                },
                                lat: {
                                    type: "string"
                                },
                                long: {
                                    type: "string"
                                },
                                accuracy: {
                                    type: "number"
                                },
                                category: {
                                    type: "number"
                                }
                            }
                        }
                    }
                ],
                responses: {
                    400: {
                        description: "Invalid input"
                    },
                    200: {
                        description: "success"
                    }
                }
            }
        }
    }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/retailer/index.js
const user_role = require("../../../enums/user_profile/user_role");
const authorize = require("../../../middelware/authorized_routes");
const add_retailer_by_retailer_app_controller = require("./controller/add_retailer_by_retailer_app_controller");
const check_gst_pan_exist_controller = require("./controller/check_gst_pan_exist_controller");
const fetch_all_retailers_controller = require("./controller/fetch_all_retailers_controller");

const router = require("express").Router();

router.post("/", fetch_all_retailers_controller);
router.get("/gst_pan_check", check_gst_pan_exist_controller);
router.post("/retailer_app", authorize([user_role.retailer_system]), add_retailer_by_retailer_app_controller);

module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/retailer/controller/add_retailer_by_retailer_app_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const joi = require("joi");
const add_retailer_by_retailer_app_service = require('../services/add_retailer_by_retailer_app_service');

module.exports = async (req, res) => {
    try {
        const validation_result = reatiler_schema.validate(req.body);
        if (validation_result.error) throw new Error(validation_result.error.message);
        const {
            name,
            profession_id,
            mobile_number,
            full_address,
            state_id,
            district_id,
            taluk_id,
            pincode,
            lat,
            long,
            accuracy,
            category
        } = validation_result.value;

        let added_retailer = await add_retailer_by_retailer_app_service({
            name,
            profession_id,
            mobile_number,
            full_address,
            state_id,
            district_id,
            taluk_id,
            pincode,
            lat,
            long, 
            accuracy,
            category
        });
        
        let added_retailer_response = create_api_response(true, "successfull", added_retailer);
        return res.status(http_status_code_enum.ok).json(added_retailer_response);
    }
    catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message));
    }
}

const reatiler_schema = joi.object({
    name: joi.string().trim().required(),
    profession_id: joi.number().required(),
    mobile_number: joi.string().trim().length(10).regex(/^[0-9]+$/).required(),
    full_address: joi.string().trim().required(),
    state_id: joi.number().positive().required(),
    district_id: joi.number().positive().required(),
    taluk_id: joi.number().positive().required(),
    pincode: joi.string().trim().length(6).regex(/^[0-9]+$/).required(),
    category: joi.number().required(),
    lat: joi.string().trim().required(),
    long: joi.string().trim().required(),
    accuracy: joi.number().required()
});


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/retailer/controller/check_gst_pan_exist_controller.js
const create_api_response = require("../../../../common_services/api_responses/create_api_response")
const http_status_codes = require("../../../../entities_v2/metadata/enums/global/http_status_codes")
const { documentNameToTypeApp } = require("../../../../enums/market_linkage/enums/procurementSources")
const error_log = require("../../../../middelware/error_log")
const check_gst_pan_exist_service = require("../services/check_gst_pan_exist_service")

module.exports = async (req,res) => {

    try {

        const {document_type, value} = req.query

        if(!document_type || !value)
            throw new Error("document_type and value are mandatory query param")

        if(parseInt(document_type) === documentNameToTypeApp['pancard'] || parseInt(document_type) === documentNameToTypeApp['gst']){
            const gst_pan_exist = await check_gst_pan_exist_service(document_type,value.toString().trim())
            const response = create_api_response(true,"successfull",gst_pan_exist)
            return res.status(http_status_codes.ok).json(response);
        }


        return res.status(http_status_codes.bad_request).json(create_api_response(false, 'document_type should be pancard or gst'));
        
    } catch (error) {

        error_log(error)
        return res.status(http_status_codes.internal_server_error).json(create_api_response(false, error.message));
        
    }

}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/retailer/controller/fetch_all_retailers_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const fetch_all_retailers_service = require('../services/fetch_all_retailers_service');
const merchant_stages = require('../../../../enums/market_linkage/enums/v2/merchant_stages');
const retailer_sort_by_enum = require('../../../../enums/market_linkage/enums/retailer_sort_by_enum');

module.exports = async (req, res) => {
    try {
        let { limit, page, status, searchBy, states, districts, 
            sortBy = retailer_sort_by_enum.updated_at, sortOrder = -1, retailerMappedToUser = false} = req.body;
        let user_profile_id;
        if(retailerMappedToUser)
            user_profile_id = req.user.user_profile_id;

        limit = (limit && parseInt(limit) <= 50 && parseInt(limit) >= 0) ? parseInt(limit) : 50;
        page = (page && parseInt(page) >= 1) ? parseInt(page) : 1;

        let search = searchBy
        let merchantStage = status

        if(status)
            merchantStage = parseInt(status)
            
        if(merchantStage && (merchantStage !== merchant_stages.APPROVED && merchantStage !== merchant_stages.DOC_REJECTED && merchantStage !== merchant_stages.PENDING_FOR_APPROVAL && merchantStage !== merchant_stages.PENDING_FOR_DOCS))
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false, "wrong status code"));

        if(search)
            search = search.toString().trim()

        if(states && !Array.isArray(states))
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false, "states must be of type array"));
 
        if(districts && !Array.isArray(districts))
            return res.status(http_status_code_enum.bad_request).json(create_api_response(false, "districts must be of type array"));
 
        let retailer_detail = await fetch_all_retailers_service({limit, page, merchantStage, search, states, districts, sortBy, sortOrder, user_profile_id});
        let retailer_detail_response = create_api_response(true, "successfull", retailer_detail);

        return res.status(http_status_code_enum.ok).json(retailer_detail_response);
    }
    catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.internal_server_error).json(create_api_response(false, ex.message));
    }
}


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/retailer/services/add_retailer_by_retailer_app_service.js
const master_merchant_detail_model = require('../../../../database/models_v2/merchant/master_merchant_detail');
const sequelize = require('../../../../database/db_connection_initializer');
const { categories } = require('../../../../enums/market_linkage/enums/categories');
const error_log = require('../../../../middelware/error_log');
const merchant_platform = require('../../../../enums/merchant/merchant_platform');
const { generate_unique_id } = require('../../../../common_services/unique_id_generation/generate_unique_id');
const HTTP_status_codes = require('../../../../enums/market_linkage/constants/HTTP_status_codes');
const merchant_stages = require('../../../../enums/market_linkage/enums/v2/merchant_stages');
const get_master_merchant_by_mobile_number = require('../../../../data_abstraction_layer/master_merchant/get_master_merchant_by_mobile_number');
const find_or_create_location = require('../../../../data_abstraction_layer/master_merchant/find_or_create_location');
const already_a_merchant_check = require('../../../../data_abstraction_layer/master_merchant/already_a_merchant_check');
const get_master_state_by_id = require('../../../../data_abstraction_layer/location/get_master_state_by_id');
const get_master_district_by_id = require('../../../../data_abstraction_layer/location/get_master_district_by_id');
const get_master_taluk_by_id = require('../../../../data_abstraction_layer/location/get_master_taluk_by_id');
const add_empty_master_merchant_docs = require('../../../../data_abstraction_layer/master_merchant/add_empty_master_merchant_docs');
const map_existing_leads_to_merchant = require('../../../../data_abstraction_layer/master_merchant/map_existing_leads_to_merchant');
const sync_master_merchant_detail = require('../../../../common_services/merchant/sync_master_merchant_detail')
const { ValidationError } = require('../../../../utilities/error/custom_error');

const add_retailer_by_retailer_app_service = ({
    name,
    profession_id,
    mobile_number,
    full_address,
    state_id,
    district_id,
    taluk_id,
    pincode,
    lat,
    long,
    accuracy,
    category
}) => {
    return new Promise(async (resolve, reject) => {
        try {
            mobile_number = parseInt(mobile_number);
            const master_merchant_detail = {
                name,
                profession_id,
                status: merchant_stages.LEAD_ASSIGNED,
                mobile_number,
                platform_id: merchant_platform.ML,
                stage: 1, // activated or deactivated stage
                full_address,
                pincode,
                onboarded_on_ml: Date.now(),
                onboarded_on_retailer: null,
                is_active: true,
                state_id,
                district_id,
                taluk_id,
                category
            }

            // duplicate mobile check
            const mobile_exist = await get_master_merchant_by_mobile_number(mobile_number);
            if (mobile_exist) { throw new ValidationError('mobile number already exist'); } else { master_merchant_detail.mobile_number = mobile_number; }

            // already a merchant check
            const merchant_detail_exist = await already_a_merchant_check(mobile_number);
            if (!merchant_detail_exist) { throw new ValidationError('merchant should be onboarded in retailer app'); } else {
                master_merchant_detail.merchant_detail_id = merchant_detail_exist.id;
                master_merchant_detail.onboarded_on_retailer = merchant_detail_exist.createdAt;
                master_merchant_detail.platform_id = merchant_platform.Both;
            }

            // state
            const state_exist = await get_master_state_by_id(state_id);
            if (state_exist) { master_merchant_detail.state_name = state_exist.name; }

            // district
            const district_exist = await get_master_district_by_id(state_id, district_id);
            if (district_exist) { master_merchant_detail.district_name = district_exist.name; }

            // taluk
            const taluk_exist = await get_master_taluk_by_id(state_id, district_id, taluk_id)
            if (taluk_exist) { master_merchant_detail.taluk_name = taluk_exist.name; }
            // unique id generation
            const uniqueIdResult = await generate_unique_id({
                state: master_merchant_detail.state_name,
                district: master_merchant_detail.district_name,
                category: categories.ProcurementSources
            })
            if (uniqueIdResult.status !== HTTP_status_codes.ok) {
                throw uniqueIdResult.data.error;
            }
            master_merchant_detail.farmart_id = uniqueIdResult.data;

            // location
            const location_obj_added = await find_or_create_location(lat, long, accuracy);
            master_merchant_detail.location_id = location_obj_added.id;

            let added_master_merchant;
            await sequelize.transaction(async (t) => {
                // add retailer
                added_master_merchant = await master_merchant_detail_model.build(master_merchant_detail).save({ transaction: t });

                // add empty documents
                await add_empty_master_merchant_docs(added_master_merchant.id, t);

                // map all leads to this merchant
                await map_existing_leads_to_merchant({
                    merchant_detail_id: added_master_merchant.merchant_detail_id,
                    master_merchant_id: added_master_merchant.id,
                    master_merchant_state_name: added_master_merchant.state_name,
                    master_merchant_district_name: added_master_merchant.district_name,
                    t
                });
            });

            sync_master_merchant_detail(master_merchant_detail.mobile_number)
                .catch(err => {
                    error_log(err);
                });

            return resolve({
                id: added_master_merchant.id,
                farmart_id: added_master_merchant.farmart_id,
                status: added_master_merchant.status
            });
        } catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

module.exports = add_retailer_by_retailer_app_service;



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/retailer/services/fetch_all_retailers_service.js
const { Op } = require('sequelize');
const user_profile_model = require('../../../../database/models/user_profile');
const locations_model = require('../../../../database/models_v2/global/locations');
const master_district_model = require('../../../../database/models_v2/location/master_district');
const master_state_model = require('../../../../database/models_v2/location/master_state');
const master_taluka_model = require('../../../../database/models_v2/location/master_taluka');
const master_merchant_detail_model = require('../../../../database/models_v2/merchant/master_merchant_detail');
const user_state_district_map_model = require('../../../../database/models_v2/user/user_state_district_map');
const retailer_sort_by_enum = require('../../../../enums/market_linkage/enums/retailer_sort_by_enum');
const merchant_stages = require('../../../../enums/market_linkage/enums/v2/merchant_stages');
const error_log = require('../../../../middelware/error_log');

const fetch_all_retailers_service = ({limit, page, merchantStage, search, states, districts, sortBy, sortOrder, user_profile_id}) => {
    return new Promise(async (resolve, reject) => {
        try {           
            let whereObj = {
                is_active: true,
                status: {
                    [Op.not]: merchant_stages.SECONDARY_ACCOUNT
                }
            }
            let order = [[
                Object.keys(retailer_sort_by_enum).find((key) => retailer_sort_by_enum[key] === sortBy),
                sortOrder === 1 ? 'ASC' : 'DESC'
            ]];
            if(search){
                whereObj[Op.and] = [
                    {
                        [Op.or]: [
                            {
                                business_name: {
                                    [Op.like]: '%' + search + '%'
                                }
                            },
                            {
                                name: {
                                    [Op.like]: '%' + search + '%'
                                }
                            },
                            {
                                farmart_id: {
                                    [Op.like]: search + '%'
                                }
                            }
                        ]
                    }
                ]
                if ((parseInt(search)).toString() !== 'NaN') {
                    whereObj[Op.and][0][Op.or].push({
                        mobile_number: {
                            [Op.like]: parseInt(search) + '%'
                        }
                    });
                }
            }
            if(states && states.length > 0){
                whereObj.state_id = {
                    [Op.in]: states
                }
            }
            if(districts && districts.length > 0){
                whereObj.district_id = {
                    [Op.in]: districts
                }
            }
            if(merchantStage){
                whereObj.status = parseInt(merchantStage)
            }
            if(user_profile_id) {
                const pa_districts = await user_state_district_map_model.findAll({
                    where: {
                        user_id: user_profile_id
                    },
                    attributes: ['district_id']
                })
                const pa_district_id_list = pa_districts.map((district) => district.district_id)
                if (pa_district_id_list.length > 0) {
                    let or_condition ={
                        [Op.or]: [
                            {
                                added_by: user_profile_id
                            },
                            {
                                district_id: {
                                    [Op.in]: pa_district_id_list
                                }
                            }
                        ]
                    }
                    if (whereObj[Op.and]) {
                        whereObj[Op.and].push(or_condition)
                    }
                    else
                        whereObj[Op.and] = [or_condition];
                }
                else
                    whereObj.added_by = user_profile_id;
            }
      
            const all_merchant_details = await master_merchant_detail_model.findAndCountAll({
                where: whereObj,
                include: [
                    {
                        model: user_profile_model,
                        as: 'added_by_user',
                        where: {
                            is_active: true
                        },
                        required: true
                    },
                    {
                        model: master_state_model,
                        where: {
                            is_active: true
                        },
                        required: false
                    },
                    {
                        model: master_district_model,
                        where: {
                            is_active: true
                        },
                        required: false
                    },
                    {
                        model: master_taluka_model,
                        where: {
                            is_active: true
                        },
                        required: false
                    },
                    {
                        model: locations_model,
                        where: {
                            is_active: true
                        },
                        required: false
                    },
                ],
                distinct: ['id'],
                order: order,
                limit: limit,
                offset: ((page - 1) * limit) || 0
            })

            const merchant_details_reponse = (all_merchant_details.rows).map((merchant) => {
                return {
                    retailer_id: merchant.id,
                    farmart_id: merchant.farmart_id,
                    name: merchant.name,
                    business_name: merchant.business_name,
                    mobile_number: merchant.mobile_number,
                    state_id: merchant.state_id,
                    district_id: merchant.district_id,
                    taluk_id: merchant.taluk_id,
                    pa_name: merchant.added_by_user?.name,
                    pa_id: merchant.added_by_user?.id,
                    state_name: merchant.master_state?.name,
                    district_name: merchant.master_district?.name,
                    taluk_name: merchant.master_taluka?.name ?? null,
                    pa_mobile_number: merchant.added_by_user?.mobile_number,
                    status: merchant.status,
                    created_date: merchant.createdAt,
                    location_details: {
                        accuracy: merchant.location?.accuracy ?? null,
                        lat: merchant.location?.latitude ?? null,
                        long: merchant.location?.longitude  ?? null
                    },
                    pincode: merchant.pincode
                }
            })
            resolve({ retailers: merchant_details_reponse,  total_records: all_merchant_details.count});
        }
        catch (ex) {
            error_log(ex);
            return reject({ message: ex.message });
        }
    })
}

module.exports = fetch_all_retailers_service;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/retailer/services/check_gst_pan_exist_service.js
const merchant_verification_docs = require("../../../../database/models_v2/merchant/merchant_verification_docs")
const error_log = require("../../../../middelware/error_log")

const check_gst_pan_exist_service = async (docType,docValue) => {

    return new Promise( async (resolve,reject) => {

        try {

            const existingGstPan = await merchant_verification_docs.findOne({
                where: {
                    is_active: 1,
                    value: docValue,
                    document_type: docType
                }
            })
            
            resolve({exists: existingGstPan && existingGstPan.dataValues && existingGstPan.dataValues.value ? true : false})
            
        } catch (error) {

            error_log(error);
            return reject({ message: error.message });
            
        }

    })
    
}

module.exports = check_gst_pan_exist_service


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/swagger-config/index.js
const swagger_json = require("./swagger.json");
// const global_config = require("../../../config/global_config");
// const { readdir } = require("fs").promises;
// const path = require("path");
const error_log = require("../../../middelware/error_log");
const swagger_controller = require("../../../common_services/swagger/swagger_controller");

module.exports = async (req, res) => {
  try {
    let url_slicing_number=-1
    swagger_controller(req,res,__dirname,swagger_json,url_slicing_number);
    // let directory_str = __dirname;
    // directory_str = directory_str.split(path.sep).slice(0, -1).join(path.sep);
    // let directories = await readdir(directory_str, { withFileTypes: true });
    // directories = directories.filter((e) => {
    //   if (e.name.indexOf(".") < 0) return true;
    //   return false;
    // });
    // let swagger_tags = [];
    // let swagger_paths = {};
    // for (let index = 0; index < directories.length; index++) {
    //   const entity_dir_path = [directory_str, directories[index].name].join(
    //     path.sep
    //   );
    //   const entity_dirs = await readdir(entity_dir_path, { withFileTypes: true });
    //   if (entity_dirs.map((e) => e.name).indexOf("swagger") > 0) {
    //     const swagger_def = require(`${entity_dir_path}${path.sep}swagger`);
    //     swagger_tags = [...swagger_tags, swagger_def.tags];
    //     Object.keys(swagger_def.paths).forEach((ele) => {
    //       swagger_paths[`/${swagger_def.tags.name}${ele}`] =
    //         swagger_def.paths[ele];
    //     });
    //   }
    // }
    // const host = req.get("host") || "localhost:3000";
    // const swagger_base_url = `${host}`;
    // swagger_json["host"] = swagger_base_url;
    // swagger_json["tags"] = [...swagger_json["tags"], ...swagger_tags];
    // swagger_json.paths = { ...swagger_json.paths, ...swagger_paths };
    // res.send(swagger_json);
  }
  catch (err) {
    error_log(err);
    res.status(400).json({
      message: "swagger error"
    });
  }
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/merchant/swagger/index.js
module.exports = {
  tags: {
    name: "merchant",
  },
  paths: {
    "/profile": {
      put: {
        tags: ["merchant"],
        summary: "for update merchant initial stage",
        description: "update the merchant on initial stage ",
        operationId: "update_merchant_profile_v3",
        security: [{ Bearer: ["read"] }],
        parameters: [
          {
            in: "formData",
            name: "merchant_name",
            description: "this is name of the merchant",
            required: false,
            type: "string",
          },
          {
            in: "formData",
            name: "shop_address",
            description: "this is the address of the shop",
            required: false,
            type: "string",
          },
          {
            in: "formData",
            name: "occupation_id",
            description:
              "1-Agri_Retailer\n 2-Agri_Distributor_Wholesaler\n 3-Farmer_Cooperative_Society\n 4-Farmer_Producer_Company\n 5-Farmer\n 6-other",
            required: false,
            type: "string",
            enum: [1, 2, 3, 4, 5, 6],
          },
          {
            in: "formData",
            name: "business_name",
            description: "this is the merchant's business name",
            required: false,
            type: "string",
          },
          {
            in: "formData",
            name: "other_description",
            description: "",
            required: false,
            type: "string",
          },
          {
            in: "formData",
            name: "deal_in_med",
            description: "boolean",
            required: false,
            type: "boolean",
          },
          {
            in: "formData",
            name: "deal_in_fert",
            description: "boolean",
            required: false,
            type: "boolean",
          },
          {
            in: "formData",
            name: "deal_in_seed",
            description: "boolean",
            required: false,
            type: "boolean",
          },
          {
            in: "formData",
            name: "merchant_prof_pic",
            description: "string",
            required: false,
            type: "string",
          },
          {
            name: "shop_pic_url",
            in: "formData",
            description: "string",
            required: false,
            type: "string",
          },
        ],
        responses: {
          405: {
            description: "Invalid input",
          },
          200: {
            description: "success",
          },
        },
      },
    },
  },
};



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/merchant/index.js
const router = require("express").Router();
const authorize = require("../../../middelware/authorized_routes");
const user_roles_enum = require("../../../enums/user_profile/user_role");
const update_merchant_profile_v3_controller=require('./controllers/update_merchant_profile_v3_controller');

router.put("/profile", authorize([user_roles_enum.Merchant]), update_merchant_profile_v3_controller);

module.exports = router;


File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/merchant/controllers/update_merchant_profile_v3_controller.js
const error_log = require('../../../../middelware/error_log');
const create_api_response = require('../../../../common_services/api_responses/create_api_response');
const http_status_code_enum = require("../../../../entities_v2/metadata/enums/global/http_status_codes");
const update_merchant_profile_v3_service = require('../services/update_merchant_profile_v3_service');
const add_occupation_of_merchant_service = require('../../../../entities/merchant/service/v4/add_occupation_of_merchant');
const language_enum = require("../../../../entities_v2/metadata/enums/global/langauge");
const country_code_enum = require("../../../../enums/global/country_code");
module.exports = async (req, res) => {
    try {
        const country_code = req.user?.country?.country_code || country_code_enum.india;
        let user_profile_id = req.user.user_profile_id;
        let business_name = req.body.business_name || "";
        let merchant_name = req.body.merchant_name || "";
        let shop_address = req.body.shop_address;
        let occupation_id = req.body.occupation_id;
        let other_description = req.body.other_description;
        let deal_in_med = req.body.deal_in_med || false;
        let deal_in_fert = req.body.deal_in_fert || false;
        let deal_in_seed = req.body.deal_in_seed || false;
        let merchant_prof_pic = req.body.merchant_prof_pic;
        let shop_pic_url = req.body.shop_pic_url;
        const language_id = +req.headers.language || language_enum.default;

        if (merchant_name.trim()) {
            let merchant_data = await update_merchant_profile_v3_service(user_profile_id, business_name, merchant_name, shop_address, deal_in_med, deal_in_fert, deal_in_seed, merchant_prof_pic, shop_pic_url, occupation_id, language_id, country_code);
            await add_occupation_of_merchant_service(user_profile_id, occupation_id, other_description);
            return res.json(create_api_response(true, merchant_data.message));
        }
        else {
            return res.json(create_api_response(false, 'merchant_name is a mandatory parameter'));
        }

    } catch (ex) {
        error_log(ex);
        return res.status(http_status_code_enum.bad_request).json(create_api_response(false, ex.message, null));
    }

}



File: /Users/trtl/Documents/General/github_tech/farmart-app-backend/apis/v3/merchant/services/update_merchant_profile_v3_service.js
const error_log = require("../../../../middelware/error_log");
const update_merchant_profile_v4_service = require('../../../../entities/merchant/service/v4/update_merchant_profile_v4')
const update_merchant_profile = async (
  user_profile_id,
  business_name,
  merchant_name,
  shop_address,
  deal_in_med,
  deal_in_fert,
  deal_in_seed,
  merchant_prof_pic,
  shop_pic_url,
  occupation_id = null,
  language_id,
  country_code
) => {
  try {
    return await update_merchant_profile_v4_service(user_profile_id, business_name, merchant_name, shop_address, deal_in_med, deal_in_fert, deal_in_seed, merchant_prof_pic, shop_pic_url, occupation_id, language_id, country_code);
    //   resolve({ message: "merchant profile updated." });
  } catch (ex) {
    error_log(ex);
    throw err;
  }
};

module.exports = update_merchant_profile;

